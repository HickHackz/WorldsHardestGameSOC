
keyboard_test.elf:     file format elf32-littlenios2
keyboard_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000230

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001433c memsz 0x0001433c flags r-x
    LOAD off    0x0001535c vaddr 0x0801435c paddr 0x08015e90 align 2**12
         filesz 0x00001b34 memsz 0x00001b34 flags rw-
    LOAD off    0x000179c4 vaddr 0x080179c4 paddr 0x080179c4 align 2**12
         filesz 0x00000000 memsz 0x000002e8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001256c  08000230  08000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001bc0  0801279c  0801279c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b34  0801435c  08015e90  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e8  080179c4  080179c4  000179c4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08017cac  08017cac  00016e90  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00016e90  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001048  00000000  00000000  00016eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002719d  00000000  00000000  00017f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009f6b  00000000  00000000  0003f09d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c54a  00000000  00000000  00049008  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000028c4  00000000  00000000  00055554  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000043c0  00000000  00000000  00057e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017b11  00000000  00000000  0005c1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00073cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001930  00000000  00000000  00073d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00078f82  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00078f85  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00078f91  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00078f92  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00078f93  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00078f97  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00078f9b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00078f9f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00078faa  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00078fb5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000f  00000000  00000000  00078fc0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001a  00000000  00000000  00078fcf  2**0
                  CONTENTS, READONLY
 29 .jdi          00013005  00000000  00000000  00078fe9  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008dc8d  00000000  00000000  0008bfee  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000230 l    d  .text	00000000 .text
0801279c l    d  .rodata	00000000 .rodata
0801435c l    d  .rwdata	00000000 .rwdata
080179c4 l    d  .bss	00000000 .bss
08017cac l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../keyboard_test_bsp//obj/HAL/src/crt0.o
08000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
08015e38 l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 map_print.c
08015e3c l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 usb_input.c
08015e40 l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
080179d4 l     O .bss	00000004 usb_delay.2608
080179d8 l     O .bss	00000001 tmp_addr.2609
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
080140a2 l     O .rodata	00000010 zeroes.4404
08005158 l     F .text	000000bc __sbprintf
080140b2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08005368 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08006ec0 l     F .text	00000008 __fp_unlock
08006ed4 l     F .text	0000019c __sinit.part.1
08007070 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801438c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
080147d0 l     O .rwdata	00000020 lc_ctype_charset
080147b0 l     O .rwdata	00000020 lc_message_charset
080147f0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
080140e4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a564 l     F .text	000000fc __sprint_r.part.0
08014208 l     O .rodata	00000010 zeroes.4349
0800bba0 l     F .text	000000bc __sbprintf
08014218 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800fa0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800fb20 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800fb4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800fc40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800fd28 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800fe14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
08010258 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08015e80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
080106a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080107dc l     F .text	00000034 alt_dev_reg
08014dd8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08010ad0 l     F .text	0000020c altera_avalon_jtag_uart_irq
08010cdc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08011510 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080118a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08011d08 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08011e68 l     F .text	0000003c alt_get_errno
08011ea4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08017a10 g     O .bss	00000004 alt_instruction_exception_handler
08002cdc g     F .text	00000018 putchar
08009a40 g     F .text	00000074 _mprec_log10
08009b2c g     F .text	0000008c __any_on
0800c2ac g     F .text	00000054 _isatty_r
080140f0 g     O .rodata	00000028 __mprec_tinytens
0800ff2c g     F .text	0000007c alt_main
08015e44 g     O .rwdata	00000008 ctrl_xfers
08002cf4 g     F .text	000000c0 _puts_r
08017bac g     O .bss	00000100 alt_irq
0800c300 g     F .text	00000060 _lseek_r
080020f8 g     F .text	00000644 USB_Task
08015e90 g       *ABS*	00000000 __flash_rwdata_start
0800e3e4 g     F .text	00000088 .hidden __eqdf2
08000334 g     F .text	00000160 mapWrite
08017cac g       *ABS*	00000000 __alt_heap_start
08002c98 g     F .text	0000003c printf
0800c3c0 g     F .text	0000009c _wcrtomb_r
08001268 g     F .text	00000088 kbdPoll
0800a424 g     F .text	0000005c __sseek
08007220 g     F .text	00000010 __sinit
0800bc5c g     F .text	00000140 __swbuf_r
08007cf4 g     F .text	0000007c _setlocale_r
08007078 g     F .text	00000078 __sfmoreglue
0800ffcc g     F .text	00000024 __malloc_unlock
08000494 g     F .text	000001f0 GetDriverandReport
0800887c g     F .text	0000015c memmove
08007208 g     F .text	00000018 _cleanup
08008b00 g     F .text	000000a8 _Balloc
080013bc g     F .text	000000a0 MAXreg_wr
0801435c g     O .rwdata	00000030 ClientDriverTable
0800e46c g     F .text	000000dc .hidden __gtdf2
080120ec g     F .text	00000024 altera_nios2_gen2_irq_init
0800273c g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08001bf8 g     F .text	000000e8 XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
08017a14 g     O .bss	00000010 hid_ep
0800c250 g     F .text	0000005c _fstat_r
080179f4 g     O .bss	00000004 errno
0800a3a0 g     F .text	00000008 __seofread
080179fc g     O .bss	00000004 alt_argv
0801de38 g       *ABS*	00000000 _gp
08010670 g     F .text	00000030 usleep
08001534 g     F .text	00000090 MAXreg_rd
08014c58 g     O .rwdata	00000180 alt_fd_list
080011a0 g     F .text	00000040 HID_init
08002cd4 g     F .text	00000008 _putchar_r
08012110 g     F .text	00000090 alt_find_dev
08002b20 g     F .text	00000148 memcpy
08006ec8 g     F .text	0000000c _cleanup_r
0800f824 g     F .text	000000dc .hidden __floatsidf
08011dec g     F .text	0000007c alt_io_redirect
0800e548 g     F .text	000000f4 .hidden __ltdf2
0801279c g       *ABS*	00000000 __DTOR_END__
08002db4 g     F .text	00000014 puts
0801236c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800a284 g     F .text	00000074 __fpclassifyd
0800999c g     F .text	000000a4 __ratio
0800bb84 g     F .text	0000001c __vfiprintf_internal
08010ed4 g     F .text	0000021c altera_avalon_jtag_uart_read
08002c68 g     F .text	00000030 _printf_r
08002a3c g     F .text	00000064 .hidden __udivsi3
0800fc7c g     F .text	000000ac isatty
08014140 g     O .rodata	000000c8 __mprec_tens
08007d70 g     F .text	0000000c __locale_charset
080179f0 g     O .bss	00000004 __malloc_top_pad
08015e4c g     O .rwdata	00000001 usb_task_state
08015e58 g     O .rwdata	00000004 __mb_cur_max
08007da0 g     F .text	0000000c _localeconv_r
08008f34 g     F .text	0000003c __i2b
080076a4 g     F .text	000004c8 __sfvwrite_r
0800a2f8 g     F .text	00000054 _sbrk_r
0800c360 g     F .text	00000060 _read_r
080018b0 g     F .text	00000094 MAX3421E_init
08000684 g     F .text	00000078 setKeycode
08015e78 g     O .rwdata	00000004 alt_max_fd
0800bf44 g     F .text	000000f0 _fclose_r
08006e90 g     F .text	00000030 fflush
080179ec g     O .bss	00000004 __malloc_max_sbrked_mem
0800d168 g     F .text	000008ac .hidden __adddf3
08009744 g     F .text	0000010c __b2d
0800cba4 g     F .text	000005c4 .hidden __umoddi3
0800fe50 g     F .text	000000dc lseek
08015e50 g     O .rwdata	00000004 _global_impure_ptr
08009d20 g     F .text	00000564 _realloc_r
08017cac g       *ABS*	00000000 __bss_end
08011c18 g     F .text	000000f0 alt_iic_isr_register
08010568 g     F .text	00000108 alt_tick
0800c5a8 g     F .text	000005fc .hidden __udivdi3
0800c1ac g     F .text	00000024 _fputwc_r
08014118 g     O .rodata	00000028 __mprec_bigtens
08008d18 g     F .text	00000104 __s2b
0800f900 g     F .text	000000a8 .hidden __floatunsidf
08009484 g     F .text	00000060 __mcmp
08007240 g     F .text	00000018 __fp_lock_all
08011bcc g     F .text	0000004c alt_ic_irq_enabled
080104cc g     F .text	0000009c alt_alarm_stop
08017a0c g     O .bss	00000004 alt_irq_active
08002804 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000d4 alt_irq_handler
08014c30 g     O .rwdata	00000028 alt_dev_null
080011e0 g     F .text	00000088 mousePoll
08001704 g     F .text	00000024 Vbus_power
08011888 g     F .text	00000020 alt_dcache_flush_all
08008e1c g     F .text	00000068 __hi0bits
0800f7a4 g     F .text	00000080 .hidden __fixdfsi
08015e90 g       *ABS*	00000000 __ram_rwdata_end
08015e70 g     O .rwdata	00000008 alt_dev_list
080106dc g     F .text	00000100 write
08009bb8 g     F .text	000000a0 _putc_r
0801435c g       *ABS*	00000000 __ram_rodata_end
080179d9 g     O .bss	00000001 usb_error
0800fb88 g     F .text	000000b8 fstat
080002e4 g     F .text	00000050 mapClr
0800e548 g     F .text	000000f4 .hidden __ledf2
080091fc g     F .text	00000140 __pow5mult
0800a678 g     F .text	0000150c ___vfiprintf_internal_r
080179e4 g     O .bss	00000004 __nlocale_changed
08002aa0 g     F .text	00000058 .hidden __umodsi3
08017cac g       *ABS*	00000000 end
08010a10 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08001d54 g     F .text	0000017c XferDispatchPkt
0801279c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08011588 g     F .text	0000007c alt_avalon_timer_sc_init
0800f9a8 g     F .text	00000064 .hidden __clzsi2
080110f0 g     F .text	00000224 altera_avalon_jtag_uart_write
08007230 g     F .text	00000004 __sfp_lock_acquire
08008798 g     F .text	000000e4 memchr
08002e60 g     F .text	000022dc ___vfprintf_internal_r
08001a78 g     F .text	00000034 MaxGpxHandler
08007394 g     F .text	00000310 _free_r
0800fff0 g     F .text	0000022c alt_printf
08007d7c g     F .text	00000010 __locale_mb_cur_max
080125e8 g     F .text	00000180 __call_exitprocs
080179e0 g     O .bss	00000004 __mlocale_changed
08015e5c g     O .rwdata	00000004 __malloc_sbrk_base
08000230 g     F .text	0000003c _start
08017a04 g     O .bss	00000004 _alt_tick_rate
080015c4 g     F .text	000000a0 MAXbytes_rd
0800933c g     F .text	00000148 __lshift
08011314 g     F .text	000001fc alt_avalon_spi_command
08017a08 g     O .bss	00000004 _alt_nticks
08010294 g     F .text	00000104 read
08010848 g     F .text	00000064 alt_sys_init
08017b64 g     O .bss	00000048 devtable
080124d0 g     F .text	00000118 __register_exitproc
08000d98 g     F .text	00000408 HIDKProbe
08017a24 g     O .bss	00000018 msd_ep
08008f70 g     F .text	0000028c __multiply
08010d7c g     F .text	00000068 altera_avalon_jtag_uart_close
08002060 g     F .text	00000098 USB_init
08002af8 g     F .text	00000028 .hidden __mulsi3
08017a64 g     O .bss	00000100 bigbuf
0801435c g       *ABS*	00000000 __ram_rwdata_start
0801279c g       *ABS*	00000000 __ram_rodata_start
08017a3c g     O .bss	00000028 __malloc_current_mallinfo
080179d0 g     O .bss	00000001 last_usb_task_state
08009850 g     F .text	0000014c __d2b
080179c8 g     O .bss	00000008 dev0ep
080108ac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080122a8 g     F .text	000000c4 alt_get_fd
08011730 g     F .text	00000158 alt_busy_sleep
08002768 g     F .text	00000038 MSDEventHandler
0800be14 g     F .text	00000054 _close_r
08012454 g     F .text	0000007c memcmp
0801096c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08017cac g       *ABS*	00000000 __alt_stack_base
080109bc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08005214 g     F .text	00000154 __swsetup_r
0800da14 g     F .text	000009d0 .hidden __divdf3
080070f0 g     F .text	00000118 __sfp
08009ab4 g     F .text	00000078 __copybits
08014828 g     O .rwdata	00000408 __malloc_av_
0800723c g     F .text	00000004 __sinit_lock_release
080027cc g     F .text	00000038 CDCEventHandler
0800e63c g     F .text	0000086c .hidden __muldf3
08002830 g     F .text	00000038 DummyEventHandler
0800a34c g     F .text	00000054 __sread
080121a0 g     F .text	00000108 alt_find_file
080118e4 g     F .text	000000a4 alt_dev_llist_insert
0800ffa8 g     F .text	00000024 __malloc_lock
0801041c g     F .text	000000b0 sbrk
08006e34 g     F .text	0000005c _fflush_r
0800be68 g     F .text	000000dc _calloc_r
080179c4 g       *ABS*	00000000 __bss_start
08001728 g     F .text	00000188 MAX_busprobe
080179c4 g     O .bss	00000002 hid_device
080089d8 g     F .text	00000128 memset
0800026c g     F .text	00000078 main
08001944 g     F .text	00000068 MAX3421E_Task
08017a00 g     O .bss	00000004 alt_envp
080179e8 g     O .bss	00000004 __malloc_max_total_mem
0801090c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800bd9c g     F .text	00000018 __swbuf
080028c0 g     F .text	00000084 ConvUTF8ToStr
0800a480 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800c034 g     F .text	00000014 fclose
08005590 g     F .text	00001688 _dtoa_r
08007f8c g     F .text	0000080c _malloc_r
0800c51c g     F .text	00000030 __ascii_wctomb
08015e7c g     O .rwdata	00000004 alt_errno
08007b6c g     F .text	000000c4 _fwalk
08009c58 g     F .text	000000c8 putc
08002944 g     F .text	00000084 .hidden __divsi3
08001ed0 g     F .text	00000190 XferInTransfer
08007270 g     F .text	00000124 _malloc_trim_r
0801279c g       *ABS*	00000000 __CTOR_END__
080006fc g     F .text	00000294 usb_input
08002888 g     F .text	00000038 GetDevtable
0800a488 g     F .text	000000dc strcmp
0801279c g       *ABS*	00000000 __flash_rodata_start
0801279c g       *ABS*	00000000 __DTOR_LIST__
08001ce0 g     F .text	00000074 XferCtrlND
0800e3e4 g     F .text	00000088 .hidden __nedf2
08001664 g     F .text	000000a0 MAX3421E_reset
08010810 g     F .text	00000038 alt_irq_init
08010398 g     F .text	00000084 alt_release_fd
08014228 g     O .rodata	00000100 .hidden __clz_tab
080179dc g     O .bss	00000004 _PathLocale
08012408 g     F .text	00000014 atexit
0800bdb4 g     F .text	00000060 _write_r
08007dac g     F .text	00000018 setlocale
08015e54 g     O .rwdata	00000004 _impure_ptr
080179f8 g     O .bss	00000004 alt_argc
08006c18 g     F .text	0000021c __sflush_r
080119e8 g     F .text	00000060 _do_dtors
08007d98 g     F .text	00000008 __locale_cjk_lang
0800145c g     F .text	000000d8 MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
080096e0 g     F .text	00000064 __ulp
08007258 g     F .text	00000018 __fp_unlock_all
08015e68 g     O .rwdata	00000008 alt_fs_list
080027a0 g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007dc4 g     F .text	0000000c localeconv
08002868 g     F .text	00000020 GetUsbTaskState
08011a68 g     F .text	00000050 alt_ic_isr_register
08013e08 g     O .rodata	00000010 devclasses
08015e90 g       *ABS*	00000000 _edata
08001328 g     F .text	00000038 HIDKEventHandler
08017cac g       *ABS*	00000000 _end
080019ac g     F .text	000000cc MaxIntHandler
0800c048 g     F .text	00000164 __fputwc
08000230 g       *ABS*	00000000 __ram_exceptions_end
08010de4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08001360 g     F .text	00000034 SPI_init
08011b40 g     F .text	0000008c alt_ic_irq_disable
0800a3a8 g     F .text	0000007c __swrite
08015e60 g     O .rwdata	00000004 __malloc_trim_threshold
08007d8c g     F .text	0000000c __locale_msgcharset
0801241c g     F .text	00000038 exit
08007c30 g     F .text	000000c4 _fwalk_reent
080094e4 g     F .text	000001fc __mdiff
080029c8 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08007234 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080012f0 g     F .text	00000038 HIDMEventHandler
08012768 g     F .text	00000034 _exit
08011604 g     F .text	0000012c alt_alarm_start
08007dd0 g     F .text	000001bc __smakebuf_r
08002dc8 g     F .text	00000098 strlen
08011f90 g     F .text	0000015c open
0800e46c g     F .text	000000dc .hidden __gedf2
0801021c g     F .text	0000003c alt_putchar
08015e64 g     O .rwdata	00000004 __wctomb
0800a660 g     F .text	00000018 __sprint_r
08011a48 g     F .text	00000020 alt_icache_flush_all
08015e8c g     O .rwdata	00000004 alt_priority_mask
08011ab8 g     F .text	00000088 alt_ic_irq_enable
0800513c g     F .text	0000001c __vfprintf_internal
08000990 g     F .text	00000408 HIDMProbe
0800c54c g     F .text	0000005c _wctomb_r
08001394 g     F .text	00000028 SPI_wr
0800eea8 g     F .text	000008fc .hidden __subdf3
08008e84 g     F .text	000000b0 __lo0bits
08015e84 g     O .rwdata	00000008 alt_alarm_list
08011988 g     F .text	00000060 _do_ctors
0800c45c g     F .text	000000c0 wcrtomb
0800fa48 g     F .text	000000d8 close
0800fd90 g     F .text	00000084 alt_load
0800c1d0 g     F .text	00000080 fputwc
08007238 g     F .text	00000004 __sinit_lock_acquire
08001aac g     F .text	0000014c XferCtrlReq
08008bd0 g     F .text	00000148 __multadd
08008ba8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408c14 	ori	at,at,560
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	109eeb04 	addi	r2,r2,31660
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	109eeb04 	addi	r2,r2,31660
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001e4:	00bfffc4 	movi	r2,-1
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 80001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001f0:	d0a6f617 	ldw	r2,-25640(gp)
 80001f4:	10000726 	beq	r2,zero,8000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001f8:	d0a6f617 	ldw	r2,-25640(gp)
 80001fc:	e0fffd17 	ldw	r3,-12(fp)
 8000200:	e1bffe17 	ldw	r6,-8(fp)
 8000204:	e17fff17 	ldw	r5,-4(fp)
 8000208:	1809883a 	mov	r4,r3
 800020c:	103ee83a 	callr	r2
 8000210:	00000206 	br	800021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000218:	0005883a 	mov	r2,zero
}
 800021c:	e037883a 	mov	sp,fp
 8000220:	dfc00117 	ldw	ra,4(sp)
 8000224:	df000017 	ldw	fp,0(sp)
 8000228:	dec00204 	addi	sp,sp,8
 800022c:	f800283a 	ret

Disassembly of section .text:

08000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000230:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000238:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800023c:	d6b78e14 	ori	gp,gp,56888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000240:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000244:	109e7114 	ori	r2,r2,31172

    movhi r3, %hi(__bss_end)
 8000248:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 800024c:	18df2b14 	ori	r3,r3,31916

    beq r2, r3, 1f
 8000250:	10c00326 	beq	r2,r3,8000260 <_start+0x30>

0:
    stw zero, (r2)
 8000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800025c:	10fffd36 	bltu	r2,r3,8000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000260:	800fd900 	call	800fd90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000264:	800ff2c0 	call	800ff2c <alt_main>

08000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000268:	003fff06 	br	8000268 <__alt_data_end+0xfc000268>

0800026c <main>:
#include "usb_kb/usb_ch9.h"
#include "usb_kb/USB.h"
#include "usb_input.h"


int main() {
 800026c:	defffc04 	addi	sp,sp,-16
 8000270:	dfc00315 	stw	ra,12(sp)
 8000274:	df000215 	stw	fp,8(sp)
 8000278:	df000204 	addi	fp,sp,8
	volatile unsigned int *INITIALIZE_LEVEL_PIO = (unsigned int*)0x11150;
 800027c:	00800074 	movhi	r2,1
 8000280:	10845404 	addi	r2,r2,4432
 8000284:	e0bfff15 	stw	r2,-4(fp)

	*INITIALIZE_LEVEL_PIO = 0;
 8000288:	e0bfff17 	ldw	r2,-4(fp)
 800028c:	10000015 	stw	zero,0(r2)
	//mapWrite();
	for (int i = 0; i < 119110; i++)
 8000290:	e03ffe15 	stw	zero,-8(fp)
 8000294:	00000606 	br	80002b0 <main+0x44>
		*INITIALIZE_LEVEL_PIO = 1; //this triggers the initial loading of registers
 8000298:	e0bfff17 	ldw	r2,-4(fp)
 800029c:	00c00044 	movi	r3,1
 80002a0:	10c00015 	stw	r3,0(r2)
int main() {
	volatile unsigned int *INITIALIZE_LEVEL_PIO = (unsigned int*)0x11150;

	*INITIALIZE_LEVEL_PIO = 0;
	//mapWrite();
	for (int i = 0; i < 119110; i++)
 80002a4:	e0bffe17 	ldw	r2,-8(fp)
 80002a8:	10800044 	addi	r2,r2,1
 80002ac:	e0bffe15 	stw	r2,-8(fp)
 80002b0:	e0fffe17 	ldw	r3,-8(fp)
 80002b4:	008000b4 	movhi	r2,2
 80002b8:	10b45144 	addi	r2,r2,-11963
 80002bc:	10fff60e 	bge	r2,r3,8000298 <__alt_data_end+0xfc000298>
		*INITIALIZE_LEVEL_PIO = 1; //this triggers the initial loading of registers
	*INITIALIZE_LEVEL_PIO = 0;
 80002c0:	e0bfff17 	ldw	r2,-4(fp)
 80002c4:	10000015 	stw	zero,0(r2)
	usb_input();
 80002c8:	80006fc0 	call	80006fc <usb_input>
	return 0;
 80002cc:	0005883a 	mov	r2,zero
}
 80002d0:	e037883a 	mov	sp,fp
 80002d4:	dfc00117 	ldw	ra,4(sp)
 80002d8:	df000017 	ldw	fp,0(sp)
 80002dc:	dec00204 	addi	sp,sp,8
 80002e0:	f800283a 	ret

080002e4 <mapClr>:
#include <stdlib.h>
#include <string.h>
#include <alt_types.h>
#include "map_print.h"

void mapClr(){
 80002e4:	defffe04 	addi	sp,sp,-8
 80002e8:	df000115 	stw	fp,4(sp)
 80002ec:	df000104 	addi	fp,sp,4
	for (int i = 0; i < ROWS * COLUMNS; i++){
 80002f0:	e03fff15 	stw	zero,-4(fp)
 80002f4:	00000706 	br	8000314 <mapClr+0x30>
		vga_ctrl->MAPS[i] = 0x00;
 80002f8:	d0e00117 	ldw	r3,-32764(gp)
 80002fc:	e0bfff17 	ldw	r2,-4(fp)
 8000300:	1885883a 	add	r2,r3,r2
 8000304:	10000005 	stb	zero,0(r2)
#include <string.h>
#include <alt_types.h>
#include "map_print.h"

void mapClr(){
	for (int i = 0; i < ROWS * COLUMNS; i++){
 8000308:	e0bfff17 	ldw	r2,-4(fp)
 800030c:	10800044 	addi	r2,r2,1
 8000310:	e0bfff15 	stw	r2,-4(fp)
 8000314:	e0bfff17 	ldw	r2,-4(fp)
 8000318:	10804b10 	cmplti	r2,r2,300
 800031c:	103ff61e 	bne	r2,zero,80002f8 <__alt_data_end+0xfc0002f8>
		vga_ctrl->MAPS[i] = 0x00;
	}
}
 8000320:	0001883a 	nop
 8000324:	e037883a 	mov	sp,fp
 8000328:	df000017 	ldw	fp,0(sp)
 800032c:	dec00104 	addi	sp,sp,4
 8000330:	f800283a 	ret

08000334 <mapWrite>:

void mapWrite(){
 8000334:	defa6f04 	addi	sp,sp,-5700
 8000338:	dfc59015 	stw	ra,5696(sp)
 800033c:	df058f15 	stw	fp,5692(sp)
 8000340:	df058f04 	addi	fp,sp,5692
	mapClr();
 8000344:	80002e40 	call	80002e4 <mapClr>

	alt_u8 maps[] = {
 8000348:	00820074 	movhi	r2,2049
 800034c:	1089e704 	addi	r2,r2,10140
 8000350:	e0fa7404 	addi	r3,fp,-5680
 8000354:	1009883a 	mov	r4,r2
 8000358:	0082ee04 	movi	r2,3000
 800035c:	100d883a 	mov	r6,r2
 8000360:	200b883a 	mov	r5,r4
 8000364:	1809883a 	mov	r4,r3
 8000368:	8002b200 	call	8002b20 <memcpy>
			//level9
			0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x2C, 0x34, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x42, 0x42, 0x42, 0x52, 0x8C, 0x14, 0x4A, 0x42, 0x42, 0x42, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x28, 0x21, 0x20, 0x21, 0x80, 0x81, 0x20, 0x21, 0x20, 0x31, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x89, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x10, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x88, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x11, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x89, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x10, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x88, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x11, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x89, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x10, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x48, 0x41, 0x40, 0x41, 0x80, 0x81, 0x40, 0x41, 0x40, 0x51, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x22, 0x22, 0x22, 0x32, 0x8B, 0x13, 0x2A, 0x22, 0x22, 0x22, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x12, 0x4B, 0x53, 0x8A, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x22, 0x22, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82,

			//level10
			0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x82, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x82, 0x82, 0x12, 0x2C, 0x24, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x30, 0x8A, 0x82, 0x12, 0x4C, 0x44, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x11, 0x8A, 0x82, 0x82, 0x22, 0x32, 0x88, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x10, 0x4A, 0x82, 0x82, 0x82, 0x12, 0x89, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x30, 0x8A, 0x82, 0x82, 0x12, 0x48, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x81, 0x80, 0x11, 0x8A, 0x82, 0x82, 0x82, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62, 0x72, 0x88, 0x81, 0x10, 0x8A, 0x82, 0x82, 0x12, 0x28, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x21, 0x20, 0x81, 0x80, 0x11, 0x8A, 0x82, 0x82, 0x12, 0x89, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x50, 0x8A, 0x82, 0x42, 0x52, 0x88, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x10, 0x2A, 0x82, 0x12, 0x2B, 0x23, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x81, 0x80, 0x11, 0x8A, 0x82, 0x12, 0x4B, 0x43, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x40, 0x41, 0x50, 0x8A, 0x82, 0x82, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x22, 0x82, 0x82																															};
	alt_u8 obstacles[] = {
 800036c:	00820074 	movhi	r2,2049
 8000370:	108cd504 	addi	r2,r2,13140
 8000374:	e0fd6204 	addi	r3,fp,-2680
 8000378:	1009883a 	mov	r4,r2
 800037c:	00828004 	movi	r2,2560
 8000380:	100d883a 	mov	r6,r2
 8000384:	200b883a 	mov	r5,r4
 8000388:	1809883a 	mov	r4,r3
 800038c:	8002b200 	call	8002b20 <memcpy>
			//level9
			0xB0, 0xC0, 0x02, 0x40, 0x00, 0x00, 0x43, 0x03, 0xD0, 0xC0, 0x05, 0x40, 0x00, 0x00, 0xC3, 0x03, 0xF0, 0xC0, 0x02, 0x40, 0x00, 0x00, 0x43, 0x03, 0x10, 0xC1, 0x05, 0x40, 0x00, 0x00, 0xC3, 0x03, 0x30, 0xC1, 0x02, 0x40, 0x00, 0x00, 0x43, 0x03, 0x50, 0xC1, 0x05, 0x40, 0x00, 0x00, 0xC3, 0x03, 0x70, 0xC1, 0x02, 0x40, 0x00, 0x00, 0x43, 0x03, 0x90, 0xC1, 0x05, 0x40, 0x00, 0x00, 0xC3, 0x03, 0xB0, 0xC1, 0x02, 0x40, 0x00, 0x00, 0x43, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xC0, 0x02, 0x40, 0x00, 0x80, 0x04, 0x03, 0xB0, 0xC0, 0x03, 0x40, 0x00, 0x00, 0x00, 0x03, 0xB0, 0xC0, 0x04, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0xD0, 0xC1, 0x02, 0x40, 0x00, 0x80, 0x84, 0x03, 0xD0, 0xC1, 0x03, 0x40, 0x00, 0x80, 0x84, 0x03, 0xD0, 0xC1, 0x04, 0x40, 0x00, 0x80, 0x84, 0x03, 0xD0, 0xC1, 0x05, 0x40, 0x00, 0x80, 0x84, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			//level_10
			0x70, 0xC0, 0x06, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x70, 0x40, 0x06, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x70, 0xC0, 0x05, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x70, 0x40, 0x04, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x70, 0x40, 0x03, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x70, 0xC0, 0x01, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x10, 0xC1, 0x06, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x10, 0x41, 0x06, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x10, 0xC1, 0x05, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x10, 0x41, 0x04, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x10, 0x41, 0x03, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x10, 0xC1, 0x01, 0x52, 0xF0, 0x80, 0x92, 0x33, 0x08, 0x41, 0x02, 0x52, 0xF0, 0x40, 0x91, 0x33, 0x10, 0x41, 0x02, 0x52, 0xF0, 0x40, 0x91, 0x33, 0x18, 0x41, 0x02, 0x52, 0xF0, 0x40, 0x91, 0x33, 0x20, 0x41, 0x02, 0x52, 0xF0, 0x40, 0x91, 0x33, 0x70, 0x40, 0x04, 0x52, 0x00, 0x40, 0xC1, 0x04, 0x90, 0x40, 0x04, 0x52, 0x00, 0x40, 0xC1, 0x04, 0xB0, 0x40, 0x04, 0x52, 0x00, 0x40, 0xC1, 0x04, 0xD0, 0x40, 0x04, 0x52, 0x00, 0x40, 0xC1, 0x04, 0xF0, 0x40, 0x04, 0x52, 0x00, 0x40, 0xC1, 0x04, 0x10, 0x41, 0x04, 0x52, 0x00, 0x40, 0xC1, 0x04, 0x30, 0x41, 0x04, 0x52, 0x00, 0x40, 0xC1, 0x04, 0x50, 0x41, 0x04, 0x52, 0x00, 0x40, 0xC1, 0x04, 0xD0, 0xC1, 0x01, 0x40, 0x00, 0x40, 0x01, 0x00, 0xD0, 0xC1, 0x06, 0x40, 0x00, 0x40, 0x81, 0x00, 0xD0, 0xC1, 0x01, 0x40, 0x00, 0x40, 0x01, 0x00, 0xD0, 0xC1, 0x06, 0x40, 0x00, 0x40, 0x81, 0x00, 0xFA, 0x40, 0x04, 0x40, 0x00, 0x40, 0x01, 0x00, 0xFA, 0x40, 0x04, 0x40, 0x00, 0x40, 0x81, 0x00, 0xFA, 0x40, 0x04, 0x40, 0x00, 0x40, 0x01, 0x00, 0xFA, 0x40, 0x04, 0x40, 0x00, 0x40, 0x81, 0x00,
	};
	alt_u8 player_coin[] = {
 8000390:	00820074 	movhi	r2,2049
 8000394:	108f5504 	addi	r2,r2,15700
 8000398:	e0ffe204 	addi	r3,fp,-120
 800039c:	1009883a 	mov	r4,r2
 80003a0:	00801e04 	movi	r2,120
 80003a4:	100d883a 	mov	r6,r2
 80003a8:	200b883a 	mov	r5,r4
 80003ac:	1809883a 	mov	r4,r3
 80003b0:	8002b200 	call	8002b20 <memcpy>
			0x8F, 0xB1, 0xC2, 0x0C, 0xEC, 0x30, 0xC4, 0x12, 0x4C, 0x01, 0x00, 0x00, 0x0D, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x0C, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x0B, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x0A, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x09, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x08, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x07, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x06, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x05, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00,

	};

	for(int i = 0; i < 3000; i++){
 80003b4:	e03a7115 	stw	zero,-5692(fp)
 80003b8:	00000b06 	br	80003e8 <mapWrite+0xb4>
		vga_ctrl->MAPS[i] = maps[i];
 80003bc:	d1200117 	ldw	r4,-32764(gp)
 80003c0:	e0fa7404 	addi	r3,fp,-5680
 80003c4:	e0ba7117 	ldw	r2,-5692(fp)
 80003c8:	1885883a 	add	r2,r3,r2
 80003cc:	10c00003 	ldbu	r3,0(r2)
 80003d0:	e0ba7117 	ldw	r2,-5692(fp)
 80003d4:	2085883a 	add	r2,r4,r2
 80003d8:	10c00005 	stb	r3,0(r2)
	alt_u8 player_coin[] = {
			0x8F, 0xB1, 0xC2, 0x0C, 0xEC, 0x30, 0xC4, 0x12, 0x4C, 0x01, 0x00, 0x00, 0x0D, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x0C, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x0B, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x0A, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x09, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x08, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x07, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x06, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00, 0x05, 0x21, 0x84, 0x10, 0x08, 0xA1, 0x32, 0x12, 0x87, 0x00, 0x00, 0x00,

	};

	for(int i = 0; i < 3000; i++){
 80003dc:	e0ba7117 	ldw	r2,-5692(fp)
 80003e0:	10800044 	addi	r2,r2,1
 80003e4:	e0ba7115 	stw	r2,-5692(fp)
 80003e8:	e0ba7117 	ldw	r2,-5692(fp)
 80003ec:	1082ee10 	cmplti	r2,r2,3000
 80003f0:	103ff21e 	bne	r2,zero,80003bc <__alt_data_end+0xfc0003bc>
		vga_ctrl->MAPS[i] = maps[i];
	}

	for(int i = 0; i < 2560; i++){
 80003f4:	e03a7215 	stw	zero,-5688(fp)
 80003f8:	00000c06 	br	800042c <mapWrite+0xf8>
			vga_ctrl->OBSTACLES[i] = obstacles[i];
 80003fc:	d1200117 	ldw	r4,-32764(gp)
 8000400:	e0fd6204 	addi	r3,fp,-2680
 8000404:	e0ba7217 	ldw	r2,-5688(fp)
 8000408:	1885883a 	add	r2,r3,r2
 800040c:	10c00003 	ldbu	r3,0(r2)
 8000410:	e0ba7217 	ldw	r2,-5688(fp)
 8000414:	2085883a 	add	r2,r4,r2
 8000418:	10840004 	addi	r2,r2,4096
 800041c:	10c00005 	stb	r3,0(r2)

	for(int i = 0; i < 3000; i++){
		vga_ctrl->MAPS[i] = maps[i];
	}

	for(int i = 0; i < 2560; i++){
 8000420:	e0ba7217 	ldw	r2,-5688(fp)
 8000424:	10800044 	addi	r2,r2,1
 8000428:	e0ba7215 	stw	r2,-5688(fp)
 800042c:	e0ba7217 	ldw	r2,-5688(fp)
 8000430:	10828010 	cmplti	r2,r2,2560
 8000434:	103ff11e 	bne	r2,zero,80003fc <__alt_data_end+0xfc0003fc>
			vga_ctrl->OBSTACLES[i] = obstacles[i];
		}
	for(int i = 0; i < 120; i++){
 8000438:	e03a7315 	stw	zero,-5684(fp)
 800043c:	00000c06 	br	8000470 <mapWrite+0x13c>
				vga_ctrl->COIN_PLAYER[i] = player_coin[i];
 8000440:	d1200117 	ldw	r4,-32764(gp)
 8000444:	e0ffe204 	addi	r3,fp,-120
 8000448:	e0ba7317 	ldw	r2,-5684(fp)
 800044c:	1885883a 	add	r2,r3,r2
 8000450:	10c00003 	ldbu	r3,0(r2)
 8000454:	e0ba7317 	ldw	r2,-5684(fp)
 8000458:	2085883a 	add	r2,r4,r2
 800045c:	10868004 	addi	r2,r2,6656
 8000460:	10c00005 	stb	r3,0(r2)
	}

	for(int i = 0; i < 2560; i++){
			vga_ctrl->OBSTACLES[i] = obstacles[i];
		}
	for(int i = 0; i < 120; i++){
 8000464:	e0ba7317 	ldw	r2,-5684(fp)
 8000468:	10800044 	addi	r2,r2,1
 800046c:	e0ba7315 	stw	r2,-5684(fp)
 8000470:	e0ba7317 	ldw	r2,-5684(fp)
 8000474:	10801e10 	cmplti	r2,r2,120
 8000478:	103ff11e 	bne	r2,zero,8000440 <__alt_data_end+0xfc000440>
				vga_ctrl->COIN_PLAYER[i] = player_coin[i];
			}


}
 800047c:	0001883a 	nop
 8000480:	e037883a 	mov	sp,fp
 8000484:	dfc00117 	ldw	ra,4(sp)
 8000488:	df000017 	ldw	fp,0(sp)
 800048c:	dec00204 	addi	sp,sp,8
 8000490:	f800283a 	ret

08000494 <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 8000494:	defff604 	addi	sp,sp,-40
 8000498:	dfc00915 	stw	ra,36(sp)
 800049c:	df000815 	stw	fp,32(sp)
 80004a0:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 80004a4:	00bfffc4 	movi	r2,-1
 80004a8:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 80004ac:	01020074 	movhi	r4,2049
 80004b0:	210f8604 	addi	r4,r4,15896
 80004b4:	8002db40 	call	8002db4 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 80004b8:	00800044 	movi	r2,1
 80004bc:	e0bffd05 	stb	r2,-12(fp)
 80004c0:	00001f06 	br	8000540 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 80004c4:	e0bffd03 	ldbu	r2,-12(fp)
 80004c8:	1009883a 	mov	r4,r2
 80004cc:	80028880 	call	8002888 <GetDevtable>
 80004d0:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 80004d4:	e0bffe17 	ldw	r2,-8(fp)
 80004d8:	10800017 	ldw	r2,0(r2)
 80004dc:	10001526 	beq	r2,zero,8000534 <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 80004e0:	e0bffd03 	ldbu	r2,-12(fp)
 80004e4:	100b883a 	mov	r5,r2
 80004e8:	01020074 	movhi	r4,2049
 80004ec:	210f8f04 	addi	r4,r4,15932
 80004f0:	8002c980 	call	8002c98 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 80004f4:	e0bffe17 	ldw	r2,-8(fp)
 80004f8:	10800103 	ldbu	r2,4(r2)
 80004fc:	10c03fcc 	andi	r3,r2,255
 8000500:	00820074 	movhi	r2,2049
 8000504:	108f8204 	addi	r2,r2,15880
 8000508:	18c7883a 	add	r3,r3,r3
 800050c:	18c7883a 	add	r3,r3,r3
 8000510:	10c5883a 	add	r2,r2,r3
 8000514:	10800017 	ldw	r2,0(r2)
 8000518:	100b883a 	mov	r5,r2
 800051c:	01020074 	movhi	r4,2049
 8000520:	210f9204 	addi	r4,r4,15944
 8000524:	8002c980 	call	8002c98 <printf>
			device = tpl_ptr->devclass;
 8000528:	e0bffe17 	ldw	r2,-8(fp)
 800052c:	10800103 	ldbu	r2,4(r2)
 8000530:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8000534:	e0bffd03 	ldbu	r2,-12(fp)
 8000538:	10800044 	addi	r2,r2,1
 800053c:	e0bffd05 	stb	r2,-12(fp)
 8000540:	e0bffd03 	ldbu	r2,-12(fp)
 8000544:	10800230 	cmpltui	r2,r2,8
 8000548:	103fde1e 	bne	r2,zero,80004c4 <__alt_data_end+0xfc0004c4>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 800054c:	d0a00203 	ldbu	r2,-32760(gp)
 8000550:	11003fcc 	andi	r4,r2,255
 8000554:	d0a6e343 	ldbu	r2,-25715(gp)
 8000558:	10803fcc 	andi	r2,r2,255
 800055c:	e0ffff44 	addi	r3,fp,-3
 8000560:	d8c00415 	stw	r3,16(sp)
 8000564:	00c00044 	movi	r3,1
 8000568:	d8c00315 	stw	r3,12(sp)
 800056c:	d8800215 	stw	r2,8(sp)
 8000570:	d8000115 	stw	zero,4(sp)
 8000574:	d8000015 	stw	zero,0(sp)
 8000578:	01c00084 	movi	r7,2
 800057c:	01802844 	movi	r6,161
 8000580:	000b883a 	mov	r5,zero
 8000584:	8001aac0 	call	8001aac <XferCtrlReq>
 8000588:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 800058c:	e0bfff03 	ldbu	r2,-4(fp)
 8000590:	10000926 	beq	r2,zero,80005b8 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 8000594:	01020074 	movhi	r4,2049
 8000598:	210f9404 	addi	r4,r4,15952
 800059c:	8002c980 	call	8002c98 <printf>
		printf("%x \n", rcode);
 80005a0:	e0bfff03 	ldbu	r2,-4(fp)
 80005a4:	100b883a 	mov	r5,r2
 80005a8:	01020074 	movhi	r4,2049
 80005ac:	210f9b04 	addi	r4,r4,15980
 80005b0:	8002c980 	call	8002c98 <printf>
 80005b4:	00000906 	br	80005dc <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 80005b8:	01020074 	movhi	r4,2049
 80005bc:	210f9d04 	addi	r4,r4,15988
 80005c0:	8002c980 	call	8002c98 <printf>
		printf("%x \n", tmpbyte);
 80005c4:	e0bfff43 	ldbu	r2,-3(fp)
 80005c8:	10803fcc 	andi	r2,r2,255
 80005cc:	100b883a 	mov	r5,r2
 80005d0:	01020074 	movhi	r4,2049
 80005d4:	210f9b04 	addi	r4,r4,15980
 80005d8:	8002c980 	call	8002c98 <printf>
	}
	printf("Protocol: ");
 80005dc:	01020074 	movhi	r4,2049
 80005e0:	210fa104 	addi	r4,r4,16004
 80005e4:	8002c980 	call	8002c98 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80005e8:	d0a00203 	ldbu	r2,-32760(gp)
 80005ec:	11003fcc 	andi	r4,r2,255
 80005f0:	d0a6e343 	ldbu	r2,-25715(gp)
 80005f4:	10803fcc 	andi	r2,r2,255
 80005f8:	e0ffff44 	addi	r3,fp,-3
 80005fc:	d8c00415 	stw	r3,16(sp)
 8000600:	00c00044 	movi	r3,1
 8000604:	d8c00315 	stw	r3,12(sp)
 8000608:	d8800215 	stw	r2,8(sp)
 800060c:	d8000115 	stw	zero,4(sp)
 8000610:	d8000015 	stw	zero,0(sp)
 8000614:	01c000c4 	movi	r7,3
 8000618:	01802844 	movi	r6,161
 800061c:	000b883a 	mov	r5,zero
 8000620:	8001aac0 	call	8001aac <XferCtrlReq>
 8000624:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8000628:	e0bfff03 	ldbu	r2,-4(fp)
 800062c:	10000926 	beq	r2,zero,8000654 <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 8000630:	01020074 	movhi	r4,2049
 8000634:	210fa404 	addi	r4,r4,16016
 8000638:	8002c980 	call	8002c98 <printf>
		printf("%x \n", rcode);
 800063c:	e0bfff03 	ldbu	r2,-4(fp)
 8000640:	100b883a 	mov	r5,r2
 8000644:	01020074 	movhi	r4,2049
 8000648:	210f9b04 	addi	r4,r4,15980
 800064c:	8002c980 	call	8002c98 <printf>
 8000650:	00000606 	br	800066c <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 8000654:	e0bfff43 	ldbu	r2,-3(fp)
 8000658:	10803fcc 	andi	r2,r2,255
 800065c:	100b883a 	mov	r5,r2
 8000660:	01020074 	movhi	r4,2049
 8000664:	210fab04 	addi	r4,r4,16044
 8000668:	8002c980 	call	8002c98 <printf>
	}
	return device;
 800066c:	e0bffd43 	ldbu	r2,-11(fp)
}
 8000670:	e037883a 	mov	sp,fp
 8000674:	dfc00117 	ldw	ra,4(sp)
 8000678:	df000017 	ldw	fp,0(sp)
 800067c:	dec00204 	addi	sp,sp,8
 8000680:	f800283a 	ret

08000684 <setKeycode>:

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
}
*/
void setKeycode(WORD keycode0, WORD keycode1)
{
 8000684:	defffb04 	addi	sp,sp,-20
 8000688:	dfc00415 	stw	ra,16(sp)
 800068c:	df000315 	stw	fp,12(sp)
 8000690:	df000304 	addi	fp,sp,12
 8000694:	2007883a 	mov	r3,r4
 8000698:	2805883a 	mov	r2,r5
 800069c:	e0fffe0d 	sth	r3,-8(fp)
 80006a0:	e0bfff0d 	sth	r2,-4(fp)
	WORD most_sig_bits = keycode1 << 8;
 80006a4:	e0bfff0b 	ldhu	r2,-4(fp)
 80006a8:	1004923a 	slli	r2,r2,8
 80006ac:	e0bffd0d 	sth	r2,-12(fp)
	WORD keycode_combined = most_sig_bits + keycode0;
 80006b0:	e0fffd0b 	ldhu	r3,-12(fp)
 80006b4:	e0bffe0b 	ldhu	r2,-8(fp)
 80006b8:	1885883a 	add	r2,r3,r2
 80006bc:	e0bffd8d 	sth	r2,-10(fp)
	printf("\n keycode: %x", keycode_combined);
 80006c0:	e0bffd8b 	ldhu	r2,-10(fp)
 80006c4:	100b883a 	mov	r5,r2
 80006c8:	01020074 	movhi	r4,2049
 80006cc:	210fad04 	addi	r4,r4,16052
 80006d0:	8002c980 	call	8002c98 <printf>
	IOWR_ALTERA_AVALON_PIO_DATA(0x0011170, keycode_combined); // Change keycode to be a 16-bit input in platform designer
 80006d4:	e0fffd8b 	ldhu	r3,-10(fp)
 80006d8:	00800074 	movhi	r2,1
 80006dc:	10845c04 	addi	r2,r2,4464
 80006e0:	10c00035 	stwio	r3,0(r2)
}
 80006e4:	0001883a 	nop
 80006e8:	e037883a 	mov	sp,fp
 80006ec:	dfc00117 	ldw	ra,4(sp)
 80006f0:	df000017 	ldw	fp,0(sp)
 80006f4:	dec00204 	addi	sp,sp,8
 80006f8:	f800283a 	ret

080006fc <usb_input>:
int usb_input(){
 80006fc:	defff704 	addi	sp,sp,-36
 8000700:	dfc00815 	stw	ra,32(sp)
 8000704:	df000715 	stw	fp,28(sp)
 8000708:	df000704 	addi	fp,sp,28
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 800070c:	e03ff905 	stb	zero,-28(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 8000710:	e03ff945 	stb	zero,-27(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 8000714:	01020074 	movhi	r4,2049
 8000718:	210fb104 	addi	r4,r4,16068
 800071c:	8002db40 	call	8002db4 <puts>
	MAX3421E_init();
 8000720:	80018b00 	call	80018b0 <MAX3421E_init>
	printf("initializing USB...\n");
 8000724:	01020074 	movhi	r4,2049
 8000728:	210fb804 	addi	r4,r4,16096
 800072c:	8002db40 	call	8002db4 <puts>
	USB_init();
 8000730:	80020600 	call	8002060 <USB_init>

	while (1) {
		printf(".");
 8000734:	01000b84 	movi	r4,46
 8000738:	8002cdc0 	call	8002cdc <putchar>
		MAX3421E_Task();
 800073c:	80019440 	call	8001944 <MAX3421E_Task>
		USB_Task();
 8000740:	80020f80 	call	80020f8 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 8000744:	80028680 	call	8002868 <GetUsbTaskState>
 8000748:	10803fcc 	andi	r2,r2,255
 800074c:	10801018 	cmpnei	r2,r2,64
 8000750:	10006f1e 	bne	r2,zero,8000910 <usb_input+0x214>
			if (!runningdebugflag) {
 8000754:	e0bff903 	ldbu	r2,-28(fp)
 8000758:	1000051e 	bne	r2,zero,8000770 <usb_input+0x74>
				runningdebugflag = 1;
 800075c:	00800044 	movi	r2,1
 8000760:	e0bff905 	stb	r2,-28(fp)
				//setLED(9);
				device = GetDriverandReport();
 8000764:	80004940 	call	8000494 <GetDriverandReport>
 8000768:	e0bff985 	stb	r2,-26(fp)
 800076c:	003ff106 	br	8000734 <__alt_data_end+0xfc000734>
			} else if (device == 1) {
 8000770:	e0bff983 	ldbu	r2,-26(fp)
 8000774:	10800058 	cmpnei	r2,r2,1
 8000778:	1000301e 	bne	r2,zero,800083c <usb_input+0x140>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 800077c:	e0bffd44 	addi	r2,fp,-11
 8000780:	1009883a 	mov	r4,r2
 8000784:	80012680 	call	8001268 <kbdPoll>
 8000788:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
 800078c:	e0bffb03 	ldbu	r2,-20(fp)
 8000790:	10800118 	cmpnei	r2,r2,4
 8000794:	10007a26 	beq	r2,zero,8000980 <usb_input+0x284>
					continue; //NAK means no new data
				} else if (rcode) {
 8000798:	e0bffb03 	ldbu	r2,-20(fp)
 800079c:	10000926 	beq	r2,zero,80007c4 <usb_input+0xc8>
					printf("Rcode: ");
 80007a0:	01020074 	movhi	r4,2049
 80007a4:	210fbd04 	addi	r4,r4,16116
 80007a8:	8002c980 	call	8002c98 <printf>
					printf("%x \n", rcode);
 80007ac:	e0bffb03 	ldbu	r2,-20(fp)
 80007b0:	100b883a 	mov	r5,r2
 80007b4:	01020074 	movhi	r4,2049
 80007b8:	210f9b04 	addi	r4,r4,15980
 80007bc:	8002c980 	call	8002c98 <printf>
					continue;
 80007c0:	00007206 	br	800098c <usb_input+0x290>
				}
				printf("keycodes: ");
 80007c4:	01020074 	movhi	r4,2049
 80007c8:	210fbf04 	addi	r4,r4,16124
 80007cc:	8002c980 	call	8002c98 <printf>
				for (int i = 0; i < 6; i++) {
 80007d0:	e03ffa15 	stw	zero,-24(fp)
 80007d4:	00000c06 	br	8000808 <usb_input+0x10c>
					printf("%x ", kbdbuf.keycode[i]);
 80007d8:	e0fffdc4 	addi	r3,fp,-9
 80007dc:	e0bffa17 	ldw	r2,-24(fp)
 80007e0:	1885883a 	add	r2,r3,r2
 80007e4:	10800003 	ldbu	r2,0(r2)
 80007e8:	10803fcc 	andi	r2,r2,255
 80007ec:	100b883a 	mov	r5,r2
 80007f0:	01020074 	movhi	r4,2049
 80007f4:	210fc204 	addi	r4,r4,16136
 80007f8:	8002c980 	call	8002c98 <printf>
					printf("Rcode: ");
					printf("%x \n", rcode);
					continue;
				}
				printf("keycodes: ");
				for (int i = 0; i < 6; i++) {
 80007fc:	e0bffa17 	ldw	r2,-24(fp)
 8000800:	10800044 	addi	r2,r2,1
 8000804:	e0bffa15 	stw	r2,-24(fp)
 8000808:	e0bffa17 	ldw	r2,-24(fp)
 800080c:	10800190 	cmplti	r2,r2,6
 8000810:	103ff11e 	bne	r2,zero,80007d8 <__alt_data_end+0xfc0007d8>
					printf("%x ", kbdbuf.keycode[i]);
				}
				setKeycode(kbdbuf.keycode[0], kbdbuf.keycode[1]);
 8000814:	e0bffdc3 	ldbu	r2,-9(fp)
 8000818:	10803fcc 	andi	r2,r2,255
 800081c:	e0fffe03 	ldbu	r3,-8(fp)
 8000820:	18c03fcc 	andi	r3,r3,255
 8000824:	180b883a 	mov	r5,r3
 8000828:	1009883a 	mov	r4,r2
 800082c:	80006840 	call	8000684 <setKeycode>
				// Add another function to combine two keycodes
				// First keycode is bits [7:0]
				// Second key is bits [15:0]
				//printSignedHex0(kbdbuf.keycode[0]);
				//printSignedHex1(kbdbuf.keycode[1]);
				printf("\n");
 8000830:	01000284 	movi	r4,10
 8000834:	8002cdc0 	call	8002cdc <putchar>
 8000838:	003fbe06 	br	8000734 <__alt_data_end+0xfc000734>
			}

			else if (device == 2) {
 800083c:	e0bff983 	ldbu	r2,-26(fp)
 8000840:	10800098 	cmpnei	r2,r2,2
 8000844:	103fbb1e 	bne	r2,zero,8000734 <__alt_data_end+0xfc000734>
				rcode = mousePoll(&buf);
 8000848:	e0bffb44 	addi	r2,fp,-19
 800084c:	1009883a 	mov	r4,r2
 8000850:	80011e00 	call	80011e0 <mousePoll>
 8000854:	e0bffb05 	stb	r2,-20(fp)
				if (rcode == hrNAK) {
 8000858:	e0bffb03 	ldbu	r2,-20(fp)
 800085c:	10800118 	cmpnei	r2,r2,4
 8000860:	10004926 	beq	r2,zero,8000988 <usb_input+0x28c>
					//NAK means no new data
					continue;
				} else if (rcode) {
 8000864:	e0bffb03 	ldbu	r2,-20(fp)
 8000868:	10000926 	beq	r2,zero,8000890 <usb_input+0x194>
					printf("Rcode: ");
 800086c:	01020074 	movhi	r4,2049
 8000870:	210fbd04 	addi	r4,r4,16116
 8000874:	8002c980 	call	8002c98 <printf>
					printf("%x \n", rcode);
 8000878:	e0bffb03 	ldbu	r2,-20(fp)
 800087c:	100b883a 	mov	r5,r2
 8000880:	01020074 	movhi	r4,2049
 8000884:	210f9b04 	addi	r4,r4,15980
 8000888:	8002c980 	call	8002c98 <printf>
					continue;
 800088c:	00003f06 	br	800098c <usb_input+0x290>
				}
				printf("X displacement: ");
 8000890:	01020074 	movhi	r4,2049
 8000894:	210fc304 	addi	r4,r4,16140
 8000898:	8002c980 	call	8002c98 <printf>
				printf("%d ", (signed char) buf.Xdispl);
 800089c:	e0bffb83 	ldbu	r2,-18(fp)
 80008a0:	10803fcc 	andi	r2,r2,255
 80008a4:	1080201c 	xori	r2,r2,128
 80008a8:	10bfe004 	addi	r2,r2,-128
 80008ac:	100b883a 	mov	r5,r2
 80008b0:	01020074 	movhi	r4,2049
 80008b4:	210fc804 	addi	r4,r4,16160
 80008b8:	8002c980 	call	8002c98 <printf>
				//printSignedHex0((signed char) buf.Xdispl);
				printf("Y displacement: ");
 80008bc:	01020074 	movhi	r4,2049
 80008c0:	210fc904 	addi	r4,r4,16164
 80008c4:	8002c980 	call	8002c98 <printf>
				printf("%d ", (signed char) buf.Ydispl);
 80008c8:	e0bffbc3 	ldbu	r2,-17(fp)
 80008cc:	10803fcc 	andi	r2,r2,255
 80008d0:	1080201c 	xori	r2,r2,128
 80008d4:	10bfe004 	addi	r2,r2,-128
 80008d8:	100b883a 	mov	r5,r2
 80008dc:	01020074 	movhi	r4,2049
 80008e0:	210fc804 	addi	r4,r4,16160
 80008e4:	8002c980 	call	8002c98 <printf>
				//printSignedHex1((signed char) buf.Ydispl);
				printf("Buttons: ");
 80008e8:	01020074 	movhi	r4,2049
 80008ec:	210fce04 	addi	r4,r4,16184
 80008f0:	8002c980 	call	8002c98 <printf>
				printf("%x\n", buf.button);
 80008f4:	e0bffb43 	ldbu	r2,-19(fp)
 80008f8:	10803fcc 	andi	r2,r2,255
 80008fc:	100b883a 	mov	r5,r2
 8000900:	01020074 	movhi	r4,2049
 8000904:	210fd104 	addi	r4,r4,16196
 8000908:	8002c980 	call	8002c98 <printf>
 800090c:	003f8906 	br	8000734 <__alt_data_end+0xfc000734>
					setLED(0);
				else
					clearLED(0);
					*/
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8000910:	80028680 	call	8002868 <GetUsbTaskState>
 8000914:	10803fcc 	andi	r2,r2,255
 8000918:	10803fd8 	cmpnei	r2,r2,255
 800091c:	1000081e 	bne	r2,zero,8000940 <usb_input+0x244>
			if (!errorflag) {
 8000920:	e0bff943 	ldbu	r2,-27(fp)
 8000924:	103f831e 	bne	r2,zero,8000734 <__alt_data_end+0xfc000734>
				errorflag = 1;
 8000928:	00800044 	movi	r2,1
 800092c:	e0bff945 	stb	r2,-27(fp)
				//clearLED(9);
				printf("USB Error State\n");
 8000930:	01020074 	movhi	r4,2049
 8000934:	210fd204 	addi	r4,r4,16200
 8000938:	8002db40 	call	8002db4 <puts>
 800093c:	003f7d06 	br	8000734 <__alt_data_end+0xfc000734>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 8000940:	01020074 	movhi	r4,2049
 8000944:	210fd604 	addi	r4,r4,16216
 8000948:	8002c980 	call	8002c98 <printf>
			printf("%x\n", GetUsbTaskState());
 800094c:	80028680 	call	8002868 <GetUsbTaskState>
 8000950:	10803fcc 	andi	r2,r2,255
 8000954:	100b883a 	mov	r5,r2
 8000958:	01020074 	movhi	r4,2049
 800095c:	210fd104 	addi	r4,r4,16196
 8000960:	8002c980 	call	8002c98 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 8000964:	e0bff903 	ldbu	r2,-28(fp)
 8000968:	10000326 	beq	r2,zero,8000978 <usb_input+0x27c>
				runningdebugflag = 0;
 800096c:	e03ff905 	stb	zero,-28(fp)
				MAX3421E_init();
 8000970:	80018b00 	call	80018b0 <MAX3421E_init>
				USB_init();
 8000974:	80020600 	call	8002060 <USB_init>
			}
			errorflag = 0;
 8000978:	e03ff945 	stb	zero,-27(fp)
 800097c:	003f6d06 	br	8000734 <__alt_data_end+0xfc000734>
				device = GetDriverandReport();
			} else if (device == 1) {
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
				if (rcode == hrNAK) {
					continue; //NAK means no new data
 8000980:	0001883a 	nop
 8000984:	003f6b06 	br	8000734 <__alt_data_end+0xfc000734>

			else if (device == 2) {
				rcode = mousePoll(&buf);
				if (rcode == hrNAK) {
					//NAK means no new data
					continue;
 8000988:	0001883a 	nop
			}
			errorflag = 0;
			//clearLED(9);
		}

	}
 800098c:	003f6906 	br	8000734 <__alt_data_end+0xfc000734>

08000990 <HIDMProbe>:
 8000990:	defff204 	addi	sp,sp,-56
 8000994:	dfc00d15 	stw	ra,52(sp)
 8000998:	df000c15 	stw	fp,48(sp)
 800099c:	df000c04 	addi	fp,sp,48
 80009a0:	2005883a 	mov	r2,r4
 80009a4:	e17fff15 	stw	r5,-4(fp)
 80009a8:	e0bffe05 	stb	r2,-8(fp)
 80009ac:	00820074 	movhi	r2,2049
 80009b0:	109e9904 	addi	r2,r2,31332
 80009b4:	e0bffa15 	stw	r2,-24(fp)
 80009b8:	00820074 	movhi	r2,2049
 80009bc:	109e9904 	addi	r2,r2,31332
 80009c0:	e0bffb15 	stw	r2,-20(fp)
 80009c4:	e0fffe03 	ldbu	r3,-8(fp)
 80009c8:	00820074 	movhi	r2,2049
 80009cc:	109e9904 	addi	r2,r2,31332
 80009d0:	d8800415 	stw	r2,16(sp)
 80009d4:	00800244 	movi	r2,9
 80009d8:	d8800315 	stw	r2,12(sp)
 80009dc:	d8000215 	stw	zero,8(sp)
 80009e0:	00800084 	movi	r2,2
 80009e4:	d8800115 	stw	r2,4(sp)
 80009e8:	d8000015 	stw	zero,0(sp)
 80009ec:	01c00184 	movi	r7,6
 80009f0:	01802004 	movi	r6,128
 80009f4:	000b883a 	mov	r5,zero
 80009f8:	1809883a 	mov	r4,r3
 80009fc:	8001aac0 	call	8001aac <XferCtrlReq>
 8000a00:	e0bffc05 	stb	r2,-16(fp)
 8000a04:	e0bffc03 	ldbu	r2,-16(fp)
 8000a08:	10000226 	beq	r2,zero,8000a14 <HIDMProbe+0x84>
 8000a0c:	0005883a 	mov	r2,zero
 8000a10:	0000dc06 	br	8000d84 <HIDMProbe+0x3f4>
 8000a14:	e0bffa17 	ldw	r2,-24(fp)
 8000a18:	1080008b 	ldhu	r2,2(r2)
 8000a1c:	10bfffcc 	andi	r2,r2,65535
 8000a20:	10804070 	cmpltui	r2,r2,257
 8000a24:	1000031e 	bne	r2,zero,8000a34 <HIDMProbe+0xa4>
 8000a28:	00804004 	movi	r2,256
 8000a2c:	e0bff90d 	sth	r2,-28(fp)
 8000a30:	00000306 	br	8000a40 <HIDMProbe+0xb0>
 8000a34:	e0bffa17 	ldw	r2,-24(fp)
 8000a38:	1080008b 	ldhu	r2,2(r2)
 8000a3c:	e0bff90d 	sth	r2,-28(fp)
 8000a40:	e13ffe03 	ldbu	r4,-8(fp)
 8000a44:	e0fff90b 	ldhu	r3,-28(fp)
 8000a48:	00820074 	movhi	r2,2049
 8000a4c:	109e9904 	addi	r2,r2,31332
 8000a50:	d8800415 	stw	r2,16(sp)
 8000a54:	d8c00315 	stw	r3,12(sp)
 8000a58:	d8000215 	stw	zero,8(sp)
 8000a5c:	00800084 	movi	r2,2
 8000a60:	d8800115 	stw	r2,4(sp)
 8000a64:	d8000015 	stw	zero,0(sp)
 8000a68:	01c00184 	movi	r7,6
 8000a6c:	01802004 	movi	r6,128
 8000a70:	000b883a 	mov	r5,zero
 8000a74:	8001aac0 	call	8001aac <XferCtrlReq>
 8000a78:	e0bffc05 	stb	r2,-16(fp)
 8000a7c:	e0bffc03 	ldbu	r2,-16(fp)
 8000a80:	10000226 	beq	r2,zero,8000a8c <HIDMProbe+0xfc>
 8000a84:	0005883a 	mov	r2,zero
 8000a88:	0000be06 	br	8000d84 <HIDMProbe+0x3f4>
 8000a8c:	e0bffa17 	ldw	r2,-24(fp)
 8000a90:	10800143 	ldbu	r2,5(r2)
 8000a94:	e0bffc45 	stb	r2,-15(fp)
 8000a98:	0000b306 	br	8000d68 <HIDMProbe+0x3d8>
 8000a9c:	e0bffa17 	ldw	r2,-24(fp)
 8000aa0:	10800043 	ldbu	r2,1(r2)
 8000aa4:	10803fcc 	andi	r2,r2,255
 8000aa8:	10800120 	cmpeqi	r2,r2,4
 8000aac:	1000091e 	bne	r2,zero,8000ad4 <HIDMProbe+0x144>
 8000ab0:	e0bffa17 	ldw	r2,-24(fp)
 8000ab4:	10800003 	ldbu	r2,0(r2)
 8000ab8:	10803fcc 	andi	r2,r2,255
 8000abc:	e0fffb17 	ldw	r3,-20(fp)
 8000ac0:	1885883a 	add	r2,r3,r2
 8000ac4:	e0bffb15 	stw	r2,-20(fp)
 8000ac8:	e0bffb17 	ldw	r2,-20(fp)
 8000acc:	e0bffa15 	stw	r2,-24(fp)
 8000ad0:	0000a506 	br	8000d68 <HIDMProbe+0x3d8>
 8000ad4:	e0bffa17 	ldw	r2,-24(fp)
 8000ad8:	10800143 	ldbu	r2,5(r2)
 8000adc:	e0bffc85 	stb	r2,-14(fp)
 8000ae0:	e0bffa17 	ldw	r2,-24(fp)
 8000ae4:	10800183 	ldbu	r2,6(r2)
 8000ae8:	e0bffcc5 	stb	r2,-13(fp)
 8000aec:	e0bffa17 	ldw	r2,-24(fp)
 8000af0:	108001c3 	ldbu	r2,7(r2)
 8000af4:	e0bffd05 	stb	r2,-12(fp)
 8000af8:	e0bffc83 	ldbu	r2,-14(fp)
 8000afc:	108000d8 	cmpnei	r2,r2,3
 8000b00:	1000971e 	bne	r2,zero,8000d60 <HIDMProbe+0x3d0>
 8000b04:	e0bffcc3 	ldbu	r2,-13(fp)
 8000b08:	10800058 	cmpnei	r2,r2,1
 8000b0c:	1000941e 	bne	r2,zero,8000d60 <HIDMProbe+0x3d0>
 8000b10:	e0bffd03 	ldbu	r2,-12(fp)
 8000b14:	10800098 	cmpnei	r2,r2,2
 8000b18:	1000911e 	bne	r2,zero,8000d60 <HIDMProbe+0x3d0>
 8000b1c:	e0fffe03 	ldbu	r3,-8(fp)
 8000b20:	00820074 	movhi	r2,2049
 8000b24:	109ed904 	addi	r2,r2,31588
 8000b28:	180690fa 	slli	r3,r3,3
 8000b2c:	10c5883a 	add	r2,r2,r3
 8000b30:	10800104 	addi	r2,r2,4
 8000b34:	00c00084 	movi	r3,2
 8000b38:	10c00005 	stb	r3,0(r2)
 8000b3c:	e0fffe03 	ldbu	r3,-8(fp)
 8000b40:	00820074 	movhi	r2,2049
 8000b44:	109ed904 	addi	r2,r2,31588
 8000b48:	180690fa 	slli	r3,r3,3
 8000b4c:	10c5883a 	add	r2,r2,r3
 8000b50:	10800017 	ldw	r2,0(r2)
 8000b54:	1080008b 	ldhu	r2,2(r2)
 8000b58:	e0bffd45 	stb	r2,-11(fp)
 8000b5c:	80011a00 	call	80011a0 <HID_init>
 8000b60:	e0fffe03 	ldbu	r3,-8(fp)
 8000b64:	00820074 	movhi	r2,2049
 8000b68:	109ed904 	addi	r2,r2,31588
 8000b6c:	180690fa 	slli	r3,r3,3
 8000b70:	10c7883a 	add	r3,r2,r3
 8000b74:	00820074 	movhi	r2,2049
 8000b78:	109e8504 	addi	r2,r2,31252
 8000b7c:	18800015 	stw	r2,0(r3)
 8000b80:	e0fffe03 	ldbu	r3,-8(fp)
 8000b84:	00820074 	movhi	r2,2049
 8000b88:	109ed904 	addi	r2,r2,31588
 8000b8c:	180690fa 	slli	r3,r3,3
 8000b90:	10c5883a 	add	r2,r2,r3
 8000b94:	10800017 	ldw	r2,0(r2)
 8000b98:	e0fffd43 	ldbu	r3,-11(fp)
 8000b9c:	10c0008d 	sth	r3,2(r2)
 8000ba0:	e0bffa17 	ldw	r2,-24(fp)
 8000ba4:	10800083 	ldbu	r2,2(r2)
 8000ba8:	d0a6e345 	stb	r2,-25715(gp)
 8000bac:	e0bffe03 	ldbu	r2,-8(fp)
 8000bb0:	d0a6e305 	stb	r2,-25716(gp)
 8000bb4:	e0bffa17 	ldw	r2,-24(fp)
 8000bb8:	10800003 	ldbu	r2,0(r2)
 8000bbc:	10803fcc 	andi	r2,r2,255
 8000bc0:	e0fffb17 	ldw	r3,-20(fp)
 8000bc4:	1885883a 	add	r2,r3,r2
 8000bc8:	e0bffb15 	stw	r2,-20(fp)
 8000bcc:	e0bffb17 	ldw	r2,-20(fp)
 8000bd0:	e0bffa15 	stw	r2,-24(fp)
 8000bd4:	00005b06 	br	8000d44 <HIDMProbe+0x3b4>
 8000bd8:	e0bffa17 	ldw	r2,-24(fp)
 8000bdc:	10800043 	ldbu	r2,1(r2)
 8000be0:	10803fcc 	andi	r2,r2,255
 8000be4:	10800160 	cmpeqi	r2,r2,5
 8000be8:	1000091e 	bne	r2,zero,8000c10 <HIDMProbe+0x280>
 8000bec:	e0bffa17 	ldw	r2,-24(fp)
 8000bf0:	10800003 	ldbu	r2,0(r2)
 8000bf4:	10803fcc 	andi	r2,r2,255
 8000bf8:	e0fffb17 	ldw	r3,-20(fp)
 8000bfc:	1885883a 	add	r2,r3,r2
 8000c00:	e0bffb15 	stw	r2,-20(fp)
 8000c04:	e0bffb17 	ldw	r2,-20(fp)
 8000c08:	e0bffa15 	stw	r2,-24(fp)
 8000c0c:	00004d06 	br	8000d44 <HIDMProbe+0x3b4>
 8000c10:	e0fffe03 	ldbu	r3,-8(fp)
 8000c14:	00820074 	movhi	r2,2049
 8000c18:	109ed904 	addi	r2,r2,31588
 8000c1c:	180690fa 	slli	r3,r3,3
 8000c20:	10c5883a 	add	r2,r2,r3
 8000c24:	10800017 	ldw	r2,0(r2)
 8000c28:	10800204 	addi	r2,r2,8
 8000c2c:	e0fffa17 	ldw	r3,-24(fp)
 8000c30:	18c00083 	ldbu	r3,2(r3)
 8000c34:	10c00005 	stb	r3,0(r2)
 8000c38:	e0fffe03 	ldbu	r3,-8(fp)
 8000c3c:	00820074 	movhi	r2,2049
 8000c40:	109ed904 	addi	r2,r2,31588
 8000c44:	180690fa 	slli	r3,r3,3
 8000c48:	10c5883a 	add	r2,r2,r3
 8000c4c:	10800017 	ldw	r2,0(r2)
 8000c50:	10800204 	addi	r2,r2,8
 8000c54:	e0fffa17 	ldw	r3,-24(fp)
 8000c58:	18c000c3 	ldbu	r3,3(r3)
 8000c5c:	10c00045 	stb	r3,1(r2)
 8000c60:	e0fffe03 	ldbu	r3,-8(fp)
 8000c64:	00820074 	movhi	r2,2049
 8000c68:	109ed904 	addi	r2,r2,31588
 8000c6c:	180690fa 	slli	r3,r3,3
 8000c70:	10c5883a 	add	r2,r2,r3
 8000c74:	10800017 	ldw	r2,0(r2)
 8000c78:	10800204 	addi	r2,r2,8
 8000c7c:	e0fffa17 	ldw	r3,-24(fp)
 8000c80:	18c0010b 	ldhu	r3,4(r3)
 8000c84:	10c0008d 	sth	r3,2(r2)
 8000c88:	e0fffe03 	ldbu	r3,-8(fp)
 8000c8c:	00820074 	movhi	r2,2049
 8000c90:	109ed904 	addi	r2,r2,31588
 8000c94:	180690fa 	slli	r3,r3,3
 8000c98:	10c5883a 	add	r2,r2,r3
 8000c9c:	10800017 	ldw	r2,0(r2)
 8000ca0:	10800204 	addi	r2,r2,8
 8000ca4:	e0fffa17 	ldw	r3,-24(fp)
 8000ca8:	18c00183 	ldbu	r3,6(r3)
 8000cac:	10c00105 	stb	r3,4(r2)
 8000cb0:	e0fffe03 	ldbu	r3,-8(fp)
 8000cb4:	e0bffc43 	ldbu	r2,-15(fp)
 8000cb8:	d8000415 	stw	zero,16(sp)
 8000cbc:	d8000315 	stw	zero,12(sp)
 8000cc0:	d8000215 	stw	zero,8(sp)
 8000cc4:	d8000115 	stw	zero,4(sp)
 8000cc8:	d8800015 	stw	r2,0(sp)
 8000ccc:	01c00244 	movi	r7,9
 8000cd0:	000d883a 	mov	r6,zero
 8000cd4:	000b883a 	mov	r5,zero
 8000cd8:	1809883a 	mov	r4,r3
 8000cdc:	8001aac0 	call	8001aac <XferCtrlReq>
 8000ce0:	e0bffc05 	stb	r2,-16(fp)
 8000ce4:	e0bffc03 	ldbu	r2,-16(fp)
 8000ce8:	10000226 	beq	r2,zero,8000cf4 <HIDMProbe+0x364>
 8000cec:	0005883a 	mov	r2,zero
 8000cf0:	00002406 	br	8000d84 <HIDMProbe+0x3f4>
 8000cf4:	e0fffe03 	ldbu	r3,-8(fp)
 8000cf8:	d0a6e343 	ldbu	r2,-25715(gp)
 8000cfc:	10803fcc 	andi	r2,r2,255
 8000d00:	d8000415 	stw	zero,16(sp)
 8000d04:	d8000315 	stw	zero,12(sp)
 8000d08:	d8800215 	stw	r2,8(sp)
 8000d0c:	d8000115 	stw	zero,4(sp)
 8000d10:	d8000015 	stw	zero,0(sp)
 8000d14:	01c002c4 	movi	r7,11
 8000d18:	01800844 	movi	r6,33
 8000d1c:	000b883a 	mov	r5,zero
 8000d20:	1809883a 	mov	r4,r3
 8000d24:	8001aac0 	call	8001aac <XferCtrlReq>
 8000d28:	e0bffc05 	stb	r2,-16(fp)
 8000d2c:	e0bffc03 	ldbu	r2,-16(fp)
 8000d30:	10000226 	beq	r2,zero,8000d3c <HIDMProbe+0x3ac>
 8000d34:	0005883a 	mov	r2,zero
 8000d38:	00001206 	br	8000d84 <HIDMProbe+0x3f4>
 8000d3c:	00800044 	movi	r2,1
 8000d40:	00001006 	br	8000d84 <HIDMProbe+0x3f4>
 8000d44:	e0fff90b 	ldhu	r3,-28(fp)
 8000d48:	00820074 	movhi	r2,2049
 8000d4c:	109e9904 	addi	r2,r2,31332
 8000d50:	1885883a 	add	r2,r3,r2
 8000d54:	e0fffb17 	ldw	r3,-20(fp)
 8000d58:	18bf9f36 	bltu	r3,r2,8000bd8 <__alt_data_end+0xfc000bd8>
 8000d5c:	00000206 	br	8000d68 <HIDMProbe+0x3d8>
 8000d60:	0005883a 	mov	r2,zero
 8000d64:	00000706 	br	8000d84 <HIDMProbe+0x3f4>
 8000d68:	e0fff90b 	ldhu	r3,-28(fp)
 8000d6c:	00820074 	movhi	r2,2049
 8000d70:	109e9904 	addi	r2,r2,31332
 8000d74:	1885883a 	add	r2,r3,r2
 8000d78:	e0fffb17 	ldw	r3,-20(fp)
 8000d7c:	18bf4736 	bltu	r3,r2,8000a9c <__alt_data_end+0xfc000a9c>
 8000d80:	0005883a 	mov	r2,zero
 8000d84:	e037883a 	mov	sp,fp
 8000d88:	dfc00117 	ldw	ra,4(sp)
 8000d8c:	df000017 	ldw	fp,0(sp)
 8000d90:	dec00204 	addi	sp,sp,8
 8000d94:	f800283a 	ret

08000d98 <HIDKProbe>:
 8000d98:	defff204 	addi	sp,sp,-56
 8000d9c:	dfc00d15 	stw	ra,52(sp)
 8000da0:	df000c15 	stw	fp,48(sp)
 8000da4:	df000c04 	addi	fp,sp,48
 8000da8:	2005883a 	mov	r2,r4
 8000dac:	e17fff15 	stw	r5,-4(fp)
 8000db0:	e0bffe05 	stb	r2,-8(fp)
 8000db4:	00820074 	movhi	r2,2049
 8000db8:	109e9904 	addi	r2,r2,31332
 8000dbc:	e0bffa15 	stw	r2,-24(fp)
 8000dc0:	00820074 	movhi	r2,2049
 8000dc4:	109e9904 	addi	r2,r2,31332
 8000dc8:	e0bffb15 	stw	r2,-20(fp)
 8000dcc:	e0fffe03 	ldbu	r3,-8(fp)
 8000dd0:	00820074 	movhi	r2,2049
 8000dd4:	109e9904 	addi	r2,r2,31332
 8000dd8:	d8800415 	stw	r2,16(sp)
 8000ddc:	00800244 	movi	r2,9
 8000de0:	d8800315 	stw	r2,12(sp)
 8000de4:	d8000215 	stw	zero,8(sp)
 8000de8:	00800084 	movi	r2,2
 8000dec:	d8800115 	stw	r2,4(sp)
 8000df0:	d8000015 	stw	zero,0(sp)
 8000df4:	01c00184 	movi	r7,6
 8000df8:	01802004 	movi	r6,128
 8000dfc:	000b883a 	mov	r5,zero
 8000e00:	1809883a 	mov	r4,r3
 8000e04:	8001aac0 	call	8001aac <XferCtrlReq>
 8000e08:	e0bffc05 	stb	r2,-16(fp)
 8000e0c:	e0bffc03 	ldbu	r2,-16(fp)
 8000e10:	10000226 	beq	r2,zero,8000e1c <HIDKProbe+0x84>
 8000e14:	0005883a 	mov	r2,zero
 8000e18:	0000dc06 	br	800118c <HIDKProbe+0x3f4>
 8000e1c:	e0bffa17 	ldw	r2,-24(fp)
 8000e20:	1080008b 	ldhu	r2,2(r2)
 8000e24:	10bfffcc 	andi	r2,r2,65535
 8000e28:	10804070 	cmpltui	r2,r2,257
 8000e2c:	1000031e 	bne	r2,zero,8000e3c <HIDKProbe+0xa4>
 8000e30:	00804004 	movi	r2,256
 8000e34:	e0bff90d 	sth	r2,-28(fp)
 8000e38:	00000306 	br	8000e48 <HIDKProbe+0xb0>
 8000e3c:	e0bffa17 	ldw	r2,-24(fp)
 8000e40:	1080008b 	ldhu	r2,2(r2)
 8000e44:	e0bff90d 	sth	r2,-28(fp)
 8000e48:	e13ffe03 	ldbu	r4,-8(fp)
 8000e4c:	e0fff90b 	ldhu	r3,-28(fp)
 8000e50:	00820074 	movhi	r2,2049
 8000e54:	109e9904 	addi	r2,r2,31332
 8000e58:	d8800415 	stw	r2,16(sp)
 8000e5c:	d8c00315 	stw	r3,12(sp)
 8000e60:	d8000215 	stw	zero,8(sp)
 8000e64:	00800084 	movi	r2,2
 8000e68:	d8800115 	stw	r2,4(sp)
 8000e6c:	d8000015 	stw	zero,0(sp)
 8000e70:	01c00184 	movi	r7,6
 8000e74:	01802004 	movi	r6,128
 8000e78:	000b883a 	mov	r5,zero
 8000e7c:	8001aac0 	call	8001aac <XferCtrlReq>
 8000e80:	e0bffc05 	stb	r2,-16(fp)
 8000e84:	e0bffc03 	ldbu	r2,-16(fp)
 8000e88:	10000226 	beq	r2,zero,8000e94 <HIDKProbe+0xfc>
 8000e8c:	0005883a 	mov	r2,zero
 8000e90:	0000be06 	br	800118c <HIDKProbe+0x3f4>
 8000e94:	e0bffa17 	ldw	r2,-24(fp)
 8000e98:	10800143 	ldbu	r2,5(r2)
 8000e9c:	e0bffc45 	stb	r2,-15(fp)
 8000ea0:	0000b306 	br	8001170 <HIDKProbe+0x3d8>
 8000ea4:	e0bffa17 	ldw	r2,-24(fp)
 8000ea8:	10800043 	ldbu	r2,1(r2)
 8000eac:	10803fcc 	andi	r2,r2,255
 8000eb0:	10800120 	cmpeqi	r2,r2,4
 8000eb4:	1000091e 	bne	r2,zero,8000edc <HIDKProbe+0x144>
 8000eb8:	e0bffa17 	ldw	r2,-24(fp)
 8000ebc:	10800003 	ldbu	r2,0(r2)
 8000ec0:	10803fcc 	andi	r2,r2,255
 8000ec4:	e0fffb17 	ldw	r3,-20(fp)
 8000ec8:	1885883a 	add	r2,r3,r2
 8000ecc:	e0bffb15 	stw	r2,-20(fp)
 8000ed0:	e0bffb17 	ldw	r2,-20(fp)
 8000ed4:	e0bffa15 	stw	r2,-24(fp)
 8000ed8:	0000a506 	br	8001170 <HIDKProbe+0x3d8>
 8000edc:	e0bffa17 	ldw	r2,-24(fp)
 8000ee0:	10800143 	ldbu	r2,5(r2)
 8000ee4:	e0bffc85 	stb	r2,-14(fp)
 8000ee8:	e0bffa17 	ldw	r2,-24(fp)
 8000eec:	10800183 	ldbu	r2,6(r2)
 8000ef0:	e0bffcc5 	stb	r2,-13(fp)
 8000ef4:	e0bffa17 	ldw	r2,-24(fp)
 8000ef8:	108001c3 	ldbu	r2,7(r2)
 8000efc:	e0bffd05 	stb	r2,-12(fp)
 8000f00:	e0bffc83 	ldbu	r2,-14(fp)
 8000f04:	108000d8 	cmpnei	r2,r2,3
 8000f08:	1000971e 	bne	r2,zero,8001168 <HIDKProbe+0x3d0>
 8000f0c:	e0bffcc3 	ldbu	r2,-13(fp)
 8000f10:	10800058 	cmpnei	r2,r2,1
 8000f14:	1000941e 	bne	r2,zero,8001168 <HIDKProbe+0x3d0>
 8000f18:	e0bffd03 	ldbu	r2,-12(fp)
 8000f1c:	10800058 	cmpnei	r2,r2,1
 8000f20:	1000911e 	bne	r2,zero,8001168 <HIDKProbe+0x3d0>
 8000f24:	e0fffe03 	ldbu	r3,-8(fp)
 8000f28:	00820074 	movhi	r2,2049
 8000f2c:	109ed904 	addi	r2,r2,31588
 8000f30:	180690fa 	slli	r3,r3,3
 8000f34:	10c5883a 	add	r2,r2,r3
 8000f38:	10800104 	addi	r2,r2,4
 8000f3c:	00c00044 	movi	r3,1
 8000f40:	10c00005 	stb	r3,0(r2)
 8000f44:	e0fffe03 	ldbu	r3,-8(fp)
 8000f48:	00820074 	movhi	r2,2049
 8000f4c:	109ed904 	addi	r2,r2,31588
 8000f50:	180690fa 	slli	r3,r3,3
 8000f54:	10c5883a 	add	r2,r2,r3
 8000f58:	10800017 	ldw	r2,0(r2)
 8000f5c:	1080008b 	ldhu	r2,2(r2)
 8000f60:	e0bffd45 	stb	r2,-11(fp)
 8000f64:	80011a00 	call	80011a0 <HID_init>
 8000f68:	e0fffe03 	ldbu	r3,-8(fp)
 8000f6c:	00820074 	movhi	r2,2049
 8000f70:	109ed904 	addi	r2,r2,31588
 8000f74:	180690fa 	slli	r3,r3,3
 8000f78:	10c7883a 	add	r3,r2,r3
 8000f7c:	00820074 	movhi	r2,2049
 8000f80:	109e8504 	addi	r2,r2,31252
 8000f84:	18800015 	stw	r2,0(r3)
 8000f88:	e0fffe03 	ldbu	r3,-8(fp)
 8000f8c:	00820074 	movhi	r2,2049
 8000f90:	109ed904 	addi	r2,r2,31588
 8000f94:	180690fa 	slli	r3,r3,3
 8000f98:	10c5883a 	add	r2,r2,r3
 8000f9c:	10800017 	ldw	r2,0(r2)
 8000fa0:	e0fffd43 	ldbu	r3,-11(fp)
 8000fa4:	10c0008d 	sth	r3,2(r2)
 8000fa8:	e0bffa17 	ldw	r2,-24(fp)
 8000fac:	10800083 	ldbu	r2,2(r2)
 8000fb0:	d0a6e345 	stb	r2,-25715(gp)
 8000fb4:	e0bffe03 	ldbu	r2,-8(fp)
 8000fb8:	d0a6e305 	stb	r2,-25716(gp)
 8000fbc:	e0bffa17 	ldw	r2,-24(fp)
 8000fc0:	10800003 	ldbu	r2,0(r2)
 8000fc4:	10803fcc 	andi	r2,r2,255
 8000fc8:	e0fffb17 	ldw	r3,-20(fp)
 8000fcc:	1885883a 	add	r2,r3,r2
 8000fd0:	e0bffb15 	stw	r2,-20(fp)
 8000fd4:	e0bffb17 	ldw	r2,-20(fp)
 8000fd8:	e0bffa15 	stw	r2,-24(fp)
 8000fdc:	00005b06 	br	800114c <HIDKProbe+0x3b4>
 8000fe0:	e0bffa17 	ldw	r2,-24(fp)
 8000fe4:	10800043 	ldbu	r2,1(r2)
 8000fe8:	10803fcc 	andi	r2,r2,255
 8000fec:	10800160 	cmpeqi	r2,r2,5
 8000ff0:	1000091e 	bne	r2,zero,8001018 <HIDKProbe+0x280>
 8000ff4:	e0bffa17 	ldw	r2,-24(fp)
 8000ff8:	10800003 	ldbu	r2,0(r2)
 8000ffc:	10803fcc 	andi	r2,r2,255
 8001000:	e0fffb17 	ldw	r3,-20(fp)
 8001004:	1885883a 	add	r2,r3,r2
 8001008:	e0bffb15 	stw	r2,-20(fp)
 800100c:	e0bffb17 	ldw	r2,-20(fp)
 8001010:	e0bffa15 	stw	r2,-24(fp)
 8001014:	00004d06 	br	800114c <HIDKProbe+0x3b4>
 8001018:	e0fffe03 	ldbu	r3,-8(fp)
 800101c:	00820074 	movhi	r2,2049
 8001020:	109ed904 	addi	r2,r2,31588
 8001024:	180690fa 	slli	r3,r3,3
 8001028:	10c5883a 	add	r2,r2,r3
 800102c:	10800017 	ldw	r2,0(r2)
 8001030:	10800204 	addi	r2,r2,8
 8001034:	e0fffa17 	ldw	r3,-24(fp)
 8001038:	18c00083 	ldbu	r3,2(r3)
 800103c:	10c00005 	stb	r3,0(r2)
 8001040:	e0fffe03 	ldbu	r3,-8(fp)
 8001044:	00820074 	movhi	r2,2049
 8001048:	109ed904 	addi	r2,r2,31588
 800104c:	180690fa 	slli	r3,r3,3
 8001050:	10c5883a 	add	r2,r2,r3
 8001054:	10800017 	ldw	r2,0(r2)
 8001058:	10800204 	addi	r2,r2,8
 800105c:	e0fffa17 	ldw	r3,-24(fp)
 8001060:	18c000c3 	ldbu	r3,3(r3)
 8001064:	10c00045 	stb	r3,1(r2)
 8001068:	e0fffe03 	ldbu	r3,-8(fp)
 800106c:	00820074 	movhi	r2,2049
 8001070:	109ed904 	addi	r2,r2,31588
 8001074:	180690fa 	slli	r3,r3,3
 8001078:	10c5883a 	add	r2,r2,r3
 800107c:	10800017 	ldw	r2,0(r2)
 8001080:	10800204 	addi	r2,r2,8
 8001084:	e0fffa17 	ldw	r3,-24(fp)
 8001088:	18c0010b 	ldhu	r3,4(r3)
 800108c:	10c0008d 	sth	r3,2(r2)
 8001090:	e0fffe03 	ldbu	r3,-8(fp)
 8001094:	00820074 	movhi	r2,2049
 8001098:	109ed904 	addi	r2,r2,31588
 800109c:	180690fa 	slli	r3,r3,3
 80010a0:	10c5883a 	add	r2,r2,r3
 80010a4:	10800017 	ldw	r2,0(r2)
 80010a8:	10800204 	addi	r2,r2,8
 80010ac:	e0fffa17 	ldw	r3,-24(fp)
 80010b0:	18c00183 	ldbu	r3,6(r3)
 80010b4:	10c00105 	stb	r3,4(r2)
 80010b8:	e0fffe03 	ldbu	r3,-8(fp)
 80010bc:	e0bffc43 	ldbu	r2,-15(fp)
 80010c0:	d8000415 	stw	zero,16(sp)
 80010c4:	d8000315 	stw	zero,12(sp)
 80010c8:	d8000215 	stw	zero,8(sp)
 80010cc:	d8000115 	stw	zero,4(sp)
 80010d0:	d8800015 	stw	r2,0(sp)
 80010d4:	01c00244 	movi	r7,9
 80010d8:	000d883a 	mov	r6,zero
 80010dc:	000b883a 	mov	r5,zero
 80010e0:	1809883a 	mov	r4,r3
 80010e4:	8001aac0 	call	8001aac <XferCtrlReq>
 80010e8:	e0bffc05 	stb	r2,-16(fp)
 80010ec:	e0bffc03 	ldbu	r2,-16(fp)
 80010f0:	10000226 	beq	r2,zero,80010fc <HIDKProbe+0x364>
 80010f4:	0005883a 	mov	r2,zero
 80010f8:	00002406 	br	800118c <HIDKProbe+0x3f4>
 80010fc:	e0fffe03 	ldbu	r3,-8(fp)
 8001100:	d0a6e343 	ldbu	r2,-25715(gp)
 8001104:	10803fcc 	andi	r2,r2,255
 8001108:	d8000415 	stw	zero,16(sp)
 800110c:	d8000315 	stw	zero,12(sp)
 8001110:	d8800215 	stw	r2,8(sp)
 8001114:	d8000115 	stw	zero,4(sp)
 8001118:	d8000015 	stw	zero,0(sp)
 800111c:	01c002c4 	movi	r7,11
 8001120:	01800844 	movi	r6,33
 8001124:	000b883a 	mov	r5,zero
 8001128:	1809883a 	mov	r4,r3
 800112c:	8001aac0 	call	8001aac <XferCtrlReq>
 8001130:	e0bffc05 	stb	r2,-16(fp)
 8001134:	e0bffc03 	ldbu	r2,-16(fp)
 8001138:	10000226 	beq	r2,zero,8001144 <HIDKProbe+0x3ac>
 800113c:	0005883a 	mov	r2,zero
 8001140:	00001206 	br	800118c <HIDKProbe+0x3f4>
 8001144:	00800044 	movi	r2,1
 8001148:	00001006 	br	800118c <HIDKProbe+0x3f4>
 800114c:	e0fff90b 	ldhu	r3,-28(fp)
 8001150:	00820074 	movhi	r2,2049
 8001154:	109e9904 	addi	r2,r2,31332
 8001158:	1885883a 	add	r2,r3,r2
 800115c:	e0fffb17 	ldw	r3,-20(fp)
 8001160:	18bf9f36 	bltu	r3,r2,8000fe0 <__alt_data_end+0xfc000fe0>
 8001164:	00000206 	br	8001170 <HIDKProbe+0x3d8>
 8001168:	0005883a 	mov	r2,zero
 800116c:	00000706 	br	800118c <HIDKProbe+0x3f4>
 8001170:	e0fff90b 	ldhu	r3,-28(fp)
 8001174:	00820074 	movhi	r2,2049
 8001178:	109e9904 	addi	r2,r2,31332
 800117c:	1885883a 	add	r2,r3,r2
 8001180:	e0fffb17 	ldw	r3,-20(fp)
 8001184:	18bf4736 	bltu	r3,r2,8000ea4 <__alt_data_end+0xfc000ea4>
 8001188:	0005883a 	mov	r2,zero
 800118c:	e037883a 	mov	sp,fp
 8001190:	dfc00117 	ldw	ra,4(sp)
 8001194:	df000017 	ldw	fp,0(sp)
 8001198:	dec00204 	addi	sp,sp,8
 800119c:	f800283a 	ret

080011a0 <HID_init>:
 80011a0:	deffff04 	addi	sp,sp,-4
 80011a4:	df000015 	stw	fp,0(sp)
 80011a8:	d839883a 	mov	fp,sp
 80011ac:	00820074 	movhi	r2,2049
 80011b0:	109e8504 	addi	r2,r2,31252
 80011b4:	00c01004 	movi	r3,64
 80011b8:	10c00345 	stb	r3,13(r2)
 80011bc:	00820074 	movhi	r2,2049
 80011c0:	109e8504 	addi	r2,r2,31252
 80011c4:	00c00404 	movi	r3,16
 80011c8:	10c00385 	stb	r3,14(r2)
 80011cc:	0001883a 	nop
 80011d0:	e037883a 	mov	sp,fp
 80011d4:	df000017 	ldw	fp,0(sp)
 80011d8:	dec00104 	addi	sp,sp,4
 80011dc:	f800283a 	ret

080011e0 <mousePoll>:
 80011e0:	defffb04 	addi	sp,sp,-20
 80011e4:	dfc00415 	stw	ra,16(sp)
 80011e8:	df000315 	stw	fp,12(sp)
 80011ec:	df000304 	addi	fp,sp,12
 80011f0:	e13fff15 	stw	r4,-4(fp)
 80011f4:	d0a6e303 	ldbu	r2,-25716(gp)
 80011f8:	10803fcc 	andi	r2,r2,255
 80011fc:	100b883a 	mov	r5,r2
 8001200:	01003804 	movi	r4,224
 8001204:	80013bc0 	call	80013bc <MAXreg_wr>
 8001208:	d0a6e303 	ldbu	r2,-25716(gp)
 800120c:	11003fcc 	andi	r4,r2,255
 8001210:	d0a6e303 	ldbu	r2,-25716(gp)
 8001214:	10c03fcc 	andi	r3,r2,255
 8001218:	00820074 	movhi	r2,2049
 800121c:	109ed904 	addi	r2,r2,31588
 8001220:	180690fa 	slli	r3,r3,3
 8001224:	10c5883a 	add	r2,r2,r3
 8001228:	10800017 	ldw	r2,0(r2)
 800122c:	10800204 	addi	r2,r2,8
 8001230:	1080008b 	ldhu	r2,2(r2)
 8001234:	10803fcc 	andi	r2,r2,255
 8001238:	d8800015 	stw	r2,0(sp)
 800123c:	e1ffff17 	ldw	r7,-4(fp)
 8001240:	01800204 	movi	r6,8
 8001244:	01400044 	movi	r5,1
 8001248:	8001ed00 	call	8001ed0 <XferInTransfer>
 800124c:	e0bffe05 	stb	r2,-8(fp)
 8001250:	e0bffe03 	ldbu	r2,-8(fp)
 8001254:	e037883a 	mov	sp,fp
 8001258:	dfc00117 	ldw	ra,4(sp)
 800125c:	df000017 	ldw	fp,0(sp)
 8001260:	dec00204 	addi	sp,sp,8
 8001264:	f800283a 	ret

08001268 <kbdPoll>:
 8001268:	defffb04 	addi	sp,sp,-20
 800126c:	dfc00415 	stw	ra,16(sp)
 8001270:	df000315 	stw	fp,12(sp)
 8001274:	df000304 	addi	fp,sp,12
 8001278:	e13fff15 	stw	r4,-4(fp)
 800127c:	d0a6e303 	ldbu	r2,-25716(gp)
 8001280:	10803fcc 	andi	r2,r2,255
 8001284:	100b883a 	mov	r5,r2
 8001288:	01003804 	movi	r4,224
 800128c:	80013bc0 	call	80013bc <MAXreg_wr>
 8001290:	d0a6e303 	ldbu	r2,-25716(gp)
 8001294:	11003fcc 	andi	r4,r2,255
 8001298:	d0a6e303 	ldbu	r2,-25716(gp)
 800129c:	10c03fcc 	andi	r3,r2,255
 80012a0:	00820074 	movhi	r2,2049
 80012a4:	109ed904 	addi	r2,r2,31588
 80012a8:	180690fa 	slli	r3,r3,3
 80012ac:	10c5883a 	add	r2,r2,r3
 80012b0:	10800017 	ldw	r2,0(r2)
 80012b4:	10800204 	addi	r2,r2,8
 80012b8:	1080008b 	ldhu	r2,2(r2)
 80012bc:	10803fcc 	andi	r2,r2,255
 80012c0:	d8800015 	stw	r2,0(sp)
 80012c4:	e1ffff17 	ldw	r7,-4(fp)
 80012c8:	01800204 	movi	r6,8
 80012cc:	01400044 	movi	r5,1
 80012d0:	8001ed00 	call	8001ed0 <XferInTransfer>
 80012d4:	e0bffe05 	stb	r2,-8(fp)
 80012d8:	e0bffe03 	ldbu	r2,-8(fp)
 80012dc:	e037883a 	mov	sp,fp
 80012e0:	dfc00117 	ldw	ra,4(sp)
 80012e4:	df000017 	ldw	fp,0(sp)
 80012e8:	dec00204 	addi	sp,sp,8
 80012ec:	f800283a 	ret

080012f0 <HIDMEventHandler>:
 80012f0:	defffb04 	addi	sp,sp,-20
 80012f4:	df000415 	stw	fp,16(sp)
 80012f8:	df000404 	addi	fp,sp,16
 80012fc:	2007883a 	mov	r3,r4
 8001300:	2805883a 	mov	r2,r5
 8001304:	e1bffe15 	stw	r6,-8(fp)
 8001308:	e1ffff15 	stw	r7,-4(fp)
 800130c:	e0fffc05 	stb	r3,-16(fp)
 8001310:	e0bffd05 	stb	r2,-12(fp)
 8001314:	0005883a 	mov	r2,zero
 8001318:	e037883a 	mov	sp,fp
 800131c:	df000017 	ldw	fp,0(sp)
 8001320:	dec00104 	addi	sp,sp,4
 8001324:	f800283a 	ret

08001328 <HIDKEventHandler>:
 8001328:	defffb04 	addi	sp,sp,-20
 800132c:	df000415 	stw	fp,16(sp)
 8001330:	df000404 	addi	fp,sp,16
 8001334:	2007883a 	mov	r3,r4
 8001338:	2805883a 	mov	r2,r5
 800133c:	e1bffe15 	stw	r6,-8(fp)
 8001340:	e1ffff15 	stw	r7,-4(fp)
 8001344:	e0fffc05 	stb	r3,-16(fp)
 8001348:	e0bffd05 	stb	r2,-12(fp)
 800134c:	0005883a 	mov	r2,zero
 8001350:	e037883a 	mov	sp,fp
 8001354:	df000017 	ldw	fp,0(sp)
 8001358:	dec00104 	addi	sp,sp,4
 800135c:	f800283a 	ret

08001360 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8001360:	defffc04 	addi	sp,sp,-16
 8001364:	df000315 	stw	fp,12(sp)
 8001368:	df000304 	addi	fp,sp,12
 800136c:	2807883a 	mov	r3,r5
 8001370:	3005883a 	mov	r2,r6
 8001374:	e13ffd05 	stb	r4,-12(fp)
 8001378:	e0fffe05 	stb	r3,-8(fp)
 800137c:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 8001380:	0001883a 	nop
 8001384:	e037883a 	mov	sp,fp
 8001388:	df000017 	ldw	fp,0(sp)
 800138c:	dec00104 	addi	sp,sp,4
 8001390:	f800283a 	ret

08001394 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8001394:	defffe04 	addi	sp,sp,-8
 8001398:	df000115 	stw	fp,4(sp)
 800139c:	df000104 	addi	fp,sp,4
 80013a0:	2005883a 	mov	r2,r4
 80013a4:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in

}
 80013a8:	0001883a 	nop
 80013ac:	e037883a 	mov	sp,fp
 80013b0:	df000017 	ldw	fp,0(sp)
 80013b4:	dec00104 	addi	sp,sp,4
 80013b8:	f800283a 	ret

080013bc <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 80013bc:	defff704 	addi	sp,sp,-36
 80013c0:	dfc00815 	stw	ra,32(sp)
 80013c4:	df000715 	stw	fp,28(sp)
 80013c8:	df000704 	addi	fp,sp,28
 80013cc:	2007883a 	mov	r3,r4
 80013d0:	2805883a 	mov	r2,r5
 80013d4:	e0fffe05 	stb	r3,-8(fp)
 80013d8:	e0bfff05 	stb	r2,-4(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE data[2];
	data[0] = reg | 0x02; //this is the same as saying reg + 2
 80013dc:	e0bffe03 	ldbu	r2,-8(fp)
 80013e0:	10800094 	ori	r2,r2,2
 80013e4:	e0bffd05 	stb	r2,-12(fp)
	data[1] = val;
 80013e8:	e0bfff03 	ldbu	r2,-4(fp)
 80013ec:	e0bffd45 	stb	r2,-11(fp)
	return_code = alt_avalon_spi_command( SPI_USB_BASE, 0, 2, data, 0, 0, 0);
 80013f0:	e0bffd04 	addi	r2,fp,-12
 80013f4:	d8000215 	stw	zero,8(sp)
 80013f8:	d8000115 	stw	zero,4(sp)
 80013fc:	d8000015 	stw	zero,0(sp)
 8001400:	100f883a 	mov	r7,r2
 8001404:	01800084 	movi	r6,2
 8001408:	000b883a 	mov	r5,zero
 800140c:	01042804 	movi	r4,4256
 8001410:	80113140 	call	8011314 <alt_avalon_spi_command>
 8001414:	e0bffc15 	stw	r2,-16(fp)
	//alt_printf( "W %x %x check 0\n", reg, val );

	if (return_code < 0)
 8001418:	e0bffc17 	ldw	r2,-16(fp)
 800141c:	1000090e 	bge	r2,zero,8001444 <MAXreg_wr+0x88>
		alt_printf( "W %x %x check 1\n", reg>>3, val );
 8001420:	e0bffe03 	ldbu	r2,-8(fp)
 8001424:	1004d0fa 	srli	r2,r2,3
 8001428:	10803fcc 	andi	r2,r2,255
 800142c:	e0ffff03 	ldbu	r3,-4(fp)
 8001430:	180d883a 	mov	r6,r3
 8001434:	100b883a 	mov	r5,r2
 8001438:	01020074 	movhi	r4,2049
 800143c:	210fdb04 	addi	r4,r4,16236
 8001440:	800fff00 	call	800fff0 <alt_printf>

}
 8001444:	0001883a 	nop
 8001448:	e037883a 	mov	sp,fp
 800144c:	dfc00117 	ldw	ra,4(sp)
 8001450:	df000017 	ldw	fp,0(sp)
 8001454:	dec00204 	addi	sp,sp,8
 8001458:	f800283a 	ret

0800145c <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 800145c:	defff604 	addi	sp,sp,-40
 8001460:	dfc00915 	stw	ra,36(sp)
 8001464:	df000815 	stw	fp,32(sp)
 8001468:	df000804 	addi	fp,sp,32
 800146c:	2007883a 	mov	r3,r4
 8001470:	2805883a 	mov	r2,r5
 8001474:	e1bfff15 	stw	r6,-4(fp)
 8001478:	e0fffd05 	stb	r3,-12(fp)
 800147c:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	int return_codes[2];
	reg |= 0x02;
 8001480:	e0bffd03 	ldbu	r2,-12(fp)
 8001484:	10800094 	ori	r2,r2,2
 8001488:	e0bffd05 	stb	r2,-12(fp)
	return_codes[0] = alt_avalon_spi_command(SPI_USB_BASE, 0, 1, &reg, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 800148c:	e0fffd04 	addi	r3,fp,-12
 8001490:	00800044 	movi	r2,1
 8001494:	d8800215 	stw	r2,8(sp)
 8001498:	d8000115 	stw	zero,4(sp)
 800149c:	d8000015 	stw	zero,0(sp)
 80014a0:	180f883a 	mov	r7,r3
 80014a4:	01800044 	movi	r6,1
 80014a8:	000b883a 	mov	r5,zero
 80014ac:	01042804 	movi	r4,4256
 80014b0:	80113140 	call	8011314 <alt_avalon_spi_command>
 80014b4:	e0bffb15 	stw	r2,-20(fp)
	return_codes[1] = alt_avalon_spi_command(SPI_USB_BASE, 0, nbytes, data, 0, 0, 0);
 80014b8:	e0bffe03 	ldbu	r2,-8(fp)
 80014bc:	d8000215 	stw	zero,8(sp)
 80014c0:	d8000115 	stw	zero,4(sp)
 80014c4:	d8000015 	stw	zero,0(sp)
 80014c8:	e1ffff17 	ldw	r7,-4(fp)
 80014cc:	100d883a 	mov	r6,r2
 80014d0:	000b883a 	mov	r5,zero
 80014d4:	01042804 	movi	r4,4256
 80014d8:	80113140 	call	8011314 <alt_avalon_spi_command>
 80014dc:	e0bffc15 	stw	r2,-16(fp)

	if (return_codes[0] < 0 || return_codes[1] < 0){
 80014e0:	e0bffb17 	ldw	r2,-20(fp)
 80014e4:	10000216 	blt	r2,zero,80014f0 <MAXbytes_wr+0x94>
 80014e8:	e0bffc17 	ldw	r2,-16(fp)
 80014ec:	1000090e 	bge	r2,zero,8001514 <MAXbytes_wr+0xb8>
		alt_printf( "W %x %x check 2\n", reg>>3, data );
 80014f0:	e0bffd03 	ldbu	r2,-12(fp)
 80014f4:	10803fcc 	andi	r2,r2,255
 80014f8:	1004d0fa 	srli	r2,r2,3
 80014fc:	10803fcc 	andi	r2,r2,255
 8001500:	e1bfff17 	ldw	r6,-4(fp)
 8001504:	100b883a 	mov	r5,r2
 8001508:	01020074 	movhi	r4,2049
 800150c:	210fe004 	addi	r4,r4,16256
 8001510:	800fff00 	call	800fff0 <alt_printf>

	}
	return (data + nbytes);
 8001514:	e0bffe03 	ldbu	r2,-8(fp)
 8001518:	e0ffff17 	ldw	r3,-4(fp)
 800151c:	1885883a 	add	r2,r3,r2

}
 8001520:	e037883a 	mov	sp,fp
 8001524:	dfc00117 	ldw	ra,4(sp)
 8001528:	df000017 	ldw	fp,0(sp)
 800152c:	dec00204 	addi	sp,sp,8
 8001530:	f800283a 	ret

08001534 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8001534:	defff804 	addi	sp,sp,-32
 8001538:	dfc00715 	stw	ra,28(sp)
 800153c:	df000615 	stw	fp,24(sp)
 8001540:	df000604 	addi	fp,sp,24
 8001544:	2005883a 	mov	r2,r4
 8001548:	e0bfff05 	stb	r2,-4(fp)

	BYTE data[1];

	//BYTE temp[2] = {reg, data};

	return_code = alt_avalon_spi_command( SPI_USB_BASE, 0, 1, &reg, 1, data, 0 );
 800154c:	e0ffff04 	addi	r3,fp,-4
 8001550:	d8000215 	stw	zero,8(sp)
 8001554:	e0bffe04 	addi	r2,fp,-8
 8001558:	d8800115 	stw	r2,4(sp)
 800155c:	00800044 	movi	r2,1
 8001560:	d8800015 	stw	r2,0(sp)
 8001564:	180f883a 	mov	r7,r3
 8001568:	01800044 	movi	r6,1
 800156c:	000b883a 	mov	r5,zero
 8001570:	01042804 	movi	r4,4256
 8001574:	80113140 	call	8011314 <alt_avalon_spi_command>
 8001578:	e0bffd15 	stw	r2,-12(fp)
	if (return_code < 0)
 800157c:	e0bffd17 	ldw	r2,-12(fp)
 8001580:	10000a0e 	bge	r2,zero,80015ac <MAXreg_rd+0x78>
		alt_printf( "flag W %x %x check 3\n", reg>>3, data );
 8001584:	e0bfff03 	ldbu	r2,-4(fp)
 8001588:	10803fcc 	andi	r2,r2,255
 800158c:	1004d0fa 	srli	r2,r2,3
 8001590:	10803fcc 	andi	r2,r2,255
 8001594:	e0fffe04 	addi	r3,fp,-8
 8001598:	180d883a 	mov	r6,r3
 800159c:	100b883a 	mov	r5,r2
 80015a0:	01020074 	movhi	r4,2049
 80015a4:	210fe504 	addi	r4,r4,16276
 80015a8:	800fff00 	call	800fff0 <alt_printf>

	return data[0];
 80015ac:	e0bffe03 	ldbu	r2,-8(fp)

}
 80015b0:	e037883a 	mov	sp,fp
 80015b4:	dfc00117 	ldw	ra,4(sp)
 80015b8:	df000017 	ldw	fp,0(sp)
 80015bc:	dec00204 	addi	sp,sp,8
 80015c0:	f800283a 	ret

080015c4 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 80015c4:	defff704 	addi	sp,sp,-36
 80015c8:	dfc00815 	stw	ra,32(sp)
 80015cc:	df000715 	stw	fp,28(sp)
 80015d0:	df000704 	addi	fp,sp,28
 80015d4:	2007883a 	mov	r3,r4
 80015d8:	2805883a 	mov	r2,r5
 80015dc:	e1bfff15 	stw	r6,-4(fp)
 80015e0:	e0fffd05 	stb	r3,-12(fp)
 80015e4:	e0bffe05 	stb	r2,-8(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	int return_code;

	return_code = alt_avalon_spi_command( SPI_USB_BASE, 0, 1, &reg, nbytes, data, 0 );
 80015e8:	e0bffe03 	ldbu	r2,-8(fp)
 80015ec:	e13ffd04 	addi	r4,fp,-12
 80015f0:	d8000215 	stw	zero,8(sp)
 80015f4:	e0ffff17 	ldw	r3,-4(fp)
 80015f8:	d8c00115 	stw	r3,4(sp)
 80015fc:	d8800015 	stw	r2,0(sp)
 8001600:	200f883a 	mov	r7,r4
 8001604:	01800044 	movi	r6,1
 8001608:	000b883a 	mov	r5,zero
 800160c:	01042804 	movi	r4,4256
 8001610:	80113140 	call	8011314 <alt_avalon_spi_command>
 8001614:	e0bffc15 	stw	r2,-16(fp)
	if (return_code < 1){
 8001618:	e0bffc17 	ldw	r2,-16(fp)
 800161c:	00800916 	blt	zero,r2,8001644 <MAXbytes_rd+0x80>
		alt_printf( "W %x %x\n check 4", reg>>3, data );
 8001620:	e0bffd03 	ldbu	r2,-12(fp)
 8001624:	10803fcc 	andi	r2,r2,255
 8001628:	1004d0fa 	srli	r2,r2,3
 800162c:	10803fcc 	andi	r2,r2,255
 8001630:	e1bfff17 	ldw	r6,-4(fp)
 8001634:	100b883a 	mov	r5,r2
 8001638:	01020074 	movhi	r4,2049
 800163c:	210feb04 	addi	r4,r4,16300
 8001640:	800fff00 	call	800fff0 <alt_printf>

	}
	return (nbytes + data);
 8001644:	e0bffe03 	ldbu	r2,-8(fp)
 8001648:	e0ffff17 	ldw	r3,-4(fp)
 800164c:	1885883a 	add	r2,r3,r2
}
 8001650:	e037883a 	mov	sp,fp
 8001654:	dfc00117 	ldw	ra,4(sp)
 8001658:	df000017 	ldw	fp,0(sp)
 800165c:	dec00204 	addi	sp,sp,8
 8001660:	f800283a 	ret

08001664 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8001664:	defffd04 	addi	sp,sp,-12
 8001668:	dfc00215 	stw	ra,8(sp)
 800166c:	df000115 	stw	fp,4(sp)
 8001670:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8001674:	0007883a 	mov	r3,zero
 8001678:	00845404 	movi	r2,4432
 800167c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 8001680:	010003f4 	movhi	r4,15
 8001684:	21109004 	addi	r4,r4,16960
 8001688:	80106700 	call	8010670 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 800168c:	00c00044 	movi	r3,1
 8001690:	00845404 	movi	r2,4432
 8001694:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 8001698:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 800169c:	01400804 	movi	r5,32
 80016a0:	01001e04 	movi	r4,120
 80016a4:	80013bc0 	call	80013bc <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 80016a8:	000b883a 	mov	r5,zero
 80016ac:	01001e04 	movi	r4,120
 80016b0:	80013bc0 	call	80013bc <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 80016b4:	00000806 	br	80016d8 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 80016b8:	e0bfff03 	ldbu	r2,-4(fp)
 80016bc:	10800044 	addi	r2,r2,1
 80016c0:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 80016c4:	e0bfff03 	ldbu	r2,-4(fp)
 80016c8:	1000031e 	bne	r2,zero,80016d8 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 80016cc:	01020074 	movhi	r4,2049
 80016d0:	210ff004 	addi	r4,r4,16320
 80016d4:	8002c980 	call	8002c98 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 80016d8:	01001a04 	movi	r4,104
 80016dc:	80015340 	call	8001534 <MAXreg_rd>
 80016e0:	10803fcc 	andi	r2,r2,255
 80016e4:	1080004c 	andi	r2,r2,1
 80016e8:	103ff326 	beq	r2,zero,80016b8 <__alt_data_end+0xfc0016b8>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 80016ec:	0001883a 	nop
 80016f0:	e037883a 	mov	sp,fp
 80016f4:	dfc00117 	ldw	ra,4(sp)
 80016f8:	df000017 	ldw	fp,0(sp)
 80016fc:	dec00204 	addi	sp,sp,8
 8001700:	f800283a 	ret

08001704 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8001704:	defffe04 	addi	sp,sp,-8
 8001708:	df000115 	stw	fp,4(sp)
 800170c:	df000104 	addi	fp,sp,4
 8001710:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8001714:	00800044 	movi	r2,1
}
 8001718:	e037883a 	mov	sp,fp
 800171c:	df000017 	ldw	fp,0(sp)
 8001720:	dec00104 	addi	sp,sp,4
 8001724:	f800283a 	ret

08001728 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 8001728:	defffd04 	addi	sp,sp,-12
 800172c:	dfc00215 	stw	ra,8(sp)
 8001730:	df000115 	stw	fp,4(sp)
 8001734:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 8001738:	01003e04 	movi	r4,248
 800173c:	80015340 	call	8001534 <MAXreg_rd>
 8001740:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 8001744:	e0ffff03 	ldbu	r3,-4(fp)
 8001748:	00bff004 	movi	r2,-64
 800174c:	1884703a 	and	r2,r3,r2
 8001750:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 8001754:	e0bfff03 	ldbu	r2,-4(fp)
 8001758:	10c01020 	cmpeqi	r3,r2,64
 800175c:	1800221e 	bne	r3,zero,80017e8 <MAX_busprobe+0xc0>
 8001760:	10c01048 	cmpgei	r3,r2,65
 8001764:	1800021e 	bne	r3,zero,8001770 <MAX_busprobe+0x48>
 8001768:	10003b26 	beq	r2,zero,8001858 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 800176c:	00004a06 	br	8001898 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 8001770:	10c02020 	cmpeqi	r3,r2,128
 8001774:	1800031e 	bne	r3,zero,8001784 <MAX_busprobe+0x5c>
 8001778:	10803020 	cmpeqi	r2,r2,192
 800177c:	1000331e 	bne	r2,zero,800184c <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001780:	00004506 	br	8001898 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8001784:	d0a00503 	ldbu	r2,-32748(gp)
 8001788:	10803fcc 	andi	r2,r2,255
 800178c:	108004e0 	cmpeqi	r2,r2,19
 8001790:	10003e1e 	bne	r2,zero,800188c <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8001794:	01003604 	movi	r4,216
 8001798:	80015340 	call	8001534 <MAXreg_rd>
 800179c:	10803fcc 	andi	r2,r2,255
 80017a0:	1080008c 	andi	r2,r2,2
 80017a4:	1000071e 	bne	r2,zero,80017c4 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80017a8:	01403244 	movi	r5,201
 80017ac:	01003604 	movi	r4,216
 80017b0:	80013bc0 	call	80013bc <MAXreg_wr>
				printf("Starting in full speed\n");
 80017b4:	01020074 	movhi	r4,2049
 80017b8:	210ff404 	addi	r4,r4,16336
 80017bc:	8002db40 	call	8002db4 <puts>
 80017c0:	00000606 	br	80017dc <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 80017c4:	014032c4 	movi	r5,203
 80017c8:	01003604 	movi	r4,216
 80017cc:	80013bc0 	call	80013bc <MAXreg_wr>
				printf("Starting in low speed\n");
 80017d0:	01020074 	movhi	r4,2049
 80017d4:	210ffa04 	addi	r4,r4,16360
 80017d8:	8002db40 	call	8002db4 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80017dc:	00800404 	movi	r2,16
 80017e0:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 80017e4:	00002906 	br	800188c <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80017e8:	d0a00503 	ldbu	r2,-32748(gp)
 80017ec:	10803fcc 	andi	r2,r2,255
 80017f0:	108004e0 	cmpeqi	r2,r2,19
 80017f4:	1000271e 	bne	r2,zero,8001894 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80017f8:	01003604 	movi	r4,216
 80017fc:	80015340 	call	8001534 <MAXreg_rd>
 8001800:	10803fcc 	andi	r2,r2,255
 8001804:	1080008c 	andi	r2,r2,2
 8001808:	1000071e 	bne	r2,zero,8001828 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 800180c:	014032c4 	movi	r5,203
 8001810:	01003604 	movi	r4,216
 8001814:	80013bc0 	call	80013bc <MAXreg_wr>
				printf("Starting in low speed\n");
 8001818:	01020074 	movhi	r4,2049
 800181c:	210ffa04 	addi	r4,r4,16360
 8001820:	8002db40 	call	8002db4 <puts>
 8001824:	00000606 	br	8001840 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001828:	01403244 	movi	r5,201
 800182c:	01003604 	movi	r4,216
 8001830:	80013bc0 	call	80013bc <MAXreg_wr>
				printf("Starting in full speed\n");
 8001834:	01020074 	movhi	r4,2049
 8001838:	210ff404 	addi	r4,r4,16336
 800183c:	8002db40 	call	8002db4 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8001840:	00800404 	movi	r2,16
 8001844:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 8001848:	00001206 	br	8001894 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 800184c:	00800104 	movi	r2,4
 8001850:	d0a00505 	stb	r2,-32748(gp)
		break;
 8001854:	00001006 	br	8001898 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 8001858:	d0a00503 	ldbu	r2,-32748(gp)
 800185c:	10803fcc 	andi	r2,r2,255
 8001860:	10803c0c 	andi	r2,r2,240
 8001864:	10000326 	beq	r2,zero,8001874 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 8001868:	00800044 	movi	r2,1
 800186c:	d0a00505 	stb	r2,-32748(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 8001870:	00000906 	br	8001898 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 8001874:	01403244 	movi	r5,201
 8001878:	01003604 	movi	r4,216
 800187c:	80013bc0 	call	80013bc <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8001880:	008000c4 	movi	r2,3
 8001884:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 8001888:	00000306 	br	8001898 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 800188c:	0001883a 	nop
 8001890:	00000106 	br	8001898 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 8001894:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001898:	0001883a 	nop
 800189c:	e037883a 	mov	sp,fp
 80018a0:	dfc00117 	ldw	ra,4(sp)
 80018a4:	df000017 	ldw	fp,0(sp)
 80018a8:	dec00204 	addi	sp,sp,8
 80018ac:	f800283a 	ret

080018b0 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 80018b0:	defffe04 	addi	sp,sp,-8
 80018b4:	dfc00115 	stw	ra,4(sp)
 80018b8:	df000015 	stw	fp,0(sp)
 80018bc:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 80018c0:	01400684 	movi	r5,26
 80018c4:	01002204 	movi	r4,136
 80018c8:	80013bc0 	call	80013bc <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 80018cc:	80016640 	call	8001664 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 80018d0:	0009883a 	mov	r4,zero
 80018d4:	80017040 	call	8001704 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 80018d8:	01402004 	movi	r5,128
 80018dc:	01002e04 	movi	r4,184
 80018e0:	80013bc0 	call	80013bc <MAXreg_wr>
	Vbus_power( ON);
 80018e4:	01000044 	movi	r4,1
 80018e8:	80017040 	call	8001704 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 80018ec:	01403444 	movi	r5,209
 80018f0:	01003604 	movi	r4,216
 80018f4:	80013bc0 	call	80013bc <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 80018f8:	01400804 	movi	r5,32
 80018fc:	01003404 	movi	r4,208
 8001900:	80013bc0 	call	80013bc <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 8001904:	01400104 	movi	r5,4
 8001908:	01003a04 	movi	r4,232
 800190c:	80013bc0 	call	80013bc <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 8001910:	80017280 	call	8001728 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 8001914:	01400804 	movi	r5,32
 8001918:	01003204 	movi	r4,200
 800191c:	80013bc0 	call	80013bc <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8001920:	01400044 	movi	r5,1
 8001924:	01002004 	movi	r4,128
 8001928:	80013bc0 	call	80013bc <MAXreg_wr>
}
 800192c:	0001883a 	nop
 8001930:	e037883a 	mov	sp,fp
 8001934:	dfc00117 	ldw	ra,4(sp)
 8001938:	df000017 	ldw	fp,0(sp)
 800193c:	dec00204 	addi	sp,sp,8
 8001940:	f800283a 	ret

08001944 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 8001944:	defffe04 	addi	sp,sp,-8
 8001948:	dfc00115 	stw	ra,4(sp)
 800194c:	df000015 	stw	fp,0(sp)
 8001950:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 8001954:	00845804 	movi	r2,4448
 8001958:	10800037 	ldwio	r2,0(r2)
 800195c:	1000041e 	bne	r2,zero,8001970 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 8001960:	01020074 	movhi	r4,2049
 8001964:	21100004 	addi	r4,r4,16384
 8001968:	8002c980 	call	8002c98 <printf>
		MaxIntHandler();
 800196c:	80019ac0 	call	80019ac <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8001970:	00800074 	movhi	r2,1
 8001974:	10881404 	addi	r2,r2,8272
 8001978:	10800037 	ldwio	r2,0(r2)
 800197c:	10800058 	cmpnei	r2,r2,1
 8001980:	1000041e 	bne	r2,zero,8001994 <MAX3421E_Task+0x50>
		printf("GPX interrupt\n\r");
 8001984:	01020074 	movhi	r4,2049
 8001988:	21100404 	addi	r4,r4,16400
 800198c:	8002c980 	call	8002c98 <printf>
		MaxGpxHandler();
 8001990:	8001a780 	call	8001a78 <MaxGpxHandler>
	}
}
 8001994:	0001883a 	nop
 8001998:	e037883a 	mov	sp,fp
 800199c:	dfc00117 	ldw	ra,4(sp)
 80019a0:	df000017 	ldw	fp,0(sp)
 80019a4:	dec00204 	addi	sp,sp,8
 80019a8:	f800283a 	ret

080019ac <MaxIntHandler>:

void MaxIntHandler(void) {
 80019ac:	defffd04 	addi	sp,sp,-12
 80019b0:	dfc00215 	stw	ra,8(sp)
 80019b4:	df000115 	stw	fp,4(sp)
 80019b8:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 80019bc:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 80019c0:	01003204 	movi	r4,200
 80019c4:	80015340 	call	8001534 <MAXreg_rd>
 80019c8:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 80019cc:	e0bfff43 	ldbu	r2,-3(fp)
 80019d0:	100b883a 	mov	r5,r2
 80019d4:	01020074 	movhi	r4,2049
 80019d8:	21100804 	addi	r4,r4,16416
 80019dc:	8002c980 	call	8002c98 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 80019e0:	e0bfff43 	ldbu	r2,-3(fp)
 80019e4:	1080100c 	andi	r2,r2,64
 80019e8:	10000326 	beq	r2,zero,80019f8 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 80019ec:	e0bfff03 	ldbu	r2,-4(fp)
 80019f0:	10801014 	ori	r2,r2,64
 80019f4:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 80019f8:	e0bfff43 	ldbu	r2,-3(fp)
 80019fc:	1080080c 	andi	r2,r2,32
 8001a00:	10000426 	beq	r2,zero,8001a14 <MaxIntHandler+0x68>
		MAX_busprobe();
 8001a04:	80017280 	call	8001728 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 8001a08:	e0bfff03 	ldbu	r2,-4(fp)
 8001a0c:	10800814 	ori	r2,r2,32
 8001a10:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 8001a14:	e0bfff43 	ldbu	r2,-3(fp)
 8001a18:	1080020c 	andi	r2,r2,8
 8001a1c:	10000326 	beq	r2,zero,8001a2c <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 8001a20:	000b883a 	mov	r5,zero
 8001a24:	01000e04 	movi	r4,56
 8001a28:	80013bc0 	call	80013bc <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 8001a2c:	e0bfff43 	ldbu	r2,-3(fp)
 8001a30:	1080004c 	andi	r2,r2,1
 8001a34:	10000626 	beq	r2,zero,8001a50 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 8001a38:	d0a00503 	ldbu	r2,-32748(gp)
 8001a3c:	10800044 	addi	r2,r2,1
 8001a40:	d0a00505 	stb	r2,-32748(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 8001a44:	e0bfff03 	ldbu	r2,-4(fp)
 8001a48:	10800054 	ori	r2,r2,1
 8001a4c:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 8001a50:	e0bfff03 	ldbu	r2,-4(fp)
 8001a54:	100b883a 	mov	r5,r2
 8001a58:	01003204 	movi	r4,200
 8001a5c:	80013bc0 	call	80013bc <MAXreg_wr>
}
 8001a60:	0001883a 	nop
 8001a64:	e037883a 	mov	sp,fp
 8001a68:	dfc00117 	ldw	ra,4(sp)
 8001a6c:	df000017 	ldw	fp,0(sp)
 8001a70:	dec00204 	addi	sp,sp,8
 8001a74:	f800283a 	ret

08001a78 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 8001a78:	defffd04 	addi	sp,sp,-12
 8001a7c:	dfc00215 	stw	ra,8(sp)
 8001a80:	df000115 	stw	fp,4(sp)
 8001a84:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 8001a88:	01002c04 	movi	r4,176
 8001a8c:	80015340 	call	8001534 <MAXreg_rd>
 8001a90:	e0bfff05 	stb	r2,-4(fp)
}
 8001a94:	0001883a 	nop
 8001a98:	e037883a 	mov	sp,fp
 8001a9c:	dfc00117 	ldw	ra,4(sp)
 8001aa0:	df000017 	ldw	fp,0(sp)
 8001aa4:	dec00204 	addi	sp,sp,8
 8001aa8:	f800283a 	ret

08001aac <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8001aac:	defff104 	addi	sp,sp,-60
 8001ab0:	dfc00e15 	stw	ra,56(sp)
 8001ab4:	df000d15 	stw	fp,52(sp)
 8001ab8:	df000d04 	addi	fp,sp,52
 8001abc:	2015883a 	mov	r10,r4
 8001ac0:	2813883a 	mov	r9,r5
 8001ac4:	3011883a 	mov	r8,r6
 8001ac8:	380d883a 	mov	r6,r7
 8001acc:	e1400217 	ldw	r5,8(fp)
 8001ad0:	e1000317 	ldw	r4,12(fp)
 8001ad4:	e0c00417 	ldw	r3,16(fp)
 8001ad8:	e0800517 	ldw	r2,20(fp)
 8001adc:	e2bff805 	stb	r10,-32(fp)
 8001ae0:	e27ff905 	stb	r9,-28(fp)
 8001ae4:	e23ffa05 	stb	r8,-24(fp)
 8001ae8:	e1bffb05 	stb	r6,-20(fp)
 8001aec:	e17ffc05 	stb	r5,-16(fp)
 8001af0:	e13ffd05 	stb	r4,-12(fp)
 8001af4:	e0fffe0d 	sth	r3,-8(fp)
 8001af8:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 8001afc:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 8001b00:	00800044 	movi	r2,1
 8001b04:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8001b08:	e0800617 	ldw	r2,24(fp)
 8001b0c:	1000011e 	bne	r2,zero,8001b14 <XferCtrlReq+0x68>
        datastage = 0;
 8001b10:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 8001b14:	e0bff803 	ldbu	r2,-32(fp)
 8001b18:	100b883a 	mov	r5,r2
 8001b1c:	01003804 	movi	r4,224
 8001b20:	80013bc0 	call	80013bc <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8001b24:	e0bffa03 	ldbu	r2,-24(fp)
 8001b28:	10803fcc 	andi	r2,r2,255
 8001b2c:	1080201c 	xori	r2,r2,128
 8001b30:	10bfe004 	addi	r2,r2,-128
 8001b34:	1000020e 	bge	r2,zero,8001b40 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 8001b38:	00800044 	movi	r2,1
 8001b3c:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8001b40:	e0bffa03 	ldbu	r2,-24(fp)
 8001b44:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 8001b48:	e0bffb03 	ldbu	r2,-20(fp)
 8001b4c:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8001b50:	e0bffc03 	ldbu	r2,-16(fp)
 8001b54:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 8001b58:	e0bffd03 	ldbu	r2,-12(fp)
 8001b5c:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 8001b60:	e0bffe0b 	ldhu	r2,-8(fp)
 8001b64:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 8001b68:	e0bfff0b 	ldhu	r2,-4(fp)
 8001b6c:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8001b70:	e0bff584 	addi	r2,fp,-42
 8001b74:	100d883a 	mov	r6,r2
 8001b78:	01400204 	movi	r5,8
 8001b7c:	01000804 	movi	r4,32
 8001b80:	800145c0 	call	800145c <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8001b84:	e0bff903 	ldbu	r2,-28(fp)
 8001b88:	100b883a 	mov	r5,r2
 8001b8c:	01000404 	movi	r4,16
 8001b90:	8001d540 	call	8001d54 <XferDispatchPkt>
 8001b94:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8001b98:	e0bff543 	ldbu	r2,-43(fp)
 8001b9c:	10000226 	beq	r2,zero,8001ba8 <XferCtrlReq+0xfc>
        return( rcode );
 8001ba0:	e0bff543 	ldbu	r2,-43(fp)
 8001ba4:	00000f06 	br	8001be4 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8001ba8:	e0bff503 	ldbu	r2,-44(fp)
 8001bac:	1085883a 	add	r2,r2,r2
 8001bb0:	1087883a 	add	r3,r2,r2
 8001bb4:	d0a00304 	addi	r2,gp,-32756
 8001bb8:	1885883a 	add	r2,r3,r2
 8001bbc:	10800017 	ldw	r2,0(r2)
 8001bc0:	e13ff803 	ldbu	r4,-32(fp)
 8001bc4:	e17ff903 	ldbu	r5,-28(fp)
 8001bc8:	e1bfff0b 	ldhu	r6,-4(fp)
 8001bcc:	e0fff417 	ldw	r3,-48(fp)
 8001bd0:	d8c00015 	stw	r3,0(sp)
 8001bd4:	e1c00617 	ldw	r7,24(fp)
 8001bd8:	103ee83a 	callr	r2
 8001bdc:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 8001be0:	e0bff543 	ldbu	r2,-43(fp)
}
 8001be4:	e037883a 	mov	sp,fp
 8001be8:	dfc00117 	ldw	ra,4(sp)
 8001bec:	df000017 	ldw	fp,0(sp)
 8001bf0:	dec00204 	addi	sp,sp,8
 8001bf4:	f800283a 	ret

08001bf8 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001bf8:	defff804 	addi	sp,sp,-32
 8001bfc:	dfc00715 	stw	ra,28(sp)
 8001c00:	df000615 	stw	fp,24(sp)
 8001c04:	df000604 	addi	fp,sp,24
 8001c08:	2807883a 	mov	r3,r5
 8001c0c:	3005883a 	mov	r2,r6
 8001c10:	e1ffff15 	stw	r7,-4(fp)
 8001c14:	e13ffc05 	stb	r4,-16(fp)
 8001c18:	e0fffd05 	stb	r3,-12(fp)
 8001c1c:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8001c20:	e0800217 	ldw	r2,8(fp)
 8001c24:	10002826 	beq	r2,zero,8001cc8 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001c28:	e0fffc03 	ldbu	r3,-16(fp)
 8001c2c:	00820074 	movhi	r2,2049
 8001c30:	109ed904 	addi	r2,r2,31588
 8001c34:	180690fa 	slli	r3,r3,3
 8001c38:	10c5883a 	add	r2,r2,r3
 8001c3c:	10c00017 	ldw	r3,0(r2)
 8001c40:	e0bffd03 	ldbu	r2,-12(fp)
 8001c44:	100490fa 	slli	r2,r2,3
 8001c48:	1885883a 	add	r2,r3,r2
 8001c4c:	00c00804 	movi	r3,32
 8001c50:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 8001c54:	e13ffc03 	ldbu	r4,-16(fp)
 8001c58:	e17ffd03 	ldbu	r5,-12(fp)
 8001c5c:	e1bffe0b 	ldhu	r6,-8(fp)
 8001c60:	e0fffc03 	ldbu	r3,-16(fp)
 8001c64:	00820074 	movhi	r2,2049
 8001c68:	109ed904 	addi	r2,r2,31588
 8001c6c:	180690fa 	slli	r3,r3,3
 8001c70:	10c5883a 	add	r2,r2,r3
 8001c74:	10c00017 	ldw	r3,0(r2)
 8001c78:	e0bffd03 	ldbu	r2,-12(fp)
 8001c7c:	100490fa 	slli	r2,r2,3
 8001c80:	1885883a 	add	r2,r3,r2
 8001c84:	1080008b 	ldhu	r2,2(r2)
 8001c88:	10803fcc 	andi	r2,r2,255
 8001c8c:	d8800015 	stw	r2,0(sp)
 8001c90:	e1ffff17 	ldw	r7,-4(fp)
 8001c94:	8001ed00 	call	8001ed0 <XferInTransfer>
 8001c98:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 8001c9c:	e0bffb03 	ldbu	r2,-20(fp)
 8001ca0:	10000226 	beq	r2,zero,8001cac <XferCtrlData+0xb4>
        return( rcode );
 8001ca4:	e0bffb03 	ldbu	r2,-20(fp)
 8001ca8:	00000806 	br	8001ccc <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001cac:	e0bffd03 	ldbu	r2,-12(fp)
 8001cb0:	100b883a 	mov	r5,r2
 8001cb4:	01002804 	movi	r4,160
 8001cb8:	8001d540 	call	8001d54 <XferDispatchPkt>
 8001cbc:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 8001cc0:	e0bffb03 	ldbu	r2,-20(fp)
 8001cc4:	00000106 	br	8001ccc <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 8001cc8:	00bfffc4 	movi	r2,-1
    }
}
 8001ccc:	e037883a 	mov	sp,fp
 8001cd0:	dfc00117 	ldw	ra,4(sp)
 8001cd4:	df000017 	ldw	fp,0(sp)
 8001cd8:	dec00204 	addi	sp,sp,8
 8001cdc:	f800283a 	ret

08001ce0 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001ce0:	defff904 	addi	sp,sp,-28
 8001ce4:	dfc00615 	stw	ra,24(sp)
 8001ce8:	df000515 	stw	fp,20(sp)
 8001cec:	df000504 	addi	fp,sp,20
 8001cf0:	2807883a 	mov	r3,r5
 8001cf4:	3005883a 	mov	r2,r6
 8001cf8:	e1ffff15 	stw	r7,-4(fp)
 8001cfc:	e13ffc05 	stb	r4,-16(fp)
 8001d00:	e0fffd05 	stb	r3,-12(fp)
 8001d04:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 8001d08:	e0800217 	ldw	r2,8(fp)
 8001d0c:	10000626 	beq	r2,zero,8001d28 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001d10:	e0bffd03 	ldbu	r2,-12(fp)
 8001d14:	100b883a 	mov	r5,r2
 8001d18:	01002804 	movi	r4,160
 8001d1c:	8001d540 	call	8001d54 <XferDispatchPkt>
 8001d20:	e0bffb05 	stb	r2,-20(fp)
 8001d24:	00000506 	br	8001d3c <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8001d28:	e0bffd03 	ldbu	r2,-12(fp)
 8001d2c:	100b883a 	mov	r5,r2
 8001d30:	01002004 	movi	r4,128
 8001d34:	8001d540 	call	8001d54 <XferDispatchPkt>
 8001d38:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 8001d3c:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001d40:	e037883a 	mov	sp,fp
 8001d44:	dfc00117 	ldw	ra,4(sp)
 8001d48:	df000017 	ldw	fp,0(sp)
 8001d4c:	dec00204 	addi	sp,sp,8
 8001d50:	f800283a 	ret

08001d54 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8001d54:	defff904 	addi	sp,sp,-28
 8001d58:	dfc00615 	stw	ra,24(sp)
 8001d5c:	df000515 	stw	fp,20(sp)
 8001d60:	df000504 	addi	fp,sp,20
 8001d64:	2007883a 	mov	r3,r4
 8001d68:	2805883a 	mov	r2,r5
 8001d6c:	e0fffe05 	stb	r3,-8(fp)
 8001d70:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001d74:	d0a6f417 	ldw	r2,-25648(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8001d78:	0140fa04 	movi	r5,1000
 8001d7c:	1009883a 	mov	r4,r2
 8001d80:	8002af80 	call	8002af8 <__mulsi3>
 8001d84:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001d88:	d0a6f317 	ldw	r2,-25652(gp)
 8001d8c:	100b883a 	mov	r5,r2
 8001d90:	1809883a 	mov	r4,r3
 8001d94:	8002a3c0 	call	8002a3c <__udivsi3>
 8001d98:	1084e204 	addi	r2,r2,5000
 8001d9c:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8001da0:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 8001da4:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8001da8:	e0fffe03 	ldbu	r3,-8(fp)
 8001dac:	e0bfff03 	ldbu	r2,-4(fp)
 8001db0:	1884b03a 	or	r2,r3,r2
 8001db4:	10803fcc 	andi	r2,r2,255
 8001db8:	100b883a 	mov	r5,r2
 8001dbc:	01003c04 	movi	r4,240
 8001dc0:	80013bc0 	call	80013bc <MAXreg_wr>
        rcode = 0xff;
 8001dc4:	00bfffc4 	movi	r2,-1
 8001dc8:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001dcc:	00000d06 	br	8001e04 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 8001dd0:	01003204 	movi	r4,200
 8001dd4:	80015340 	call	8001534 <MAXreg_rd>
 8001dd8:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8001ddc:	e0bffd03 	ldbu	r2,-12(fp)
 8001de0:	10803fcc 	andi	r2,r2,255
 8001de4:	1080201c 	xori	r2,r2,128
 8001de8:	10bfe004 	addi	r2,r2,-128
 8001dec:	1000050e 	bge	r2,zero,8001e04 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8001df0:	01402004 	movi	r5,128
 8001df4:	01003204 	movi	r4,200
 8001df8:	80013bc0 	call	80013bc <MAXreg_wr>
                rcode = 0x00;
 8001dfc:	e03ffb05 	stb	zero,-20(fp)
                break;
 8001e00:	00000c06 	br	8001e34 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001e04:	d0a6f417 	ldw	r2,-25648(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001e08:	0140fa04 	movi	r5,1000
 8001e0c:	1009883a 	mov	r4,r2
 8001e10:	8002af80 	call	8002af8 <__mulsi3>
 8001e14:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001e18:	d0a6f317 	ldw	r2,-25652(gp)
 8001e1c:	100b883a 	mov	r5,r2
 8001e20:	1809883a 	mov	r4,r3
 8001e24:	8002a3c0 	call	8002a3c <__udivsi3>
 8001e28:	1007883a 	mov	r3,r2
 8001e2c:	e0bffc17 	ldw	r2,-16(fp)
 8001e30:	18bfe736 	bltu	r3,r2,8001dd0 <__alt_data_end+0xfc001dd0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8001e34:	e0bffb03 	ldbu	r2,-20(fp)
 8001e38:	10000226 	beq	r2,zero,8001e44 <XferDispatchPkt+0xf0>
            return( rcode );
 8001e3c:	e0bffb03 	ldbu	r2,-20(fp)
 8001e40:	00001e06 	br	8001ebc <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8001e44:	01003e04 	movi	r4,248
 8001e48:	80015340 	call	8001534 <MAXreg_rd>
 8001e4c:	108003cc 	andi	r2,r2,15
 8001e50:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 8001e54:	e0bffb03 	ldbu	r2,-20(fp)
 8001e58:	10800118 	cmpnei	r2,r2,4
 8001e5c:	1000071e 	bne	r2,zero,8001e7c <XferDispatchPkt+0x128>
            nak_count++;
 8001e60:	e0bffb83 	ldbu	r2,-18(fp)
 8001e64:	10800044 	addi	r2,r2,1
 8001e68:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8001e6c:	e0bffb83 	ldbu	r2,-18(fp)
 8001e70:	10803218 	cmpnei	r2,r2,200
 8001e74:	10000b1e 	bne	r2,zero,8001ea4 <XferDispatchPkt+0x150>
                break;
 8001e78:	00000f06 	br	8001eb8 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8001e7c:	e0bffb03 	ldbu	r2,-20(fp)
 8001e80:	10800398 	cmpnei	r2,r2,14
 8001e84:	1000091e 	bne	r2,zero,8001eac <XferDispatchPkt+0x158>
            retry_count++;
 8001e88:	e0bffb43 	ldbu	r2,-19(fp)
 8001e8c:	10800044 	addi	r2,r2,1
 8001e90:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8001e94:	e0bffb47 	ldb	r2,-19(fp)
 8001e98:	108000d8 	cmpnei	r2,r2,3
 8001e9c:	10000526 	beq	r2,zero,8001eb4 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 8001ea0:	00000106 	br	8001ea8 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 8001ea4:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8001ea8:	003fbf06 	br	8001da8 <__alt_data_end+0xfc001da8>
            }
            else {
                continue;
            }
        }
        else break;
 8001eac:	0001883a 	nop
 8001eb0:	00000106 	br	8001eb8 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8001eb4:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8001eb8:	e0bffb03 	ldbu	r2,-20(fp)
}
 8001ebc:	e037883a 	mov	sp,fp
 8001ec0:	dfc00117 	ldw	ra,4(sp)
 8001ec4:	df000017 	ldw	fp,0(sp)
 8001ec8:	dec00204 	addi	sp,sp,8
 8001ecc:	f800283a 	ret

08001ed0 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8001ed0:	defff804 	addi	sp,sp,-32
 8001ed4:	dfc00715 	stw	ra,28(sp)
 8001ed8:	df000615 	stw	fp,24(sp)
 8001edc:	df000604 	addi	fp,sp,24
 8001ee0:	2011883a 	mov	r8,r4
 8001ee4:	2809883a 	mov	r4,r5
 8001ee8:	3007883a 	mov	r3,r6
 8001eec:	e1fffe15 	stw	r7,-8(fp)
 8001ef0:	e0800217 	ldw	r2,8(fp)
 8001ef4:	e23ffb05 	stb	r8,-20(fp)
 8001ef8:	e13ffc05 	stb	r4,-16(fp)
 8001efc:	e0fffd0d 	sth	r3,-12(fp)
 8001f00:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8001f04:	e03ffa0d 	sth	zero,-24(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8001f08:	e0fffb03 	ldbu	r3,-20(fp)
 8001f0c:	00820074 	movhi	r2,2049
 8001f10:	109ed904 	addi	r2,r2,31588
 8001f14:	180690fa 	slli	r3,r3,3
 8001f18:	10c5883a 	add	r2,r2,r3
 8001f1c:	10c00017 	ldw	r3,0(r2)
 8001f20:	e0bffc03 	ldbu	r2,-16(fp)
 8001f24:	100490fa 	slli	r2,r2,3
 8001f28:	1885883a 	add	r2,r3,r2
 8001f2c:	10800183 	ldbu	r2,6(r2)
 8001f30:	10803fcc 	andi	r2,r2,255
 8001f34:	100b883a 	mov	r5,r2
 8001f38:	01003a04 	movi	r4,232
 8001f3c:	80013bc0 	call	80013bc <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8001f40:	e0bffc03 	ldbu	r2,-16(fp)
 8001f44:	100b883a 	mov	r5,r2
 8001f48:	0009883a 	mov	r4,zero
 8001f4c:	8001d540 	call	8001d54 <XferDispatchPkt>
 8001f50:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 8001f54:	e0bffa83 	ldbu	r2,-22(fp)
 8001f58:	10000226 	beq	r2,zero,8001f64 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8001f5c:	e0bffa83 	ldbu	r2,-22(fp)
 8001f60:	00003a06 	br	800204c <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8001f64:	01003204 	movi	r4,200
 8001f68:	80015340 	call	8001534 <MAXreg_rd>
 8001f6c:	10803fcc 	andi	r2,r2,255
 8001f70:	1080010c 	andi	r2,r2,4
 8001f74:	1000021e 	bne	r2,zero,8001f80 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8001f78:	00bffc04 	movi	r2,-16
 8001f7c:	00003306 	br	800204c <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8001f80:	01000c04 	movi	r4,48
 8001f84:	80015340 	call	8001534 <MAXreg_rd>
 8001f88:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8001f8c:	e0bffac3 	ldbu	r2,-21(fp)
 8001f90:	e1bffe17 	ldw	r6,-8(fp)
 8001f94:	100b883a 	mov	r5,r2
 8001f98:	01000204 	movi	r4,8
 8001f9c:	80015c40 	call	80015c4 <MAXbytes_rd>
 8001fa0:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8001fa4:	01400104 	movi	r5,4
 8001fa8:	01003204 	movi	r4,200
 8001fac:	80013bc0 	call	80013bc <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8001fb0:	e0fffac3 	ldbu	r3,-21(fp)
 8001fb4:	e0bffa0b 	ldhu	r2,-24(fp)
 8001fb8:	1885883a 	add	r2,r3,r2
 8001fbc:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8001fc0:	e0fffac3 	ldbu	r3,-21(fp)
 8001fc4:	e0bfff03 	ldbu	r2,-4(fp)
 8001fc8:	18800336 	bltu	r3,r2,8001fd8 <XferInTransfer+0x108>
 8001fcc:	e0fffa0b 	ldhu	r3,-24(fp)
 8001fd0:	e0bffd0b 	ldhu	r2,-12(fp)
 8001fd4:	18bfda36 	bltu	r3,r2,8001f40 <__alt_data_end+0xfc001f40>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8001fd8:	01003e04 	movi	r4,248
 8001fdc:	80015340 	call	8001534 <MAXreg_rd>
 8001fe0:	10803fcc 	andi	r2,r2,255
 8001fe4:	1080040c 	andi	r2,r2,16
 8001fe8:	10000c26 	beq	r2,zero,800201c <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001fec:	e0fffb03 	ldbu	r3,-20(fp)
 8001ff0:	00820074 	movhi	r2,2049
 8001ff4:	109ed904 	addi	r2,r2,31588
 8001ff8:	180690fa 	slli	r3,r3,3
 8001ffc:	10c5883a 	add	r2,r2,r3
 8002000:	10c00017 	ldw	r3,0(r2)
 8002004:	e0bffc03 	ldbu	r2,-16(fp)
 8002008:	100490fa 	slli	r2,r2,3
 800200c:	1885883a 	add	r2,r3,r2
 8002010:	00c00804 	movi	r3,32
 8002014:	10c00185 	stb	r3,6(r2)
 8002018:	00000b06 	br	8002048 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 800201c:	e0fffb03 	ldbu	r3,-20(fp)
 8002020:	00820074 	movhi	r2,2049
 8002024:	109ed904 	addi	r2,r2,31588
 8002028:	180690fa 	slli	r3,r3,3
 800202c:	10c5883a 	add	r2,r2,r3
 8002030:	10c00017 	ldw	r3,0(r2)
 8002034:	e0bffc03 	ldbu	r2,-16(fp)
 8002038:	100490fa 	slli	r2,r2,3
 800203c:	1885883a 	add	r2,r3,r2
 8002040:	00c00404 	movi	r3,16
 8002044:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8002048:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 800204c:	e037883a 	mov	sp,fp
 8002050:	dfc00117 	ldw	ra,4(sp)
 8002054:	df000017 	ldw	fp,0(sp)
 8002058:	dec00204 	addi	sp,sp,8
 800205c:	f800283a 	ret

08002060 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8002060:	defffe04 	addi	sp,sp,-8
 8002064:	df000115 	stw	fp,4(sp)
 8002068:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 800206c:	e03fff05 	stb	zero,-4(fp)
 8002070:	00001006 	br	80020b4 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 8002074:	e0ffff03 	ldbu	r3,-4(fp)
 8002078:	00820074 	movhi	r2,2049
 800207c:	109ed904 	addi	r2,r2,31588
 8002080:	180690fa 	slli	r3,r3,3
 8002084:	10c5883a 	add	r2,r2,r3
 8002088:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 800208c:	e0ffff03 	ldbu	r3,-4(fp)
 8002090:	00820074 	movhi	r2,2049
 8002094:	109ed904 	addi	r2,r2,31588
 8002098:	180690fa 	slli	r3,r3,3
 800209c:	10c5883a 	add	r2,r2,r3
 80020a0:	10800104 	addi	r2,r2,4
 80020a4:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 80020a8:	e0bfff03 	ldbu	r2,-4(fp)
 80020ac:	10800044 	addi	r2,r2,1
 80020b0:	e0bfff05 	stb	r2,-4(fp)
 80020b4:	e0bfff03 	ldbu	r2,-4(fp)
 80020b8:	10800270 	cmpltui	r2,r2,9
 80020bc:	103fed1e 	bne	r2,zero,8002074 <__alt_data_end+0xfc002074>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 80020c0:	00820074 	movhi	r2,2049
 80020c4:	109ed904 	addi	r2,r2,31588
 80020c8:	d0e6e404 	addi	r3,gp,-25712
 80020cc:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 80020d0:	d026e48d 	sth	zero,-25710(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 80020d4:	00801004 	movi	r2,64
 80020d8:	d0a6e545 	stb	r2,-25707(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 80020dc:	00800404 	movi	r2,16
 80020e0:	d0a6e585 	stb	r2,-25706(gp)
}
 80020e4:	0001883a 	nop
 80020e8:	e037883a 	mov	sp,fp
 80020ec:	df000017 	ldw	fp,0(sp)
 80020f0:	dec00104 	addi	sp,sp,4
 80020f4:	f800283a 	ret

080020f8 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 80020f8:	deffb204 	addi	sp,sp,-312
 80020fc:	dfc04d15 	stw	ra,308(sp)
 8002100:	df004c15 	stw	fp,304(sp)
 8002104:	dc004b15 	stw	r16,300(sp)
 8002108:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 800210c:	d0a00503 	ldbu	r2,-32748(gp)
 8002110:	10803fcc 	andi	r2,r2,255
 8002114:	10803c0c 	andi	r2,r2,240
 8002118:	10c00820 	cmpeqi	r3,r2,32
 800211c:	1801121e 	bne	r3,zero,8002568 <USB_Task+0x470>
 8002120:	10c00848 	cmpgei	r3,r2,33
 8002124:	1800041e 	bne	r3,zero,8002138 <USB_Task+0x40>
 8002128:	10000a26 	beq	r2,zero,8002154 <USB_Task+0x5c>
 800212c:	10800420 	cmpeqi	r2,r2,16
 8002130:	10001b1e 	bne	r2,zero,80021a0 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8002134:	00017a06 	br	8002720 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8002138:	10c01020 	cmpeqi	r3,r2,64
 800213c:	18016f1e 	bne	r3,zero,80026fc <USB_Task+0x604>
 8002140:	10c03fe0 	cmpeqi	r3,r2,255
 8002144:	18016f1e 	bne	r3,zero,8002704 <USB_Task+0x60c>
 8002148:	10800c20 	cmpeqi	r2,r2,48
 800214c:	1001441e 	bne	r2,zero,8002660 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8002150:	00017306 	br	8002720 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 8002154:	d0a00503 	ldbu	r2,-32748(gp)
 8002158:	10803fcc 	andi	r2,r2,255
 800215c:	10c000e0 	cmpeqi	r3,r2,3
 8002160:	1800091e 	bne	r3,zero,8002188 <USB_Task+0x90>
 8002164:	10c00120 	cmpeqi	r3,r2,4
 8002168:	18000b1e 	bne	r3,zero,8002198 <USB_Task+0xa0>
 800216c:	10800060 	cmpeqi	r2,r2,1
 8002170:	1000011e 	bne	r2,zero,8002178 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8002174:	00016a06 	br	8002720 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 8002178:	80020600 	call	8002060 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 800217c:	008000c4 	movi	r2,3
 8002180:	d0a00505 	stb	r2,-32748(gp)
                    break;
 8002184:	00000506 	br	800219c <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8002188:	01400104 	movi	r5,4
 800218c:	01003a04 	movi	r4,232
 8002190:	80013bc0 	call	80013bc <MAXreg_wr>
                    break;
 8002194:	00000106 	br	800219c <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 8002198:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 800219c:	00016006 	br	8002720 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 80021a0:	d0a00503 	ldbu	r2,-32748(gp)
 80021a4:	10803fcc 	andi	r2,r2,255
 80021a8:	10bffc04 	addi	r2,r2,-16
 80021ac:	10c001a8 	cmpgeui	r3,r2,6
 80021b0:	1801561e 	bne	r3,zero,800270c <USB_Task+0x614>
 80021b4:	100690ba 	slli	r3,r2,2
 80021b8:	00820034 	movhi	r2,2048
 80021bc:	10887304 	addi	r2,r2,8652
 80021c0:	1885883a 	add	r2,r3,r2
 80021c4:	10800017 	ldw	r2,0(r2)
 80021c8:	1000683a 	jmp	r2
 80021cc:	080021e4 	muli	zero,at,135
 80021d0:	0800221c 	xori	zero,at,136
 80021d4:	08002258 	cmpnei	zero,at,137
 80021d8:	0800227c 	xorhi	zero,at,137
 80021dc:	080022bc 	xorhi	zero,at,138
 80021e0:	080022d0 	cmplti	zero,at,139
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80021e4:	d0a6f417 	ldw	r2,-25648(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 80021e8:	0140fa04 	movi	r5,1000
 80021ec:	1009883a 	mov	r4,r2
 80021f0:	8002af80 	call	8002af8 <__mulsi3>
 80021f4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80021f8:	d0a6f317 	ldw	r2,-25652(gp)
 80021fc:	100b883a 	mov	r5,r2
 8002200:	1809883a 	mov	r4,r3
 8002204:	8002a3c0 	call	8002a3c <__udivsi3>
 8002208:	10803204 	addi	r2,r2,200
 800220c:	d0a6e715 	stw	r2,-25700(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8002210:	00800444 	movi	r2,17
 8002214:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_STATE_ATTACHED )
 8002218:	0000d206 	br	8002564 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800221c:	d0a6f417 	ldw	r2,-25648(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8002220:	0140fa04 	movi	r5,1000
 8002224:	1009883a 	mov	r4,r2
 8002228:	8002af80 	call	8002af8 <__mulsi3>
 800222c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8002230:	d0a6f317 	ldw	r2,-25652(gp)
 8002234:	100b883a 	mov	r5,r2
 8002238:	1809883a 	mov	r4,r3
 800223c:	8002a3c0 	call	8002a3c <__udivsi3>
 8002240:	1007883a 	mov	r3,r2
 8002244:	d0a6e717 	ldw	r2,-25700(gp)
 8002248:	10c0c32e 	bgeu	r2,r3,8002558 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800224c:	00800484 	movi	r2,18
 8002250:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002254:	0000c006 	br	8002558 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8002258:	01400044 	movi	r5,1
 800225c:	01003204 	movi	r4,200
 8002260:	80013bc0 	call	80013bc <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 8002264:	01400044 	movi	r5,1
 8002268:	01003a04 	movi	r4,232
 800226c:	80013bc0 	call	80013bc <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8002270:	008004c4 	movi	r2,19
 8002274:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8002278:	0000ba06 	br	8002564 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 800227c:	01003a04 	movi	r4,232
 8002280:	80015340 	call	8001534 <MAXreg_rd>
 8002284:	10803fcc 	andi	r2,r2,255
 8002288:	1080004c 	andi	r2,r2,1
 800228c:	1000b41e 	bne	r2,zero,8002560 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8002290:	01003604 	movi	r4,216
 8002294:	80015340 	call	8001534 <MAXreg_rd>
 8002298:	10800214 	ori	r2,r2,8
 800229c:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 80022a0:	e0bfb943 	ldbu	r2,-283(fp)
 80022a4:	100b883a 	mov	r5,r2
 80022a8:	01003604 	movi	r4,216
 80022ac:	80013bc0 	call	80013bc <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 80022b0:	00800504 	movi	r2,20
 80022b4:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 80022b8:	0000a906 	br	8002560 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 80022bc:	01003204 	movi	r4,200
 80022c0:	80015340 	call	8001534 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 80022c4:	00800544 	movi	r2,21
 80022c8:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 80022cc:	0000a506 	br	8002564 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 80022d0:	00820074 	movhi	r2,2049
 80022d4:	109ed904 	addi	r2,r2,31588
 80022d8:	10800017 	ldw	r2,0(r2)
 80022dc:	00c00204 	movi	r3,8
 80022e0:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 80022e4:	e0bfba04 	addi	r2,fp,-280
 80022e8:	d8800415 	stw	r2,16(sp)
 80022ec:	00800204 	movi	r2,8
 80022f0:	d8800315 	stw	r2,12(sp)
 80022f4:	d8000215 	stw	zero,8(sp)
 80022f8:	00800044 	movi	r2,1
 80022fc:	d8800115 	stw	r2,4(sp)
 8002300:	d8000015 	stw	zero,0(sp)
 8002304:	01c00184 	movi	r7,6
 8002308:	01802004 	movi	r6,128
 800230c:	000b883a 	mov	r5,zero
 8002310:	0009883a 	mov	r4,zero
 8002314:	8001aac0 	call	8001aac <XferCtrlReq>
 8002318:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 800231c:	e0bfb983 	ldbu	r2,-282(fp)
 8002320:	1000861e 	bne	r2,zero,800253c <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8002324:	00820074 	movhi	r2,2049
 8002328:	109ed904 	addi	r2,r2,31588
 800232c:	10800017 	ldw	r2,0(r2)
 8002330:	e0ffbbc3 	ldbu	r3,-273(fp)
 8002334:	18c03fcc 	andi	r3,r3,255
 8002338:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 800233c:	e0bfba03 	ldbu	r2,-280(fp)
 8002340:	10803fcc 	andi	r2,r2,255
 8002344:	e0ffba04 	addi	r3,fp,-280
 8002348:	d8c00415 	stw	r3,16(sp)
 800234c:	d8800315 	stw	r2,12(sp)
 8002350:	d8000215 	stw	zero,8(sp)
 8002354:	00800044 	movi	r2,1
 8002358:	d8800115 	stw	r2,4(sp)
 800235c:	d8000015 	stw	zero,0(sp)
 8002360:	01c00184 	movi	r7,6
 8002364:	01802004 	movi	r6,128
 8002368:	000b883a 	mov	r5,zero
 800236c:	0009883a 	mov	r4,zero
 8002370:	8001aac0 	call	8001aac <XferCtrlReq>
 8002374:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 8002378:	e0bfbd83 	ldbu	r2,-266(fp)
 800237c:	10803fcc 	andi	r2,r2,255
 8002380:	10003426 	beq	r2,zero,8002454 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002384:	e0bfbd83 	ldbu	r2,-266(fp)
 8002388:	10803fcc 	andi	r2,r2,255
 800238c:	e0ffbe84 	addi	r3,fp,-262
 8002390:	d8c00415 	stw	r3,16(sp)
 8002394:	00c00084 	movi	r3,2
 8002398:	d8c00315 	stw	r3,12(sp)
 800239c:	00c10244 	movi	r3,1033
 80023a0:	d8c00215 	stw	r3,8(sp)
 80023a4:	00c000c4 	movi	r3,3
 80023a8:	d8c00115 	stw	r3,4(sp)
 80023ac:	d8800015 	stw	r2,0(sp)
 80023b0:	01c00184 	movi	r7,6
 80023b4:	01802004 	movi	r6,128
 80023b8:	000b883a 	mov	r5,zero
 80023bc:	0009883a 	mov	r4,zero
 80023c0:	8001aac0 	call	8001aac <XferCtrlReq>
 80023c4:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 80023c8:	e0bfbd83 	ldbu	r2,-266(fp)
 80023cc:	10803fcc 	andi	r2,r2,255
 80023d0:	e0ffbe83 	ldbu	r3,-262(fp)
 80023d4:	18c03fcc 	andi	r3,r3,255
 80023d8:	e13fbe84 	addi	r4,fp,-262
 80023dc:	d9000415 	stw	r4,16(sp)
 80023e0:	d8c00315 	stw	r3,12(sp)
 80023e4:	00c10244 	movi	r3,1033
 80023e8:	d8c00215 	stw	r3,8(sp)
 80023ec:	00c000c4 	movi	r3,3
 80023f0:	d8c00115 	stw	r3,4(sp)
 80023f4:	d8800015 	stw	r2,0(sp)
 80023f8:	01c00184 	movi	r7,6
 80023fc:	01802004 	movi	r6,128
 8002400:	000b883a 	mov	r5,zero
 8002404:	0009883a 	mov	r4,zero
 8002408:	8001aac0 	call	8001aac <XferCtrlReq>
 800240c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002410:	e0bfbd83 	ldbu	r2,-266(fp)
 8002414:	14003fcc 	andi	r16,r2,255
 8002418:	e0bfbe83 	ldbu	r2,-262(fp)
 800241c:	10803fcc 	andi	r2,r2,255
 8002420:	1004d07a 	srli	r2,r2,1
 8002424:	10bfffc4 	addi	r2,r2,-1
 8002428:	10c03fcc 	andi	r3,r2,255
 800242c:	e0bfbe84 	addi	r2,fp,-262
 8002430:	10800084 	addi	r2,r2,2
 8002434:	180b883a 	mov	r5,r3
 8002438:	1009883a 	mov	r4,r2
 800243c:	80028c00 	call	80028c0 <ConvUTF8ToStr>
 8002440:	100d883a 	mov	r6,r2
 8002444:	800b883a 	mov	r5,r16
 8002448:	01020074 	movhi	r4,2049
 800244c:	21100b04 	addi	r4,r4,16428
 8002450:	8002c980 	call	8002c98 <printf>
                		}
                		if (buf.iProduct != 0)
 8002454:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002458:	10803fcc 	andi	r2,r2,255
 800245c:	10003426 	beq	r2,zero,8002530 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002460:	e0bfbdc3 	ldbu	r2,-265(fp)
 8002464:	10803fcc 	andi	r2,r2,255
 8002468:	e0ffbe84 	addi	r3,fp,-262
 800246c:	d8c00415 	stw	r3,16(sp)
 8002470:	00c00084 	movi	r3,2
 8002474:	d8c00315 	stw	r3,12(sp)
 8002478:	00c10244 	movi	r3,1033
 800247c:	d8c00215 	stw	r3,8(sp)
 8002480:	00c000c4 	movi	r3,3
 8002484:	d8c00115 	stw	r3,4(sp)
 8002488:	d8800015 	stw	r2,0(sp)
 800248c:	01c00184 	movi	r7,6
 8002490:	01802004 	movi	r6,128
 8002494:	000b883a 	mov	r5,zero
 8002498:	0009883a 	mov	r4,zero
 800249c:	8001aac0 	call	8001aac <XferCtrlReq>
 80024a0:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80024a4:	e0bfbdc3 	ldbu	r2,-265(fp)
 80024a8:	10803fcc 	andi	r2,r2,255
 80024ac:	e0ffbe83 	ldbu	r3,-262(fp)
 80024b0:	18c03fcc 	andi	r3,r3,255
 80024b4:	e13fbe84 	addi	r4,fp,-262
 80024b8:	d9000415 	stw	r4,16(sp)
 80024bc:	d8c00315 	stw	r3,12(sp)
 80024c0:	00c10244 	movi	r3,1033
 80024c4:	d8c00215 	stw	r3,8(sp)
 80024c8:	00c000c4 	movi	r3,3
 80024cc:	d8c00115 	stw	r3,4(sp)
 80024d0:	d8800015 	stw	r2,0(sp)
 80024d4:	01c00184 	movi	r7,6
 80024d8:	01802004 	movi	r6,128
 80024dc:	000b883a 	mov	r5,zero
 80024e0:	0009883a 	mov	r4,zero
 80024e4:	8001aac0 	call	8001aac <XferCtrlReq>
 80024e8:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 80024ec:	e0bfbdc3 	ldbu	r2,-265(fp)
 80024f0:	14003fcc 	andi	r16,r2,255
 80024f4:	e0bfbe83 	ldbu	r2,-262(fp)
 80024f8:	10803fcc 	andi	r2,r2,255
 80024fc:	1004d07a 	srli	r2,r2,1
 8002500:	10bfffc4 	addi	r2,r2,-1
 8002504:	10c03fcc 	andi	r3,r2,255
 8002508:	e0bfbe84 	addi	r2,fp,-262
 800250c:	10800084 	addi	r2,r2,2
 8002510:	180b883a 	mov	r5,r3
 8002514:	1009883a 	mov	r4,r2
 8002518:	80028c00 	call	80028c0 <ConvUTF8ToStr>
 800251c:	100d883a 	mov	r6,r2
 8002520:	800b883a 	mov	r5,r16
 8002524:	01020074 	movhi	r4,2049
 8002528:	21101104 	addi	r4,r4,16452
 800252c:	8002c980 	call	8002c98 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 8002530:	00800804 	movi	r2,32
 8002534:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002538:	00000a06 	br	8002564 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 800253c:	e0bfb983 	ldbu	r2,-282(fp)
 8002540:	d0a6e845 	stb	r2,-25695(gp)
                        last_usb_task_state = usb_task_state;
 8002544:	d0a00503 	ldbu	r2,-32748(gp)
 8002548:	d0a6e605 	stb	r2,-25704(gp)
                        usb_task_state = USB_STATE_ERROR;
 800254c:	00bfffc4 	movi	r2,-1
 8002550:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002554:	00000306 	br	8002564 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002558:	0001883a 	nop
 800255c:	00006b06 	br	800270c <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002560:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8002564:	00006906 	br	800270c <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002568:	00800044 	movi	r2,1
 800256c:	e0bfb905 	stb	r2,-284(fp)
 8002570:	00002d06 	br	8002628 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 8002574:	e0ffb903 	ldbu	r3,-284(fp)
 8002578:	00820074 	movhi	r2,2049
 800257c:	109ed904 	addi	r2,r2,31588
 8002580:	180690fa 	slli	r3,r3,3
 8002584:	10c5883a 	add	r2,r2,r3
 8002588:	10800017 	ldw	r2,0(r2)
 800258c:	1000231e 	bne	r2,zero,800261c <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 8002590:	e13fb903 	ldbu	r4,-284(fp)
 8002594:	00820074 	movhi	r2,2049
 8002598:	109ed904 	addi	r2,r2,31588
 800259c:	10c00017 	ldw	r3,0(r2)
 80025a0:	00820074 	movhi	r2,2049
 80025a4:	109ed904 	addi	r2,r2,31588
 80025a8:	200890fa 	slli	r4,r4,3
 80025ac:	1105883a 	add	r2,r2,r4
 80025b0:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 80025b4:	e0bfb903 	ldbu	r2,-284(fp)
 80025b8:	d8000415 	stw	zero,16(sp)
 80025bc:	d8000315 	stw	zero,12(sp)
 80025c0:	d8000215 	stw	zero,8(sp)
 80025c4:	d8000115 	stw	zero,4(sp)
 80025c8:	d8800015 	stw	r2,0(sp)
 80025cc:	01c00144 	movi	r7,5
 80025d0:	000d883a 	mov	r6,zero
 80025d4:	000b883a 	mov	r5,zero
 80025d8:	0009883a 	mov	r4,zero
 80025dc:	8001aac0 	call	8001aac <XferCtrlReq>
 80025e0:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 80025e4:	e0bfb983 	ldbu	r2,-282(fp)
 80025e8:	1000051e 	bne	r2,zero,8002600 <USB_Task+0x508>
                        tmp_addr = i;
 80025ec:	e0bfb903 	ldbu	r2,-284(fp)
 80025f0:	d0a6e805 	stb	r2,-25696(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 80025f4:	00800c04 	movi	r2,48
 80025f8:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 80025fc:	00000d06 	br	8002634 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 8002600:	e0bfb983 	ldbu	r2,-282(fp)
 8002604:	d0a6e845 	stb	r2,-25695(gp)
                        last_usb_task_state = usb_task_state;
 8002608:	d0a00503 	ldbu	r2,-32748(gp)
 800260c:	d0a6e605 	stb	r2,-25704(gp)
                        usb_task_state = USB_STATE_ERROR;
 8002610:	00bfffc4 	movi	r2,-1
 8002614:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002618:	00000606 	br	8002634 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 800261c:	e0bfb903 	ldbu	r2,-284(fp)
 8002620:	10800044 	addi	r2,r2,1
 8002624:	e0bfb905 	stb	r2,-284(fp)
 8002628:	e0bfb903 	ldbu	r2,-284(fp)
 800262c:	10800230 	cmpltui	r2,r2,8
 8002630:	103fd01e 	bne	r2,zero,8002574 <__alt_data_end+0xfc002574>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8002634:	d0a00503 	ldbu	r2,-32748(gp)
 8002638:	10803fcc 	andi	r2,r2,255
 800263c:	10800818 	cmpnei	r2,r2,32
 8002640:	1000341e 	bne	r2,zero,8002714 <USB_Task+0x61c>
                usb_error = 0xfe;
 8002644:	00bfff84 	movi	r2,-2
 8002648:	d0a6e845 	stb	r2,-25695(gp)
                last_usb_task_state = usb_task_state;
 800264c:	d0a00503 	ldbu	r2,-32748(gp)
 8002650:	d0a6e605 	stb	r2,-25704(gp)
                usb_task_state = USB_STATE_ERROR;
 8002654:	00bfffc4 	movi	r2,-1
 8002658:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 800265c:	00002d06 	br	8002714 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002660:	e03fb905 	stb	zero,-284(fp)
 8002664:	00001706 	br	80026c4 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 8002668:	e0bfb903 	ldbu	r2,-284(fp)
 800266c:	04020074 	movhi	r16,2049
 8002670:	8410d704 	addi	r16,r16,17244
 8002674:	01400304 	movi	r5,12
 8002678:	1009883a 	mov	r4,r2
 800267c:	8002af80 	call	8002af8 <__mulsi3>
 8002680:	8085883a 	add	r2,r16,r2
 8002684:	10800017 	ldw	r2,0(r2)
 8002688:	d0e6e803 	ldbu	r3,-25696(gp)
 800268c:	18c03fcc 	andi	r3,r3,255
 8002690:	000b883a 	mov	r5,zero
 8002694:	1809883a 	mov	r4,r3
 8002698:	103ee83a 	callr	r2
 800269c:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 80026a0:	e0bfb983 	ldbu	r2,-282(fp)
 80026a4:	10800058 	cmpnei	r2,r2,1
 80026a8:	1000031e 	bne	r2,zero,80026b8 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 80026ac:	00801004 	movi	r2,64
 80026b0:	d0a00505 	stb	r2,-32748(gp)
                    break;
 80026b4:	00000606 	br	80026d0 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80026b8:	e0bfb903 	ldbu	r2,-284(fp)
 80026bc:	10800044 	addi	r2,r2,1
 80026c0:	e0bfb905 	stb	r2,-284(fp)
 80026c4:	e0bfb903 	ldbu	r2,-284(fp)
 80026c8:	10800130 	cmpltui	r2,r2,4
 80026cc:	103fe61e 	bne	r2,zero,8002668 <__alt_data_end+0xfc002668>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 80026d0:	d0a00503 	ldbu	r2,-32748(gp)
 80026d4:	10803fcc 	andi	r2,r2,255
 80026d8:	10800c18 	cmpnei	r2,r2,48
 80026dc:	10000f1e 	bne	r2,zero,800271c <USB_Task+0x624>
                usb_error = 0xfd;
 80026e0:	00bfff44 	movi	r2,-3
 80026e4:	d0a6e845 	stb	r2,-25695(gp)
                last_usb_task_state = usb_task_state;
 80026e8:	d0a00503 	ldbu	r2,-32748(gp)
 80026ec:	d0a6e605 	stb	r2,-25704(gp)
                usb_task_state = USB_STATE_ERROR;
 80026f0:	00bfffc4 	movi	r2,-1
 80026f4:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 80026f8:	00000806 	br	800271c <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 80026fc:	0001883a 	nop
 8002700:	00000706 	br	8002720 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 8002704:	0001883a 	nop
 8002708:	00000506 	br	8002720 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 800270c:	0001883a 	nop
 8002710:	00000306 	br	8002720 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 8002714:	0001883a 	nop
 8002718:	00000106 	br	8002720 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 800271c:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 8002720:	0001883a 	nop
 8002724:	e6ffff04 	addi	sp,fp,-4
 8002728:	dfc00217 	ldw	ra,8(sp)
 800272c:	df000117 	ldw	fp,4(sp)
 8002730:	dc000017 	ldw	r16,0(sp)
 8002734:	dec00304 	addi	sp,sp,12
 8002738:	f800283a 	ret

0800273c <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 800273c:	defffd04 	addi	sp,sp,-12
 8002740:	df000215 	stw	fp,8(sp)
 8002744:	df000204 	addi	fp,sp,8
 8002748:	2005883a 	mov	r2,r4
 800274c:	e17fff15 	stw	r5,-4(fp)
 8002750:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 8002754:	0005883a 	mov	r2,zero
}
 8002758:	e037883a 	mov	sp,fp
 800275c:	df000017 	ldw	fp,0(sp)
 8002760:	dec00104 	addi	sp,sp,4
 8002764:	f800283a 	ret

08002768 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002768:	defffb04 	addi	sp,sp,-20
 800276c:	df000415 	stw	fp,16(sp)
 8002770:	df000404 	addi	fp,sp,16
 8002774:	2007883a 	mov	r3,r4
 8002778:	2805883a 	mov	r2,r5
 800277c:	e1bffe15 	stw	r6,-8(fp)
 8002780:	e1ffff15 	stw	r7,-4(fp)
 8002784:	e0fffc05 	stb	r3,-16(fp)
 8002788:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 800278c:	0005883a 	mov	r2,zero

}
 8002790:	e037883a 	mov	sp,fp
 8002794:	df000017 	ldw	fp,0(sp)
 8002798:	dec00104 	addi	sp,sp,4
 800279c:	f800283a 	ret

080027a0 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 80027a0:	defffd04 	addi	sp,sp,-12
 80027a4:	df000215 	stw	fp,8(sp)
 80027a8:	df000204 	addi	fp,sp,8
 80027ac:	2005883a 	mov	r2,r4
 80027b0:	e17fff15 	stw	r5,-4(fp)
 80027b4:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 80027b8:	0005883a 	mov	r2,zero

}
 80027bc:	e037883a 	mov	sp,fp
 80027c0:	df000017 	ldw	fp,0(sp)
 80027c4:	dec00104 	addi	sp,sp,4
 80027c8:	f800283a 	ret

080027cc <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80027cc:	defffb04 	addi	sp,sp,-20
 80027d0:	df000415 	stw	fp,16(sp)
 80027d4:	df000404 	addi	fp,sp,16
 80027d8:	2007883a 	mov	r3,r4
 80027dc:	2805883a 	mov	r2,r5
 80027e0:	e1bffe15 	stw	r6,-8(fp)
 80027e4:	e1ffff15 	stw	r7,-4(fp)
 80027e8:	e0fffc05 	stb	r3,-16(fp)
 80027ec:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 80027f0:	0005883a 	mov	r2,zero
}
 80027f4:	e037883a 	mov	sp,fp
 80027f8:	df000017 	ldw	fp,0(sp)
 80027fc:	dec00104 	addi	sp,sp,4
 8002800:	f800283a 	ret

08002804 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8002804:	defffd04 	addi	sp,sp,-12
 8002808:	df000215 	stw	fp,8(sp)
 800280c:	df000204 	addi	fp,sp,8
 8002810:	2005883a 	mov	r2,r4
 8002814:	e17fff15 	stw	r5,-4(fp)
 8002818:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 800281c:	0005883a 	mov	r2,zero
}
 8002820:	e037883a 	mov	sp,fp
 8002824:	df000017 	ldw	fp,0(sp)
 8002828:	dec00104 	addi	sp,sp,4
 800282c:	f800283a 	ret

08002830 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002830:	defffb04 	addi	sp,sp,-20
 8002834:	df000415 	stw	fp,16(sp)
 8002838:	df000404 	addi	fp,sp,16
 800283c:	2007883a 	mov	r3,r4
 8002840:	2805883a 	mov	r2,r5
 8002844:	e1bffe15 	stw	r6,-8(fp)
 8002848:	e1ffff15 	stw	r7,-4(fp)
 800284c:	e0fffc05 	stb	r3,-16(fp)
 8002850:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 8002854:	0005883a 	mov	r2,zero
}
 8002858:	e037883a 	mov	sp,fp
 800285c:	df000017 	ldw	fp,0(sp)
 8002860:	dec00104 	addi	sp,sp,4
 8002864:	f800283a 	ret

08002868 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 8002868:	deffff04 	addi	sp,sp,-4
 800286c:	df000015 	stw	fp,0(sp)
 8002870:	d839883a 	mov	fp,sp
    return( usb_task_state );
 8002874:	d0a00503 	ldbu	r2,-32748(gp)
}
 8002878:	e037883a 	mov	sp,fp
 800287c:	df000017 	ldw	fp,0(sp)
 8002880:	dec00104 	addi	sp,sp,4
 8002884:	f800283a 	ret

08002888 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 8002888:	defffe04 	addi	sp,sp,-8
 800288c:	df000115 	stw	fp,4(sp)
 8002890:	df000104 	addi	fp,sp,4
 8002894:	2005883a 	mov	r2,r4
 8002898:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 800289c:	e0bfff03 	ldbu	r2,-4(fp)
 80028a0:	100690fa 	slli	r3,r2,3
 80028a4:	00820074 	movhi	r2,2049
 80028a8:	109ed904 	addi	r2,r2,31588
 80028ac:	1885883a 	add	r2,r3,r2
}
 80028b0:	e037883a 	mov	sp,fp
 80028b4:	df000017 	ldw	fp,0(sp)
 80028b8:	dec00104 	addi	sp,sp,4
 80028bc:	f800283a 	ret

080028c0 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 80028c0:	defffc04 	addi	sp,sp,-16
 80028c4:	df000315 	stw	fp,12(sp)
 80028c8:	df000304 	addi	fp,sp,12
 80028cc:	e13ffe15 	stw	r4,-8(fp)
 80028d0:	2805883a 	mov	r2,r5
 80028d4:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 80028d8:	e03ffd05 	stb	zero,-12(fp)
 80028dc:	00000d06 	br	8002914 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 80028e0:	e0bffd03 	ldbu	r2,-12(fp)
 80028e4:	e0fffe17 	ldw	r3,-8(fp)
 80028e8:	1887883a 	add	r3,r3,r2
 80028ec:	e0bffd03 	ldbu	r2,-12(fp)
 80028f0:	1085883a 	add	r2,r2,r2
 80028f4:	1009883a 	mov	r4,r2
 80028f8:	e0bffe17 	ldw	r2,-8(fp)
 80028fc:	1105883a 	add	r2,r2,r4
 8002900:	10800003 	ldbu	r2,0(r2)
 8002904:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 8002908:	e0bffd03 	ldbu	r2,-12(fp)
 800290c:	10800044 	addi	r2,r2,1
 8002910:	e0bffd05 	stb	r2,-12(fp)
 8002914:	e0fffd03 	ldbu	r3,-12(fp)
 8002918:	e0bfff03 	ldbu	r2,-4(fp)
 800291c:	18bff036 	bltu	r3,r2,80028e0 <__alt_data_end+0xfc0028e0>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 8002920:	e0bfff03 	ldbu	r2,-4(fp)
 8002924:	e0fffe17 	ldw	r3,-8(fp)
 8002928:	1885883a 	add	r2,r3,r2
 800292c:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8002930:	e0bffe17 	ldw	r2,-8(fp)
}
 8002934:	e037883a 	mov	sp,fp
 8002938:	df000017 	ldw	fp,0(sp)
 800293c:	dec00104 	addi	sp,sp,4
 8002940:	f800283a 	ret

08002944 <__divsi3>:
 8002944:	20001b16 	blt	r4,zero,80029b4 <__divsi3+0x70>
 8002948:	000f883a 	mov	r7,zero
 800294c:	28001616 	blt	r5,zero,80029a8 <__divsi3+0x64>
 8002950:	200d883a 	mov	r6,r4
 8002954:	29001a2e 	bgeu	r5,r4,80029c0 <__divsi3+0x7c>
 8002958:	00800804 	movi	r2,32
 800295c:	00c00044 	movi	r3,1
 8002960:	00000106 	br	8002968 <__divsi3+0x24>
 8002964:	10000d26 	beq	r2,zero,800299c <__divsi3+0x58>
 8002968:	294b883a 	add	r5,r5,r5
 800296c:	10bfffc4 	addi	r2,r2,-1
 8002970:	18c7883a 	add	r3,r3,r3
 8002974:	293ffb36 	bltu	r5,r4,8002964 <__alt_data_end+0xfc002964>
 8002978:	0005883a 	mov	r2,zero
 800297c:	18000726 	beq	r3,zero,800299c <__divsi3+0x58>
 8002980:	0005883a 	mov	r2,zero
 8002984:	31400236 	bltu	r6,r5,8002990 <__divsi3+0x4c>
 8002988:	314dc83a 	sub	r6,r6,r5
 800298c:	10c4b03a 	or	r2,r2,r3
 8002990:	1806d07a 	srli	r3,r3,1
 8002994:	280ad07a 	srli	r5,r5,1
 8002998:	183ffa1e 	bne	r3,zero,8002984 <__alt_data_end+0xfc002984>
 800299c:	38000126 	beq	r7,zero,80029a4 <__divsi3+0x60>
 80029a0:	0085c83a 	sub	r2,zero,r2
 80029a4:	f800283a 	ret
 80029a8:	014bc83a 	sub	r5,zero,r5
 80029ac:	39c0005c 	xori	r7,r7,1
 80029b0:	003fe706 	br	8002950 <__alt_data_end+0xfc002950>
 80029b4:	0109c83a 	sub	r4,zero,r4
 80029b8:	01c00044 	movi	r7,1
 80029bc:	003fe306 	br	800294c <__alt_data_end+0xfc00294c>
 80029c0:	00c00044 	movi	r3,1
 80029c4:	003fee06 	br	8002980 <__alt_data_end+0xfc002980>

080029c8 <__modsi3>:
 80029c8:	20001716 	blt	r4,zero,8002a28 <__modsi3+0x60>
 80029cc:	000f883a 	mov	r7,zero
 80029d0:	2005883a 	mov	r2,r4
 80029d4:	28001216 	blt	r5,zero,8002a20 <__modsi3+0x58>
 80029d8:	2900162e 	bgeu	r5,r4,8002a34 <__modsi3+0x6c>
 80029dc:	01800804 	movi	r6,32
 80029e0:	00c00044 	movi	r3,1
 80029e4:	00000106 	br	80029ec <__modsi3+0x24>
 80029e8:	30000a26 	beq	r6,zero,8002a14 <__modsi3+0x4c>
 80029ec:	294b883a 	add	r5,r5,r5
 80029f0:	31bfffc4 	addi	r6,r6,-1
 80029f4:	18c7883a 	add	r3,r3,r3
 80029f8:	293ffb36 	bltu	r5,r4,80029e8 <__alt_data_end+0xfc0029e8>
 80029fc:	18000526 	beq	r3,zero,8002a14 <__modsi3+0x4c>
 8002a00:	1806d07a 	srli	r3,r3,1
 8002a04:	11400136 	bltu	r2,r5,8002a0c <__modsi3+0x44>
 8002a08:	1145c83a 	sub	r2,r2,r5
 8002a0c:	280ad07a 	srli	r5,r5,1
 8002a10:	183ffb1e 	bne	r3,zero,8002a00 <__alt_data_end+0xfc002a00>
 8002a14:	38000126 	beq	r7,zero,8002a1c <__modsi3+0x54>
 8002a18:	0085c83a 	sub	r2,zero,r2
 8002a1c:	f800283a 	ret
 8002a20:	014bc83a 	sub	r5,zero,r5
 8002a24:	003fec06 	br	80029d8 <__alt_data_end+0xfc0029d8>
 8002a28:	0109c83a 	sub	r4,zero,r4
 8002a2c:	01c00044 	movi	r7,1
 8002a30:	003fe706 	br	80029d0 <__alt_data_end+0xfc0029d0>
 8002a34:	00c00044 	movi	r3,1
 8002a38:	003ff106 	br	8002a00 <__alt_data_end+0xfc002a00>

08002a3c <__udivsi3>:
 8002a3c:	200d883a 	mov	r6,r4
 8002a40:	2900152e 	bgeu	r5,r4,8002a98 <__udivsi3+0x5c>
 8002a44:	28001416 	blt	r5,zero,8002a98 <__udivsi3+0x5c>
 8002a48:	00800804 	movi	r2,32
 8002a4c:	00c00044 	movi	r3,1
 8002a50:	00000206 	br	8002a5c <__udivsi3+0x20>
 8002a54:	10000e26 	beq	r2,zero,8002a90 <__udivsi3+0x54>
 8002a58:	28000516 	blt	r5,zero,8002a70 <__udivsi3+0x34>
 8002a5c:	294b883a 	add	r5,r5,r5
 8002a60:	10bfffc4 	addi	r2,r2,-1
 8002a64:	18c7883a 	add	r3,r3,r3
 8002a68:	293ffa36 	bltu	r5,r4,8002a54 <__alt_data_end+0xfc002a54>
 8002a6c:	18000826 	beq	r3,zero,8002a90 <__udivsi3+0x54>
 8002a70:	0005883a 	mov	r2,zero
 8002a74:	31400236 	bltu	r6,r5,8002a80 <__udivsi3+0x44>
 8002a78:	314dc83a 	sub	r6,r6,r5
 8002a7c:	10c4b03a 	or	r2,r2,r3
 8002a80:	1806d07a 	srli	r3,r3,1
 8002a84:	280ad07a 	srli	r5,r5,1
 8002a88:	183ffa1e 	bne	r3,zero,8002a74 <__alt_data_end+0xfc002a74>
 8002a8c:	f800283a 	ret
 8002a90:	0005883a 	mov	r2,zero
 8002a94:	f800283a 	ret
 8002a98:	00c00044 	movi	r3,1
 8002a9c:	003ff406 	br	8002a70 <__alt_data_end+0xfc002a70>

08002aa0 <__umodsi3>:
 8002aa0:	2005883a 	mov	r2,r4
 8002aa4:	2900122e 	bgeu	r5,r4,8002af0 <__umodsi3+0x50>
 8002aa8:	28001116 	blt	r5,zero,8002af0 <__umodsi3+0x50>
 8002aac:	01800804 	movi	r6,32
 8002ab0:	00c00044 	movi	r3,1
 8002ab4:	00000206 	br	8002ac0 <__umodsi3+0x20>
 8002ab8:	30000c26 	beq	r6,zero,8002aec <__umodsi3+0x4c>
 8002abc:	28000516 	blt	r5,zero,8002ad4 <__umodsi3+0x34>
 8002ac0:	294b883a 	add	r5,r5,r5
 8002ac4:	31bfffc4 	addi	r6,r6,-1
 8002ac8:	18c7883a 	add	r3,r3,r3
 8002acc:	293ffa36 	bltu	r5,r4,8002ab8 <__alt_data_end+0xfc002ab8>
 8002ad0:	18000626 	beq	r3,zero,8002aec <__umodsi3+0x4c>
 8002ad4:	1806d07a 	srli	r3,r3,1
 8002ad8:	11400136 	bltu	r2,r5,8002ae0 <__umodsi3+0x40>
 8002adc:	1145c83a 	sub	r2,r2,r5
 8002ae0:	280ad07a 	srli	r5,r5,1
 8002ae4:	183ffb1e 	bne	r3,zero,8002ad4 <__alt_data_end+0xfc002ad4>
 8002ae8:	f800283a 	ret
 8002aec:	f800283a 	ret
 8002af0:	00c00044 	movi	r3,1
 8002af4:	003ff706 	br	8002ad4 <__alt_data_end+0xfc002ad4>

08002af8 <__mulsi3>:
 8002af8:	0005883a 	mov	r2,zero
 8002afc:	20000726 	beq	r4,zero,8002b1c <__mulsi3+0x24>
 8002b00:	20c0004c 	andi	r3,r4,1
 8002b04:	2008d07a 	srli	r4,r4,1
 8002b08:	18000126 	beq	r3,zero,8002b10 <__mulsi3+0x18>
 8002b0c:	1145883a 	add	r2,r2,r5
 8002b10:	294b883a 	add	r5,r5,r5
 8002b14:	203ffa1e 	bne	r4,zero,8002b00 <__alt_data_end+0xfc002b00>
 8002b18:	f800283a 	ret
 8002b1c:	f800283a 	ret

08002b20 <memcpy>:
 8002b20:	defffd04 	addi	sp,sp,-12
 8002b24:	dfc00215 	stw	ra,8(sp)
 8002b28:	dc400115 	stw	r17,4(sp)
 8002b2c:	dc000015 	stw	r16,0(sp)
 8002b30:	00c003c4 	movi	r3,15
 8002b34:	2005883a 	mov	r2,r4
 8002b38:	1980452e 	bgeu	r3,r6,8002c50 <memcpy+0x130>
 8002b3c:	2906b03a 	or	r3,r5,r4
 8002b40:	18c000cc 	andi	r3,r3,3
 8002b44:	1800441e 	bne	r3,zero,8002c58 <memcpy+0x138>
 8002b48:	347ffc04 	addi	r17,r6,-16
 8002b4c:	8822d13a 	srli	r17,r17,4
 8002b50:	28c00104 	addi	r3,r5,4
 8002b54:	23400104 	addi	r13,r4,4
 8002b58:	8820913a 	slli	r16,r17,4
 8002b5c:	2b000204 	addi	r12,r5,8
 8002b60:	22c00204 	addi	r11,r4,8
 8002b64:	84000504 	addi	r16,r16,20
 8002b68:	2a800304 	addi	r10,r5,12
 8002b6c:	22400304 	addi	r9,r4,12
 8002b70:	2c21883a 	add	r16,r5,r16
 8002b74:	2811883a 	mov	r8,r5
 8002b78:	200f883a 	mov	r7,r4
 8002b7c:	41000017 	ldw	r4,0(r8)
 8002b80:	1fc00017 	ldw	ra,0(r3)
 8002b84:	63c00017 	ldw	r15,0(r12)
 8002b88:	39000015 	stw	r4,0(r7)
 8002b8c:	53800017 	ldw	r14,0(r10)
 8002b90:	6fc00015 	stw	ra,0(r13)
 8002b94:	5bc00015 	stw	r15,0(r11)
 8002b98:	4b800015 	stw	r14,0(r9)
 8002b9c:	18c00404 	addi	r3,r3,16
 8002ba0:	39c00404 	addi	r7,r7,16
 8002ba4:	42000404 	addi	r8,r8,16
 8002ba8:	6b400404 	addi	r13,r13,16
 8002bac:	63000404 	addi	r12,r12,16
 8002bb0:	5ac00404 	addi	r11,r11,16
 8002bb4:	52800404 	addi	r10,r10,16
 8002bb8:	4a400404 	addi	r9,r9,16
 8002bbc:	1c3fef1e 	bne	r3,r16,8002b7c <__alt_data_end+0xfc002b7c>
 8002bc0:	89c00044 	addi	r7,r17,1
 8002bc4:	380e913a 	slli	r7,r7,4
 8002bc8:	310003cc 	andi	r4,r6,15
 8002bcc:	02c000c4 	movi	r11,3
 8002bd0:	11c7883a 	add	r3,r2,r7
 8002bd4:	29cb883a 	add	r5,r5,r7
 8002bd8:	5900212e 	bgeu	r11,r4,8002c60 <memcpy+0x140>
 8002bdc:	1813883a 	mov	r9,r3
 8002be0:	2811883a 	mov	r8,r5
 8002be4:	200f883a 	mov	r7,r4
 8002be8:	42800017 	ldw	r10,0(r8)
 8002bec:	4a400104 	addi	r9,r9,4
 8002bf0:	39ffff04 	addi	r7,r7,-4
 8002bf4:	4abfff15 	stw	r10,-4(r9)
 8002bf8:	42000104 	addi	r8,r8,4
 8002bfc:	59fffa36 	bltu	r11,r7,8002be8 <__alt_data_end+0xfc002be8>
 8002c00:	213fff04 	addi	r4,r4,-4
 8002c04:	2008d0ba 	srli	r4,r4,2
 8002c08:	318000cc 	andi	r6,r6,3
 8002c0c:	21000044 	addi	r4,r4,1
 8002c10:	2109883a 	add	r4,r4,r4
 8002c14:	2109883a 	add	r4,r4,r4
 8002c18:	1907883a 	add	r3,r3,r4
 8002c1c:	290b883a 	add	r5,r5,r4
 8002c20:	30000626 	beq	r6,zero,8002c3c <memcpy+0x11c>
 8002c24:	198d883a 	add	r6,r3,r6
 8002c28:	29c00003 	ldbu	r7,0(r5)
 8002c2c:	18c00044 	addi	r3,r3,1
 8002c30:	29400044 	addi	r5,r5,1
 8002c34:	19ffffc5 	stb	r7,-1(r3)
 8002c38:	19bffb1e 	bne	r3,r6,8002c28 <__alt_data_end+0xfc002c28>
 8002c3c:	dfc00217 	ldw	ra,8(sp)
 8002c40:	dc400117 	ldw	r17,4(sp)
 8002c44:	dc000017 	ldw	r16,0(sp)
 8002c48:	dec00304 	addi	sp,sp,12
 8002c4c:	f800283a 	ret
 8002c50:	2007883a 	mov	r3,r4
 8002c54:	003ff206 	br	8002c20 <__alt_data_end+0xfc002c20>
 8002c58:	2007883a 	mov	r3,r4
 8002c5c:	003ff106 	br	8002c24 <__alt_data_end+0xfc002c24>
 8002c60:	200d883a 	mov	r6,r4
 8002c64:	003fee06 	br	8002c20 <__alt_data_end+0xfc002c20>

08002c68 <_printf_r>:
 8002c68:	defffd04 	addi	sp,sp,-12
 8002c6c:	2805883a 	mov	r2,r5
 8002c70:	dfc00015 	stw	ra,0(sp)
 8002c74:	d9800115 	stw	r6,4(sp)
 8002c78:	d9c00215 	stw	r7,8(sp)
 8002c7c:	21400217 	ldw	r5,8(r4)
 8002c80:	d9c00104 	addi	r7,sp,4
 8002c84:	100d883a 	mov	r6,r2
 8002c88:	8002e600 	call	8002e60 <___vfprintf_internal_r>
 8002c8c:	dfc00017 	ldw	ra,0(sp)
 8002c90:	dec00304 	addi	sp,sp,12
 8002c94:	f800283a 	ret

08002c98 <printf>:
 8002c98:	defffc04 	addi	sp,sp,-16
 8002c9c:	dfc00015 	stw	ra,0(sp)
 8002ca0:	d9400115 	stw	r5,4(sp)
 8002ca4:	d9800215 	stw	r6,8(sp)
 8002ca8:	d9c00315 	stw	r7,12(sp)
 8002cac:	00820074 	movhi	r2,2049
 8002cb0:	10979504 	addi	r2,r2,24148
 8002cb4:	10800017 	ldw	r2,0(r2)
 8002cb8:	200b883a 	mov	r5,r4
 8002cbc:	d9800104 	addi	r6,sp,4
 8002cc0:	11000217 	ldw	r4,8(r2)
 8002cc4:	800513c0 	call	800513c <__vfprintf_internal>
 8002cc8:	dfc00017 	ldw	ra,0(sp)
 8002ccc:	dec00404 	addi	sp,sp,16
 8002cd0:	f800283a 	ret

08002cd4 <_putchar_r>:
 8002cd4:	21800217 	ldw	r6,8(r4)
 8002cd8:	8009bb81 	jmpi	8009bb8 <_putc_r>

08002cdc <putchar>:
 8002cdc:	00820074 	movhi	r2,2049
 8002ce0:	10979504 	addi	r2,r2,24148
 8002ce4:	200b883a 	mov	r5,r4
 8002ce8:	11000017 	ldw	r4,0(r2)
 8002cec:	21800217 	ldw	r6,8(r4)
 8002cf0:	8009bb81 	jmpi	8009bb8 <_putc_r>

08002cf4 <_puts_r>:
 8002cf4:	defff604 	addi	sp,sp,-40
 8002cf8:	dc000715 	stw	r16,28(sp)
 8002cfc:	2021883a 	mov	r16,r4
 8002d00:	2809883a 	mov	r4,r5
 8002d04:	dc400815 	stw	r17,32(sp)
 8002d08:	dfc00915 	stw	ra,36(sp)
 8002d0c:	2823883a 	mov	r17,r5
 8002d10:	8002dc80 	call	8002dc8 <strlen>
 8002d14:	10c00044 	addi	r3,r2,1
 8002d18:	d8800115 	stw	r2,4(sp)
 8002d1c:	00820074 	movhi	r2,2049
 8002d20:	10901704 	addi	r2,r2,16476
 8002d24:	d8800215 	stw	r2,8(sp)
 8002d28:	00800044 	movi	r2,1
 8002d2c:	d8800315 	stw	r2,12(sp)
 8002d30:	00800084 	movi	r2,2
 8002d34:	dc400015 	stw	r17,0(sp)
 8002d38:	d8c00615 	stw	r3,24(sp)
 8002d3c:	dec00415 	stw	sp,16(sp)
 8002d40:	d8800515 	stw	r2,20(sp)
 8002d44:	80000226 	beq	r16,zero,8002d50 <_puts_r+0x5c>
 8002d48:	80800e17 	ldw	r2,56(r16)
 8002d4c:	10001426 	beq	r2,zero,8002da0 <_puts_r+0xac>
 8002d50:	81400217 	ldw	r5,8(r16)
 8002d54:	2880030b 	ldhu	r2,12(r5)
 8002d58:	10c8000c 	andi	r3,r2,8192
 8002d5c:	1800061e 	bne	r3,zero,8002d78 <_puts_r+0x84>
 8002d60:	29001917 	ldw	r4,100(r5)
 8002d64:	00f7ffc4 	movi	r3,-8193
 8002d68:	10880014 	ori	r2,r2,8192
 8002d6c:	20c6703a 	and	r3,r4,r3
 8002d70:	2880030d 	sth	r2,12(r5)
 8002d74:	28c01915 	stw	r3,100(r5)
 8002d78:	d9800404 	addi	r6,sp,16
 8002d7c:	8009883a 	mov	r4,r16
 8002d80:	80076a40 	call	80076a4 <__sfvwrite_r>
 8002d84:	1000091e 	bne	r2,zero,8002dac <_puts_r+0xb8>
 8002d88:	00800284 	movi	r2,10
 8002d8c:	dfc00917 	ldw	ra,36(sp)
 8002d90:	dc400817 	ldw	r17,32(sp)
 8002d94:	dc000717 	ldw	r16,28(sp)
 8002d98:	dec00a04 	addi	sp,sp,40
 8002d9c:	f800283a 	ret
 8002da0:	8009883a 	mov	r4,r16
 8002da4:	80072200 	call	8007220 <__sinit>
 8002da8:	003fe906 	br	8002d50 <__alt_data_end+0xfc002d50>
 8002dac:	00bfffc4 	movi	r2,-1
 8002db0:	003ff606 	br	8002d8c <__alt_data_end+0xfc002d8c>

08002db4 <puts>:
 8002db4:	00820074 	movhi	r2,2049
 8002db8:	10979504 	addi	r2,r2,24148
 8002dbc:	200b883a 	mov	r5,r4
 8002dc0:	11000017 	ldw	r4,0(r2)
 8002dc4:	8002cf41 	jmpi	8002cf4 <_puts_r>

08002dc8 <strlen>:
 8002dc8:	208000cc 	andi	r2,r4,3
 8002dcc:	10002026 	beq	r2,zero,8002e50 <strlen+0x88>
 8002dd0:	20800007 	ldb	r2,0(r4)
 8002dd4:	10002026 	beq	r2,zero,8002e58 <strlen+0x90>
 8002dd8:	2005883a 	mov	r2,r4
 8002ddc:	00000206 	br	8002de8 <strlen+0x20>
 8002de0:	10c00007 	ldb	r3,0(r2)
 8002de4:	18001826 	beq	r3,zero,8002e48 <strlen+0x80>
 8002de8:	10800044 	addi	r2,r2,1
 8002dec:	10c000cc 	andi	r3,r2,3
 8002df0:	183ffb1e 	bne	r3,zero,8002de0 <__alt_data_end+0xfc002de0>
 8002df4:	10c00017 	ldw	r3,0(r2)
 8002df8:	01ffbff4 	movhi	r7,65279
 8002dfc:	39ffbfc4 	addi	r7,r7,-257
 8002e00:	00ca303a 	nor	r5,zero,r3
 8002e04:	01a02074 	movhi	r6,32897
 8002e08:	19c7883a 	add	r3,r3,r7
 8002e0c:	31a02004 	addi	r6,r6,-32640
 8002e10:	1946703a 	and	r3,r3,r5
 8002e14:	1986703a 	and	r3,r3,r6
 8002e18:	1800091e 	bne	r3,zero,8002e40 <strlen+0x78>
 8002e1c:	10800104 	addi	r2,r2,4
 8002e20:	10c00017 	ldw	r3,0(r2)
 8002e24:	19cb883a 	add	r5,r3,r7
 8002e28:	00c6303a 	nor	r3,zero,r3
 8002e2c:	28c6703a 	and	r3,r5,r3
 8002e30:	1986703a 	and	r3,r3,r6
 8002e34:	183ff926 	beq	r3,zero,8002e1c <__alt_data_end+0xfc002e1c>
 8002e38:	00000106 	br	8002e40 <strlen+0x78>
 8002e3c:	10800044 	addi	r2,r2,1
 8002e40:	10c00007 	ldb	r3,0(r2)
 8002e44:	183ffd1e 	bne	r3,zero,8002e3c <__alt_data_end+0xfc002e3c>
 8002e48:	1105c83a 	sub	r2,r2,r4
 8002e4c:	f800283a 	ret
 8002e50:	2005883a 	mov	r2,r4
 8002e54:	003fe706 	br	8002df4 <__alt_data_end+0xfc002df4>
 8002e58:	0005883a 	mov	r2,zero
 8002e5c:	f800283a 	ret

08002e60 <___vfprintf_internal_r>:
 8002e60:	deffb804 	addi	sp,sp,-288
 8002e64:	dfc04715 	stw	ra,284(sp)
 8002e68:	ddc04515 	stw	r23,276(sp)
 8002e6c:	dd404315 	stw	r21,268(sp)
 8002e70:	d9002d15 	stw	r4,180(sp)
 8002e74:	282f883a 	mov	r23,r5
 8002e78:	302b883a 	mov	r21,r6
 8002e7c:	d9c02e15 	stw	r7,184(sp)
 8002e80:	df004615 	stw	fp,280(sp)
 8002e84:	dd804415 	stw	r22,272(sp)
 8002e88:	dd004215 	stw	r20,264(sp)
 8002e8c:	dcc04115 	stw	r19,260(sp)
 8002e90:	dc804015 	stw	r18,256(sp)
 8002e94:	dc403f15 	stw	r17,252(sp)
 8002e98:	dc003e15 	stw	r16,248(sp)
 8002e9c:	8007da00 	call	8007da0 <_localeconv_r>
 8002ea0:	10800017 	ldw	r2,0(r2)
 8002ea4:	1009883a 	mov	r4,r2
 8002ea8:	d8803415 	stw	r2,208(sp)
 8002eac:	8002dc80 	call	8002dc8 <strlen>
 8002eb0:	d8803715 	stw	r2,220(sp)
 8002eb4:	d8802d17 	ldw	r2,180(sp)
 8002eb8:	10000226 	beq	r2,zero,8002ec4 <___vfprintf_internal_r+0x64>
 8002ebc:	10800e17 	ldw	r2,56(r2)
 8002ec0:	1000fb26 	beq	r2,zero,80032b0 <___vfprintf_internal_r+0x450>
 8002ec4:	b880030b 	ldhu	r2,12(r23)
 8002ec8:	10c8000c 	andi	r3,r2,8192
 8002ecc:	1800061e 	bne	r3,zero,8002ee8 <___vfprintf_internal_r+0x88>
 8002ed0:	b9001917 	ldw	r4,100(r23)
 8002ed4:	00f7ffc4 	movi	r3,-8193
 8002ed8:	10880014 	ori	r2,r2,8192
 8002edc:	20c6703a 	and	r3,r4,r3
 8002ee0:	b880030d 	sth	r2,12(r23)
 8002ee4:	b8c01915 	stw	r3,100(r23)
 8002ee8:	10c0020c 	andi	r3,r2,8
 8002eec:	1800c326 	beq	r3,zero,80031fc <___vfprintf_internal_r+0x39c>
 8002ef0:	b8c00417 	ldw	r3,16(r23)
 8002ef4:	1800c126 	beq	r3,zero,80031fc <___vfprintf_internal_r+0x39c>
 8002ef8:	1080068c 	andi	r2,r2,26
 8002efc:	00c00284 	movi	r3,10
 8002f00:	10c0c626 	beq	r2,r3,800321c <___vfprintf_internal_r+0x3bc>
 8002f04:	d8c00404 	addi	r3,sp,16
 8002f08:	05020074 	movhi	r20,2049
 8002f0c:	d9001e04 	addi	r4,sp,120
 8002f10:	a5102884 	addi	r20,r20,16546
 8002f14:	d8c01e15 	stw	r3,120(sp)
 8002f18:	d8002015 	stw	zero,128(sp)
 8002f1c:	d8001f15 	stw	zero,124(sp)
 8002f20:	d8003315 	stw	zero,204(sp)
 8002f24:	d8003615 	stw	zero,216(sp)
 8002f28:	d8003815 	stw	zero,224(sp)
 8002f2c:	1811883a 	mov	r8,r3
 8002f30:	d8003915 	stw	zero,228(sp)
 8002f34:	d8003a15 	stw	zero,232(sp)
 8002f38:	d8002f15 	stw	zero,188(sp)
 8002f3c:	d9002815 	stw	r4,160(sp)
 8002f40:	a8800007 	ldb	r2,0(r21)
 8002f44:	10028b26 	beq	r2,zero,8003974 <___vfprintf_internal_r+0xb14>
 8002f48:	00c00944 	movi	r3,37
 8002f4c:	a823883a 	mov	r17,r21
 8002f50:	10c0021e 	bne	r2,r3,8002f5c <___vfprintf_internal_r+0xfc>
 8002f54:	00001406 	br	8002fa8 <___vfprintf_internal_r+0x148>
 8002f58:	10c00326 	beq	r2,r3,8002f68 <___vfprintf_internal_r+0x108>
 8002f5c:	8c400044 	addi	r17,r17,1
 8002f60:	88800007 	ldb	r2,0(r17)
 8002f64:	103ffc1e 	bne	r2,zero,8002f58 <__alt_data_end+0xfc002f58>
 8002f68:	8d61c83a 	sub	r16,r17,r21
 8002f6c:	80000e26 	beq	r16,zero,8002fa8 <___vfprintf_internal_r+0x148>
 8002f70:	d8c02017 	ldw	r3,128(sp)
 8002f74:	d8801f17 	ldw	r2,124(sp)
 8002f78:	45400015 	stw	r21,0(r8)
 8002f7c:	1c07883a 	add	r3,r3,r16
 8002f80:	10800044 	addi	r2,r2,1
 8002f84:	d8c02015 	stw	r3,128(sp)
 8002f88:	44000115 	stw	r16,4(r8)
 8002f8c:	d8801f15 	stw	r2,124(sp)
 8002f90:	00c001c4 	movi	r3,7
 8002f94:	1880a916 	blt	r3,r2,800323c <___vfprintf_internal_r+0x3dc>
 8002f98:	42000204 	addi	r8,r8,8
 8002f9c:	d9402f17 	ldw	r5,188(sp)
 8002fa0:	2c0b883a 	add	r5,r5,r16
 8002fa4:	d9402f15 	stw	r5,188(sp)
 8002fa8:	88800007 	ldb	r2,0(r17)
 8002fac:	1000aa26 	beq	r2,zero,8003258 <___vfprintf_internal_r+0x3f8>
 8002fb0:	8d400044 	addi	r21,r17,1
 8002fb4:	8c400047 	ldb	r17,1(r17)
 8002fb8:	0021883a 	mov	r16,zero
 8002fbc:	00bfffc4 	movi	r2,-1
 8002fc0:	0025883a 	mov	r18,zero
 8002fc4:	dc002905 	stb	r16,164(sp)
 8002fc8:	d8002785 	stb	zero,158(sp)
 8002fcc:	d8002b05 	stb	zero,172(sp)
 8002fd0:	d8802a15 	stw	r2,168(sp)
 8002fd4:	d8003115 	stw	zero,196(sp)
 8002fd8:	04c01604 	movi	r19,88
 8002fdc:	05800244 	movi	r22,9
 8002fe0:	9021883a 	mov	r16,r18
 8002fe4:	4039883a 	mov	fp,r8
 8002fe8:	ad400044 	addi	r21,r21,1
 8002fec:	88bff804 	addi	r2,r17,-32
 8002ff0:	98833236 	bltu	r19,r2,8003cbc <___vfprintf_internal_r+0xe5c>
 8002ff4:	100490ba 	slli	r2,r2,2
 8002ff8:	00c20034 	movhi	r3,2048
 8002ffc:	18cc0304 	addi	r3,r3,12300
 8003000:	10c5883a 	add	r2,r2,r3
 8003004:	10800017 	ldw	r2,0(r2)
 8003008:	1000683a 	jmp	r2
 800300c:	08003bb4 	orhi	zero,at,238
 8003010:	08003cbc 	xorhi	zero,at,242
 8003014:	08003cbc 	xorhi	zero,at,242
 8003018:	08003bd4 	ori	zero,at,239
 800301c:	08003cbc 	xorhi	zero,at,242
 8003020:	08003cbc 	xorhi	zero,at,242
 8003024:	08003cbc 	xorhi	zero,at,242
 8003028:	08003cbc 	xorhi	zero,at,242
 800302c:	08003cbc 	xorhi	zero,at,242
 8003030:	08003cbc 	xorhi	zero,at,242
 8003034:	080032bc 	xorhi	zero,at,202
 8003038:	08003ac4 	addi	zero,at,235
 800303c:	08003cbc 	xorhi	zero,at,242
 8003040:	08003180 	call	800318 <__alt_mem_sdram-0x77ffce8>
 8003044:	080032e0 	cmpeqi	zero,at,203
 8003048:	08003cbc 	xorhi	zero,at,242
 800304c:	08003330 	cmpltui	zero,at,204
 8003050:	0800333c 	xorhi	zero,at,204
 8003054:	0800333c 	xorhi	zero,at,204
 8003058:	0800333c 	xorhi	zero,at,204
 800305c:	0800333c 	xorhi	zero,at,204
 8003060:	0800333c 	xorhi	zero,at,204
 8003064:	0800333c 	xorhi	zero,at,204
 8003068:	0800333c 	xorhi	zero,at,204
 800306c:	0800333c 	xorhi	zero,at,204
 8003070:	0800333c 	xorhi	zero,at,204
 8003074:	08003cbc 	xorhi	zero,at,242
 8003078:	08003cbc 	xorhi	zero,at,242
 800307c:	08003cbc 	xorhi	zero,at,242
 8003080:	08003cbc 	xorhi	zero,at,242
 8003084:	08003cbc 	xorhi	zero,at,242
 8003088:	08003cbc 	xorhi	zero,at,242
 800308c:	08003cbc 	xorhi	zero,at,242
 8003090:	08003cbc 	xorhi	zero,at,242
 8003094:	08003cbc 	xorhi	zero,at,242
 8003098:	08003cbc 	xorhi	zero,at,242
 800309c:	08003378 	rdprs	zero,at,205
 80030a0:	08003440 	call	800344 <__alt_mem_sdram-0x77ffcbc>
 80030a4:	08003cbc 	xorhi	zero,at,242
 80030a8:	08003440 	call	800344 <__alt_mem_sdram-0x77ffcbc>
 80030ac:	08003cbc 	xorhi	zero,at,242
 80030b0:	08003cbc 	xorhi	zero,at,242
 80030b4:	08003cbc 	xorhi	zero,at,242
 80030b8:	08003cbc 	xorhi	zero,at,242
 80030bc:	080034ec 	andhi	zero,at,211
 80030c0:	08003cbc 	xorhi	zero,at,242
 80030c4:	08003cbc 	xorhi	zero,at,242
 80030c8:	080034f8 	rdprs	zero,at,211
 80030cc:	08003cbc 	xorhi	zero,at,242
 80030d0:	08003cbc 	xorhi	zero,at,242
 80030d4:	08003cbc 	xorhi	zero,at,242
 80030d8:	08003cbc 	xorhi	zero,at,242
 80030dc:	08003cbc 	xorhi	zero,at,242
 80030e0:	0800397c 	xorhi	zero,at,229
 80030e4:	08003cbc 	xorhi	zero,at,242
 80030e8:	08003cbc 	xorhi	zero,at,242
 80030ec:	080039e8 	cmpgeui	zero,at,231
 80030f0:	08003cbc 	xorhi	zero,at,242
 80030f4:	08003cbc 	xorhi	zero,at,242
 80030f8:	08003cbc 	xorhi	zero,at,242
 80030fc:	08003cbc 	xorhi	zero,at,242
 8003100:	08003cbc 	xorhi	zero,at,242
 8003104:	08003cbc 	xorhi	zero,at,242
 8003108:	08003cbc 	xorhi	zero,at,242
 800310c:	08003cbc 	xorhi	zero,at,242
 8003110:	08003cbc 	xorhi	zero,at,242
 8003114:	08003cbc 	xorhi	zero,at,242
 8003118:	08003c60 	cmpeqi	zero,at,241
 800311c:	08003be0 	cmpeqi	zero,at,239
 8003120:	08003440 	call	800344 <__alt_mem_sdram-0x77ffcbc>
 8003124:	08003440 	call	800344 <__alt_mem_sdram-0x77ffcbc>
 8003128:	08003440 	call	800344 <__alt_mem_sdram-0x77ffcbc>
 800312c:	08003c00 	call	8003c0 <__alt_mem_sdram-0x77ffc40>
 8003130:	08003be0 	cmpeqi	zero,at,239
 8003134:	08003cbc 	xorhi	zero,at,242
 8003138:	08003cbc 	xorhi	zero,at,242
 800313c:	08003c0c 	andi	zero,at,240
 8003140:	08003cbc 	xorhi	zero,at,242
 8003144:	08003c20 	cmpeqi	zero,at,240
 8003148:	08003aa4 	muli	zero,at,234
 800314c:	0800318c 	andi	zero,at,198
 8003150:	08003adc 	xori	zero,at,235
 8003154:	08003cbc 	xorhi	zero,at,242
 8003158:	08003ae8 	cmpgeui	zero,at,235
 800315c:	08003cbc 	xorhi	zero,at,242
 8003160:	08003b4c 	andi	zero,at,237
 8003164:	08003cbc 	xorhi	zero,at,242
 8003168:	08003cbc 	xorhi	zero,at,242
 800316c:	08003b6c 	andhi	zero,at,237
 8003170:	d8c03117 	ldw	r3,196(sp)
 8003174:	d8802e15 	stw	r2,184(sp)
 8003178:	00c7c83a 	sub	r3,zero,r3
 800317c:	d8c03115 	stw	r3,196(sp)
 8003180:	84000114 	ori	r16,r16,4
 8003184:	ac400007 	ldb	r17,0(r21)
 8003188:	003f9706 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 800318c:	00800c04 	movi	r2,48
 8003190:	d8802705 	stb	r2,156(sp)
 8003194:	00801e04 	movi	r2,120
 8003198:	d8802745 	stb	r2,157(sp)
 800319c:	d9002a17 	ldw	r4,168(sp)
 80031a0:	d8802e17 	ldw	r2,184(sp)
 80031a4:	d8002785 	stb	zero,158(sp)
 80031a8:	e011883a 	mov	r8,fp
 80031ac:	10c00104 	addi	r3,r2,4
 80031b0:	14c00017 	ldw	r19,0(r2)
 80031b4:	002d883a 	mov	r22,zero
 80031b8:	80800094 	ori	r2,r16,2
 80031bc:	2002ca16 	blt	r4,zero,8003ce8 <___vfprintf_internal_r+0xe88>
 80031c0:	00bfdfc4 	movi	r2,-129
 80031c4:	80a4703a 	and	r18,r16,r2
 80031c8:	d8c02e15 	stw	r3,184(sp)
 80031cc:	94800094 	ori	r18,r18,2
 80031d0:	9802b41e 	bne	r19,zero,8003ca4 <___vfprintf_internal_r+0xe44>
 80031d4:	01420074 	movhi	r5,2049
 80031d8:	29502104 	addi	r5,r5,16516
 80031dc:	d9403915 	stw	r5,228(sp)
 80031e0:	04401e04 	movi	r17,120
 80031e4:	d8802a17 	ldw	r2,168(sp)
 80031e8:	0039883a 	mov	fp,zero
 80031ec:	1001fa26 	beq	r2,zero,80039d8 <___vfprintf_internal_r+0xb78>
 80031f0:	0027883a 	mov	r19,zero
 80031f4:	002d883a 	mov	r22,zero
 80031f8:	00021906 	br	8003a60 <___vfprintf_internal_r+0xc00>
 80031fc:	d9002d17 	ldw	r4,180(sp)
 8003200:	b80b883a 	mov	r5,r23
 8003204:	80052140 	call	8005214 <__swsetup_r>
 8003208:	1005dc1e 	bne	r2,zero,800497c <___vfprintf_internal_r+0x1b1c>
 800320c:	b880030b 	ldhu	r2,12(r23)
 8003210:	00c00284 	movi	r3,10
 8003214:	1080068c 	andi	r2,r2,26
 8003218:	10ff3a1e 	bne	r2,r3,8002f04 <__alt_data_end+0xfc002f04>
 800321c:	b880038f 	ldh	r2,14(r23)
 8003220:	103f3816 	blt	r2,zero,8002f04 <__alt_data_end+0xfc002f04>
 8003224:	d9c02e17 	ldw	r7,184(sp)
 8003228:	d9002d17 	ldw	r4,180(sp)
 800322c:	a80d883a 	mov	r6,r21
 8003230:	b80b883a 	mov	r5,r23
 8003234:	80051580 	call	8005158 <__sbprintf>
 8003238:	00001106 	br	8003280 <___vfprintf_internal_r+0x420>
 800323c:	d9002d17 	ldw	r4,180(sp)
 8003240:	d9801e04 	addi	r6,sp,120
 8003244:	b80b883a 	mov	r5,r23
 8003248:	800a6600 	call	800a660 <__sprint_r>
 800324c:	1000081e 	bne	r2,zero,8003270 <___vfprintf_internal_r+0x410>
 8003250:	da000404 	addi	r8,sp,16
 8003254:	003f5106 	br	8002f9c <__alt_data_end+0xfc002f9c>
 8003258:	d8802017 	ldw	r2,128(sp)
 800325c:	10000426 	beq	r2,zero,8003270 <___vfprintf_internal_r+0x410>
 8003260:	d9002d17 	ldw	r4,180(sp)
 8003264:	d9801e04 	addi	r6,sp,120
 8003268:	b80b883a 	mov	r5,r23
 800326c:	800a6600 	call	800a660 <__sprint_r>
 8003270:	b880030b 	ldhu	r2,12(r23)
 8003274:	1080100c 	andi	r2,r2,64
 8003278:	1005c01e 	bne	r2,zero,800497c <___vfprintf_internal_r+0x1b1c>
 800327c:	d8802f17 	ldw	r2,188(sp)
 8003280:	dfc04717 	ldw	ra,284(sp)
 8003284:	df004617 	ldw	fp,280(sp)
 8003288:	ddc04517 	ldw	r23,276(sp)
 800328c:	dd804417 	ldw	r22,272(sp)
 8003290:	dd404317 	ldw	r21,268(sp)
 8003294:	dd004217 	ldw	r20,264(sp)
 8003298:	dcc04117 	ldw	r19,260(sp)
 800329c:	dc804017 	ldw	r18,256(sp)
 80032a0:	dc403f17 	ldw	r17,252(sp)
 80032a4:	dc003e17 	ldw	r16,248(sp)
 80032a8:	dec04804 	addi	sp,sp,288
 80032ac:	f800283a 	ret
 80032b0:	d9002d17 	ldw	r4,180(sp)
 80032b4:	80072200 	call	8007220 <__sinit>
 80032b8:	003f0206 	br	8002ec4 <__alt_data_end+0xfc002ec4>
 80032bc:	d9002e17 	ldw	r4,184(sp)
 80032c0:	d9402e17 	ldw	r5,184(sp)
 80032c4:	21000017 	ldw	r4,0(r4)
 80032c8:	28800104 	addi	r2,r5,4
 80032cc:	d9003115 	stw	r4,196(sp)
 80032d0:	203fa716 	blt	r4,zero,8003170 <__alt_data_end+0xfc003170>
 80032d4:	d8802e15 	stw	r2,184(sp)
 80032d8:	ac400007 	ldb	r17,0(r21)
 80032dc:	003f4206 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 80032e0:	ac400007 	ldb	r17,0(r21)
 80032e4:	01000a84 	movi	r4,42
 80032e8:	a8c00044 	addi	r3,r21,1
 80032ec:	89075826 	beq	r17,r4,8005050 <___vfprintf_internal_r+0x21f0>
 80032f0:	8cbff404 	addi	r18,r17,-48
 80032f4:	b486ae36 	bltu	r22,r18,8004db0 <___vfprintf_internal_r+0x1f50>
 80032f8:	0009883a 	mov	r4,zero
 80032fc:	1823883a 	mov	r17,r3
 8003300:	01400284 	movi	r5,10
 8003304:	8002af80 	call	8002af8 <__mulsi3>
 8003308:	88c00007 	ldb	r3,0(r17)
 800330c:	1489883a 	add	r4,r2,r18
 8003310:	8d400044 	addi	r21,r17,1
 8003314:	1cbff404 	addi	r18,r3,-48
 8003318:	a823883a 	mov	r17,r21
 800331c:	b4bff82e 	bgeu	r22,r18,8003300 <__alt_data_end+0xfc003300>
 8003320:	1823883a 	mov	r17,r3
 8003324:	2005f616 	blt	r4,zero,8004b00 <___vfprintf_internal_r+0x1ca0>
 8003328:	d9002a15 	stw	r4,168(sp)
 800332c:	003f2f06 	br	8002fec <__alt_data_end+0xfc002fec>
 8003330:	84002014 	ori	r16,r16,128
 8003334:	ac400007 	ldb	r17,0(r21)
 8003338:	003f2b06 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 800333c:	8cbff404 	addi	r18,r17,-48
 8003340:	d8003115 	stw	zero,196(sp)
 8003344:	0009883a 	mov	r4,zero
 8003348:	a823883a 	mov	r17,r21
 800334c:	01400284 	movi	r5,10
 8003350:	8002af80 	call	8002af8 <__mulsi3>
 8003354:	88c00007 	ldb	r3,0(r17)
 8003358:	9089883a 	add	r4,r18,r2
 800335c:	ad400044 	addi	r21,r21,1
 8003360:	1cbff404 	addi	r18,r3,-48
 8003364:	a823883a 	mov	r17,r21
 8003368:	b4bff82e 	bgeu	r22,r18,800334c <__alt_data_end+0xfc00334c>
 800336c:	1823883a 	mov	r17,r3
 8003370:	d9003115 	stw	r4,196(sp)
 8003374:	003f1d06 	br	8002fec <__alt_data_end+0xfc002fec>
 8003378:	8025883a 	mov	r18,r16
 800337c:	dc002903 	ldbu	r16,164(sp)
 8003380:	e011883a 	mov	r8,fp
 8003384:	84003fcc 	andi	r16,r16,255
 8003388:	8007531e 	bne	r16,zero,80050d8 <___vfprintf_internal_r+0x2278>
 800338c:	94800414 	ori	r18,r18,16
 8003390:	9080080c 	andi	r2,r18,32
 8003394:	1003a326 	beq	r2,zero,8004224 <___vfprintf_internal_r+0x13c4>
 8003398:	d9002e17 	ldw	r4,184(sp)
 800339c:	20800117 	ldw	r2,4(r4)
 80033a0:	24c00017 	ldw	r19,0(r4)
 80033a4:	21000204 	addi	r4,r4,8
 80033a8:	d9002e15 	stw	r4,184(sp)
 80033ac:	102d883a 	mov	r22,r2
 80033b0:	10047316 	blt	r2,zero,8004580 <___vfprintf_internal_r+0x1720>
 80033b4:	d9002a17 	ldw	r4,168(sp)
 80033b8:	df002783 	ldbu	fp,158(sp)
 80033bc:	2003e416 	blt	r4,zero,8004350 <___vfprintf_internal_r+0x14f0>
 80033c0:	00ffdfc4 	movi	r3,-129
 80033c4:	9d84b03a 	or	r2,r19,r22
 80033c8:	90e4703a 	and	r18,r18,r3
 80033cc:	10018026 	beq	r2,zero,80039d0 <___vfprintf_internal_r+0xb70>
 80033d0:	b003ab26 	beq	r22,zero,8004280 <___vfprintf_internal_r+0x1420>
 80033d4:	dc402915 	stw	r17,164(sp)
 80033d8:	dc001e04 	addi	r16,sp,120
 80033dc:	b023883a 	mov	r17,r22
 80033e0:	402d883a 	mov	r22,r8
 80033e4:	9809883a 	mov	r4,r19
 80033e8:	880b883a 	mov	r5,r17
 80033ec:	01800284 	movi	r6,10
 80033f0:	000f883a 	mov	r7,zero
 80033f4:	800cba40 	call	800cba4 <__umoddi3>
 80033f8:	10800c04 	addi	r2,r2,48
 80033fc:	843fffc4 	addi	r16,r16,-1
 8003400:	9809883a 	mov	r4,r19
 8003404:	880b883a 	mov	r5,r17
 8003408:	80800005 	stb	r2,0(r16)
 800340c:	01800284 	movi	r6,10
 8003410:	000f883a 	mov	r7,zero
 8003414:	800c5a80 	call	800c5a8 <__udivdi3>
 8003418:	1027883a 	mov	r19,r2
 800341c:	10c4b03a 	or	r2,r2,r3
 8003420:	1823883a 	mov	r17,r3
 8003424:	103fef1e 	bne	r2,zero,80033e4 <__alt_data_end+0xfc0033e4>
 8003428:	d8c02817 	ldw	r3,160(sp)
 800342c:	dc402917 	ldw	r17,164(sp)
 8003430:	b011883a 	mov	r8,r22
 8003434:	1c07c83a 	sub	r3,r3,r16
 8003438:	d8c02b15 	stw	r3,172(sp)
 800343c:	00005f06 	br	80035bc <___vfprintf_internal_r+0x75c>
 8003440:	8025883a 	mov	r18,r16
 8003444:	dc002903 	ldbu	r16,164(sp)
 8003448:	e011883a 	mov	r8,fp
 800344c:	84003fcc 	andi	r16,r16,255
 8003450:	80071e1e 	bne	r16,zero,80050cc <___vfprintf_internal_r+0x226c>
 8003454:	9080020c 	andi	r2,r18,8
 8003458:	1004af26 	beq	r2,zero,8004718 <___vfprintf_internal_r+0x18b8>
 800345c:	d9002e17 	ldw	r4,184(sp)
 8003460:	d9402e17 	ldw	r5,184(sp)
 8003464:	d8802e17 	ldw	r2,184(sp)
 8003468:	21000017 	ldw	r4,0(r4)
 800346c:	29400117 	ldw	r5,4(r5)
 8003470:	10800204 	addi	r2,r2,8
 8003474:	d9003615 	stw	r4,216(sp)
 8003478:	d9403815 	stw	r5,224(sp)
 800347c:	d8802e15 	stw	r2,184(sp)
 8003480:	d9003617 	ldw	r4,216(sp)
 8003484:	d9403817 	ldw	r5,224(sp)
 8003488:	da003d15 	stw	r8,244(sp)
 800348c:	04000044 	movi	r16,1
 8003490:	800a2840 	call	800a284 <__fpclassifyd>
 8003494:	da003d17 	ldw	r8,244(sp)
 8003498:	1404441e 	bne	r2,r16,80045ac <___vfprintf_internal_r+0x174c>
 800349c:	d9003617 	ldw	r4,216(sp)
 80034a0:	d9403817 	ldw	r5,224(sp)
 80034a4:	000d883a 	mov	r6,zero
 80034a8:	000f883a 	mov	r7,zero
 80034ac:	800e5480 	call	800e548 <__ledf2>
 80034b0:	da003d17 	ldw	r8,244(sp)
 80034b4:	1005e316 	blt	r2,zero,8004c44 <___vfprintf_internal_r+0x1de4>
 80034b8:	df002783 	ldbu	fp,158(sp)
 80034bc:	008011c4 	movi	r2,71
 80034c0:	1445580e 	bge	r2,r17,8004a24 <___vfprintf_internal_r+0x1bc4>
 80034c4:	04020074 	movhi	r16,2049
 80034c8:	84101904 	addi	r16,r16,16484
 80034cc:	00c000c4 	movi	r3,3
 80034d0:	00bfdfc4 	movi	r2,-129
 80034d4:	d8c02915 	stw	r3,164(sp)
 80034d8:	90a4703a 	and	r18,r18,r2
 80034dc:	d8c02b15 	stw	r3,172(sp)
 80034e0:	d8002a15 	stw	zero,168(sp)
 80034e4:	d8003215 	stw	zero,200(sp)
 80034e8:	00003a06 	br	80035d4 <___vfprintf_internal_r+0x774>
 80034ec:	84000214 	ori	r16,r16,8
 80034f0:	ac400007 	ldb	r17,0(r21)
 80034f4:	003ebc06 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 80034f8:	8025883a 	mov	r18,r16
 80034fc:	dc002903 	ldbu	r16,164(sp)
 8003500:	e011883a 	mov	r8,fp
 8003504:	84003fcc 	andi	r16,r16,255
 8003508:	8007001e 	bne	r16,zero,800510c <___vfprintf_internal_r+0x22ac>
 800350c:	94800414 	ori	r18,r18,16
 8003510:	9080080c 	andi	r2,r18,32
 8003514:	1002fa26 	beq	r2,zero,8004100 <___vfprintf_internal_r+0x12a0>
 8003518:	d9002e17 	ldw	r4,184(sp)
 800351c:	d9402a17 	ldw	r5,168(sp)
 8003520:	d8002785 	stb	zero,158(sp)
 8003524:	20800204 	addi	r2,r4,8
 8003528:	24c00017 	ldw	r19,0(r4)
 800352c:	25800117 	ldw	r22,4(r4)
 8003530:	2804b116 	blt	r5,zero,80047f8 <___vfprintf_internal_r+0x1998>
 8003534:	013fdfc4 	movi	r4,-129
 8003538:	9d86b03a 	or	r3,r19,r22
 800353c:	d8802e15 	stw	r2,184(sp)
 8003540:	9124703a 	and	r18,r18,r4
 8003544:	1802fb1e 	bne	r3,zero,8004134 <___vfprintf_internal_r+0x12d4>
 8003548:	d8c02a17 	ldw	r3,168(sp)
 800354c:	0039883a 	mov	fp,zero
 8003550:	1805e526 	beq	r3,zero,8004ce8 <___vfprintf_internal_r+0x1e88>
 8003554:	0027883a 	mov	r19,zero
 8003558:	002d883a 	mov	r22,zero
 800355c:	dc001e04 	addi	r16,sp,120
 8003560:	9806d0fa 	srli	r3,r19,3
 8003564:	b008977a 	slli	r4,r22,29
 8003568:	b02cd0fa 	srli	r22,r22,3
 800356c:	9cc001cc 	andi	r19,r19,7
 8003570:	98800c04 	addi	r2,r19,48
 8003574:	843fffc4 	addi	r16,r16,-1
 8003578:	20e6b03a 	or	r19,r4,r3
 800357c:	80800005 	stb	r2,0(r16)
 8003580:	9d86b03a 	or	r3,r19,r22
 8003584:	183ff61e 	bne	r3,zero,8003560 <__alt_data_end+0xfc003560>
 8003588:	90c0004c 	andi	r3,r18,1
 800358c:	18014126 	beq	r3,zero,8003a94 <___vfprintf_internal_r+0xc34>
 8003590:	10803fcc 	andi	r2,r2,255
 8003594:	1080201c 	xori	r2,r2,128
 8003598:	10bfe004 	addi	r2,r2,-128
 800359c:	00c00c04 	movi	r3,48
 80035a0:	10c13c26 	beq	r2,r3,8003a94 <___vfprintf_internal_r+0xc34>
 80035a4:	80ffffc5 	stb	r3,-1(r16)
 80035a8:	d8c02817 	ldw	r3,160(sp)
 80035ac:	80bfffc4 	addi	r2,r16,-1
 80035b0:	1021883a 	mov	r16,r2
 80035b4:	1887c83a 	sub	r3,r3,r2
 80035b8:	d8c02b15 	stw	r3,172(sp)
 80035bc:	d8802b17 	ldw	r2,172(sp)
 80035c0:	d9002a17 	ldw	r4,168(sp)
 80035c4:	1100010e 	bge	r2,r4,80035cc <___vfprintf_internal_r+0x76c>
 80035c8:	2005883a 	mov	r2,r4
 80035cc:	d8802915 	stw	r2,164(sp)
 80035d0:	d8003215 	stw	zero,200(sp)
 80035d4:	e7003fcc 	andi	fp,fp,255
 80035d8:	e700201c 	xori	fp,fp,128
 80035dc:	e73fe004 	addi	fp,fp,-128
 80035e0:	e0000326 	beq	fp,zero,80035f0 <___vfprintf_internal_r+0x790>
 80035e4:	d8c02917 	ldw	r3,164(sp)
 80035e8:	18c00044 	addi	r3,r3,1
 80035ec:	d8c02915 	stw	r3,164(sp)
 80035f0:	90c0008c 	andi	r3,r18,2
 80035f4:	d8c02c15 	stw	r3,176(sp)
 80035f8:	18000326 	beq	r3,zero,8003608 <___vfprintf_internal_r+0x7a8>
 80035fc:	d8c02917 	ldw	r3,164(sp)
 8003600:	18c00084 	addi	r3,r3,2
 8003604:	d8c02915 	stw	r3,164(sp)
 8003608:	90c0210c 	andi	r3,r18,132
 800360c:	d8c03015 	stw	r3,192(sp)
 8003610:	1801c51e 	bne	r3,zero,8003d28 <___vfprintf_internal_r+0xec8>
 8003614:	d9003117 	ldw	r4,196(sp)
 8003618:	d8c02917 	ldw	r3,164(sp)
 800361c:	20e7c83a 	sub	r19,r4,r3
 8003620:	04c1c10e 	bge	zero,r19,8003d28 <___vfprintf_internal_r+0xec8>
 8003624:	02400404 	movi	r9,16
 8003628:	d8c02017 	ldw	r3,128(sp)
 800362c:	d8801f17 	ldw	r2,124(sp)
 8003630:	4cc52f0e 	bge	r9,r19,8004af0 <___vfprintf_internal_r+0x1c90>
 8003634:	01420074 	movhi	r5,2049
 8003638:	29502c84 	addi	r5,r5,16562
 800363c:	dc403b15 	stw	r17,236(sp)
 8003640:	d9403515 	stw	r5,212(sp)
 8003644:	9823883a 	mov	r17,r19
 8003648:	482d883a 	mov	r22,r9
 800364c:	9027883a 	mov	r19,r18
 8003650:	070001c4 	movi	fp,7
 8003654:	8025883a 	mov	r18,r16
 8003658:	dc002d17 	ldw	r16,180(sp)
 800365c:	00000306 	br	800366c <___vfprintf_internal_r+0x80c>
 8003660:	8c7ffc04 	addi	r17,r17,-16
 8003664:	42000204 	addi	r8,r8,8
 8003668:	b440130e 	bge	r22,r17,80036b8 <___vfprintf_internal_r+0x858>
 800366c:	01020074 	movhi	r4,2049
 8003670:	18c00404 	addi	r3,r3,16
 8003674:	10800044 	addi	r2,r2,1
 8003678:	21102c84 	addi	r4,r4,16562
 800367c:	41000015 	stw	r4,0(r8)
 8003680:	45800115 	stw	r22,4(r8)
 8003684:	d8c02015 	stw	r3,128(sp)
 8003688:	d8801f15 	stw	r2,124(sp)
 800368c:	e0bff40e 	bge	fp,r2,8003660 <__alt_data_end+0xfc003660>
 8003690:	d9801e04 	addi	r6,sp,120
 8003694:	b80b883a 	mov	r5,r23
 8003698:	8009883a 	mov	r4,r16
 800369c:	800a6600 	call	800a660 <__sprint_r>
 80036a0:	103ef31e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 80036a4:	8c7ffc04 	addi	r17,r17,-16
 80036a8:	d8c02017 	ldw	r3,128(sp)
 80036ac:	d8801f17 	ldw	r2,124(sp)
 80036b0:	da000404 	addi	r8,sp,16
 80036b4:	b47fed16 	blt	r22,r17,800366c <__alt_data_end+0xfc00366c>
 80036b8:	9021883a 	mov	r16,r18
 80036bc:	9825883a 	mov	r18,r19
 80036c0:	8827883a 	mov	r19,r17
 80036c4:	dc403b17 	ldw	r17,236(sp)
 80036c8:	d9403517 	ldw	r5,212(sp)
 80036cc:	98c7883a 	add	r3,r19,r3
 80036d0:	10800044 	addi	r2,r2,1
 80036d4:	41400015 	stw	r5,0(r8)
 80036d8:	44c00115 	stw	r19,4(r8)
 80036dc:	d8c02015 	stw	r3,128(sp)
 80036e0:	d8801f15 	stw	r2,124(sp)
 80036e4:	010001c4 	movi	r4,7
 80036e8:	2082c516 	blt	r4,r2,8004200 <___vfprintf_internal_r+0x13a0>
 80036ec:	df002787 	ldb	fp,158(sp)
 80036f0:	42000204 	addi	r8,r8,8
 80036f4:	e0000c26 	beq	fp,zero,8003728 <___vfprintf_internal_r+0x8c8>
 80036f8:	d8801f17 	ldw	r2,124(sp)
 80036fc:	d9002784 	addi	r4,sp,158
 8003700:	18c00044 	addi	r3,r3,1
 8003704:	10800044 	addi	r2,r2,1
 8003708:	41000015 	stw	r4,0(r8)
 800370c:	01000044 	movi	r4,1
 8003710:	41000115 	stw	r4,4(r8)
 8003714:	d8c02015 	stw	r3,128(sp)
 8003718:	d8801f15 	stw	r2,124(sp)
 800371c:	010001c4 	movi	r4,7
 8003720:	20825e16 	blt	r4,r2,800409c <___vfprintf_internal_r+0x123c>
 8003724:	42000204 	addi	r8,r8,8
 8003728:	d8802c17 	ldw	r2,176(sp)
 800372c:	10000c26 	beq	r2,zero,8003760 <___vfprintf_internal_r+0x900>
 8003730:	d8801f17 	ldw	r2,124(sp)
 8003734:	d9002704 	addi	r4,sp,156
 8003738:	18c00084 	addi	r3,r3,2
 800373c:	10800044 	addi	r2,r2,1
 8003740:	41000015 	stw	r4,0(r8)
 8003744:	01000084 	movi	r4,2
 8003748:	41000115 	stw	r4,4(r8)
 800374c:	d8c02015 	stw	r3,128(sp)
 8003750:	d8801f15 	stw	r2,124(sp)
 8003754:	010001c4 	movi	r4,7
 8003758:	20825816 	blt	r4,r2,80040bc <___vfprintf_internal_r+0x125c>
 800375c:	42000204 	addi	r8,r8,8
 8003760:	d9003017 	ldw	r4,192(sp)
 8003764:	00802004 	movi	r2,128
 8003768:	2081bb26 	beq	r4,r2,8003e58 <___vfprintf_internal_r+0xff8>
 800376c:	d9402a17 	ldw	r5,168(sp)
 8003770:	d8802b17 	ldw	r2,172(sp)
 8003774:	28adc83a 	sub	r22,r5,r2
 8003778:	0580310e 	bge	zero,r22,8003840 <___vfprintf_internal_r+0x9e0>
 800377c:	07000404 	movi	fp,16
 8003780:	d8801f17 	ldw	r2,124(sp)
 8003784:	e584360e 	bge	fp,r22,8004860 <___vfprintf_internal_r+0x1a00>
 8003788:	01420074 	movhi	r5,2049
 800378c:	29502884 	addi	r5,r5,16546
 8003790:	dc402a15 	stw	r17,168(sp)
 8003794:	d9402c15 	stw	r5,176(sp)
 8003798:	b023883a 	mov	r17,r22
 800379c:	04c001c4 	movi	r19,7
 80037a0:	a82d883a 	mov	r22,r21
 80037a4:	902b883a 	mov	r21,r18
 80037a8:	8025883a 	mov	r18,r16
 80037ac:	dc002d17 	ldw	r16,180(sp)
 80037b0:	00000306 	br	80037c0 <___vfprintf_internal_r+0x960>
 80037b4:	8c7ffc04 	addi	r17,r17,-16
 80037b8:	42000204 	addi	r8,r8,8
 80037bc:	e440110e 	bge	fp,r17,8003804 <___vfprintf_internal_r+0x9a4>
 80037c0:	18c00404 	addi	r3,r3,16
 80037c4:	10800044 	addi	r2,r2,1
 80037c8:	45000015 	stw	r20,0(r8)
 80037cc:	47000115 	stw	fp,4(r8)
 80037d0:	d8c02015 	stw	r3,128(sp)
 80037d4:	d8801f15 	stw	r2,124(sp)
 80037d8:	98bff60e 	bge	r19,r2,80037b4 <__alt_data_end+0xfc0037b4>
 80037dc:	d9801e04 	addi	r6,sp,120
 80037e0:	b80b883a 	mov	r5,r23
 80037e4:	8009883a 	mov	r4,r16
 80037e8:	800a6600 	call	800a660 <__sprint_r>
 80037ec:	103ea01e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 80037f0:	8c7ffc04 	addi	r17,r17,-16
 80037f4:	d8c02017 	ldw	r3,128(sp)
 80037f8:	d8801f17 	ldw	r2,124(sp)
 80037fc:	da000404 	addi	r8,sp,16
 8003800:	e47fef16 	blt	fp,r17,80037c0 <__alt_data_end+0xfc0037c0>
 8003804:	9021883a 	mov	r16,r18
 8003808:	a825883a 	mov	r18,r21
 800380c:	b02b883a 	mov	r21,r22
 8003810:	882d883a 	mov	r22,r17
 8003814:	dc402a17 	ldw	r17,168(sp)
 8003818:	d9002c17 	ldw	r4,176(sp)
 800381c:	1d87883a 	add	r3,r3,r22
 8003820:	10800044 	addi	r2,r2,1
 8003824:	41000015 	stw	r4,0(r8)
 8003828:	45800115 	stw	r22,4(r8)
 800382c:	d8c02015 	stw	r3,128(sp)
 8003830:	d8801f15 	stw	r2,124(sp)
 8003834:	010001c4 	movi	r4,7
 8003838:	20821016 	blt	r4,r2,800407c <___vfprintf_internal_r+0x121c>
 800383c:	42000204 	addi	r8,r8,8
 8003840:	9080400c 	andi	r2,r18,256
 8003844:	10013a1e 	bne	r2,zero,8003d30 <___vfprintf_internal_r+0xed0>
 8003848:	d9402b17 	ldw	r5,172(sp)
 800384c:	d8801f17 	ldw	r2,124(sp)
 8003850:	44000015 	stw	r16,0(r8)
 8003854:	1947883a 	add	r3,r3,r5
 8003858:	10800044 	addi	r2,r2,1
 800385c:	41400115 	stw	r5,4(r8)
 8003860:	d8c02015 	stw	r3,128(sp)
 8003864:	d8801f15 	stw	r2,124(sp)
 8003868:	010001c4 	movi	r4,7
 800386c:	2081f516 	blt	r4,r2,8004044 <___vfprintf_internal_r+0x11e4>
 8003870:	42000204 	addi	r8,r8,8
 8003874:	9480010c 	andi	r18,r18,4
 8003878:	90003226 	beq	r18,zero,8003944 <___vfprintf_internal_r+0xae4>
 800387c:	d9403117 	ldw	r5,196(sp)
 8003880:	d8802917 	ldw	r2,164(sp)
 8003884:	28a1c83a 	sub	r16,r5,r2
 8003888:	04002e0e 	bge	zero,r16,8003944 <___vfprintf_internal_r+0xae4>
 800388c:	04400404 	movi	r17,16
 8003890:	d8801f17 	ldw	r2,124(sp)
 8003894:	8c04c40e 	bge	r17,r16,8004ba8 <___vfprintf_internal_r+0x1d48>
 8003898:	01420074 	movhi	r5,2049
 800389c:	29502c84 	addi	r5,r5,16562
 80038a0:	d9403515 	stw	r5,212(sp)
 80038a4:	048001c4 	movi	r18,7
 80038a8:	dcc02d17 	ldw	r19,180(sp)
 80038ac:	00000306 	br	80038bc <___vfprintf_internal_r+0xa5c>
 80038b0:	843ffc04 	addi	r16,r16,-16
 80038b4:	42000204 	addi	r8,r8,8
 80038b8:	8c00130e 	bge	r17,r16,8003908 <___vfprintf_internal_r+0xaa8>
 80038bc:	01020074 	movhi	r4,2049
 80038c0:	18c00404 	addi	r3,r3,16
 80038c4:	10800044 	addi	r2,r2,1
 80038c8:	21102c84 	addi	r4,r4,16562
 80038cc:	41000015 	stw	r4,0(r8)
 80038d0:	44400115 	stw	r17,4(r8)
 80038d4:	d8c02015 	stw	r3,128(sp)
 80038d8:	d8801f15 	stw	r2,124(sp)
 80038dc:	90bff40e 	bge	r18,r2,80038b0 <__alt_data_end+0xfc0038b0>
 80038e0:	d9801e04 	addi	r6,sp,120
 80038e4:	b80b883a 	mov	r5,r23
 80038e8:	9809883a 	mov	r4,r19
 80038ec:	800a6600 	call	800a660 <__sprint_r>
 80038f0:	103e5f1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 80038f4:	843ffc04 	addi	r16,r16,-16
 80038f8:	d8c02017 	ldw	r3,128(sp)
 80038fc:	d8801f17 	ldw	r2,124(sp)
 8003900:	da000404 	addi	r8,sp,16
 8003904:	8c3fed16 	blt	r17,r16,80038bc <__alt_data_end+0xfc0038bc>
 8003908:	d9403517 	ldw	r5,212(sp)
 800390c:	1c07883a 	add	r3,r3,r16
 8003910:	10800044 	addi	r2,r2,1
 8003914:	41400015 	stw	r5,0(r8)
 8003918:	44000115 	stw	r16,4(r8)
 800391c:	d8c02015 	stw	r3,128(sp)
 8003920:	d8801f15 	stw	r2,124(sp)
 8003924:	010001c4 	movi	r4,7
 8003928:	2080060e 	bge	r4,r2,8003944 <___vfprintf_internal_r+0xae4>
 800392c:	d9002d17 	ldw	r4,180(sp)
 8003930:	d9801e04 	addi	r6,sp,120
 8003934:	b80b883a 	mov	r5,r23
 8003938:	800a6600 	call	800a660 <__sprint_r>
 800393c:	103e4c1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8003940:	d8c02017 	ldw	r3,128(sp)
 8003944:	d8803117 	ldw	r2,196(sp)
 8003948:	d9002917 	ldw	r4,164(sp)
 800394c:	1100010e 	bge	r2,r4,8003954 <___vfprintf_internal_r+0xaf4>
 8003950:	2005883a 	mov	r2,r4
 8003954:	d9402f17 	ldw	r5,188(sp)
 8003958:	288b883a 	add	r5,r5,r2
 800395c:	d9402f15 	stw	r5,188(sp)
 8003960:	1801c01e 	bne	r3,zero,8004064 <___vfprintf_internal_r+0x1204>
 8003964:	a8800007 	ldb	r2,0(r21)
 8003968:	d8001f15 	stw	zero,124(sp)
 800396c:	da000404 	addi	r8,sp,16
 8003970:	103d751e 	bne	r2,zero,8002f48 <__alt_data_end+0xfc002f48>
 8003974:	a823883a 	mov	r17,r21
 8003978:	003d8b06 	br	8002fa8 <__alt_data_end+0xfc002fa8>
 800397c:	8025883a 	mov	r18,r16
 8003980:	dc002903 	ldbu	r16,164(sp)
 8003984:	e011883a 	mov	r8,fp
 8003988:	84003fcc 	andi	r16,r16,255
 800398c:	8005e51e 	bne	r16,zero,8005124 <___vfprintf_internal_r+0x22c4>
 8003990:	94800414 	ori	r18,r18,16
 8003994:	9080080c 	andi	r2,r18,32
 8003998:	10022b26 	beq	r2,zero,8004248 <___vfprintf_internal_r+0x13e8>
 800399c:	d9002e17 	ldw	r4,184(sp)
 80039a0:	d9402a17 	ldw	r5,168(sp)
 80039a4:	d8002785 	stb	zero,158(sp)
 80039a8:	20c00204 	addi	r3,r4,8
 80039ac:	24c00017 	ldw	r19,0(r4)
 80039b0:	25800117 	ldw	r22,4(r4)
 80039b4:	28042e16 	blt	r5,zero,8004a70 <___vfprintf_internal_r+0x1c10>
 80039b8:	013fdfc4 	movi	r4,-129
 80039bc:	9d84b03a 	or	r2,r19,r22
 80039c0:	d8c02e15 	stw	r3,184(sp)
 80039c4:	9124703a 	and	r18,r18,r4
 80039c8:	0039883a 	mov	fp,zero
 80039cc:	103e801e 	bne	r2,zero,80033d0 <__alt_data_end+0xfc0033d0>
 80039d0:	d9002a17 	ldw	r4,168(sp)
 80039d4:	2002e01e 	bne	r4,zero,8004558 <___vfprintf_internal_r+0x16f8>
 80039d8:	d8002a15 	stw	zero,168(sp)
 80039dc:	d8002b15 	stw	zero,172(sp)
 80039e0:	dc001e04 	addi	r16,sp,120
 80039e4:	003ef506 	br	80035bc <__alt_data_end+0xfc0035bc>
 80039e8:	8025883a 	mov	r18,r16
 80039ec:	dc002903 	ldbu	r16,164(sp)
 80039f0:	e011883a 	mov	r8,fp
 80039f4:	84003fcc 	andi	r16,r16,255
 80039f8:	8005ba1e 	bne	r16,zero,80050e4 <___vfprintf_internal_r+0x2284>
 80039fc:	01020074 	movhi	r4,2049
 8003a00:	21101c04 	addi	r4,r4,16496
 8003a04:	d9003915 	stw	r4,228(sp)
 8003a08:	9080080c 	andi	r2,r18,32
 8003a0c:	10006126 	beq	r2,zero,8003b94 <___vfprintf_internal_r+0xd34>
 8003a10:	d9402e17 	ldw	r5,184(sp)
 8003a14:	2cc00017 	ldw	r19,0(r5)
 8003a18:	2d800117 	ldw	r22,4(r5)
 8003a1c:	29400204 	addi	r5,r5,8
 8003a20:	d9402e15 	stw	r5,184(sp)
 8003a24:	9080004c 	andi	r2,r18,1
 8003a28:	1001ac26 	beq	r2,zero,80040dc <___vfprintf_internal_r+0x127c>
 8003a2c:	9d84b03a 	or	r2,r19,r22
 8003a30:	10038526 	beq	r2,zero,8004848 <___vfprintf_internal_r+0x19e8>
 8003a34:	d8c02a17 	ldw	r3,168(sp)
 8003a38:	00800c04 	movi	r2,48
 8003a3c:	d8802705 	stb	r2,156(sp)
 8003a40:	dc402745 	stb	r17,157(sp)
 8003a44:	d8002785 	stb	zero,158(sp)
 8003a48:	90800094 	ori	r2,r18,2
 8003a4c:	18047916 	blt	r3,zero,8004c34 <___vfprintf_internal_r+0x1dd4>
 8003a50:	00bfdfc4 	movi	r2,-129
 8003a54:	90a4703a 	and	r18,r18,r2
 8003a58:	94800094 	ori	r18,r18,2
 8003a5c:	0039883a 	mov	fp,zero
 8003a60:	d9003917 	ldw	r4,228(sp)
 8003a64:	dc001e04 	addi	r16,sp,120
 8003a68:	988003cc 	andi	r2,r19,15
 8003a6c:	b006973a 	slli	r3,r22,28
 8003a70:	2085883a 	add	r2,r4,r2
 8003a74:	9826d13a 	srli	r19,r19,4
 8003a78:	10800003 	ldbu	r2,0(r2)
 8003a7c:	b02cd13a 	srli	r22,r22,4
 8003a80:	843fffc4 	addi	r16,r16,-1
 8003a84:	1ce6b03a 	or	r19,r3,r19
 8003a88:	80800005 	stb	r2,0(r16)
 8003a8c:	9d84b03a 	or	r2,r19,r22
 8003a90:	103ff51e 	bne	r2,zero,8003a68 <__alt_data_end+0xfc003a68>
 8003a94:	d8c02817 	ldw	r3,160(sp)
 8003a98:	1c07c83a 	sub	r3,r3,r16
 8003a9c:	d8c02b15 	stw	r3,172(sp)
 8003aa0:	003ec606 	br	80035bc <__alt_data_end+0xfc0035bc>
 8003aa4:	8025883a 	mov	r18,r16
 8003aa8:	dc002903 	ldbu	r16,164(sp)
 8003aac:	e011883a 	mov	r8,fp
 8003ab0:	84003fcc 	andi	r16,r16,255
 8003ab4:	803e9626 	beq	r16,zero,8003510 <__alt_data_end+0xfc003510>
 8003ab8:	d8c02b03 	ldbu	r3,172(sp)
 8003abc:	d8c02785 	stb	r3,158(sp)
 8003ac0:	003e9306 	br	8003510 <__alt_data_end+0xfc003510>
 8003ac4:	00c00044 	movi	r3,1
 8003ac8:	d8c02905 	stb	r3,164(sp)
 8003acc:	00c00ac4 	movi	r3,43
 8003ad0:	d8c02b05 	stb	r3,172(sp)
 8003ad4:	ac400007 	ldb	r17,0(r21)
 8003ad8:	003d4306 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 8003adc:	84000814 	ori	r16,r16,32
 8003ae0:	ac400007 	ldb	r17,0(r21)
 8003ae4:	003d4006 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 8003ae8:	d8802e17 	ldw	r2,184(sp)
 8003aec:	8025883a 	mov	r18,r16
 8003af0:	d8002785 	stb	zero,158(sp)
 8003af4:	14000017 	ldw	r16,0(r2)
 8003af8:	e011883a 	mov	r8,fp
 8003afc:	14c00104 	addi	r19,r2,4
 8003b00:	80042d26 	beq	r16,zero,8004bb8 <___vfprintf_internal_r+0x1d58>
 8003b04:	d8c02a17 	ldw	r3,168(sp)
 8003b08:	1803e416 	blt	r3,zero,8004a9c <___vfprintf_internal_r+0x1c3c>
 8003b0c:	180d883a 	mov	r6,r3
 8003b10:	000b883a 	mov	r5,zero
 8003b14:	8009883a 	mov	r4,r16
 8003b18:	df003d15 	stw	fp,244(sp)
 8003b1c:	80087980 	call	8008798 <memchr>
 8003b20:	da003d17 	ldw	r8,244(sp)
 8003b24:	10046826 	beq	r2,zero,8004cc8 <___vfprintf_internal_r+0x1e68>
 8003b28:	1405c83a 	sub	r2,r2,r16
 8003b2c:	d8802b15 	stw	r2,172(sp)
 8003b30:	1003e016 	blt	r2,zero,8004ab4 <___vfprintf_internal_r+0x1c54>
 8003b34:	df002783 	ldbu	fp,158(sp)
 8003b38:	d8802915 	stw	r2,164(sp)
 8003b3c:	dcc02e15 	stw	r19,184(sp)
 8003b40:	d8002a15 	stw	zero,168(sp)
 8003b44:	d8003215 	stw	zero,200(sp)
 8003b48:	003ea206 	br	80035d4 <__alt_data_end+0xfc0035d4>
 8003b4c:	8025883a 	mov	r18,r16
 8003b50:	dc002903 	ldbu	r16,164(sp)
 8003b54:	e011883a 	mov	r8,fp
 8003b58:	84003fcc 	andi	r16,r16,255
 8003b5c:	803f8d26 	beq	r16,zero,8003994 <__alt_data_end+0xfc003994>
 8003b60:	d8c02b03 	ldbu	r3,172(sp)
 8003b64:	d8c02785 	stb	r3,158(sp)
 8003b68:	003f8a06 	br	8003994 <__alt_data_end+0xfc003994>
 8003b6c:	8025883a 	mov	r18,r16
 8003b70:	dc002903 	ldbu	r16,164(sp)
 8003b74:	e011883a 	mov	r8,fp
 8003b78:	84003fcc 	andi	r16,r16,255
 8003b7c:	8005661e 	bne	r16,zero,8005118 <___vfprintf_internal_r+0x22b8>
 8003b80:	01020074 	movhi	r4,2049
 8003b84:	21102104 	addi	r4,r4,16516
 8003b88:	d9003915 	stw	r4,228(sp)
 8003b8c:	9080080c 	andi	r2,r18,32
 8003b90:	103f9f1e 	bne	r2,zero,8003a10 <__alt_data_end+0xfc003a10>
 8003b94:	9080040c 	andi	r2,r18,16
 8003b98:	1002eb26 	beq	r2,zero,8004748 <___vfprintf_internal_r+0x18e8>
 8003b9c:	d8802e17 	ldw	r2,184(sp)
 8003ba0:	002d883a 	mov	r22,zero
 8003ba4:	14c00017 	ldw	r19,0(r2)
 8003ba8:	10800104 	addi	r2,r2,4
 8003bac:	d8802e15 	stw	r2,184(sp)
 8003bb0:	003f9c06 	br	8003a24 <__alt_data_end+0xfc003a24>
 8003bb4:	d8802b07 	ldb	r2,172(sp)
 8003bb8:	1002e11e 	bne	r2,zero,8004740 <___vfprintf_internal_r+0x18e0>
 8003bbc:	00c00044 	movi	r3,1
 8003bc0:	d8c02905 	stb	r3,164(sp)
 8003bc4:	00c00804 	movi	r3,32
 8003bc8:	d8c02b05 	stb	r3,172(sp)
 8003bcc:	ac400007 	ldb	r17,0(r21)
 8003bd0:	003d0506 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 8003bd4:	84000054 	ori	r16,r16,1
 8003bd8:	ac400007 	ldb	r17,0(r21)
 8003bdc:	003d0206 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 8003be0:	8025883a 	mov	r18,r16
 8003be4:	dc002903 	ldbu	r16,164(sp)
 8003be8:	e011883a 	mov	r8,fp
 8003bec:	84003fcc 	andi	r16,r16,255
 8003bf0:	803de726 	beq	r16,zero,8003390 <__alt_data_end+0xfc003390>
 8003bf4:	d8c02b03 	ldbu	r3,172(sp)
 8003bf8:	d8c02785 	stb	r3,158(sp)
 8003bfc:	003de406 	br	8003390 <__alt_data_end+0xfc003390>
 8003c00:	84001014 	ori	r16,r16,64
 8003c04:	ac400007 	ldb	r17,0(r21)
 8003c08:	003cf706 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 8003c0c:	ac400007 	ldb	r17,0(r21)
 8003c10:	00801b04 	movi	r2,108
 8003c14:	88838f26 	beq	r17,r2,8004a54 <___vfprintf_internal_r+0x1bf4>
 8003c18:	84000414 	ori	r16,r16,16
 8003c1c:	003cf206 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 8003c20:	8025883a 	mov	r18,r16
 8003c24:	dc002903 	ldbu	r16,164(sp)
 8003c28:	e011883a 	mov	r8,fp
 8003c2c:	84003fcc 	andi	r16,r16,255
 8003c30:	80053f1e 	bne	r16,zero,8005130 <___vfprintf_internal_r+0x22d0>
 8003c34:	9080080c 	andi	r2,r18,32
 8003c38:	1002d226 	beq	r2,zero,8004784 <___vfprintf_internal_r+0x1924>
 8003c3c:	d9002e17 	ldw	r4,184(sp)
 8003c40:	d9402f17 	ldw	r5,188(sp)
 8003c44:	20800017 	ldw	r2,0(r4)
 8003c48:	2807d7fa 	srai	r3,r5,31
 8003c4c:	21000104 	addi	r4,r4,4
 8003c50:	d9002e15 	stw	r4,184(sp)
 8003c54:	11400015 	stw	r5,0(r2)
 8003c58:	10c00115 	stw	r3,4(r2)
 8003c5c:	003cb806 	br	8002f40 <__alt_data_end+0xfc002f40>
 8003c60:	d8c02e17 	ldw	r3,184(sp)
 8003c64:	d9002e17 	ldw	r4,184(sp)
 8003c68:	8025883a 	mov	r18,r16
 8003c6c:	18800017 	ldw	r2,0(r3)
 8003c70:	21000104 	addi	r4,r4,4
 8003c74:	00c00044 	movi	r3,1
 8003c78:	e011883a 	mov	r8,fp
 8003c7c:	d8c02915 	stw	r3,164(sp)
 8003c80:	d8002785 	stb	zero,158(sp)
 8003c84:	d8801405 	stb	r2,80(sp)
 8003c88:	d9002e15 	stw	r4,184(sp)
 8003c8c:	d8c02b15 	stw	r3,172(sp)
 8003c90:	d8002a15 	stw	zero,168(sp)
 8003c94:	d8003215 	stw	zero,200(sp)
 8003c98:	dc001404 	addi	r16,sp,80
 8003c9c:	0039883a 	mov	fp,zero
 8003ca0:	003e5306 	br	80035f0 <__alt_data_end+0xfc0035f0>
 8003ca4:	01020074 	movhi	r4,2049
 8003ca8:	21102104 	addi	r4,r4,16516
 8003cac:	0039883a 	mov	fp,zero
 8003cb0:	d9003915 	stw	r4,228(sp)
 8003cb4:	04401e04 	movi	r17,120
 8003cb8:	003f6906 	br	8003a60 <__alt_data_end+0xfc003a60>
 8003cbc:	8025883a 	mov	r18,r16
 8003cc0:	dc002903 	ldbu	r16,164(sp)
 8003cc4:	e011883a 	mov	r8,fp
 8003cc8:	84003fcc 	andi	r16,r16,255
 8003ccc:	8005081e 	bne	r16,zero,80050f0 <___vfprintf_internal_r+0x2290>
 8003cd0:	883d6126 	beq	r17,zero,8003258 <__alt_data_end+0xfc003258>
 8003cd4:	00c00044 	movi	r3,1
 8003cd8:	d8c02915 	stw	r3,164(sp)
 8003cdc:	dc401405 	stb	r17,80(sp)
 8003ce0:	d8002785 	stb	zero,158(sp)
 8003ce4:	003fe906 	br	8003c8c <__alt_data_end+0xfc003c8c>
 8003ce8:	01420074 	movhi	r5,2049
 8003cec:	29502104 	addi	r5,r5,16516
 8003cf0:	d9403915 	stw	r5,228(sp)
 8003cf4:	d8c02e15 	stw	r3,184(sp)
 8003cf8:	1025883a 	mov	r18,r2
 8003cfc:	04401e04 	movi	r17,120
 8003d00:	9d84b03a 	or	r2,r19,r22
 8003d04:	1000fc1e 	bne	r2,zero,80040f8 <___vfprintf_internal_r+0x1298>
 8003d08:	0039883a 	mov	fp,zero
 8003d0c:	00800084 	movi	r2,2
 8003d10:	10803fcc 	andi	r2,r2,255
 8003d14:	00c00044 	movi	r3,1
 8003d18:	10c20f26 	beq	r2,r3,8004558 <___vfprintf_internal_r+0x16f8>
 8003d1c:	00c00084 	movi	r3,2
 8003d20:	10fd3326 	beq	r2,r3,80031f0 <__alt_data_end+0xfc0031f0>
 8003d24:	003e0b06 	br	8003554 <__alt_data_end+0xfc003554>
 8003d28:	d8c02017 	ldw	r3,128(sp)
 8003d2c:	003e7106 	br	80036f4 <__alt_data_end+0xfc0036f4>
 8003d30:	00801944 	movi	r2,101
 8003d34:	14407e0e 	bge	r2,r17,8003f30 <___vfprintf_internal_r+0x10d0>
 8003d38:	d9003617 	ldw	r4,216(sp)
 8003d3c:	d9403817 	ldw	r5,224(sp)
 8003d40:	000d883a 	mov	r6,zero
 8003d44:	000f883a 	mov	r7,zero
 8003d48:	d8c03c15 	stw	r3,240(sp)
 8003d4c:	da003d15 	stw	r8,244(sp)
 8003d50:	800e3e40 	call	800e3e4 <__eqdf2>
 8003d54:	d8c03c17 	ldw	r3,240(sp)
 8003d58:	da003d17 	ldw	r8,244(sp)
 8003d5c:	1000f71e 	bne	r2,zero,800413c <___vfprintf_internal_r+0x12dc>
 8003d60:	d8801f17 	ldw	r2,124(sp)
 8003d64:	01020074 	movhi	r4,2049
 8003d68:	21102804 	addi	r4,r4,16544
 8003d6c:	18c00044 	addi	r3,r3,1
 8003d70:	10800044 	addi	r2,r2,1
 8003d74:	41000015 	stw	r4,0(r8)
 8003d78:	01000044 	movi	r4,1
 8003d7c:	41000115 	stw	r4,4(r8)
 8003d80:	d8c02015 	stw	r3,128(sp)
 8003d84:	d8801f15 	stw	r2,124(sp)
 8003d88:	010001c4 	movi	r4,7
 8003d8c:	2082b816 	blt	r4,r2,8004870 <___vfprintf_internal_r+0x1a10>
 8003d90:	42000204 	addi	r8,r8,8
 8003d94:	d8802617 	ldw	r2,152(sp)
 8003d98:	d9403317 	ldw	r5,204(sp)
 8003d9c:	11400216 	blt	r2,r5,8003da8 <___vfprintf_internal_r+0xf48>
 8003da0:	9080004c 	andi	r2,r18,1
 8003da4:	103eb326 	beq	r2,zero,8003874 <__alt_data_end+0xfc003874>
 8003da8:	d8803717 	ldw	r2,220(sp)
 8003dac:	d9003417 	ldw	r4,208(sp)
 8003db0:	d9403717 	ldw	r5,220(sp)
 8003db4:	1887883a 	add	r3,r3,r2
 8003db8:	d8801f17 	ldw	r2,124(sp)
 8003dbc:	41000015 	stw	r4,0(r8)
 8003dc0:	41400115 	stw	r5,4(r8)
 8003dc4:	10800044 	addi	r2,r2,1
 8003dc8:	d8c02015 	stw	r3,128(sp)
 8003dcc:	d8801f15 	stw	r2,124(sp)
 8003dd0:	010001c4 	movi	r4,7
 8003dd4:	20832916 	blt	r4,r2,8004a7c <___vfprintf_internal_r+0x1c1c>
 8003dd8:	42000204 	addi	r8,r8,8
 8003ddc:	d8803317 	ldw	r2,204(sp)
 8003de0:	143fffc4 	addi	r16,r2,-1
 8003de4:	043ea30e 	bge	zero,r16,8003874 <__alt_data_end+0xfc003874>
 8003de8:	04400404 	movi	r17,16
 8003dec:	d8801f17 	ldw	r2,124(sp)
 8003df0:	8c00880e 	bge	r17,r16,8004014 <___vfprintf_internal_r+0x11b4>
 8003df4:	01420074 	movhi	r5,2049
 8003df8:	29502884 	addi	r5,r5,16546
 8003dfc:	d9402c15 	stw	r5,176(sp)
 8003e00:	058001c4 	movi	r22,7
 8003e04:	dcc02d17 	ldw	r19,180(sp)
 8003e08:	00000306 	br	8003e18 <___vfprintf_internal_r+0xfb8>
 8003e0c:	42000204 	addi	r8,r8,8
 8003e10:	843ffc04 	addi	r16,r16,-16
 8003e14:	8c00820e 	bge	r17,r16,8004020 <___vfprintf_internal_r+0x11c0>
 8003e18:	18c00404 	addi	r3,r3,16
 8003e1c:	10800044 	addi	r2,r2,1
 8003e20:	45000015 	stw	r20,0(r8)
 8003e24:	44400115 	stw	r17,4(r8)
 8003e28:	d8c02015 	stw	r3,128(sp)
 8003e2c:	d8801f15 	stw	r2,124(sp)
 8003e30:	b0bff60e 	bge	r22,r2,8003e0c <__alt_data_end+0xfc003e0c>
 8003e34:	d9801e04 	addi	r6,sp,120
 8003e38:	b80b883a 	mov	r5,r23
 8003e3c:	9809883a 	mov	r4,r19
 8003e40:	800a6600 	call	800a660 <__sprint_r>
 8003e44:	103d0a1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8003e48:	d8c02017 	ldw	r3,128(sp)
 8003e4c:	d8801f17 	ldw	r2,124(sp)
 8003e50:	da000404 	addi	r8,sp,16
 8003e54:	003fee06 	br	8003e10 <__alt_data_end+0xfc003e10>
 8003e58:	d9403117 	ldw	r5,196(sp)
 8003e5c:	d8802917 	ldw	r2,164(sp)
 8003e60:	28adc83a 	sub	r22,r5,r2
 8003e64:	05be410e 	bge	zero,r22,800376c <__alt_data_end+0xfc00376c>
 8003e68:	07000404 	movi	fp,16
 8003e6c:	d8801f17 	ldw	r2,124(sp)
 8003e70:	e5838f0e 	bge	fp,r22,8004cb0 <___vfprintf_internal_r+0x1e50>
 8003e74:	01420074 	movhi	r5,2049
 8003e78:	29502884 	addi	r5,r5,16546
 8003e7c:	dc403015 	stw	r17,192(sp)
 8003e80:	d9402c15 	stw	r5,176(sp)
 8003e84:	b023883a 	mov	r17,r22
 8003e88:	04c001c4 	movi	r19,7
 8003e8c:	a82d883a 	mov	r22,r21
 8003e90:	902b883a 	mov	r21,r18
 8003e94:	8025883a 	mov	r18,r16
 8003e98:	dc002d17 	ldw	r16,180(sp)
 8003e9c:	00000306 	br	8003eac <___vfprintf_internal_r+0x104c>
 8003ea0:	8c7ffc04 	addi	r17,r17,-16
 8003ea4:	42000204 	addi	r8,r8,8
 8003ea8:	e440110e 	bge	fp,r17,8003ef0 <___vfprintf_internal_r+0x1090>
 8003eac:	18c00404 	addi	r3,r3,16
 8003eb0:	10800044 	addi	r2,r2,1
 8003eb4:	45000015 	stw	r20,0(r8)
 8003eb8:	47000115 	stw	fp,4(r8)
 8003ebc:	d8c02015 	stw	r3,128(sp)
 8003ec0:	d8801f15 	stw	r2,124(sp)
 8003ec4:	98bff60e 	bge	r19,r2,8003ea0 <__alt_data_end+0xfc003ea0>
 8003ec8:	d9801e04 	addi	r6,sp,120
 8003ecc:	b80b883a 	mov	r5,r23
 8003ed0:	8009883a 	mov	r4,r16
 8003ed4:	800a6600 	call	800a660 <__sprint_r>
 8003ed8:	103ce51e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8003edc:	8c7ffc04 	addi	r17,r17,-16
 8003ee0:	d8c02017 	ldw	r3,128(sp)
 8003ee4:	d8801f17 	ldw	r2,124(sp)
 8003ee8:	da000404 	addi	r8,sp,16
 8003eec:	e47fef16 	blt	fp,r17,8003eac <__alt_data_end+0xfc003eac>
 8003ef0:	9021883a 	mov	r16,r18
 8003ef4:	a825883a 	mov	r18,r21
 8003ef8:	b02b883a 	mov	r21,r22
 8003efc:	882d883a 	mov	r22,r17
 8003f00:	dc403017 	ldw	r17,192(sp)
 8003f04:	d9002c17 	ldw	r4,176(sp)
 8003f08:	1d87883a 	add	r3,r3,r22
 8003f0c:	10800044 	addi	r2,r2,1
 8003f10:	41000015 	stw	r4,0(r8)
 8003f14:	45800115 	stw	r22,4(r8)
 8003f18:	d8c02015 	stw	r3,128(sp)
 8003f1c:	d8801f15 	stw	r2,124(sp)
 8003f20:	010001c4 	movi	r4,7
 8003f24:	20818e16 	blt	r4,r2,8004560 <___vfprintf_internal_r+0x1700>
 8003f28:	42000204 	addi	r8,r8,8
 8003f2c:	003e0f06 	br	800376c <__alt_data_end+0xfc00376c>
 8003f30:	d9403317 	ldw	r5,204(sp)
 8003f34:	00800044 	movi	r2,1
 8003f38:	18c00044 	addi	r3,r3,1
 8003f3c:	1141530e 	bge	r2,r5,800448c <___vfprintf_internal_r+0x162c>
 8003f40:	dc401f17 	ldw	r17,124(sp)
 8003f44:	00800044 	movi	r2,1
 8003f48:	40800115 	stw	r2,4(r8)
 8003f4c:	8c400044 	addi	r17,r17,1
 8003f50:	44000015 	stw	r16,0(r8)
 8003f54:	d8c02015 	stw	r3,128(sp)
 8003f58:	dc401f15 	stw	r17,124(sp)
 8003f5c:	008001c4 	movi	r2,7
 8003f60:	14416b16 	blt	r2,r17,8004510 <___vfprintf_internal_r+0x16b0>
 8003f64:	42000204 	addi	r8,r8,8
 8003f68:	d8803717 	ldw	r2,220(sp)
 8003f6c:	d9003417 	ldw	r4,208(sp)
 8003f70:	8c400044 	addi	r17,r17,1
 8003f74:	10c7883a 	add	r3,r2,r3
 8003f78:	40800115 	stw	r2,4(r8)
 8003f7c:	41000015 	stw	r4,0(r8)
 8003f80:	d8c02015 	stw	r3,128(sp)
 8003f84:	dc401f15 	stw	r17,124(sp)
 8003f88:	008001c4 	movi	r2,7
 8003f8c:	14416916 	blt	r2,r17,8004534 <___vfprintf_internal_r+0x16d4>
 8003f90:	45800204 	addi	r22,r8,8
 8003f94:	d9003617 	ldw	r4,216(sp)
 8003f98:	d9403817 	ldw	r5,224(sp)
 8003f9c:	000d883a 	mov	r6,zero
 8003fa0:	000f883a 	mov	r7,zero
 8003fa4:	d8c03c15 	stw	r3,240(sp)
 8003fa8:	800e3e40 	call	800e3e4 <__eqdf2>
 8003fac:	d8c03c17 	ldw	r3,240(sp)
 8003fb0:	1000bc26 	beq	r2,zero,80042a4 <___vfprintf_internal_r+0x1444>
 8003fb4:	d9403317 	ldw	r5,204(sp)
 8003fb8:	84000044 	addi	r16,r16,1
 8003fbc:	8c400044 	addi	r17,r17,1
 8003fc0:	28bfffc4 	addi	r2,r5,-1
 8003fc4:	1887883a 	add	r3,r3,r2
 8003fc8:	b0800115 	stw	r2,4(r22)
 8003fcc:	b4000015 	stw	r16,0(r22)
 8003fd0:	d8c02015 	stw	r3,128(sp)
 8003fd4:	dc401f15 	stw	r17,124(sp)
 8003fd8:	008001c4 	movi	r2,7
 8003fdc:	14414316 	blt	r2,r17,80044ec <___vfprintf_internal_r+0x168c>
 8003fe0:	b5800204 	addi	r22,r22,8
 8003fe4:	d9003a17 	ldw	r4,232(sp)
 8003fe8:	df0022c4 	addi	fp,sp,139
 8003fec:	8c400044 	addi	r17,r17,1
 8003ff0:	20c7883a 	add	r3,r4,r3
 8003ff4:	b7000015 	stw	fp,0(r22)
 8003ff8:	b1000115 	stw	r4,4(r22)
 8003ffc:	d8c02015 	stw	r3,128(sp)
 8004000:	dc401f15 	stw	r17,124(sp)
 8004004:	008001c4 	movi	r2,7
 8004008:	14400e16 	blt	r2,r17,8004044 <___vfprintf_internal_r+0x11e4>
 800400c:	b2000204 	addi	r8,r22,8
 8004010:	003e1806 	br	8003874 <__alt_data_end+0xfc003874>
 8004014:	01020074 	movhi	r4,2049
 8004018:	21102884 	addi	r4,r4,16546
 800401c:	d9002c15 	stw	r4,176(sp)
 8004020:	d9002c17 	ldw	r4,176(sp)
 8004024:	1c07883a 	add	r3,r3,r16
 8004028:	44000115 	stw	r16,4(r8)
 800402c:	41000015 	stw	r4,0(r8)
 8004030:	10800044 	addi	r2,r2,1
 8004034:	d8c02015 	stw	r3,128(sp)
 8004038:	d8801f15 	stw	r2,124(sp)
 800403c:	010001c4 	movi	r4,7
 8004040:	20be0b0e 	bge	r4,r2,8003870 <__alt_data_end+0xfc003870>
 8004044:	d9002d17 	ldw	r4,180(sp)
 8004048:	d9801e04 	addi	r6,sp,120
 800404c:	b80b883a 	mov	r5,r23
 8004050:	800a6600 	call	800a660 <__sprint_r>
 8004054:	103c861e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004058:	d8c02017 	ldw	r3,128(sp)
 800405c:	da000404 	addi	r8,sp,16
 8004060:	003e0406 	br	8003874 <__alt_data_end+0xfc003874>
 8004064:	d9002d17 	ldw	r4,180(sp)
 8004068:	d9801e04 	addi	r6,sp,120
 800406c:	b80b883a 	mov	r5,r23
 8004070:	800a6600 	call	800a660 <__sprint_r>
 8004074:	103e3b26 	beq	r2,zero,8003964 <__alt_data_end+0xfc003964>
 8004078:	003c7d06 	br	8003270 <__alt_data_end+0xfc003270>
 800407c:	d9002d17 	ldw	r4,180(sp)
 8004080:	d9801e04 	addi	r6,sp,120
 8004084:	b80b883a 	mov	r5,r23
 8004088:	800a6600 	call	800a660 <__sprint_r>
 800408c:	103c781e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004090:	d8c02017 	ldw	r3,128(sp)
 8004094:	da000404 	addi	r8,sp,16
 8004098:	003de906 	br	8003840 <__alt_data_end+0xfc003840>
 800409c:	d9002d17 	ldw	r4,180(sp)
 80040a0:	d9801e04 	addi	r6,sp,120
 80040a4:	b80b883a 	mov	r5,r23
 80040a8:	800a6600 	call	800a660 <__sprint_r>
 80040ac:	103c701e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 80040b0:	d8c02017 	ldw	r3,128(sp)
 80040b4:	da000404 	addi	r8,sp,16
 80040b8:	003d9b06 	br	8003728 <__alt_data_end+0xfc003728>
 80040bc:	d9002d17 	ldw	r4,180(sp)
 80040c0:	d9801e04 	addi	r6,sp,120
 80040c4:	b80b883a 	mov	r5,r23
 80040c8:	800a6600 	call	800a660 <__sprint_r>
 80040cc:	103c681e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 80040d0:	d8c02017 	ldw	r3,128(sp)
 80040d4:	da000404 	addi	r8,sp,16
 80040d8:	003da106 	br	8003760 <__alt_data_end+0xfc003760>
 80040dc:	d9402a17 	ldw	r5,168(sp)
 80040e0:	d8002785 	stb	zero,158(sp)
 80040e4:	283f0616 	blt	r5,zero,8003d00 <__alt_data_end+0xfc003d00>
 80040e8:	00ffdfc4 	movi	r3,-129
 80040ec:	9d84b03a 	or	r2,r19,r22
 80040f0:	90e4703a 	and	r18,r18,r3
 80040f4:	103c3b26 	beq	r2,zero,80031e4 <__alt_data_end+0xfc0031e4>
 80040f8:	0039883a 	mov	fp,zero
 80040fc:	003e5806 	br	8003a60 <__alt_data_end+0xfc003a60>
 8004100:	9080040c 	andi	r2,r18,16
 8004104:	1001b326 	beq	r2,zero,80047d4 <___vfprintf_internal_r+0x1974>
 8004108:	d8c02e17 	ldw	r3,184(sp)
 800410c:	d9002a17 	ldw	r4,168(sp)
 8004110:	d8002785 	stb	zero,158(sp)
 8004114:	18800104 	addi	r2,r3,4
 8004118:	1cc00017 	ldw	r19,0(r3)
 800411c:	002d883a 	mov	r22,zero
 8004120:	2001b516 	blt	r4,zero,80047f8 <___vfprintf_internal_r+0x1998>
 8004124:	00ffdfc4 	movi	r3,-129
 8004128:	d8802e15 	stw	r2,184(sp)
 800412c:	90e4703a 	and	r18,r18,r3
 8004130:	983d0526 	beq	r19,zero,8003548 <__alt_data_end+0xfc003548>
 8004134:	0039883a 	mov	fp,zero
 8004138:	003d0806 	br	800355c <__alt_data_end+0xfc00355c>
 800413c:	dc402617 	ldw	r17,152(sp)
 8004140:	0441d30e 	bge	zero,r17,8004890 <___vfprintf_internal_r+0x1a30>
 8004144:	dc403217 	ldw	r17,200(sp)
 8004148:	d8803317 	ldw	r2,204(sp)
 800414c:	1440010e 	bge	r2,r17,8004154 <___vfprintf_internal_r+0x12f4>
 8004150:	1023883a 	mov	r17,r2
 8004154:	04400a0e 	bge	zero,r17,8004180 <___vfprintf_internal_r+0x1320>
 8004158:	d8801f17 	ldw	r2,124(sp)
 800415c:	1c47883a 	add	r3,r3,r17
 8004160:	44000015 	stw	r16,0(r8)
 8004164:	10800044 	addi	r2,r2,1
 8004168:	44400115 	stw	r17,4(r8)
 800416c:	d8c02015 	stw	r3,128(sp)
 8004170:	d8801f15 	stw	r2,124(sp)
 8004174:	010001c4 	movi	r4,7
 8004178:	20826516 	blt	r4,r2,8004b10 <___vfprintf_internal_r+0x1cb0>
 800417c:	42000204 	addi	r8,r8,8
 8004180:	88026116 	blt	r17,zero,8004b08 <___vfprintf_internal_r+0x1ca8>
 8004184:	d9003217 	ldw	r4,200(sp)
 8004188:	2463c83a 	sub	r17,r4,r17
 800418c:	04407b0e 	bge	zero,r17,800437c <___vfprintf_internal_r+0x151c>
 8004190:	05800404 	movi	r22,16
 8004194:	d8801f17 	ldw	r2,124(sp)
 8004198:	b4419d0e 	bge	r22,r17,8004810 <___vfprintf_internal_r+0x19b0>
 800419c:	01020074 	movhi	r4,2049
 80041a0:	21102884 	addi	r4,r4,16546
 80041a4:	d9002c15 	stw	r4,176(sp)
 80041a8:	070001c4 	movi	fp,7
 80041ac:	dcc02d17 	ldw	r19,180(sp)
 80041b0:	00000306 	br	80041c0 <___vfprintf_internal_r+0x1360>
 80041b4:	42000204 	addi	r8,r8,8
 80041b8:	8c7ffc04 	addi	r17,r17,-16
 80041bc:	b441970e 	bge	r22,r17,800481c <___vfprintf_internal_r+0x19bc>
 80041c0:	18c00404 	addi	r3,r3,16
 80041c4:	10800044 	addi	r2,r2,1
 80041c8:	45000015 	stw	r20,0(r8)
 80041cc:	45800115 	stw	r22,4(r8)
 80041d0:	d8c02015 	stw	r3,128(sp)
 80041d4:	d8801f15 	stw	r2,124(sp)
 80041d8:	e0bff60e 	bge	fp,r2,80041b4 <__alt_data_end+0xfc0041b4>
 80041dc:	d9801e04 	addi	r6,sp,120
 80041e0:	b80b883a 	mov	r5,r23
 80041e4:	9809883a 	mov	r4,r19
 80041e8:	800a6600 	call	800a660 <__sprint_r>
 80041ec:	103c201e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 80041f0:	d8c02017 	ldw	r3,128(sp)
 80041f4:	d8801f17 	ldw	r2,124(sp)
 80041f8:	da000404 	addi	r8,sp,16
 80041fc:	003fee06 	br	80041b8 <__alt_data_end+0xfc0041b8>
 8004200:	d9002d17 	ldw	r4,180(sp)
 8004204:	d9801e04 	addi	r6,sp,120
 8004208:	b80b883a 	mov	r5,r23
 800420c:	800a6600 	call	800a660 <__sprint_r>
 8004210:	103c171e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004214:	d8c02017 	ldw	r3,128(sp)
 8004218:	df002787 	ldb	fp,158(sp)
 800421c:	da000404 	addi	r8,sp,16
 8004220:	003d3406 	br	80036f4 <__alt_data_end+0xfc0036f4>
 8004224:	9080040c 	andi	r2,r18,16
 8004228:	10016126 	beq	r2,zero,80047b0 <___vfprintf_internal_r+0x1950>
 800422c:	d9402e17 	ldw	r5,184(sp)
 8004230:	2cc00017 	ldw	r19,0(r5)
 8004234:	29400104 	addi	r5,r5,4
 8004238:	d9402e15 	stw	r5,184(sp)
 800423c:	982dd7fa 	srai	r22,r19,31
 8004240:	b005883a 	mov	r2,r22
 8004244:	003c5a06 	br	80033b0 <__alt_data_end+0xfc0033b0>
 8004248:	9080040c 	andi	r2,r18,16
 800424c:	10003526 	beq	r2,zero,8004324 <___vfprintf_internal_r+0x14c4>
 8004250:	d8c02e17 	ldw	r3,184(sp)
 8004254:	d9002a17 	ldw	r4,168(sp)
 8004258:	d8002785 	stb	zero,158(sp)
 800425c:	18800104 	addi	r2,r3,4
 8004260:	1cc00017 	ldw	r19,0(r3)
 8004264:	002d883a 	mov	r22,zero
 8004268:	20003716 	blt	r4,zero,8004348 <___vfprintf_internal_r+0x14e8>
 800426c:	00ffdfc4 	movi	r3,-129
 8004270:	d8802e15 	stw	r2,184(sp)
 8004274:	90e4703a 	and	r18,r18,r3
 8004278:	0039883a 	mov	fp,zero
 800427c:	983dd426 	beq	r19,zero,80039d0 <__alt_data_end+0xfc0039d0>
 8004280:	00800244 	movi	r2,9
 8004284:	14fc5336 	bltu	r2,r19,80033d4 <__alt_data_end+0xfc0033d4>
 8004288:	d8c02817 	ldw	r3,160(sp)
 800428c:	dc001dc4 	addi	r16,sp,119
 8004290:	9cc00c04 	addi	r19,r19,48
 8004294:	1c07c83a 	sub	r3,r3,r16
 8004298:	dcc01dc5 	stb	r19,119(sp)
 800429c:	d8c02b15 	stw	r3,172(sp)
 80042a0:	003cc606 	br	80035bc <__alt_data_end+0xfc0035bc>
 80042a4:	d8803317 	ldw	r2,204(sp)
 80042a8:	143fffc4 	addi	r16,r2,-1
 80042ac:	043f4d0e 	bge	zero,r16,8003fe4 <__alt_data_end+0xfc003fe4>
 80042b0:	07000404 	movi	fp,16
 80042b4:	e400810e 	bge	fp,r16,80044bc <___vfprintf_internal_r+0x165c>
 80042b8:	01420074 	movhi	r5,2049
 80042bc:	29502884 	addi	r5,r5,16546
 80042c0:	d9402c15 	stw	r5,176(sp)
 80042c4:	01c001c4 	movi	r7,7
 80042c8:	dcc02d17 	ldw	r19,180(sp)
 80042cc:	00000306 	br	80042dc <___vfprintf_internal_r+0x147c>
 80042d0:	b5800204 	addi	r22,r22,8
 80042d4:	843ffc04 	addi	r16,r16,-16
 80042d8:	e4007b0e 	bge	fp,r16,80044c8 <___vfprintf_internal_r+0x1668>
 80042dc:	18c00404 	addi	r3,r3,16
 80042e0:	8c400044 	addi	r17,r17,1
 80042e4:	b5000015 	stw	r20,0(r22)
 80042e8:	b7000115 	stw	fp,4(r22)
 80042ec:	d8c02015 	stw	r3,128(sp)
 80042f0:	dc401f15 	stw	r17,124(sp)
 80042f4:	3c7ff60e 	bge	r7,r17,80042d0 <__alt_data_end+0xfc0042d0>
 80042f8:	d9801e04 	addi	r6,sp,120
 80042fc:	b80b883a 	mov	r5,r23
 8004300:	9809883a 	mov	r4,r19
 8004304:	d9c03c15 	stw	r7,240(sp)
 8004308:	800a6600 	call	800a660 <__sprint_r>
 800430c:	d9c03c17 	ldw	r7,240(sp)
 8004310:	103bd71e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004314:	d8c02017 	ldw	r3,128(sp)
 8004318:	dc401f17 	ldw	r17,124(sp)
 800431c:	dd800404 	addi	r22,sp,16
 8004320:	003fec06 	br	80042d4 <__alt_data_end+0xfc0042d4>
 8004324:	9080100c 	andi	r2,r18,64
 8004328:	d8002785 	stb	zero,158(sp)
 800432c:	10010e26 	beq	r2,zero,8004768 <___vfprintf_internal_r+0x1908>
 8004330:	d9402e17 	ldw	r5,184(sp)
 8004334:	d8c02a17 	ldw	r3,168(sp)
 8004338:	002d883a 	mov	r22,zero
 800433c:	28800104 	addi	r2,r5,4
 8004340:	2cc0000b 	ldhu	r19,0(r5)
 8004344:	183fc90e 	bge	r3,zero,800426c <__alt_data_end+0xfc00426c>
 8004348:	d8802e15 	stw	r2,184(sp)
 800434c:	0039883a 	mov	fp,zero
 8004350:	9d84b03a 	or	r2,r19,r22
 8004354:	103c1e1e 	bne	r2,zero,80033d0 <__alt_data_end+0xfc0033d0>
 8004358:	00800044 	movi	r2,1
 800435c:	003e6c06 	br	8003d10 <__alt_data_end+0xfc003d10>
 8004360:	d9002d17 	ldw	r4,180(sp)
 8004364:	d9801e04 	addi	r6,sp,120
 8004368:	b80b883a 	mov	r5,r23
 800436c:	800a6600 	call	800a660 <__sprint_r>
 8004370:	103bbf1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004374:	d8c02017 	ldw	r3,128(sp)
 8004378:	da000404 	addi	r8,sp,16
 800437c:	d9003217 	ldw	r4,200(sp)
 8004380:	d8802617 	ldw	r2,152(sp)
 8004384:	d9403317 	ldw	r5,204(sp)
 8004388:	8123883a 	add	r17,r16,r4
 800438c:	11400216 	blt	r2,r5,8004398 <___vfprintf_internal_r+0x1538>
 8004390:	9100004c 	andi	r4,r18,1
 8004394:	20000d26 	beq	r4,zero,80043cc <___vfprintf_internal_r+0x156c>
 8004398:	d9003717 	ldw	r4,220(sp)
 800439c:	d9403417 	ldw	r5,208(sp)
 80043a0:	1907883a 	add	r3,r3,r4
 80043a4:	d9001f17 	ldw	r4,124(sp)
 80043a8:	41400015 	stw	r5,0(r8)
 80043ac:	d9403717 	ldw	r5,220(sp)
 80043b0:	21000044 	addi	r4,r4,1
 80043b4:	d8c02015 	stw	r3,128(sp)
 80043b8:	41400115 	stw	r5,4(r8)
 80043bc:	d9001f15 	stw	r4,124(sp)
 80043c0:	014001c4 	movi	r5,7
 80043c4:	2901e816 	blt	r5,r4,8004b68 <___vfprintf_internal_r+0x1d08>
 80043c8:	42000204 	addi	r8,r8,8
 80043cc:	d9003317 	ldw	r4,204(sp)
 80043d0:	8121883a 	add	r16,r16,r4
 80043d4:	2085c83a 	sub	r2,r4,r2
 80043d8:	8461c83a 	sub	r16,r16,r17
 80043dc:	1400010e 	bge	r2,r16,80043e4 <___vfprintf_internal_r+0x1584>
 80043e0:	1021883a 	mov	r16,r2
 80043e4:	04000a0e 	bge	zero,r16,8004410 <___vfprintf_internal_r+0x15b0>
 80043e8:	d9001f17 	ldw	r4,124(sp)
 80043ec:	1c07883a 	add	r3,r3,r16
 80043f0:	44400015 	stw	r17,0(r8)
 80043f4:	21000044 	addi	r4,r4,1
 80043f8:	44000115 	stw	r16,4(r8)
 80043fc:	d8c02015 	stw	r3,128(sp)
 8004400:	d9001f15 	stw	r4,124(sp)
 8004404:	014001c4 	movi	r5,7
 8004408:	2901fb16 	blt	r5,r4,8004bf8 <___vfprintf_internal_r+0x1d98>
 800440c:	42000204 	addi	r8,r8,8
 8004410:	8001f716 	blt	r16,zero,8004bf0 <___vfprintf_internal_r+0x1d90>
 8004414:	1421c83a 	sub	r16,r2,r16
 8004418:	043d160e 	bge	zero,r16,8003874 <__alt_data_end+0xfc003874>
 800441c:	04400404 	movi	r17,16
 8004420:	d8801f17 	ldw	r2,124(sp)
 8004424:	8c3efb0e 	bge	r17,r16,8004014 <__alt_data_end+0xfc004014>
 8004428:	01420074 	movhi	r5,2049
 800442c:	29502884 	addi	r5,r5,16546
 8004430:	d9402c15 	stw	r5,176(sp)
 8004434:	058001c4 	movi	r22,7
 8004438:	dcc02d17 	ldw	r19,180(sp)
 800443c:	00000306 	br	800444c <___vfprintf_internal_r+0x15ec>
 8004440:	42000204 	addi	r8,r8,8
 8004444:	843ffc04 	addi	r16,r16,-16
 8004448:	8c3ef50e 	bge	r17,r16,8004020 <__alt_data_end+0xfc004020>
 800444c:	18c00404 	addi	r3,r3,16
 8004450:	10800044 	addi	r2,r2,1
 8004454:	45000015 	stw	r20,0(r8)
 8004458:	44400115 	stw	r17,4(r8)
 800445c:	d8c02015 	stw	r3,128(sp)
 8004460:	d8801f15 	stw	r2,124(sp)
 8004464:	b0bff60e 	bge	r22,r2,8004440 <__alt_data_end+0xfc004440>
 8004468:	d9801e04 	addi	r6,sp,120
 800446c:	b80b883a 	mov	r5,r23
 8004470:	9809883a 	mov	r4,r19
 8004474:	800a6600 	call	800a660 <__sprint_r>
 8004478:	103b7d1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 800447c:	d8c02017 	ldw	r3,128(sp)
 8004480:	d8801f17 	ldw	r2,124(sp)
 8004484:	da000404 	addi	r8,sp,16
 8004488:	003fee06 	br	8004444 <__alt_data_end+0xfc004444>
 800448c:	9088703a 	and	r4,r18,r2
 8004490:	203eab1e 	bne	r4,zero,8003f40 <__alt_data_end+0xfc003f40>
 8004494:	dc401f17 	ldw	r17,124(sp)
 8004498:	40800115 	stw	r2,4(r8)
 800449c:	44000015 	stw	r16,0(r8)
 80044a0:	8c400044 	addi	r17,r17,1
 80044a4:	d8c02015 	stw	r3,128(sp)
 80044a8:	dc401f15 	stw	r17,124(sp)
 80044ac:	008001c4 	movi	r2,7
 80044b0:	14400e16 	blt	r2,r17,80044ec <___vfprintf_internal_r+0x168c>
 80044b4:	45800204 	addi	r22,r8,8
 80044b8:	003eca06 	br	8003fe4 <__alt_data_end+0xfc003fe4>
 80044bc:	01020074 	movhi	r4,2049
 80044c0:	21102884 	addi	r4,r4,16546
 80044c4:	d9002c15 	stw	r4,176(sp)
 80044c8:	d8802c17 	ldw	r2,176(sp)
 80044cc:	1c07883a 	add	r3,r3,r16
 80044d0:	8c400044 	addi	r17,r17,1
 80044d4:	b0800015 	stw	r2,0(r22)
 80044d8:	b4000115 	stw	r16,4(r22)
 80044dc:	d8c02015 	stw	r3,128(sp)
 80044e0:	dc401f15 	stw	r17,124(sp)
 80044e4:	008001c4 	movi	r2,7
 80044e8:	147ebd0e 	bge	r2,r17,8003fe0 <__alt_data_end+0xfc003fe0>
 80044ec:	d9002d17 	ldw	r4,180(sp)
 80044f0:	d9801e04 	addi	r6,sp,120
 80044f4:	b80b883a 	mov	r5,r23
 80044f8:	800a6600 	call	800a660 <__sprint_r>
 80044fc:	103b5c1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004500:	d8c02017 	ldw	r3,128(sp)
 8004504:	dc401f17 	ldw	r17,124(sp)
 8004508:	dd800404 	addi	r22,sp,16
 800450c:	003eb506 	br	8003fe4 <__alt_data_end+0xfc003fe4>
 8004510:	d9002d17 	ldw	r4,180(sp)
 8004514:	d9801e04 	addi	r6,sp,120
 8004518:	b80b883a 	mov	r5,r23
 800451c:	800a6600 	call	800a660 <__sprint_r>
 8004520:	103b531e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004524:	d8c02017 	ldw	r3,128(sp)
 8004528:	dc401f17 	ldw	r17,124(sp)
 800452c:	da000404 	addi	r8,sp,16
 8004530:	003e8d06 	br	8003f68 <__alt_data_end+0xfc003f68>
 8004534:	d9002d17 	ldw	r4,180(sp)
 8004538:	d9801e04 	addi	r6,sp,120
 800453c:	b80b883a 	mov	r5,r23
 8004540:	800a6600 	call	800a660 <__sprint_r>
 8004544:	103b4a1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004548:	d8c02017 	ldw	r3,128(sp)
 800454c:	dc401f17 	ldw	r17,124(sp)
 8004550:	dd800404 	addi	r22,sp,16
 8004554:	003e8f06 	br	8003f94 <__alt_data_end+0xfc003f94>
 8004558:	0027883a 	mov	r19,zero
 800455c:	003f4a06 	br	8004288 <__alt_data_end+0xfc004288>
 8004560:	d9002d17 	ldw	r4,180(sp)
 8004564:	d9801e04 	addi	r6,sp,120
 8004568:	b80b883a 	mov	r5,r23
 800456c:	800a6600 	call	800a660 <__sprint_r>
 8004570:	103b3f1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004574:	d8c02017 	ldw	r3,128(sp)
 8004578:	da000404 	addi	r8,sp,16
 800457c:	003c7b06 	br	800376c <__alt_data_end+0xfc00376c>
 8004580:	d9402a17 	ldw	r5,168(sp)
 8004584:	04e7c83a 	sub	r19,zero,r19
 8004588:	07000b44 	movi	fp,45
 800458c:	9804c03a 	cmpne	r2,r19,zero
 8004590:	05adc83a 	sub	r22,zero,r22
 8004594:	df002785 	stb	fp,158(sp)
 8004598:	b0adc83a 	sub	r22,r22,r2
 800459c:	28017b16 	blt	r5,zero,8004b8c <___vfprintf_internal_r+0x1d2c>
 80045a0:	00bfdfc4 	movi	r2,-129
 80045a4:	90a4703a 	and	r18,r18,r2
 80045a8:	003b8906 	br	80033d0 <__alt_data_end+0xfc0033d0>
 80045ac:	d9003617 	ldw	r4,216(sp)
 80045b0:	d9403817 	ldw	r5,224(sp)
 80045b4:	da003d15 	stw	r8,244(sp)
 80045b8:	800a2840 	call	800a284 <__fpclassifyd>
 80045bc:	da003d17 	ldw	r8,244(sp)
 80045c0:	1000f026 	beq	r2,zero,8004984 <___vfprintf_internal_r+0x1b24>
 80045c4:	d9002a17 	ldw	r4,168(sp)
 80045c8:	05bff7c4 	movi	r22,-33
 80045cc:	00bfffc4 	movi	r2,-1
 80045d0:	8dac703a 	and	r22,r17,r22
 80045d4:	20820026 	beq	r4,r2,8004dd8 <___vfprintf_internal_r+0x1f78>
 80045d8:	008011c4 	movi	r2,71
 80045dc:	b081f726 	beq	r22,r2,8004dbc <___vfprintf_internal_r+0x1f5c>
 80045e0:	d9003817 	ldw	r4,224(sp)
 80045e4:	90c04014 	ori	r3,r18,256
 80045e8:	d8c02c15 	stw	r3,176(sp)
 80045ec:	20021516 	blt	r4,zero,8004e44 <___vfprintf_internal_r+0x1fe4>
 80045f0:	dcc03817 	ldw	r19,224(sp)
 80045f4:	d8002905 	stb	zero,164(sp)
 80045f8:	00801984 	movi	r2,102
 80045fc:	8881f926 	beq	r17,r2,8004de4 <___vfprintf_internal_r+0x1f84>
 8004600:	00801184 	movi	r2,70
 8004604:	88821c26 	beq	r17,r2,8004e78 <___vfprintf_internal_r+0x2018>
 8004608:	00801144 	movi	r2,69
 800460c:	b081ef26 	beq	r22,r2,8004dcc <___vfprintf_internal_r+0x1f6c>
 8004610:	d8c02a17 	ldw	r3,168(sp)
 8004614:	d8802104 	addi	r2,sp,132
 8004618:	d8800315 	stw	r2,12(sp)
 800461c:	d9403617 	ldw	r5,216(sp)
 8004620:	d8802504 	addi	r2,sp,148
 8004624:	d9002d17 	ldw	r4,180(sp)
 8004628:	d8800215 	stw	r2,8(sp)
 800462c:	d8802604 	addi	r2,sp,152
 8004630:	d8c00015 	stw	r3,0(sp)
 8004634:	d8800115 	stw	r2,4(sp)
 8004638:	01c00084 	movi	r7,2
 800463c:	980d883a 	mov	r6,r19
 8004640:	d8c03c15 	stw	r3,240(sp)
 8004644:	da003d15 	stw	r8,244(sp)
 8004648:	80055900 	call	8005590 <_dtoa_r>
 800464c:	1021883a 	mov	r16,r2
 8004650:	008019c4 	movi	r2,103
 8004654:	d8c03c17 	ldw	r3,240(sp)
 8004658:	da003d17 	ldw	r8,244(sp)
 800465c:	88817126 	beq	r17,r2,8004c24 <___vfprintf_internal_r+0x1dc4>
 8004660:	008011c4 	movi	r2,71
 8004664:	88829126 	beq	r17,r2,80050ac <___vfprintf_internal_r+0x224c>
 8004668:	80f9883a 	add	fp,r16,r3
 800466c:	d9003617 	ldw	r4,216(sp)
 8004670:	000d883a 	mov	r6,zero
 8004674:	000f883a 	mov	r7,zero
 8004678:	980b883a 	mov	r5,r19
 800467c:	da003d15 	stw	r8,244(sp)
 8004680:	800e3e40 	call	800e3e4 <__eqdf2>
 8004684:	da003d17 	ldw	r8,244(sp)
 8004688:	10018d26 	beq	r2,zero,8004cc0 <___vfprintf_internal_r+0x1e60>
 800468c:	d8802117 	ldw	r2,132(sp)
 8004690:	1700062e 	bgeu	r2,fp,80046ac <___vfprintf_internal_r+0x184c>
 8004694:	01000c04 	movi	r4,48
 8004698:	10c00044 	addi	r3,r2,1
 800469c:	d8c02115 	stw	r3,132(sp)
 80046a0:	11000005 	stb	r4,0(r2)
 80046a4:	d8802117 	ldw	r2,132(sp)
 80046a8:	173ffb36 	bltu	r2,fp,8004698 <__alt_data_end+0xfc004698>
 80046ac:	1405c83a 	sub	r2,r2,r16
 80046b0:	d8803315 	stw	r2,204(sp)
 80046b4:	008011c4 	movi	r2,71
 80046b8:	b0817626 	beq	r22,r2,8004c94 <___vfprintf_internal_r+0x1e34>
 80046bc:	00801944 	movi	r2,101
 80046c0:	1442800e 	bge	r2,r17,80050c4 <___vfprintf_internal_r+0x2264>
 80046c4:	d8c02617 	ldw	r3,152(sp)
 80046c8:	00801984 	movi	r2,102
 80046cc:	d8c03215 	stw	r3,200(sp)
 80046d0:	8881fe26 	beq	r17,r2,8004ecc <___vfprintf_internal_r+0x206c>
 80046d4:	d8c03217 	ldw	r3,200(sp)
 80046d8:	d9003317 	ldw	r4,204(sp)
 80046dc:	1901dd16 	blt	r3,r4,8004e54 <___vfprintf_internal_r+0x1ff4>
 80046e0:	9480004c 	andi	r18,r18,1
 80046e4:	90022b1e 	bne	r18,zero,8004f94 <___vfprintf_internal_r+0x2134>
 80046e8:	1805883a 	mov	r2,r3
 80046ec:	18028316 	blt	r3,zero,80050fc <___vfprintf_internal_r+0x229c>
 80046f0:	d8c03217 	ldw	r3,200(sp)
 80046f4:	044019c4 	movi	r17,103
 80046f8:	d8c02b15 	stw	r3,172(sp)
 80046fc:	df002907 	ldb	fp,164(sp)
 8004700:	e001531e 	bne	fp,zero,8004c50 <___vfprintf_internal_r+0x1df0>
 8004704:	df002783 	ldbu	fp,158(sp)
 8004708:	d8802915 	stw	r2,164(sp)
 800470c:	dc802c17 	ldw	r18,176(sp)
 8004710:	d8002a15 	stw	zero,168(sp)
 8004714:	003baf06 	br	80035d4 <__alt_data_end+0xfc0035d4>
 8004718:	d8c02e17 	ldw	r3,184(sp)
 800471c:	d9002e17 	ldw	r4,184(sp)
 8004720:	d9402e17 	ldw	r5,184(sp)
 8004724:	18c00017 	ldw	r3,0(r3)
 8004728:	21000117 	ldw	r4,4(r4)
 800472c:	29400204 	addi	r5,r5,8
 8004730:	d8c03615 	stw	r3,216(sp)
 8004734:	d9003815 	stw	r4,224(sp)
 8004738:	d9402e15 	stw	r5,184(sp)
 800473c:	003b5006 	br	8003480 <__alt_data_end+0xfc003480>
 8004740:	ac400007 	ldb	r17,0(r21)
 8004744:	003a2806 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 8004748:	9080100c 	andi	r2,r18,64
 800474c:	1000a826 	beq	r2,zero,80049f0 <___vfprintf_internal_r+0x1b90>
 8004750:	d8c02e17 	ldw	r3,184(sp)
 8004754:	002d883a 	mov	r22,zero
 8004758:	1cc0000b 	ldhu	r19,0(r3)
 800475c:	18c00104 	addi	r3,r3,4
 8004760:	d8c02e15 	stw	r3,184(sp)
 8004764:	003caf06 	br	8003a24 <__alt_data_end+0xfc003a24>
 8004768:	d9002e17 	ldw	r4,184(sp)
 800476c:	d9402a17 	ldw	r5,168(sp)
 8004770:	002d883a 	mov	r22,zero
 8004774:	20800104 	addi	r2,r4,4
 8004778:	24c00017 	ldw	r19,0(r4)
 800477c:	283ebb0e 	bge	r5,zero,800426c <__alt_data_end+0xfc00426c>
 8004780:	003ef106 	br	8004348 <__alt_data_end+0xfc004348>
 8004784:	9080040c 	andi	r2,r18,16
 8004788:	1000921e 	bne	r2,zero,80049d4 <___vfprintf_internal_r+0x1b74>
 800478c:	9480100c 	andi	r18,r18,64
 8004790:	90013926 	beq	r18,zero,8004c78 <___vfprintf_internal_r+0x1e18>
 8004794:	d9402e17 	ldw	r5,184(sp)
 8004798:	d8c02f17 	ldw	r3,188(sp)
 800479c:	28800017 	ldw	r2,0(r5)
 80047a0:	29400104 	addi	r5,r5,4
 80047a4:	d9402e15 	stw	r5,184(sp)
 80047a8:	10c0000d 	sth	r3,0(r2)
 80047ac:	0039e406 	br	8002f40 <__alt_data_end+0xfc002f40>
 80047b0:	9080100c 	andi	r2,r18,64
 80047b4:	10008026 	beq	r2,zero,80049b8 <___vfprintf_internal_r+0x1b58>
 80047b8:	d8802e17 	ldw	r2,184(sp)
 80047bc:	14c0000f 	ldh	r19,0(r2)
 80047c0:	10800104 	addi	r2,r2,4
 80047c4:	d8802e15 	stw	r2,184(sp)
 80047c8:	982dd7fa 	srai	r22,r19,31
 80047cc:	b005883a 	mov	r2,r22
 80047d0:	003af706 	br	80033b0 <__alt_data_end+0xfc0033b0>
 80047d4:	9080100c 	andi	r2,r18,64
 80047d8:	d8002785 	stb	zero,158(sp)
 80047dc:	10008a1e 	bne	r2,zero,8004a08 <___vfprintf_internal_r+0x1ba8>
 80047e0:	d9002e17 	ldw	r4,184(sp)
 80047e4:	d9402a17 	ldw	r5,168(sp)
 80047e8:	002d883a 	mov	r22,zero
 80047ec:	20800104 	addi	r2,r4,4
 80047f0:	24c00017 	ldw	r19,0(r4)
 80047f4:	283e4b0e 	bge	r5,zero,8004124 <__alt_data_end+0xfc004124>
 80047f8:	9d86b03a 	or	r3,r19,r22
 80047fc:	d8802e15 	stw	r2,184(sp)
 8004800:	183e4c1e 	bne	r3,zero,8004134 <__alt_data_end+0xfc004134>
 8004804:	0039883a 	mov	fp,zero
 8004808:	0005883a 	mov	r2,zero
 800480c:	003d4006 	br	8003d10 <__alt_data_end+0xfc003d10>
 8004810:	01420074 	movhi	r5,2049
 8004814:	29502884 	addi	r5,r5,16546
 8004818:	d9402c15 	stw	r5,176(sp)
 800481c:	d9402c17 	ldw	r5,176(sp)
 8004820:	1c47883a 	add	r3,r3,r17
 8004824:	10800044 	addi	r2,r2,1
 8004828:	41400015 	stw	r5,0(r8)
 800482c:	44400115 	stw	r17,4(r8)
 8004830:	d8c02015 	stw	r3,128(sp)
 8004834:	d8801f15 	stw	r2,124(sp)
 8004838:	010001c4 	movi	r4,7
 800483c:	20bec816 	blt	r4,r2,8004360 <__alt_data_end+0xfc004360>
 8004840:	42000204 	addi	r8,r8,8
 8004844:	003ecd06 	br	800437c <__alt_data_end+0xfc00437c>
 8004848:	d9002a17 	ldw	r4,168(sp)
 800484c:	d8002785 	stb	zero,158(sp)
 8004850:	203d2d16 	blt	r4,zero,8003d08 <__alt_data_end+0xfc003d08>
 8004854:	00bfdfc4 	movi	r2,-129
 8004858:	90a4703a 	and	r18,r18,r2
 800485c:	003a6106 	br	80031e4 <__alt_data_end+0xfc0031e4>
 8004860:	01020074 	movhi	r4,2049
 8004864:	21102884 	addi	r4,r4,16546
 8004868:	d9002c15 	stw	r4,176(sp)
 800486c:	003bea06 	br	8003818 <__alt_data_end+0xfc003818>
 8004870:	d9002d17 	ldw	r4,180(sp)
 8004874:	d9801e04 	addi	r6,sp,120
 8004878:	b80b883a 	mov	r5,r23
 800487c:	800a6600 	call	800a660 <__sprint_r>
 8004880:	103a7b1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004884:	d8c02017 	ldw	r3,128(sp)
 8004888:	da000404 	addi	r8,sp,16
 800488c:	003d4106 	br	8003d94 <__alt_data_end+0xfc003d94>
 8004890:	d8801f17 	ldw	r2,124(sp)
 8004894:	01420074 	movhi	r5,2049
 8004898:	01000044 	movi	r4,1
 800489c:	18c00044 	addi	r3,r3,1
 80048a0:	10800044 	addi	r2,r2,1
 80048a4:	29502804 	addi	r5,r5,16544
 80048a8:	41000115 	stw	r4,4(r8)
 80048ac:	41400015 	stw	r5,0(r8)
 80048b0:	d8c02015 	stw	r3,128(sp)
 80048b4:	d8801f15 	stw	r2,124(sp)
 80048b8:	010001c4 	movi	r4,7
 80048bc:	20805c16 	blt	r4,r2,8004a30 <___vfprintf_internal_r+0x1bd0>
 80048c0:	42000204 	addi	r8,r8,8
 80048c4:	8800041e 	bne	r17,zero,80048d8 <___vfprintf_internal_r+0x1a78>
 80048c8:	d8803317 	ldw	r2,204(sp)
 80048cc:	1000021e 	bne	r2,zero,80048d8 <___vfprintf_internal_r+0x1a78>
 80048d0:	9080004c 	andi	r2,r18,1
 80048d4:	103be726 	beq	r2,zero,8003874 <__alt_data_end+0xfc003874>
 80048d8:	d9003717 	ldw	r4,220(sp)
 80048dc:	d8801f17 	ldw	r2,124(sp)
 80048e0:	d9403417 	ldw	r5,208(sp)
 80048e4:	20c7883a 	add	r3,r4,r3
 80048e8:	10800044 	addi	r2,r2,1
 80048ec:	41000115 	stw	r4,4(r8)
 80048f0:	41400015 	stw	r5,0(r8)
 80048f4:	d8c02015 	stw	r3,128(sp)
 80048f8:	d8801f15 	stw	r2,124(sp)
 80048fc:	010001c4 	movi	r4,7
 8004900:	20812116 	blt	r4,r2,8004d88 <___vfprintf_internal_r+0x1f28>
 8004904:	42000204 	addi	r8,r8,8
 8004908:	0463c83a 	sub	r17,zero,r17
 800490c:	0440730e 	bge	zero,r17,8004adc <___vfprintf_internal_r+0x1c7c>
 8004910:	05800404 	movi	r22,16
 8004914:	b440860e 	bge	r22,r17,8004b30 <___vfprintf_internal_r+0x1cd0>
 8004918:	01420074 	movhi	r5,2049
 800491c:	29502884 	addi	r5,r5,16546
 8004920:	d9402c15 	stw	r5,176(sp)
 8004924:	070001c4 	movi	fp,7
 8004928:	dcc02d17 	ldw	r19,180(sp)
 800492c:	00000306 	br	800493c <___vfprintf_internal_r+0x1adc>
 8004930:	42000204 	addi	r8,r8,8
 8004934:	8c7ffc04 	addi	r17,r17,-16
 8004938:	b440800e 	bge	r22,r17,8004b3c <___vfprintf_internal_r+0x1cdc>
 800493c:	18c00404 	addi	r3,r3,16
 8004940:	10800044 	addi	r2,r2,1
 8004944:	45000015 	stw	r20,0(r8)
 8004948:	45800115 	stw	r22,4(r8)
 800494c:	d8c02015 	stw	r3,128(sp)
 8004950:	d8801f15 	stw	r2,124(sp)
 8004954:	e0bff60e 	bge	fp,r2,8004930 <__alt_data_end+0xfc004930>
 8004958:	d9801e04 	addi	r6,sp,120
 800495c:	b80b883a 	mov	r5,r23
 8004960:	9809883a 	mov	r4,r19
 8004964:	800a6600 	call	800a660 <__sprint_r>
 8004968:	103a411e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 800496c:	d8c02017 	ldw	r3,128(sp)
 8004970:	d8801f17 	ldw	r2,124(sp)
 8004974:	da000404 	addi	r8,sp,16
 8004978:	003fee06 	br	8004934 <__alt_data_end+0xfc004934>
 800497c:	00bfffc4 	movi	r2,-1
 8004980:	003a3f06 	br	8003280 <__alt_data_end+0xfc003280>
 8004984:	008011c4 	movi	r2,71
 8004988:	1440b816 	blt	r2,r17,8004c6c <___vfprintf_internal_r+0x1e0c>
 800498c:	04020074 	movhi	r16,2049
 8004990:	84101a04 	addi	r16,r16,16488
 8004994:	00c000c4 	movi	r3,3
 8004998:	00bfdfc4 	movi	r2,-129
 800499c:	d8c02915 	stw	r3,164(sp)
 80049a0:	90a4703a 	and	r18,r18,r2
 80049a4:	df002783 	ldbu	fp,158(sp)
 80049a8:	d8c02b15 	stw	r3,172(sp)
 80049ac:	d8002a15 	stw	zero,168(sp)
 80049b0:	d8003215 	stw	zero,200(sp)
 80049b4:	003b0706 	br	80035d4 <__alt_data_end+0xfc0035d4>
 80049b8:	d8c02e17 	ldw	r3,184(sp)
 80049bc:	1cc00017 	ldw	r19,0(r3)
 80049c0:	18c00104 	addi	r3,r3,4
 80049c4:	d8c02e15 	stw	r3,184(sp)
 80049c8:	982dd7fa 	srai	r22,r19,31
 80049cc:	b005883a 	mov	r2,r22
 80049d0:	003a7706 	br	80033b0 <__alt_data_end+0xfc0033b0>
 80049d4:	d8c02e17 	ldw	r3,184(sp)
 80049d8:	d9002f17 	ldw	r4,188(sp)
 80049dc:	18800017 	ldw	r2,0(r3)
 80049e0:	18c00104 	addi	r3,r3,4
 80049e4:	d8c02e15 	stw	r3,184(sp)
 80049e8:	11000015 	stw	r4,0(r2)
 80049ec:	00395406 	br	8002f40 <__alt_data_end+0xfc002f40>
 80049f0:	d9002e17 	ldw	r4,184(sp)
 80049f4:	002d883a 	mov	r22,zero
 80049f8:	24c00017 	ldw	r19,0(r4)
 80049fc:	21000104 	addi	r4,r4,4
 8004a00:	d9002e15 	stw	r4,184(sp)
 8004a04:	003c0706 	br	8003a24 <__alt_data_end+0xfc003a24>
 8004a08:	d9402e17 	ldw	r5,184(sp)
 8004a0c:	d8c02a17 	ldw	r3,168(sp)
 8004a10:	002d883a 	mov	r22,zero
 8004a14:	28800104 	addi	r2,r5,4
 8004a18:	2cc0000b 	ldhu	r19,0(r5)
 8004a1c:	183dc10e 	bge	r3,zero,8004124 <__alt_data_end+0xfc004124>
 8004a20:	003f7506 	br	80047f8 <__alt_data_end+0xfc0047f8>
 8004a24:	04020074 	movhi	r16,2049
 8004a28:	84101804 	addi	r16,r16,16480
 8004a2c:	003aa706 	br	80034cc <__alt_data_end+0xfc0034cc>
 8004a30:	d9002d17 	ldw	r4,180(sp)
 8004a34:	d9801e04 	addi	r6,sp,120
 8004a38:	b80b883a 	mov	r5,r23
 8004a3c:	800a6600 	call	800a660 <__sprint_r>
 8004a40:	103a0b1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004a44:	dc402617 	ldw	r17,152(sp)
 8004a48:	d8c02017 	ldw	r3,128(sp)
 8004a4c:	da000404 	addi	r8,sp,16
 8004a50:	003f9c06 	br	80048c4 <__alt_data_end+0xfc0048c4>
 8004a54:	ac400043 	ldbu	r17,1(r21)
 8004a58:	84000814 	ori	r16,r16,32
 8004a5c:	ad400044 	addi	r21,r21,1
 8004a60:	8c403fcc 	andi	r17,r17,255
 8004a64:	8c40201c 	xori	r17,r17,128
 8004a68:	8c7fe004 	addi	r17,r17,-128
 8004a6c:	00395e06 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 8004a70:	d8c02e15 	stw	r3,184(sp)
 8004a74:	0039883a 	mov	fp,zero
 8004a78:	003e3506 	br	8004350 <__alt_data_end+0xfc004350>
 8004a7c:	d9002d17 	ldw	r4,180(sp)
 8004a80:	d9801e04 	addi	r6,sp,120
 8004a84:	b80b883a 	mov	r5,r23
 8004a88:	800a6600 	call	800a660 <__sprint_r>
 8004a8c:	1039f81e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004a90:	d8c02017 	ldw	r3,128(sp)
 8004a94:	da000404 	addi	r8,sp,16
 8004a98:	003cd006 	br	8003ddc <__alt_data_end+0xfc003ddc>
 8004a9c:	8009883a 	mov	r4,r16
 8004aa0:	df003d15 	stw	fp,244(sp)
 8004aa4:	8002dc80 	call	8002dc8 <strlen>
 8004aa8:	d8802b15 	stw	r2,172(sp)
 8004aac:	da003d17 	ldw	r8,244(sp)
 8004ab0:	103c200e 	bge	r2,zero,8003b34 <__alt_data_end+0xfc003b34>
 8004ab4:	0005883a 	mov	r2,zero
 8004ab8:	003c1e06 	br	8003b34 <__alt_data_end+0xfc003b34>
 8004abc:	d9002d17 	ldw	r4,180(sp)
 8004ac0:	d9801e04 	addi	r6,sp,120
 8004ac4:	b80b883a 	mov	r5,r23
 8004ac8:	800a6600 	call	800a660 <__sprint_r>
 8004acc:	1039e81e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004ad0:	d8c02017 	ldw	r3,128(sp)
 8004ad4:	d8801f17 	ldw	r2,124(sp)
 8004ad8:	da000404 	addi	r8,sp,16
 8004adc:	d9403317 	ldw	r5,204(sp)
 8004ae0:	10800044 	addi	r2,r2,1
 8004ae4:	44000015 	stw	r16,0(r8)
 8004ae8:	28c7883a 	add	r3,r5,r3
 8004aec:	003b5b06 	br	800385c <__alt_data_end+0xfc00385c>
 8004af0:	01020074 	movhi	r4,2049
 8004af4:	21102c84 	addi	r4,r4,16562
 8004af8:	d9003515 	stw	r4,212(sp)
 8004afc:	003af206 	br	80036c8 <__alt_data_end+0xfc0036c8>
 8004b00:	013fffc4 	movi	r4,-1
 8004b04:	003a0806 	br	8003328 <__alt_data_end+0xfc003328>
 8004b08:	0023883a 	mov	r17,zero
 8004b0c:	003d9d06 	br	8004184 <__alt_data_end+0xfc004184>
 8004b10:	d9002d17 	ldw	r4,180(sp)
 8004b14:	d9801e04 	addi	r6,sp,120
 8004b18:	b80b883a 	mov	r5,r23
 8004b1c:	800a6600 	call	800a660 <__sprint_r>
 8004b20:	1039d31e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004b24:	d8c02017 	ldw	r3,128(sp)
 8004b28:	da000404 	addi	r8,sp,16
 8004b2c:	003d9406 	br	8004180 <__alt_data_end+0xfc004180>
 8004b30:	01020074 	movhi	r4,2049
 8004b34:	21102884 	addi	r4,r4,16546
 8004b38:	d9002c15 	stw	r4,176(sp)
 8004b3c:	d9002c17 	ldw	r4,176(sp)
 8004b40:	1c47883a 	add	r3,r3,r17
 8004b44:	10800044 	addi	r2,r2,1
 8004b48:	41000015 	stw	r4,0(r8)
 8004b4c:	44400115 	stw	r17,4(r8)
 8004b50:	d8c02015 	stw	r3,128(sp)
 8004b54:	d8801f15 	stw	r2,124(sp)
 8004b58:	010001c4 	movi	r4,7
 8004b5c:	20bfd716 	blt	r4,r2,8004abc <__alt_data_end+0xfc004abc>
 8004b60:	42000204 	addi	r8,r8,8
 8004b64:	003fdd06 	br	8004adc <__alt_data_end+0xfc004adc>
 8004b68:	d9002d17 	ldw	r4,180(sp)
 8004b6c:	d9801e04 	addi	r6,sp,120
 8004b70:	b80b883a 	mov	r5,r23
 8004b74:	800a6600 	call	800a660 <__sprint_r>
 8004b78:	1039bd1e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004b7c:	d8802617 	ldw	r2,152(sp)
 8004b80:	d8c02017 	ldw	r3,128(sp)
 8004b84:	da000404 	addi	r8,sp,16
 8004b88:	003e1006 	br	80043cc <__alt_data_end+0xfc0043cc>
 8004b8c:	00800044 	movi	r2,1
 8004b90:	10803fcc 	andi	r2,r2,255
 8004b94:	00c00044 	movi	r3,1
 8004b98:	10fa0d26 	beq	r2,r3,80033d0 <__alt_data_end+0xfc0033d0>
 8004b9c:	00c00084 	movi	r3,2
 8004ba0:	10fbaf26 	beq	r2,r3,8003a60 <__alt_data_end+0xfc003a60>
 8004ba4:	003a6d06 	br	800355c <__alt_data_end+0xfc00355c>
 8004ba8:	01020074 	movhi	r4,2049
 8004bac:	21102c84 	addi	r4,r4,16562
 8004bb0:	d9003515 	stw	r4,212(sp)
 8004bb4:	003b5406 	br	8003908 <__alt_data_end+0xfc003908>
 8004bb8:	d8802a17 	ldw	r2,168(sp)
 8004bbc:	00c00184 	movi	r3,6
 8004bc0:	1880012e 	bgeu	r3,r2,8004bc8 <___vfprintf_internal_r+0x1d68>
 8004bc4:	1805883a 	mov	r2,r3
 8004bc8:	d8802b15 	stw	r2,172(sp)
 8004bcc:	1000ef16 	blt	r2,zero,8004f8c <___vfprintf_internal_r+0x212c>
 8004bd0:	04020074 	movhi	r16,2049
 8004bd4:	d8802915 	stw	r2,164(sp)
 8004bd8:	dcc02e15 	stw	r19,184(sp)
 8004bdc:	d8002a15 	stw	zero,168(sp)
 8004be0:	d8003215 	stw	zero,200(sp)
 8004be4:	84102604 	addi	r16,r16,16536
 8004be8:	0039883a 	mov	fp,zero
 8004bec:	003a8006 	br	80035f0 <__alt_data_end+0xfc0035f0>
 8004bf0:	0021883a 	mov	r16,zero
 8004bf4:	003e0706 	br	8004414 <__alt_data_end+0xfc004414>
 8004bf8:	d9002d17 	ldw	r4,180(sp)
 8004bfc:	d9801e04 	addi	r6,sp,120
 8004c00:	b80b883a 	mov	r5,r23
 8004c04:	800a6600 	call	800a660 <__sprint_r>
 8004c08:	1039991e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004c0c:	d8802617 	ldw	r2,152(sp)
 8004c10:	d9403317 	ldw	r5,204(sp)
 8004c14:	d8c02017 	ldw	r3,128(sp)
 8004c18:	da000404 	addi	r8,sp,16
 8004c1c:	2885c83a 	sub	r2,r5,r2
 8004c20:	003dfb06 	br	8004410 <__alt_data_end+0xfc004410>
 8004c24:	9080004c 	andi	r2,r18,1
 8004c28:	103e8f1e 	bne	r2,zero,8004668 <__alt_data_end+0xfc004668>
 8004c2c:	d8802117 	ldw	r2,132(sp)
 8004c30:	003e9e06 	br	80046ac <__alt_data_end+0xfc0046ac>
 8004c34:	1025883a 	mov	r18,r2
 8004c38:	0039883a 	mov	fp,zero
 8004c3c:	00800084 	movi	r2,2
 8004c40:	003fd306 	br	8004b90 <__alt_data_end+0xfc004b90>
 8004c44:	07000b44 	movi	fp,45
 8004c48:	df002785 	stb	fp,158(sp)
 8004c4c:	003a1b06 	br	80034bc <__alt_data_end+0xfc0034bc>
 8004c50:	00c00b44 	movi	r3,45
 8004c54:	d8c02785 	stb	r3,158(sp)
 8004c58:	d8802915 	stw	r2,164(sp)
 8004c5c:	dc802c17 	ldw	r18,176(sp)
 8004c60:	d8002a15 	stw	zero,168(sp)
 8004c64:	07000b44 	movi	fp,45
 8004c68:	003a5e06 	br	80035e4 <__alt_data_end+0xfc0035e4>
 8004c6c:	04020074 	movhi	r16,2049
 8004c70:	84101b04 	addi	r16,r16,16492
 8004c74:	003f4706 	br	8004994 <__alt_data_end+0xfc004994>
 8004c78:	d9002e17 	ldw	r4,184(sp)
 8004c7c:	d9402f17 	ldw	r5,188(sp)
 8004c80:	20800017 	ldw	r2,0(r4)
 8004c84:	21000104 	addi	r4,r4,4
 8004c88:	d9002e15 	stw	r4,184(sp)
 8004c8c:	11400015 	stw	r5,0(r2)
 8004c90:	0038ab06 	br	8002f40 <__alt_data_end+0xfc002f40>
 8004c94:	dd802617 	ldw	r22,152(sp)
 8004c98:	00bfff44 	movi	r2,-3
 8004c9c:	b0801c16 	blt	r22,r2,8004d10 <___vfprintf_internal_r+0x1eb0>
 8004ca0:	d9402a17 	ldw	r5,168(sp)
 8004ca4:	2d801a16 	blt	r5,r22,8004d10 <___vfprintf_internal_r+0x1eb0>
 8004ca8:	dd803215 	stw	r22,200(sp)
 8004cac:	003e8906 	br	80046d4 <__alt_data_end+0xfc0046d4>
 8004cb0:	01020074 	movhi	r4,2049
 8004cb4:	21102884 	addi	r4,r4,16546
 8004cb8:	d9002c15 	stw	r4,176(sp)
 8004cbc:	003c9106 	br	8003f04 <__alt_data_end+0xfc003f04>
 8004cc0:	e005883a 	mov	r2,fp
 8004cc4:	003e7906 	br	80046ac <__alt_data_end+0xfc0046ac>
 8004cc8:	d9002a17 	ldw	r4,168(sp)
 8004ccc:	df002783 	ldbu	fp,158(sp)
 8004cd0:	dcc02e15 	stw	r19,184(sp)
 8004cd4:	d9002915 	stw	r4,164(sp)
 8004cd8:	d9002b15 	stw	r4,172(sp)
 8004cdc:	d8002a15 	stw	zero,168(sp)
 8004ce0:	d8003215 	stw	zero,200(sp)
 8004ce4:	003a3b06 	br	80035d4 <__alt_data_end+0xfc0035d4>
 8004ce8:	9080004c 	andi	r2,r18,1
 8004cec:	0039883a 	mov	fp,zero
 8004cf0:	10000426 	beq	r2,zero,8004d04 <___vfprintf_internal_r+0x1ea4>
 8004cf4:	00800c04 	movi	r2,48
 8004cf8:	dc001dc4 	addi	r16,sp,119
 8004cfc:	d8801dc5 	stb	r2,119(sp)
 8004d00:	003b6406 	br	8003a94 <__alt_data_end+0xfc003a94>
 8004d04:	d8002b15 	stw	zero,172(sp)
 8004d08:	dc001e04 	addi	r16,sp,120
 8004d0c:	003a2b06 	br	80035bc <__alt_data_end+0xfc0035bc>
 8004d10:	8c7fff84 	addi	r17,r17,-2
 8004d14:	b5bfffc4 	addi	r22,r22,-1
 8004d18:	dd802615 	stw	r22,152(sp)
 8004d1c:	dc4022c5 	stb	r17,139(sp)
 8004d20:	b000bf16 	blt	r22,zero,8005020 <___vfprintf_internal_r+0x21c0>
 8004d24:	00800ac4 	movi	r2,43
 8004d28:	d8802305 	stb	r2,140(sp)
 8004d2c:	00800244 	movi	r2,9
 8004d30:	15807016 	blt	r2,r22,8004ef4 <___vfprintf_internal_r+0x2094>
 8004d34:	00800c04 	movi	r2,48
 8004d38:	b5800c04 	addi	r22,r22,48
 8004d3c:	d8802345 	stb	r2,141(sp)
 8004d40:	dd802385 	stb	r22,142(sp)
 8004d44:	d88023c4 	addi	r2,sp,143
 8004d48:	df0022c4 	addi	fp,sp,139
 8004d4c:	d8c03317 	ldw	r3,204(sp)
 8004d50:	1739c83a 	sub	fp,r2,fp
 8004d54:	d9003317 	ldw	r4,204(sp)
 8004d58:	e0c7883a 	add	r3,fp,r3
 8004d5c:	df003a15 	stw	fp,232(sp)
 8004d60:	d8c02b15 	stw	r3,172(sp)
 8004d64:	00800044 	movi	r2,1
 8004d68:	1100b30e 	bge	r2,r4,8005038 <___vfprintf_internal_r+0x21d8>
 8004d6c:	d8c02b17 	ldw	r3,172(sp)
 8004d70:	18c00044 	addi	r3,r3,1
 8004d74:	d8c02b15 	stw	r3,172(sp)
 8004d78:	1805883a 	mov	r2,r3
 8004d7c:	1800ac16 	blt	r3,zero,8005030 <___vfprintf_internal_r+0x21d0>
 8004d80:	d8003215 	stw	zero,200(sp)
 8004d84:	003e5d06 	br	80046fc <__alt_data_end+0xfc0046fc>
 8004d88:	d9002d17 	ldw	r4,180(sp)
 8004d8c:	d9801e04 	addi	r6,sp,120
 8004d90:	b80b883a 	mov	r5,r23
 8004d94:	800a6600 	call	800a660 <__sprint_r>
 8004d98:	1039351e 	bne	r2,zero,8003270 <__alt_data_end+0xfc003270>
 8004d9c:	dc402617 	ldw	r17,152(sp)
 8004da0:	d8c02017 	ldw	r3,128(sp)
 8004da4:	d8801f17 	ldw	r2,124(sp)
 8004da8:	da000404 	addi	r8,sp,16
 8004dac:	003ed606 	br	8004908 <__alt_data_end+0xfc004908>
 8004db0:	182b883a 	mov	r21,r3
 8004db4:	d8002a15 	stw	zero,168(sp)
 8004db8:	00388c06 	br	8002fec <__alt_data_end+0xfc002fec>
 8004dbc:	d8802a17 	ldw	r2,168(sp)
 8004dc0:	103e071e 	bne	r2,zero,80045e0 <__alt_data_end+0xfc0045e0>
 8004dc4:	dc002a15 	stw	r16,168(sp)
 8004dc8:	003e0506 	br	80045e0 <__alt_data_end+0xfc0045e0>
 8004dcc:	d9002a17 	ldw	r4,168(sp)
 8004dd0:	20c00044 	addi	r3,r4,1
 8004dd4:	003e0f06 	br	8004614 <__alt_data_end+0xfc004614>
 8004dd8:	01400184 	movi	r5,6
 8004ddc:	d9402a15 	stw	r5,168(sp)
 8004de0:	003dff06 	br	80045e0 <__alt_data_end+0xfc0045e0>
 8004de4:	d8802104 	addi	r2,sp,132
 8004de8:	d8800315 	stw	r2,12(sp)
 8004dec:	d8802504 	addi	r2,sp,148
 8004df0:	d8800215 	stw	r2,8(sp)
 8004df4:	d8802604 	addi	r2,sp,152
 8004df8:	d8800115 	stw	r2,4(sp)
 8004dfc:	d8802a17 	ldw	r2,168(sp)
 8004e00:	d9403617 	ldw	r5,216(sp)
 8004e04:	d9002d17 	ldw	r4,180(sp)
 8004e08:	d8800015 	stw	r2,0(sp)
 8004e0c:	01c000c4 	movi	r7,3
 8004e10:	980d883a 	mov	r6,r19
 8004e14:	da003d15 	stw	r8,244(sp)
 8004e18:	80055900 	call	8005590 <_dtoa_r>
 8004e1c:	d8c02a17 	ldw	r3,168(sp)
 8004e20:	da003d17 	ldw	r8,244(sp)
 8004e24:	1021883a 	mov	r16,r2
 8004e28:	10f9883a 	add	fp,r2,r3
 8004e2c:	81000007 	ldb	r4,0(r16)
 8004e30:	00800c04 	movi	r2,48
 8004e34:	20805e26 	beq	r4,r2,8004fb0 <___vfprintf_internal_r+0x2150>
 8004e38:	d8c02617 	ldw	r3,152(sp)
 8004e3c:	e0f9883a 	add	fp,fp,r3
 8004e40:	003e0a06 	br	800466c <__alt_data_end+0xfc00466c>
 8004e44:	00c00b44 	movi	r3,45
 8004e48:	24e0003c 	xorhi	r19,r4,32768
 8004e4c:	d8c02905 	stb	r3,164(sp)
 8004e50:	003de906 	br	80045f8 <__alt_data_end+0xfc0045f8>
 8004e54:	d8c03217 	ldw	r3,200(sp)
 8004e58:	00c07a0e 	bge	zero,r3,8005044 <___vfprintf_internal_r+0x21e4>
 8004e5c:	00800044 	movi	r2,1
 8004e60:	d9003317 	ldw	r4,204(sp)
 8004e64:	1105883a 	add	r2,r2,r4
 8004e68:	d8802b15 	stw	r2,172(sp)
 8004e6c:	10004e16 	blt	r2,zero,8004fa8 <___vfprintf_internal_r+0x2148>
 8004e70:	044019c4 	movi	r17,103
 8004e74:	003e2106 	br	80046fc <__alt_data_end+0xfc0046fc>
 8004e78:	d9002a17 	ldw	r4,168(sp)
 8004e7c:	d8802104 	addi	r2,sp,132
 8004e80:	d8800315 	stw	r2,12(sp)
 8004e84:	d9000015 	stw	r4,0(sp)
 8004e88:	d8802504 	addi	r2,sp,148
 8004e8c:	d9403617 	ldw	r5,216(sp)
 8004e90:	d9002d17 	ldw	r4,180(sp)
 8004e94:	d8800215 	stw	r2,8(sp)
 8004e98:	d8802604 	addi	r2,sp,152
 8004e9c:	d8800115 	stw	r2,4(sp)
 8004ea0:	01c000c4 	movi	r7,3
 8004ea4:	980d883a 	mov	r6,r19
 8004ea8:	da003d15 	stw	r8,244(sp)
 8004eac:	80055900 	call	8005590 <_dtoa_r>
 8004eb0:	d8c02a17 	ldw	r3,168(sp)
 8004eb4:	da003d17 	ldw	r8,244(sp)
 8004eb8:	1021883a 	mov	r16,r2
 8004ebc:	00801184 	movi	r2,70
 8004ec0:	80f9883a 	add	fp,r16,r3
 8004ec4:	88bfd926 	beq	r17,r2,8004e2c <__alt_data_end+0xfc004e2c>
 8004ec8:	003de806 	br	800466c <__alt_data_end+0xfc00466c>
 8004ecc:	d9002a17 	ldw	r4,168(sp)
 8004ed0:	00c04d0e 	bge	zero,r3,8005008 <___vfprintf_internal_r+0x21a8>
 8004ed4:	2000441e 	bne	r4,zero,8004fe8 <___vfprintf_internal_r+0x2188>
 8004ed8:	9480004c 	andi	r18,r18,1
 8004edc:	9000421e 	bne	r18,zero,8004fe8 <___vfprintf_internal_r+0x2188>
 8004ee0:	1805883a 	mov	r2,r3
 8004ee4:	18006f16 	blt	r3,zero,80050a4 <___vfprintf_internal_r+0x2244>
 8004ee8:	d8c03217 	ldw	r3,200(sp)
 8004eec:	d8c02b15 	stw	r3,172(sp)
 8004ef0:	003e0206 	br	80046fc <__alt_data_end+0xfc0046fc>
 8004ef4:	df0022c4 	addi	fp,sp,139
 8004ef8:	dc002a15 	stw	r16,168(sp)
 8004efc:	4027883a 	mov	r19,r8
 8004f00:	e021883a 	mov	r16,fp
 8004f04:	b009883a 	mov	r4,r22
 8004f08:	01400284 	movi	r5,10
 8004f0c:	80029c80 	call	80029c8 <__modsi3>
 8004f10:	10800c04 	addi	r2,r2,48
 8004f14:	843fffc4 	addi	r16,r16,-1
 8004f18:	b009883a 	mov	r4,r22
 8004f1c:	01400284 	movi	r5,10
 8004f20:	80800005 	stb	r2,0(r16)
 8004f24:	80029440 	call	8002944 <__divsi3>
 8004f28:	102d883a 	mov	r22,r2
 8004f2c:	00800244 	movi	r2,9
 8004f30:	15bff416 	blt	r2,r22,8004f04 <__alt_data_end+0xfc004f04>
 8004f34:	9811883a 	mov	r8,r19
 8004f38:	b0800c04 	addi	r2,r22,48
 8004f3c:	8027883a 	mov	r19,r16
 8004f40:	997fffc4 	addi	r5,r19,-1
 8004f44:	98bfffc5 	stb	r2,-1(r19)
 8004f48:	dc002a17 	ldw	r16,168(sp)
 8004f4c:	2f006d2e 	bgeu	r5,fp,8005104 <___vfprintf_internal_r+0x22a4>
 8004f50:	d9c02384 	addi	r7,sp,142
 8004f54:	3ccfc83a 	sub	r7,r7,r19
 8004f58:	d9002344 	addi	r4,sp,141
 8004f5c:	e1cf883a 	add	r7,fp,r7
 8004f60:	00000106 	br	8004f68 <___vfprintf_internal_r+0x2108>
 8004f64:	28800003 	ldbu	r2,0(r5)
 8004f68:	20800005 	stb	r2,0(r4)
 8004f6c:	21000044 	addi	r4,r4,1
 8004f70:	29400044 	addi	r5,r5,1
 8004f74:	393ffb1e 	bne	r7,r4,8004f64 <__alt_data_end+0xfc004f64>
 8004f78:	d8802304 	addi	r2,sp,140
 8004f7c:	14c5c83a 	sub	r2,r2,r19
 8004f80:	d8c02344 	addi	r3,sp,141
 8004f84:	1885883a 	add	r2,r3,r2
 8004f88:	003f7006 	br	8004d4c <__alt_data_end+0xfc004d4c>
 8004f8c:	0005883a 	mov	r2,zero
 8004f90:	003f0f06 	br	8004bd0 <__alt_data_end+0xfc004bd0>
 8004f94:	d8c03217 	ldw	r3,200(sp)
 8004f98:	18c00044 	addi	r3,r3,1
 8004f9c:	d8c02b15 	stw	r3,172(sp)
 8004fa0:	1805883a 	mov	r2,r3
 8004fa4:	183fb20e 	bge	r3,zero,8004e70 <__alt_data_end+0xfc004e70>
 8004fa8:	0005883a 	mov	r2,zero
 8004fac:	003fb006 	br	8004e70 <__alt_data_end+0xfc004e70>
 8004fb0:	d9003617 	ldw	r4,216(sp)
 8004fb4:	000d883a 	mov	r6,zero
 8004fb8:	000f883a 	mov	r7,zero
 8004fbc:	980b883a 	mov	r5,r19
 8004fc0:	d8c03c15 	stw	r3,240(sp)
 8004fc4:	da003d15 	stw	r8,244(sp)
 8004fc8:	800e3e40 	call	800e3e4 <__eqdf2>
 8004fcc:	d8c03c17 	ldw	r3,240(sp)
 8004fd0:	da003d17 	ldw	r8,244(sp)
 8004fd4:	103f9826 	beq	r2,zero,8004e38 <__alt_data_end+0xfc004e38>
 8004fd8:	00800044 	movi	r2,1
 8004fdc:	10c7c83a 	sub	r3,r2,r3
 8004fe0:	d8c02615 	stw	r3,152(sp)
 8004fe4:	003f9506 	br	8004e3c <__alt_data_end+0xfc004e3c>
 8004fe8:	d9002a17 	ldw	r4,168(sp)
 8004fec:	d8c03217 	ldw	r3,200(sp)
 8004ff0:	20800044 	addi	r2,r4,1
 8004ff4:	1885883a 	add	r2,r3,r2
 8004ff8:	d8802b15 	stw	r2,172(sp)
 8004ffc:	103dbf0e 	bge	r2,zero,80046fc <__alt_data_end+0xfc0046fc>
 8005000:	0005883a 	mov	r2,zero
 8005004:	003dbd06 	br	80046fc <__alt_data_end+0xfc0046fc>
 8005008:	2000201e 	bne	r4,zero,800508c <___vfprintf_internal_r+0x222c>
 800500c:	9480004c 	andi	r18,r18,1
 8005010:	90001e1e 	bne	r18,zero,800508c <___vfprintf_internal_r+0x222c>
 8005014:	00800044 	movi	r2,1
 8005018:	d8802b15 	stw	r2,172(sp)
 800501c:	003db706 	br	80046fc <__alt_data_end+0xfc0046fc>
 8005020:	00800b44 	movi	r2,45
 8005024:	05adc83a 	sub	r22,zero,r22
 8005028:	d8802305 	stb	r2,140(sp)
 800502c:	003f3f06 	br	8004d2c <__alt_data_end+0xfc004d2c>
 8005030:	0005883a 	mov	r2,zero
 8005034:	003f5206 	br	8004d80 <__alt_data_end+0xfc004d80>
 8005038:	90a4703a 	and	r18,r18,r2
 800503c:	903f4e26 	beq	r18,zero,8004d78 <__alt_data_end+0xfc004d78>
 8005040:	003f4a06 	br	8004d6c <__alt_data_end+0xfc004d6c>
 8005044:	00800084 	movi	r2,2
 8005048:	10c5c83a 	sub	r2,r2,r3
 800504c:	003f8406 	br	8004e60 <__alt_data_end+0xfc004e60>
 8005050:	d9402e17 	ldw	r5,184(sp)
 8005054:	d9002e17 	ldw	r4,184(sp)
 8005058:	ac400043 	ldbu	r17,1(r21)
 800505c:	29400017 	ldw	r5,0(r5)
 8005060:	20800104 	addi	r2,r4,4
 8005064:	d8802e15 	stw	r2,184(sp)
 8005068:	d9402a15 	stw	r5,168(sp)
 800506c:	182b883a 	mov	r21,r3
 8005070:	283e7b0e 	bge	r5,zero,8004a60 <__alt_data_end+0xfc004a60>
 8005074:	8c403fcc 	andi	r17,r17,255
 8005078:	017fffc4 	movi	r5,-1
 800507c:	8c40201c 	xori	r17,r17,128
 8005080:	d9402a15 	stw	r5,168(sp)
 8005084:	8c7fe004 	addi	r17,r17,-128
 8005088:	0037d706 	br	8002fe8 <__alt_data_end+0xfc002fe8>
 800508c:	d8c02a17 	ldw	r3,168(sp)
 8005090:	18c00084 	addi	r3,r3,2
 8005094:	d8c02b15 	stw	r3,172(sp)
 8005098:	1805883a 	mov	r2,r3
 800509c:	183d970e 	bge	r3,zero,80046fc <__alt_data_end+0xfc0046fc>
 80050a0:	003fd706 	br	8005000 <__alt_data_end+0xfc005000>
 80050a4:	0005883a 	mov	r2,zero
 80050a8:	003f8f06 	br	8004ee8 <__alt_data_end+0xfc004ee8>
 80050ac:	9080004c 	andi	r2,r18,1
 80050b0:	103f821e 	bne	r2,zero,8004ebc <__alt_data_end+0xfc004ebc>
 80050b4:	d8802117 	ldw	r2,132(sp)
 80050b8:	1405c83a 	sub	r2,r2,r16
 80050bc:	d8803315 	stw	r2,204(sp)
 80050c0:	b47ef426 	beq	r22,r17,8004c94 <__alt_data_end+0xfc004c94>
 80050c4:	dd802617 	ldw	r22,152(sp)
 80050c8:	003f1206 	br	8004d14 <__alt_data_end+0xfc004d14>
 80050cc:	d8c02b03 	ldbu	r3,172(sp)
 80050d0:	d8c02785 	stb	r3,158(sp)
 80050d4:	0038df06 	br	8003454 <__alt_data_end+0xfc003454>
 80050d8:	d8c02b03 	ldbu	r3,172(sp)
 80050dc:	d8c02785 	stb	r3,158(sp)
 80050e0:	0038aa06 	br	800338c <__alt_data_end+0xfc00338c>
 80050e4:	d8c02b03 	ldbu	r3,172(sp)
 80050e8:	d8c02785 	stb	r3,158(sp)
 80050ec:	003a4306 	br	80039fc <__alt_data_end+0xfc0039fc>
 80050f0:	d8c02b03 	ldbu	r3,172(sp)
 80050f4:	d8c02785 	stb	r3,158(sp)
 80050f8:	003af506 	br	8003cd0 <__alt_data_end+0xfc003cd0>
 80050fc:	0005883a 	mov	r2,zero
 8005100:	003d7b06 	br	80046f0 <__alt_data_end+0xfc0046f0>
 8005104:	d8802344 	addi	r2,sp,141
 8005108:	003f1006 	br	8004d4c <__alt_data_end+0xfc004d4c>
 800510c:	d8c02b03 	ldbu	r3,172(sp)
 8005110:	d8c02785 	stb	r3,158(sp)
 8005114:	0038fd06 	br	800350c <__alt_data_end+0xfc00350c>
 8005118:	d8c02b03 	ldbu	r3,172(sp)
 800511c:	d8c02785 	stb	r3,158(sp)
 8005120:	003a9706 	br	8003b80 <__alt_data_end+0xfc003b80>
 8005124:	d8c02b03 	ldbu	r3,172(sp)
 8005128:	d8c02785 	stb	r3,158(sp)
 800512c:	003a1806 	br	8003990 <__alt_data_end+0xfc003990>
 8005130:	d8c02b03 	ldbu	r3,172(sp)
 8005134:	d8c02785 	stb	r3,158(sp)
 8005138:	003abe06 	br	8003c34 <__alt_data_end+0xfc003c34>

0800513c <__vfprintf_internal>:
 800513c:	00820074 	movhi	r2,2049
 8005140:	10979504 	addi	r2,r2,24148
 8005144:	300f883a 	mov	r7,r6
 8005148:	280d883a 	mov	r6,r5
 800514c:	200b883a 	mov	r5,r4
 8005150:	11000017 	ldw	r4,0(r2)
 8005154:	8002e601 	jmpi	8002e60 <___vfprintf_internal_r>

08005158 <__sbprintf>:
 8005158:	2880030b 	ldhu	r2,12(r5)
 800515c:	2ac01917 	ldw	r11,100(r5)
 8005160:	2a80038b 	ldhu	r10,14(r5)
 8005164:	2a400717 	ldw	r9,28(r5)
 8005168:	2a000917 	ldw	r8,36(r5)
 800516c:	defee204 	addi	sp,sp,-1144
 8005170:	00c10004 	movi	r3,1024
 8005174:	dc011a15 	stw	r16,1128(sp)
 8005178:	10bfff4c 	andi	r2,r2,65533
 800517c:	2821883a 	mov	r16,r5
 8005180:	d8cb883a 	add	r5,sp,r3
 8005184:	dc811c15 	stw	r18,1136(sp)
 8005188:	dc411b15 	stw	r17,1132(sp)
 800518c:	dfc11d15 	stw	ra,1140(sp)
 8005190:	2025883a 	mov	r18,r4
 8005194:	d881030d 	sth	r2,1036(sp)
 8005198:	dac11915 	stw	r11,1124(sp)
 800519c:	da81038d 	sth	r10,1038(sp)
 80051a0:	da410715 	stw	r9,1052(sp)
 80051a4:	da010915 	stw	r8,1060(sp)
 80051a8:	dec10015 	stw	sp,1024(sp)
 80051ac:	dec10415 	stw	sp,1040(sp)
 80051b0:	d8c10215 	stw	r3,1032(sp)
 80051b4:	d8c10515 	stw	r3,1044(sp)
 80051b8:	d8010615 	stw	zero,1048(sp)
 80051bc:	8002e600 	call	8002e60 <___vfprintf_internal_r>
 80051c0:	1023883a 	mov	r17,r2
 80051c4:	10000416 	blt	r2,zero,80051d8 <__sbprintf+0x80>
 80051c8:	d9410004 	addi	r5,sp,1024
 80051cc:	9009883a 	mov	r4,r18
 80051d0:	8006e340 	call	8006e34 <_fflush_r>
 80051d4:	10000d1e 	bne	r2,zero,800520c <__sbprintf+0xb4>
 80051d8:	d881030b 	ldhu	r2,1036(sp)
 80051dc:	1080100c 	andi	r2,r2,64
 80051e0:	10000326 	beq	r2,zero,80051f0 <__sbprintf+0x98>
 80051e4:	8080030b 	ldhu	r2,12(r16)
 80051e8:	10801014 	ori	r2,r2,64
 80051ec:	8080030d 	sth	r2,12(r16)
 80051f0:	8805883a 	mov	r2,r17
 80051f4:	dfc11d17 	ldw	ra,1140(sp)
 80051f8:	dc811c17 	ldw	r18,1136(sp)
 80051fc:	dc411b17 	ldw	r17,1132(sp)
 8005200:	dc011a17 	ldw	r16,1128(sp)
 8005204:	dec11e04 	addi	sp,sp,1144
 8005208:	f800283a 	ret
 800520c:	047fffc4 	movi	r17,-1
 8005210:	003ff106 	br	80051d8 <__alt_data_end+0xfc0051d8>

08005214 <__swsetup_r>:
 8005214:	00820074 	movhi	r2,2049
 8005218:	defffd04 	addi	sp,sp,-12
 800521c:	10979504 	addi	r2,r2,24148
 8005220:	dc400115 	stw	r17,4(sp)
 8005224:	2023883a 	mov	r17,r4
 8005228:	11000017 	ldw	r4,0(r2)
 800522c:	dc000015 	stw	r16,0(sp)
 8005230:	dfc00215 	stw	ra,8(sp)
 8005234:	2821883a 	mov	r16,r5
 8005238:	20000226 	beq	r4,zero,8005244 <__swsetup_r+0x30>
 800523c:	20800e17 	ldw	r2,56(r4)
 8005240:	10003126 	beq	r2,zero,8005308 <__swsetup_r+0xf4>
 8005244:	8080030b 	ldhu	r2,12(r16)
 8005248:	10c0020c 	andi	r3,r2,8
 800524c:	1009883a 	mov	r4,r2
 8005250:	18000f26 	beq	r3,zero,8005290 <__swsetup_r+0x7c>
 8005254:	80c00417 	ldw	r3,16(r16)
 8005258:	18001526 	beq	r3,zero,80052b0 <__swsetup_r+0x9c>
 800525c:	1100004c 	andi	r4,r2,1
 8005260:	20001c1e 	bne	r4,zero,80052d4 <__swsetup_r+0xc0>
 8005264:	1080008c 	andi	r2,r2,2
 8005268:	1000291e 	bne	r2,zero,8005310 <__swsetup_r+0xfc>
 800526c:	80800517 	ldw	r2,20(r16)
 8005270:	80800215 	stw	r2,8(r16)
 8005274:	18001c26 	beq	r3,zero,80052e8 <__swsetup_r+0xd4>
 8005278:	0005883a 	mov	r2,zero
 800527c:	dfc00217 	ldw	ra,8(sp)
 8005280:	dc400117 	ldw	r17,4(sp)
 8005284:	dc000017 	ldw	r16,0(sp)
 8005288:	dec00304 	addi	sp,sp,12
 800528c:	f800283a 	ret
 8005290:	2080040c 	andi	r2,r4,16
 8005294:	10002e26 	beq	r2,zero,8005350 <__swsetup_r+0x13c>
 8005298:	2080010c 	andi	r2,r4,4
 800529c:	10001e1e 	bne	r2,zero,8005318 <__swsetup_r+0x104>
 80052a0:	80c00417 	ldw	r3,16(r16)
 80052a4:	20800214 	ori	r2,r4,8
 80052a8:	8080030d 	sth	r2,12(r16)
 80052ac:	183feb1e 	bne	r3,zero,800525c <__alt_data_end+0xfc00525c>
 80052b0:	1100a00c 	andi	r4,r2,640
 80052b4:	01408004 	movi	r5,512
 80052b8:	217fe826 	beq	r4,r5,800525c <__alt_data_end+0xfc00525c>
 80052bc:	800b883a 	mov	r5,r16
 80052c0:	8809883a 	mov	r4,r17
 80052c4:	8007dd00 	call	8007dd0 <__smakebuf_r>
 80052c8:	8080030b 	ldhu	r2,12(r16)
 80052cc:	80c00417 	ldw	r3,16(r16)
 80052d0:	003fe206 	br	800525c <__alt_data_end+0xfc00525c>
 80052d4:	80800517 	ldw	r2,20(r16)
 80052d8:	80000215 	stw	zero,8(r16)
 80052dc:	0085c83a 	sub	r2,zero,r2
 80052e0:	80800615 	stw	r2,24(r16)
 80052e4:	183fe41e 	bne	r3,zero,8005278 <__alt_data_end+0xfc005278>
 80052e8:	80c0030b 	ldhu	r3,12(r16)
 80052ec:	0005883a 	mov	r2,zero
 80052f0:	1900200c 	andi	r4,r3,128
 80052f4:	203fe126 	beq	r4,zero,800527c <__alt_data_end+0xfc00527c>
 80052f8:	18c01014 	ori	r3,r3,64
 80052fc:	80c0030d 	sth	r3,12(r16)
 8005300:	00bfffc4 	movi	r2,-1
 8005304:	003fdd06 	br	800527c <__alt_data_end+0xfc00527c>
 8005308:	80072200 	call	8007220 <__sinit>
 800530c:	003fcd06 	br	8005244 <__alt_data_end+0xfc005244>
 8005310:	0005883a 	mov	r2,zero
 8005314:	003fd606 	br	8005270 <__alt_data_end+0xfc005270>
 8005318:	81400c17 	ldw	r5,48(r16)
 800531c:	28000626 	beq	r5,zero,8005338 <__swsetup_r+0x124>
 8005320:	80801004 	addi	r2,r16,64
 8005324:	28800326 	beq	r5,r2,8005334 <__swsetup_r+0x120>
 8005328:	8809883a 	mov	r4,r17
 800532c:	80073940 	call	8007394 <_free_r>
 8005330:	8100030b 	ldhu	r4,12(r16)
 8005334:	80000c15 	stw	zero,48(r16)
 8005338:	80c00417 	ldw	r3,16(r16)
 800533c:	00bff6c4 	movi	r2,-37
 8005340:	1108703a 	and	r4,r2,r4
 8005344:	80000115 	stw	zero,4(r16)
 8005348:	80c00015 	stw	r3,0(r16)
 800534c:	003fd506 	br	80052a4 <__alt_data_end+0xfc0052a4>
 8005350:	00800244 	movi	r2,9
 8005354:	88800015 	stw	r2,0(r17)
 8005358:	20801014 	ori	r2,r4,64
 800535c:	8080030d 	sth	r2,12(r16)
 8005360:	00bfffc4 	movi	r2,-1
 8005364:	003fc506 	br	800527c <__alt_data_end+0xfc00527c>

08005368 <quorem>:
 8005368:	defff204 	addi	sp,sp,-56
 800536c:	ddc00b15 	stw	r23,44(sp)
 8005370:	20800417 	ldw	r2,16(r4)
 8005374:	2dc00417 	ldw	r23,16(r5)
 8005378:	dfc00d15 	stw	ra,52(sp)
 800537c:	df000c15 	stw	fp,48(sp)
 8005380:	dd800a15 	stw	r22,40(sp)
 8005384:	dd400915 	stw	r21,36(sp)
 8005388:	dd000815 	stw	r20,32(sp)
 800538c:	dcc00715 	stw	r19,28(sp)
 8005390:	dc800615 	stw	r18,24(sp)
 8005394:	dc400515 	stw	r17,20(sp)
 8005398:	dc000415 	stw	r16,16(sp)
 800539c:	15c07a16 	blt	r2,r23,8005588 <quorem+0x220>
 80053a0:	bdffffc4 	addi	r23,r23,-1
 80053a4:	bde9883a 	add	r20,r23,r23
 80053a8:	28c00504 	addi	r3,r5,20
 80053ac:	a529883a 	add	r20,r20,r20
 80053b0:	1d39883a 	add	fp,r3,r20
 80053b4:	24c00504 	addi	r19,r4,20
 80053b8:	d9400215 	stw	r5,8(sp)
 80053bc:	9d29883a 	add	r20,r19,r20
 80053c0:	e1400017 	ldw	r5,0(fp)
 80053c4:	d9000015 	stw	r4,0(sp)
 80053c8:	a1000017 	ldw	r4,0(r20)
 80053cc:	29400044 	addi	r5,r5,1
 80053d0:	d8c00115 	stw	r3,4(sp)
 80053d4:	dd000315 	stw	r20,12(sp)
 80053d8:	8002a3c0 	call	8002a3c <__udivsi3>
 80053dc:	1025883a 	mov	r18,r2
 80053e0:	10003026 	beq	r2,zero,80054a4 <quorem+0x13c>
 80053e4:	dc400117 	ldw	r17,4(sp)
 80053e8:	9829883a 	mov	r20,r19
 80053ec:	002d883a 	mov	r22,zero
 80053f0:	0021883a 	mov	r16,zero
 80053f4:	8d400017 	ldw	r21,0(r17)
 80053f8:	900b883a 	mov	r5,r18
 80053fc:	8c400104 	addi	r17,r17,4
 8005400:	a93fffcc 	andi	r4,r21,65535
 8005404:	8002af80 	call	8002af8 <__mulsi3>
 8005408:	a808d43a 	srli	r4,r21,16
 800540c:	900b883a 	mov	r5,r18
 8005410:	15ad883a 	add	r22,r2,r22
 8005414:	8002af80 	call	8002af8 <__mulsi3>
 8005418:	a1000017 	ldw	r4,0(r20)
 800541c:	b00cd43a 	srli	r6,r22,16
 8005420:	b0ffffcc 	andi	r3,r22,65535
 8005424:	217fffcc 	andi	r5,r4,65535
 8005428:	2c21883a 	add	r16,r5,r16
 800542c:	80c7c83a 	sub	r3,r16,r3
 8005430:	2008d43a 	srli	r4,r4,16
 8005434:	1185883a 	add	r2,r2,r6
 8005438:	1821d43a 	srai	r16,r3,16
 800543c:	117fffcc 	andi	r5,r2,65535
 8005440:	2149c83a 	sub	r4,r4,r5
 8005444:	2421883a 	add	r16,r4,r16
 8005448:	8008943a 	slli	r4,r16,16
 800544c:	18ffffcc 	andi	r3,r3,65535
 8005450:	102cd43a 	srli	r22,r2,16
 8005454:	20c8b03a 	or	r4,r4,r3
 8005458:	a1000015 	stw	r4,0(r20)
 800545c:	8021d43a 	srai	r16,r16,16
 8005460:	a5000104 	addi	r20,r20,4
 8005464:	e47fe32e 	bgeu	fp,r17,80053f4 <__alt_data_end+0xfc0053f4>
 8005468:	d8c00317 	ldw	r3,12(sp)
 800546c:	18800017 	ldw	r2,0(r3)
 8005470:	10000c1e 	bne	r2,zero,80054a4 <quorem+0x13c>
 8005474:	18bfff04 	addi	r2,r3,-4
 8005478:	9880082e 	bgeu	r19,r2,800549c <quorem+0x134>
 800547c:	18ffff17 	ldw	r3,-4(r3)
 8005480:	18000326 	beq	r3,zero,8005490 <quorem+0x128>
 8005484:	00000506 	br	800549c <quorem+0x134>
 8005488:	10c00017 	ldw	r3,0(r2)
 800548c:	1800031e 	bne	r3,zero,800549c <quorem+0x134>
 8005490:	10bfff04 	addi	r2,r2,-4
 8005494:	bdffffc4 	addi	r23,r23,-1
 8005498:	98bffb36 	bltu	r19,r2,8005488 <__alt_data_end+0xfc005488>
 800549c:	d8c00017 	ldw	r3,0(sp)
 80054a0:	1dc00415 	stw	r23,16(r3)
 80054a4:	d9400217 	ldw	r5,8(sp)
 80054a8:	d9000017 	ldw	r4,0(sp)
 80054ac:	80094840 	call	8009484 <__mcmp>
 80054b0:	10002816 	blt	r2,zero,8005554 <quorem+0x1ec>
 80054b4:	dc400117 	ldw	r17,4(sp)
 80054b8:	94800044 	addi	r18,r18,1
 80054bc:	980d883a 	mov	r6,r19
 80054c0:	0007883a 	mov	r3,zero
 80054c4:	31000017 	ldw	r4,0(r6)
 80054c8:	89400017 	ldw	r5,0(r17)
 80054cc:	31800104 	addi	r6,r6,4
 80054d0:	20bfffcc 	andi	r2,r4,65535
 80054d4:	10c7883a 	add	r3,r2,r3
 80054d8:	28bfffcc 	andi	r2,r5,65535
 80054dc:	1885c83a 	sub	r2,r3,r2
 80054e0:	280ad43a 	srli	r5,r5,16
 80054e4:	2008d43a 	srli	r4,r4,16
 80054e8:	1007d43a 	srai	r3,r2,16
 80054ec:	10bfffcc 	andi	r2,r2,65535
 80054f0:	2149c83a 	sub	r4,r4,r5
 80054f4:	20c9883a 	add	r4,r4,r3
 80054f8:	200a943a 	slli	r5,r4,16
 80054fc:	8c400104 	addi	r17,r17,4
 8005500:	2007d43a 	srai	r3,r4,16
 8005504:	2884b03a 	or	r2,r5,r2
 8005508:	30bfff15 	stw	r2,-4(r6)
 800550c:	e47fed2e 	bgeu	fp,r17,80054c4 <__alt_data_end+0xfc0054c4>
 8005510:	bdc5883a 	add	r2,r23,r23
 8005514:	1085883a 	add	r2,r2,r2
 8005518:	9887883a 	add	r3,r19,r2
 800551c:	18800017 	ldw	r2,0(r3)
 8005520:	10000c1e 	bne	r2,zero,8005554 <quorem+0x1ec>
 8005524:	18bfff04 	addi	r2,r3,-4
 8005528:	9880082e 	bgeu	r19,r2,800554c <quorem+0x1e4>
 800552c:	18ffff17 	ldw	r3,-4(r3)
 8005530:	18000326 	beq	r3,zero,8005540 <quorem+0x1d8>
 8005534:	00000506 	br	800554c <quorem+0x1e4>
 8005538:	10c00017 	ldw	r3,0(r2)
 800553c:	1800031e 	bne	r3,zero,800554c <quorem+0x1e4>
 8005540:	10bfff04 	addi	r2,r2,-4
 8005544:	bdffffc4 	addi	r23,r23,-1
 8005548:	98bffb36 	bltu	r19,r2,8005538 <__alt_data_end+0xfc005538>
 800554c:	d8c00017 	ldw	r3,0(sp)
 8005550:	1dc00415 	stw	r23,16(r3)
 8005554:	9005883a 	mov	r2,r18
 8005558:	dfc00d17 	ldw	ra,52(sp)
 800555c:	df000c17 	ldw	fp,48(sp)
 8005560:	ddc00b17 	ldw	r23,44(sp)
 8005564:	dd800a17 	ldw	r22,40(sp)
 8005568:	dd400917 	ldw	r21,36(sp)
 800556c:	dd000817 	ldw	r20,32(sp)
 8005570:	dcc00717 	ldw	r19,28(sp)
 8005574:	dc800617 	ldw	r18,24(sp)
 8005578:	dc400517 	ldw	r17,20(sp)
 800557c:	dc000417 	ldw	r16,16(sp)
 8005580:	dec00e04 	addi	sp,sp,56
 8005584:	f800283a 	ret
 8005588:	0005883a 	mov	r2,zero
 800558c:	003ff206 	br	8005558 <__alt_data_end+0xfc005558>

08005590 <_dtoa_r>:
 8005590:	20801017 	ldw	r2,64(r4)
 8005594:	deffde04 	addi	sp,sp,-136
 8005598:	df002015 	stw	fp,128(sp)
 800559c:	dcc01b15 	stw	r19,108(sp)
 80055a0:	dc801a15 	stw	r18,104(sp)
 80055a4:	dc401915 	stw	r17,100(sp)
 80055a8:	dc001815 	stw	r16,96(sp)
 80055ac:	dfc02115 	stw	ra,132(sp)
 80055b0:	ddc01f15 	stw	r23,124(sp)
 80055b4:	dd801e15 	stw	r22,120(sp)
 80055b8:	dd401d15 	stw	r21,116(sp)
 80055bc:	dd001c15 	stw	r20,112(sp)
 80055c0:	d9c00315 	stw	r7,12(sp)
 80055c4:	2039883a 	mov	fp,r4
 80055c8:	3023883a 	mov	r17,r6
 80055cc:	2825883a 	mov	r18,r5
 80055d0:	dc002417 	ldw	r16,144(sp)
 80055d4:	3027883a 	mov	r19,r6
 80055d8:	10000826 	beq	r2,zero,80055fc <_dtoa_r+0x6c>
 80055dc:	21801117 	ldw	r6,68(r4)
 80055e0:	00c00044 	movi	r3,1
 80055e4:	100b883a 	mov	r5,r2
 80055e8:	1986983a 	sll	r3,r3,r6
 80055ec:	11800115 	stw	r6,4(r2)
 80055f0:	10c00215 	stw	r3,8(r2)
 80055f4:	8008ba80 	call	8008ba8 <_Bfree>
 80055f8:	e0001015 	stw	zero,64(fp)
 80055fc:	88002e16 	blt	r17,zero,80056b8 <_dtoa_r+0x128>
 8005600:	80000015 	stw	zero,0(r16)
 8005604:	889ffc2c 	andhi	r2,r17,32752
 8005608:	00dffc34 	movhi	r3,32752
 800560c:	10c01c26 	beq	r2,r3,8005680 <_dtoa_r+0xf0>
 8005610:	000d883a 	mov	r6,zero
 8005614:	000f883a 	mov	r7,zero
 8005618:	9009883a 	mov	r4,r18
 800561c:	980b883a 	mov	r5,r19
 8005620:	800e3e40 	call	800e3e4 <__eqdf2>
 8005624:	10002b1e 	bne	r2,zero,80056d4 <_dtoa_r+0x144>
 8005628:	d9c02317 	ldw	r7,140(sp)
 800562c:	00800044 	movi	r2,1
 8005630:	38800015 	stw	r2,0(r7)
 8005634:	d8802517 	ldw	r2,148(sp)
 8005638:	10019e26 	beq	r2,zero,8005cb4 <_dtoa_r+0x724>
 800563c:	d8c02517 	ldw	r3,148(sp)
 8005640:	00820074 	movhi	r2,2049
 8005644:	10902844 	addi	r2,r2,16545
 8005648:	18800015 	stw	r2,0(r3)
 800564c:	10bfffc4 	addi	r2,r2,-1
 8005650:	dfc02117 	ldw	ra,132(sp)
 8005654:	df002017 	ldw	fp,128(sp)
 8005658:	ddc01f17 	ldw	r23,124(sp)
 800565c:	dd801e17 	ldw	r22,120(sp)
 8005660:	dd401d17 	ldw	r21,116(sp)
 8005664:	dd001c17 	ldw	r20,112(sp)
 8005668:	dcc01b17 	ldw	r19,108(sp)
 800566c:	dc801a17 	ldw	r18,104(sp)
 8005670:	dc401917 	ldw	r17,100(sp)
 8005674:	dc001817 	ldw	r16,96(sp)
 8005678:	dec02204 	addi	sp,sp,136
 800567c:	f800283a 	ret
 8005680:	d8c02317 	ldw	r3,140(sp)
 8005684:	0089c3c4 	movi	r2,9999
 8005688:	18800015 	stw	r2,0(r3)
 800568c:	90017726 	beq	r18,zero,8005c6c <_dtoa_r+0x6dc>
 8005690:	00820074 	movhi	r2,2049
 8005694:	10903404 	addi	r2,r2,16592
 8005698:	d9002517 	ldw	r4,148(sp)
 800569c:	203fec26 	beq	r4,zero,8005650 <__alt_data_end+0xfc005650>
 80056a0:	10c000c7 	ldb	r3,3(r2)
 80056a4:	1801781e 	bne	r3,zero,8005c88 <_dtoa_r+0x6f8>
 80056a8:	10c000c4 	addi	r3,r2,3
 80056ac:	d9802517 	ldw	r6,148(sp)
 80056b0:	30c00015 	stw	r3,0(r6)
 80056b4:	003fe606 	br	8005650 <__alt_data_end+0xfc005650>
 80056b8:	04e00034 	movhi	r19,32768
 80056bc:	9cffffc4 	addi	r19,r19,-1
 80056c0:	00800044 	movi	r2,1
 80056c4:	8ce6703a 	and	r19,r17,r19
 80056c8:	80800015 	stw	r2,0(r16)
 80056cc:	9823883a 	mov	r17,r19
 80056d0:	003fcc06 	br	8005604 <__alt_data_end+0xfc005604>
 80056d4:	d8800204 	addi	r2,sp,8
 80056d8:	d8800015 	stw	r2,0(sp)
 80056dc:	d9c00104 	addi	r7,sp,4
 80056e0:	900b883a 	mov	r5,r18
 80056e4:	980d883a 	mov	r6,r19
 80056e8:	e009883a 	mov	r4,fp
 80056ec:	8820d53a 	srli	r16,r17,20
 80056f0:	80098500 	call	8009850 <__d2b>
 80056f4:	d8800915 	stw	r2,36(sp)
 80056f8:	8001651e 	bne	r16,zero,8005c90 <_dtoa_r+0x700>
 80056fc:	dd800217 	ldw	r22,8(sp)
 8005700:	dc000117 	ldw	r16,4(sp)
 8005704:	00800804 	movi	r2,32
 8005708:	b421883a 	add	r16,r22,r16
 800570c:	80c10c84 	addi	r3,r16,1074
 8005710:	10c2d10e 	bge	r2,r3,8006258 <_dtoa_r+0xcc8>
 8005714:	00801004 	movi	r2,64
 8005718:	81010484 	addi	r4,r16,1042
 800571c:	10c7c83a 	sub	r3,r2,r3
 8005720:	9108d83a 	srl	r4,r18,r4
 8005724:	88e2983a 	sll	r17,r17,r3
 8005728:	2448b03a 	or	r4,r4,r17
 800572c:	800f9000 	call	800f900 <__floatunsidf>
 8005730:	017f8434 	movhi	r5,65040
 8005734:	01800044 	movi	r6,1
 8005738:	1009883a 	mov	r4,r2
 800573c:	194b883a 	add	r5,r3,r5
 8005740:	843fffc4 	addi	r16,r16,-1
 8005744:	d9801115 	stw	r6,68(sp)
 8005748:	000d883a 	mov	r6,zero
 800574c:	01cffe34 	movhi	r7,16376
 8005750:	800eea80 	call	800eea8 <__subdf3>
 8005754:	0198dbf4 	movhi	r6,25455
 8005758:	01cff4f4 	movhi	r7,16339
 800575c:	3190d844 	addi	r6,r6,17249
 8005760:	39e1e9c4 	addi	r7,r7,-30809
 8005764:	1009883a 	mov	r4,r2
 8005768:	180b883a 	mov	r5,r3
 800576c:	800e63c0 	call	800e63c <__muldf3>
 8005770:	01a2d874 	movhi	r6,35681
 8005774:	01cff1f4 	movhi	r7,16327
 8005778:	31b22cc4 	addi	r6,r6,-14157
 800577c:	39e28a04 	addi	r7,r7,-30168
 8005780:	180b883a 	mov	r5,r3
 8005784:	1009883a 	mov	r4,r2
 8005788:	800d1680 	call	800d168 <__adddf3>
 800578c:	8009883a 	mov	r4,r16
 8005790:	1029883a 	mov	r20,r2
 8005794:	1823883a 	mov	r17,r3
 8005798:	800f8240 	call	800f824 <__floatsidf>
 800579c:	019427f4 	movhi	r6,20639
 80057a0:	01cff4f4 	movhi	r7,16339
 80057a4:	319e7ec4 	addi	r6,r6,31227
 80057a8:	39d104c4 	addi	r7,r7,17427
 80057ac:	1009883a 	mov	r4,r2
 80057b0:	180b883a 	mov	r5,r3
 80057b4:	800e63c0 	call	800e63c <__muldf3>
 80057b8:	100d883a 	mov	r6,r2
 80057bc:	180f883a 	mov	r7,r3
 80057c0:	a009883a 	mov	r4,r20
 80057c4:	880b883a 	mov	r5,r17
 80057c8:	800d1680 	call	800d168 <__adddf3>
 80057cc:	1009883a 	mov	r4,r2
 80057d0:	180b883a 	mov	r5,r3
 80057d4:	1029883a 	mov	r20,r2
 80057d8:	1823883a 	mov	r17,r3
 80057dc:	800f7a40 	call	800f7a4 <__fixdfsi>
 80057e0:	000d883a 	mov	r6,zero
 80057e4:	000f883a 	mov	r7,zero
 80057e8:	a009883a 	mov	r4,r20
 80057ec:	880b883a 	mov	r5,r17
 80057f0:	d8800515 	stw	r2,20(sp)
 80057f4:	800e5480 	call	800e548 <__ledf2>
 80057f8:	10028716 	blt	r2,zero,8006218 <_dtoa_r+0xc88>
 80057fc:	d8c00517 	ldw	r3,20(sp)
 8005800:	00800584 	movi	r2,22
 8005804:	10c27536 	bltu	r2,r3,80061dc <_dtoa_r+0xc4c>
 8005808:	180490fa 	slli	r2,r3,3
 800580c:	00c20074 	movhi	r3,2049
 8005810:	18d05004 	addi	r3,r3,16704
 8005814:	1885883a 	add	r2,r3,r2
 8005818:	11000017 	ldw	r4,0(r2)
 800581c:	11400117 	ldw	r5,4(r2)
 8005820:	900d883a 	mov	r6,r18
 8005824:	980f883a 	mov	r7,r19
 8005828:	800e46c0 	call	800e46c <__gedf2>
 800582c:	00828d0e 	bge	zero,r2,8006264 <_dtoa_r+0xcd4>
 8005830:	d9000517 	ldw	r4,20(sp)
 8005834:	d8000e15 	stw	zero,56(sp)
 8005838:	213fffc4 	addi	r4,r4,-1
 800583c:	d9000515 	stw	r4,20(sp)
 8005840:	b42dc83a 	sub	r22,r22,r16
 8005844:	b5bfffc4 	addi	r22,r22,-1
 8005848:	b0026f16 	blt	r22,zero,8006208 <_dtoa_r+0xc78>
 800584c:	d8000815 	stw	zero,32(sp)
 8005850:	d9c00517 	ldw	r7,20(sp)
 8005854:	38026416 	blt	r7,zero,80061e8 <_dtoa_r+0xc58>
 8005858:	b1ed883a 	add	r22,r22,r7
 800585c:	d9c00d15 	stw	r7,52(sp)
 8005860:	d8000a15 	stw	zero,40(sp)
 8005864:	d9800317 	ldw	r6,12(sp)
 8005868:	00800244 	movi	r2,9
 800586c:	11811436 	bltu	r2,r6,8005cc0 <_dtoa_r+0x730>
 8005870:	00800144 	movi	r2,5
 8005874:	1184e10e 	bge	r2,r6,8006bfc <_dtoa_r+0x166c>
 8005878:	31bfff04 	addi	r6,r6,-4
 800587c:	d9800315 	stw	r6,12(sp)
 8005880:	0023883a 	mov	r17,zero
 8005884:	d9800317 	ldw	r6,12(sp)
 8005888:	008000c4 	movi	r2,3
 800588c:	30836726 	beq	r6,r2,800662c <_dtoa_r+0x109c>
 8005890:	1183410e 	bge	r2,r6,8006598 <_dtoa_r+0x1008>
 8005894:	d9c00317 	ldw	r7,12(sp)
 8005898:	00800104 	movi	r2,4
 800589c:	38827c26 	beq	r7,r2,8006290 <_dtoa_r+0xd00>
 80058a0:	00800144 	movi	r2,5
 80058a4:	3884c41e 	bne	r7,r2,8006bb8 <_dtoa_r+0x1628>
 80058a8:	00800044 	movi	r2,1
 80058ac:	d8800b15 	stw	r2,44(sp)
 80058b0:	d8c00517 	ldw	r3,20(sp)
 80058b4:	d9002217 	ldw	r4,136(sp)
 80058b8:	1907883a 	add	r3,r3,r4
 80058bc:	19800044 	addi	r6,r3,1
 80058c0:	d8c00c15 	stw	r3,48(sp)
 80058c4:	d9800615 	stw	r6,24(sp)
 80058c8:	0183a40e 	bge	zero,r6,800675c <_dtoa_r+0x11cc>
 80058cc:	d9800617 	ldw	r6,24(sp)
 80058d0:	3021883a 	mov	r16,r6
 80058d4:	e0001115 	stw	zero,68(fp)
 80058d8:	008005c4 	movi	r2,23
 80058dc:	1184c92e 	bgeu	r2,r6,8006c04 <_dtoa_r+0x1674>
 80058e0:	00c00044 	movi	r3,1
 80058e4:	00800104 	movi	r2,4
 80058e8:	1085883a 	add	r2,r2,r2
 80058ec:	11000504 	addi	r4,r2,20
 80058f0:	180b883a 	mov	r5,r3
 80058f4:	18c00044 	addi	r3,r3,1
 80058f8:	313ffb2e 	bgeu	r6,r4,80058e8 <__alt_data_end+0xfc0058e8>
 80058fc:	e1401115 	stw	r5,68(fp)
 8005900:	e009883a 	mov	r4,fp
 8005904:	8008b000 	call	8008b00 <_Balloc>
 8005908:	d8800715 	stw	r2,28(sp)
 800590c:	e0801015 	stw	r2,64(fp)
 8005910:	00800384 	movi	r2,14
 8005914:	1400f736 	bltu	r2,r16,8005cf4 <_dtoa_r+0x764>
 8005918:	8800f626 	beq	r17,zero,8005cf4 <_dtoa_r+0x764>
 800591c:	d9c00517 	ldw	r7,20(sp)
 8005920:	01c39a0e 	bge	zero,r7,800678c <_dtoa_r+0x11fc>
 8005924:	388003cc 	andi	r2,r7,15
 8005928:	100490fa 	slli	r2,r2,3
 800592c:	382bd13a 	srai	r21,r7,4
 8005930:	00c20074 	movhi	r3,2049
 8005934:	18d05004 	addi	r3,r3,16704
 8005938:	1885883a 	add	r2,r3,r2
 800593c:	a8c0040c 	andi	r3,r21,16
 8005940:	12400017 	ldw	r9,0(r2)
 8005944:	12000117 	ldw	r8,4(r2)
 8005948:	18037926 	beq	r3,zero,8006730 <_dtoa_r+0x11a0>
 800594c:	00820074 	movhi	r2,2049
 8005950:	10904604 	addi	r2,r2,16664
 8005954:	11800817 	ldw	r6,32(r2)
 8005958:	11c00917 	ldw	r7,36(r2)
 800595c:	9009883a 	mov	r4,r18
 8005960:	980b883a 	mov	r5,r19
 8005964:	da001715 	stw	r8,92(sp)
 8005968:	da401615 	stw	r9,88(sp)
 800596c:	800da140 	call	800da14 <__divdf3>
 8005970:	da001717 	ldw	r8,92(sp)
 8005974:	da401617 	ldw	r9,88(sp)
 8005978:	ad4003cc 	andi	r21,r21,15
 800597c:	040000c4 	movi	r16,3
 8005980:	1023883a 	mov	r17,r2
 8005984:	1829883a 	mov	r20,r3
 8005988:	a8001126 	beq	r21,zero,80059d0 <_dtoa_r+0x440>
 800598c:	05c20074 	movhi	r23,2049
 8005990:	bdd04604 	addi	r23,r23,16664
 8005994:	4805883a 	mov	r2,r9
 8005998:	4007883a 	mov	r3,r8
 800599c:	a980004c 	andi	r6,r21,1
 80059a0:	1009883a 	mov	r4,r2
 80059a4:	a82bd07a 	srai	r21,r21,1
 80059a8:	180b883a 	mov	r5,r3
 80059ac:	30000426 	beq	r6,zero,80059c0 <_dtoa_r+0x430>
 80059b0:	b9800017 	ldw	r6,0(r23)
 80059b4:	b9c00117 	ldw	r7,4(r23)
 80059b8:	84000044 	addi	r16,r16,1
 80059bc:	800e63c0 	call	800e63c <__muldf3>
 80059c0:	bdc00204 	addi	r23,r23,8
 80059c4:	a83ff51e 	bne	r21,zero,800599c <__alt_data_end+0xfc00599c>
 80059c8:	1013883a 	mov	r9,r2
 80059cc:	1811883a 	mov	r8,r3
 80059d0:	480d883a 	mov	r6,r9
 80059d4:	400f883a 	mov	r7,r8
 80059d8:	8809883a 	mov	r4,r17
 80059dc:	a00b883a 	mov	r5,r20
 80059e0:	800da140 	call	800da14 <__divdf3>
 80059e4:	d8800f15 	stw	r2,60(sp)
 80059e8:	d8c01015 	stw	r3,64(sp)
 80059ec:	d8c00e17 	ldw	r3,56(sp)
 80059f0:	18000626 	beq	r3,zero,8005a0c <_dtoa_r+0x47c>
 80059f4:	d9000f17 	ldw	r4,60(sp)
 80059f8:	d9401017 	ldw	r5,64(sp)
 80059fc:	000d883a 	mov	r6,zero
 8005a00:	01cffc34 	movhi	r7,16368
 8005a04:	800e5480 	call	800e548 <__ledf2>
 8005a08:	10040b16 	blt	r2,zero,8006a38 <_dtoa_r+0x14a8>
 8005a0c:	8009883a 	mov	r4,r16
 8005a10:	800f8240 	call	800f824 <__floatsidf>
 8005a14:	d9800f17 	ldw	r6,60(sp)
 8005a18:	d9c01017 	ldw	r7,64(sp)
 8005a1c:	1009883a 	mov	r4,r2
 8005a20:	180b883a 	mov	r5,r3
 8005a24:	800e63c0 	call	800e63c <__muldf3>
 8005a28:	000d883a 	mov	r6,zero
 8005a2c:	01d00734 	movhi	r7,16412
 8005a30:	1009883a 	mov	r4,r2
 8005a34:	180b883a 	mov	r5,r3
 8005a38:	800d1680 	call	800d168 <__adddf3>
 8005a3c:	1021883a 	mov	r16,r2
 8005a40:	d8800617 	ldw	r2,24(sp)
 8005a44:	047f3034 	movhi	r17,64704
 8005a48:	1c63883a 	add	r17,r3,r17
 8005a4c:	10031826 	beq	r2,zero,80066b0 <_dtoa_r+0x1120>
 8005a50:	d8c00517 	ldw	r3,20(sp)
 8005a54:	db000617 	ldw	r12,24(sp)
 8005a58:	d8c01315 	stw	r3,76(sp)
 8005a5c:	d9000b17 	ldw	r4,44(sp)
 8005a60:	20038f26 	beq	r4,zero,80068a0 <_dtoa_r+0x1310>
 8005a64:	60bfffc4 	addi	r2,r12,-1
 8005a68:	100490fa 	slli	r2,r2,3
 8005a6c:	00c20074 	movhi	r3,2049
 8005a70:	18d05004 	addi	r3,r3,16704
 8005a74:	1885883a 	add	r2,r3,r2
 8005a78:	11800017 	ldw	r6,0(r2)
 8005a7c:	11c00117 	ldw	r7,4(r2)
 8005a80:	d8800717 	ldw	r2,28(sp)
 8005a84:	0009883a 	mov	r4,zero
 8005a88:	014ff834 	movhi	r5,16352
 8005a8c:	db001615 	stw	r12,88(sp)
 8005a90:	15c00044 	addi	r23,r2,1
 8005a94:	800da140 	call	800da14 <__divdf3>
 8005a98:	800d883a 	mov	r6,r16
 8005a9c:	880f883a 	mov	r7,r17
 8005aa0:	1009883a 	mov	r4,r2
 8005aa4:	180b883a 	mov	r5,r3
 8005aa8:	800eea80 	call	800eea8 <__subdf3>
 8005aac:	d9401017 	ldw	r5,64(sp)
 8005ab0:	d9000f17 	ldw	r4,60(sp)
 8005ab4:	102b883a 	mov	r21,r2
 8005ab8:	d8c01215 	stw	r3,72(sp)
 8005abc:	800f7a40 	call	800f7a4 <__fixdfsi>
 8005ac0:	1009883a 	mov	r4,r2
 8005ac4:	1029883a 	mov	r20,r2
 8005ac8:	800f8240 	call	800f824 <__floatsidf>
 8005acc:	d9000f17 	ldw	r4,60(sp)
 8005ad0:	d9401017 	ldw	r5,64(sp)
 8005ad4:	100d883a 	mov	r6,r2
 8005ad8:	180f883a 	mov	r7,r3
 8005adc:	800eea80 	call	800eea8 <__subdf3>
 8005ae0:	1823883a 	mov	r17,r3
 8005ae4:	d8c00717 	ldw	r3,28(sp)
 8005ae8:	d9401217 	ldw	r5,72(sp)
 8005aec:	a2000c04 	addi	r8,r20,48
 8005af0:	1021883a 	mov	r16,r2
 8005af4:	1a000005 	stb	r8,0(r3)
 8005af8:	800d883a 	mov	r6,r16
 8005afc:	880f883a 	mov	r7,r17
 8005b00:	a809883a 	mov	r4,r21
 8005b04:	4029883a 	mov	r20,r8
 8005b08:	800e46c0 	call	800e46c <__gedf2>
 8005b0c:	00841d16 	blt	zero,r2,8006b84 <_dtoa_r+0x15f4>
 8005b10:	800d883a 	mov	r6,r16
 8005b14:	880f883a 	mov	r7,r17
 8005b18:	0009883a 	mov	r4,zero
 8005b1c:	014ffc34 	movhi	r5,16368
 8005b20:	800eea80 	call	800eea8 <__subdf3>
 8005b24:	d9401217 	ldw	r5,72(sp)
 8005b28:	100d883a 	mov	r6,r2
 8005b2c:	180f883a 	mov	r7,r3
 8005b30:	a809883a 	mov	r4,r21
 8005b34:	800e46c0 	call	800e46c <__gedf2>
 8005b38:	db001617 	ldw	r12,88(sp)
 8005b3c:	00840e16 	blt	zero,r2,8006b78 <_dtoa_r+0x15e8>
 8005b40:	00800044 	movi	r2,1
 8005b44:	13006b0e 	bge	r2,r12,8005cf4 <_dtoa_r+0x764>
 8005b48:	d9000717 	ldw	r4,28(sp)
 8005b4c:	dd800f15 	stw	r22,60(sp)
 8005b50:	dcc01015 	stw	r19,64(sp)
 8005b54:	2319883a 	add	r12,r4,r12
 8005b58:	dcc01217 	ldw	r19,72(sp)
 8005b5c:	602d883a 	mov	r22,r12
 8005b60:	dc801215 	stw	r18,72(sp)
 8005b64:	b825883a 	mov	r18,r23
 8005b68:	00000906 	br	8005b90 <_dtoa_r+0x600>
 8005b6c:	800eea80 	call	800eea8 <__subdf3>
 8005b70:	a80d883a 	mov	r6,r21
 8005b74:	980f883a 	mov	r7,r19
 8005b78:	1009883a 	mov	r4,r2
 8005b7c:	180b883a 	mov	r5,r3
 8005b80:	800e5480 	call	800e548 <__ledf2>
 8005b84:	1003e816 	blt	r2,zero,8006b28 <_dtoa_r+0x1598>
 8005b88:	b825883a 	mov	r18,r23
 8005b8c:	bd83e926 	beq	r23,r22,8006b34 <_dtoa_r+0x15a4>
 8005b90:	a809883a 	mov	r4,r21
 8005b94:	980b883a 	mov	r5,r19
 8005b98:	000d883a 	mov	r6,zero
 8005b9c:	01d00934 	movhi	r7,16420
 8005ba0:	800e63c0 	call	800e63c <__muldf3>
 8005ba4:	000d883a 	mov	r6,zero
 8005ba8:	01d00934 	movhi	r7,16420
 8005bac:	8009883a 	mov	r4,r16
 8005bb0:	880b883a 	mov	r5,r17
 8005bb4:	102b883a 	mov	r21,r2
 8005bb8:	1827883a 	mov	r19,r3
 8005bbc:	800e63c0 	call	800e63c <__muldf3>
 8005bc0:	180b883a 	mov	r5,r3
 8005bc4:	1009883a 	mov	r4,r2
 8005bc8:	1821883a 	mov	r16,r3
 8005bcc:	1023883a 	mov	r17,r2
 8005bd0:	800f7a40 	call	800f7a4 <__fixdfsi>
 8005bd4:	1009883a 	mov	r4,r2
 8005bd8:	1029883a 	mov	r20,r2
 8005bdc:	800f8240 	call	800f824 <__floatsidf>
 8005be0:	8809883a 	mov	r4,r17
 8005be4:	800b883a 	mov	r5,r16
 8005be8:	100d883a 	mov	r6,r2
 8005bec:	180f883a 	mov	r7,r3
 8005bf0:	800eea80 	call	800eea8 <__subdf3>
 8005bf4:	a5000c04 	addi	r20,r20,48
 8005bf8:	a80d883a 	mov	r6,r21
 8005bfc:	980f883a 	mov	r7,r19
 8005c00:	1009883a 	mov	r4,r2
 8005c04:	180b883a 	mov	r5,r3
 8005c08:	95000005 	stb	r20,0(r18)
 8005c0c:	1021883a 	mov	r16,r2
 8005c10:	1823883a 	mov	r17,r3
 8005c14:	800e5480 	call	800e548 <__ledf2>
 8005c18:	bdc00044 	addi	r23,r23,1
 8005c1c:	800d883a 	mov	r6,r16
 8005c20:	880f883a 	mov	r7,r17
 8005c24:	0009883a 	mov	r4,zero
 8005c28:	014ffc34 	movhi	r5,16368
 8005c2c:	103fcf0e 	bge	r2,zero,8005b6c <__alt_data_end+0xfc005b6c>
 8005c30:	d8c01317 	ldw	r3,76(sp)
 8005c34:	d8c00515 	stw	r3,20(sp)
 8005c38:	d9400917 	ldw	r5,36(sp)
 8005c3c:	e009883a 	mov	r4,fp
 8005c40:	8008ba80 	call	8008ba8 <_Bfree>
 8005c44:	d9000517 	ldw	r4,20(sp)
 8005c48:	d9802317 	ldw	r6,140(sp)
 8005c4c:	d9c02517 	ldw	r7,148(sp)
 8005c50:	b8000005 	stb	zero,0(r23)
 8005c54:	20800044 	addi	r2,r4,1
 8005c58:	30800015 	stw	r2,0(r6)
 8005c5c:	3802aa26 	beq	r7,zero,8006708 <_dtoa_r+0x1178>
 8005c60:	3dc00015 	stw	r23,0(r7)
 8005c64:	d8800717 	ldw	r2,28(sp)
 8005c68:	003e7906 	br	8005650 <__alt_data_end+0xfc005650>
 8005c6c:	00800434 	movhi	r2,16
 8005c70:	10bfffc4 	addi	r2,r2,-1
 8005c74:	88a2703a 	and	r17,r17,r2
 8005c78:	883e851e 	bne	r17,zero,8005690 <__alt_data_end+0xfc005690>
 8005c7c:	00820074 	movhi	r2,2049
 8005c80:	10903104 	addi	r2,r2,16580
 8005c84:	003e8406 	br	8005698 <__alt_data_end+0xfc005698>
 8005c88:	10c00204 	addi	r3,r2,8
 8005c8c:	003e8706 	br	80056ac <__alt_data_end+0xfc0056ac>
 8005c90:	01400434 	movhi	r5,16
 8005c94:	297fffc4 	addi	r5,r5,-1
 8005c98:	994a703a 	and	r5,r19,r5
 8005c9c:	9009883a 	mov	r4,r18
 8005ca0:	843f0044 	addi	r16,r16,-1023
 8005ca4:	294ffc34 	orhi	r5,r5,16368
 8005ca8:	dd800217 	ldw	r22,8(sp)
 8005cac:	d8001115 	stw	zero,68(sp)
 8005cb0:	003ea506 	br	8005748 <__alt_data_end+0xfc005748>
 8005cb4:	00820074 	movhi	r2,2049
 8005cb8:	10902804 	addi	r2,r2,16544
 8005cbc:	003e6406 	br	8005650 <__alt_data_end+0xfc005650>
 8005cc0:	e0001115 	stw	zero,68(fp)
 8005cc4:	000b883a 	mov	r5,zero
 8005cc8:	e009883a 	mov	r4,fp
 8005ccc:	8008b000 	call	8008b00 <_Balloc>
 8005cd0:	01bfffc4 	movi	r6,-1
 8005cd4:	01c00044 	movi	r7,1
 8005cd8:	d8800715 	stw	r2,28(sp)
 8005cdc:	d9800c15 	stw	r6,48(sp)
 8005ce0:	e0801015 	stw	r2,64(fp)
 8005ce4:	d8000315 	stw	zero,12(sp)
 8005ce8:	d9c00b15 	stw	r7,44(sp)
 8005cec:	d9800615 	stw	r6,24(sp)
 8005cf0:	d8002215 	stw	zero,136(sp)
 8005cf4:	d8800117 	ldw	r2,4(sp)
 8005cf8:	10008916 	blt	r2,zero,8005f20 <_dtoa_r+0x990>
 8005cfc:	d9000517 	ldw	r4,20(sp)
 8005d00:	00c00384 	movi	r3,14
 8005d04:	19008616 	blt	r3,r4,8005f20 <_dtoa_r+0x990>
 8005d08:	200490fa 	slli	r2,r4,3
 8005d0c:	00c20074 	movhi	r3,2049
 8005d10:	d9802217 	ldw	r6,136(sp)
 8005d14:	18d05004 	addi	r3,r3,16704
 8005d18:	1885883a 	add	r2,r3,r2
 8005d1c:	14000017 	ldw	r16,0(r2)
 8005d20:	14400117 	ldw	r17,4(r2)
 8005d24:	30016316 	blt	r6,zero,80062b4 <_dtoa_r+0xd24>
 8005d28:	800d883a 	mov	r6,r16
 8005d2c:	880f883a 	mov	r7,r17
 8005d30:	9009883a 	mov	r4,r18
 8005d34:	980b883a 	mov	r5,r19
 8005d38:	800da140 	call	800da14 <__divdf3>
 8005d3c:	180b883a 	mov	r5,r3
 8005d40:	1009883a 	mov	r4,r2
 8005d44:	800f7a40 	call	800f7a4 <__fixdfsi>
 8005d48:	1009883a 	mov	r4,r2
 8005d4c:	102b883a 	mov	r21,r2
 8005d50:	800f8240 	call	800f824 <__floatsidf>
 8005d54:	800d883a 	mov	r6,r16
 8005d58:	880f883a 	mov	r7,r17
 8005d5c:	1009883a 	mov	r4,r2
 8005d60:	180b883a 	mov	r5,r3
 8005d64:	800e63c0 	call	800e63c <__muldf3>
 8005d68:	100d883a 	mov	r6,r2
 8005d6c:	180f883a 	mov	r7,r3
 8005d70:	9009883a 	mov	r4,r18
 8005d74:	980b883a 	mov	r5,r19
 8005d78:	800eea80 	call	800eea8 <__subdf3>
 8005d7c:	d9c00717 	ldw	r7,28(sp)
 8005d80:	1009883a 	mov	r4,r2
 8005d84:	a8800c04 	addi	r2,r21,48
 8005d88:	38800005 	stb	r2,0(r7)
 8005d8c:	3dc00044 	addi	r23,r7,1
 8005d90:	d9c00617 	ldw	r7,24(sp)
 8005d94:	01800044 	movi	r6,1
 8005d98:	180b883a 	mov	r5,r3
 8005d9c:	2005883a 	mov	r2,r4
 8005da0:	39803826 	beq	r7,r6,8005e84 <_dtoa_r+0x8f4>
 8005da4:	000d883a 	mov	r6,zero
 8005da8:	01d00934 	movhi	r7,16420
 8005dac:	800e63c0 	call	800e63c <__muldf3>
 8005db0:	000d883a 	mov	r6,zero
 8005db4:	000f883a 	mov	r7,zero
 8005db8:	1009883a 	mov	r4,r2
 8005dbc:	180b883a 	mov	r5,r3
 8005dc0:	1025883a 	mov	r18,r2
 8005dc4:	1827883a 	mov	r19,r3
 8005dc8:	800e3e40 	call	800e3e4 <__eqdf2>
 8005dcc:	103f9a26 	beq	r2,zero,8005c38 <__alt_data_end+0xfc005c38>
 8005dd0:	d9c00617 	ldw	r7,24(sp)
 8005dd4:	d8c00717 	ldw	r3,28(sp)
 8005dd8:	b829883a 	mov	r20,r23
 8005ddc:	38bfffc4 	addi	r2,r7,-1
 8005de0:	18ad883a 	add	r22,r3,r2
 8005de4:	00000a06 	br	8005e10 <_dtoa_r+0x880>
 8005de8:	800e63c0 	call	800e63c <__muldf3>
 8005dec:	000d883a 	mov	r6,zero
 8005df0:	000f883a 	mov	r7,zero
 8005df4:	1009883a 	mov	r4,r2
 8005df8:	180b883a 	mov	r5,r3
 8005dfc:	1025883a 	mov	r18,r2
 8005e00:	1827883a 	mov	r19,r3
 8005e04:	b829883a 	mov	r20,r23
 8005e08:	800e3e40 	call	800e3e4 <__eqdf2>
 8005e0c:	103f8a26 	beq	r2,zero,8005c38 <__alt_data_end+0xfc005c38>
 8005e10:	800d883a 	mov	r6,r16
 8005e14:	880f883a 	mov	r7,r17
 8005e18:	9009883a 	mov	r4,r18
 8005e1c:	980b883a 	mov	r5,r19
 8005e20:	800da140 	call	800da14 <__divdf3>
 8005e24:	180b883a 	mov	r5,r3
 8005e28:	1009883a 	mov	r4,r2
 8005e2c:	800f7a40 	call	800f7a4 <__fixdfsi>
 8005e30:	1009883a 	mov	r4,r2
 8005e34:	102b883a 	mov	r21,r2
 8005e38:	800f8240 	call	800f824 <__floatsidf>
 8005e3c:	800d883a 	mov	r6,r16
 8005e40:	880f883a 	mov	r7,r17
 8005e44:	1009883a 	mov	r4,r2
 8005e48:	180b883a 	mov	r5,r3
 8005e4c:	800e63c0 	call	800e63c <__muldf3>
 8005e50:	100d883a 	mov	r6,r2
 8005e54:	180f883a 	mov	r7,r3
 8005e58:	9009883a 	mov	r4,r18
 8005e5c:	980b883a 	mov	r5,r19
 8005e60:	800eea80 	call	800eea8 <__subdf3>
 8005e64:	aa000c04 	addi	r8,r21,48
 8005e68:	a2000005 	stb	r8,0(r20)
 8005e6c:	000d883a 	mov	r6,zero
 8005e70:	01d00934 	movhi	r7,16420
 8005e74:	1009883a 	mov	r4,r2
 8005e78:	180b883a 	mov	r5,r3
 8005e7c:	a5c00044 	addi	r23,r20,1
 8005e80:	b53fd91e 	bne	r22,r20,8005de8 <__alt_data_end+0xfc005de8>
 8005e84:	100d883a 	mov	r6,r2
 8005e88:	180f883a 	mov	r7,r3
 8005e8c:	1009883a 	mov	r4,r2
 8005e90:	180b883a 	mov	r5,r3
 8005e94:	800d1680 	call	800d168 <__adddf3>
 8005e98:	100d883a 	mov	r6,r2
 8005e9c:	180f883a 	mov	r7,r3
 8005ea0:	8009883a 	mov	r4,r16
 8005ea4:	880b883a 	mov	r5,r17
 8005ea8:	1027883a 	mov	r19,r2
 8005eac:	1825883a 	mov	r18,r3
 8005eb0:	800e5480 	call	800e548 <__ledf2>
 8005eb4:	10000816 	blt	r2,zero,8005ed8 <_dtoa_r+0x948>
 8005eb8:	980d883a 	mov	r6,r19
 8005ebc:	900f883a 	mov	r7,r18
 8005ec0:	8009883a 	mov	r4,r16
 8005ec4:	880b883a 	mov	r5,r17
 8005ec8:	800e3e40 	call	800e3e4 <__eqdf2>
 8005ecc:	103f5a1e 	bne	r2,zero,8005c38 <__alt_data_end+0xfc005c38>
 8005ed0:	ad40004c 	andi	r21,r21,1
 8005ed4:	a83f5826 	beq	r21,zero,8005c38 <__alt_data_end+0xfc005c38>
 8005ed8:	bd3fffc3 	ldbu	r20,-1(r23)
 8005edc:	b8bfffc4 	addi	r2,r23,-1
 8005ee0:	1007883a 	mov	r3,r2
 8005ee4:	01400e44 	movi	r5,57
 8005ee8:	d9800717 	ldw	r6,28(sp)
 8005eec:	00000506 	br	8005f04 <_dtoa_r+0x974>
 8005ef0:	18ffffc4 	addi	r3,r3,-1
 8005ef4:	11824726 	beq	r2,r6,8006814 <_dtoa_r+0x1284>
 8005ef8:	1d000003 	ldbu	r20,0(r3)
 8005efc:	102f883a 	mov	r23,r2
 8005f00:	10bfffc4 	addi	r2,r2,-1
 8005f04:	a1003fcc 	andi	r4,r20,255
 8005f08:	2100201c 	xori	r4,r4,128
 8005f0c:	213fe004 	addi	r4,r4,-128
 8005f10:	217ff726 	beq	r4,r5,8005ef0 <__alt_data_end+0xfc005ef0>
 8005f14:	a2000044 	addi	r8,r20,1
 8005f18:	12000005 	stb	r8,0(r2)
 8005f1c:	003f4606 	br	8005c38 <__alt_data_end+0xfc005c38>
 8005f20:	d9000b17 	ldw	r4,44(sp)
 8005f24:	2000c826 	beq	r4,zero,8006248 <_dtoa_r+0xcb8>
 8005f28:	d9800317 	ldw	r6,12(sp)
 8005f2c:	00c00044 	movi	r3,1
 8005f30:	1980f90e 	bge	r3,r6,8006318 <_dtoa_r+0xd88>
 8005f34:	d8800617 	ldw	r2,24(sp)
 8005f38:	d8c00a17 	ldw	r3,40(sp)
 8005f3c:	157fffc4 	addi	r21,r2,-1
 8005f40:	1d41f316 	blt	r3,r21,8006710 <_dtoa_r+0x1180>
 8005f44:	1d6bc83a 	sub	r21,r3,r21
 8005f48:	d9c00617 	ldw	r7,24(sp)
 8005f4c:	3802aa16 	blt	r7,zero,80069f8 <_dtoa_r+0x1468>
 8005f50:	dd000817 	ldw	r20,32(sp)
 8005f54:	d8800617 	ldw	r2,24(sp)
 8005f58:	d8c00817 	ldw	r3,32(sp)
 8005f5c:	01400044 	movi	r5,1
 8005f60:	e009883a 	mov	r4,fp
 8005f64:	1887883a 	add	r3,r3,r2
 8005f68:	d8c00815 	stw	r3,32(sp)
 8005f6c:	b0ad883a 	add	r22,r22,r2
 8005f70:	8008f340 	call	8008f34 <__i2b>
 8005f74:	1023883a 	mov	r17,r2
 8005f78:	a0000826 	beq	r20,zero,8005f9c <_dtoa_r+0xa0c>
 8005f7c:	0580070e 	bge	zero,r22,8005f9c <_dtoa_r+0xa0c>
 8005f80:	a005883a 	mov	r2,r20
 8005f84:	b500b916 	blt	r22,r20,800626c <_dtoa_r+0xcdc>
 8005f88:	d9000817 	ldw	r4,32(sp)
 8005f8c:	a0a9c83a 	sub	r20,r20,r2
 8005f90:	b0adc83a 	sub	r22,r22,r2
 8005f94:	2089c83a 	sub	r4,r4,r2
 8005f98:	d9000815 	stw	r4,32(sp)
 8005f9c:	d9800a17 	ldw	r6,40(sp)
 8005fa0:	0181810e 	bge	zero,r6,80065a8 <_dtoa_r+0x1018>
 8005fa4:	d9c00b17 	ldw	r7,44(sp)
 8005fa8:	3800b326 	beq	r7,zero,8006278 <_dtoa_r+0xce8>
 8005fac:	a800b226 	beq	r21,zero,8006278 <_dtoa_r+0xce8>
 8005fb0:	880b883a 	mov	r5,r17
 8005fb4:	a80d883a 	mov	r6,r21
 8005fb8:	e009883a 	mov	r4,fp
 8005fbc:	80091fc0 	call	80091fc <__pow5mult>
 8005fc0:	d9800917 	ldw	r6,36(sp)
 8005fc4:	100b883a 	mov	r5,r2
 8005fc8:	e009883a 	mov	r4,fp
 8005fcc:	1023883a 	mov	r17,r2
 8005fd0:	8008f700 	call	8008f70 <__multiply>
 8005fd4:	1021883a 	mov	r16,r2
 8005fd8:	d8800a17 	ldw	r2,40(sp)
 8005fdc:	d9400917 	ldw	r5,36(sp)
 8005fe0:	e009883a 	mov	r4,fp
 8005fe4:	1545c83a 	sub	r2,r2,r21
 8005fe8:	d8800a15 	stw	r2,40(sp)
 8005fec:	8008ba80 	call	8008ba8 <_Bfree>
 8005ff0:	d8c00a17 	ldw	r3,40(sp)
 8005ff4:	18009f1e 	bne	r3,zero,8006274 <_dtoa_r+0xce4>
 8005ff8:	05c00044 	movi	r23,1
 8005ffc:	e009883a 	mov	r4,fp
 8006000:	b80b883a 	mov	r5,r23
 8006004:	8008f340 	call	8008f34 <__i2b>
 8006008:	d9000d17 	ldw	r4,52(sp)
 800600c:	102b883a 	mov	r21,r2
 8006010:	2000ce26 	beq	r4,zero,800634c <_dtoa_r+0xdbc>
 8006014:	200d883a 	mov	r6,r4
 8006018:	100b883a 	mov	r5,r2
 800601c:	e009883a 	mov	r4,fp
 8006020:	80091fc0 	call	80091fc <__pow5mult>
 8006024:	d9800317 	ldw	r6,12(sp)
 8006028:	102b883a 	mov	r21,r2
 800602c:	b981810e 	bge	r23,r6,8006634 <_dtoa_r+0x10a4>
 8006030:	0027883a 	mov	r19,zero
 8006034:	a8800417 	ldw	r2,16(r21)
 8006038:	05c00804 	movi	r23,32
 800603c:	10800104 	addi	r2,r2,4
 8006040:	1085883a 	add	r2,r2,r2
 8006044:	1085883a 	add	r2,r2,r2
 8006048:	a885883a 	add	r2,r21,r2
 800604c:	11000017 	ldw	r4,0(r2)
 8006050:	8008e1c0 	call	8008e1c <__hi0bits>
 8006054:	b885c83a 	sub	r2,r23,r2
 8006058:	1585883a 	add	r2,r2,r22
 800605c:	108007cc 	andi	r2,r2,31
 8006060:	1000b326 	beq	r2,zero,8006330 <_dtoa_r+0xda0>
 8006064:	00c00804 	movi	r3,32
 8006068:	1887c83a 	sub	r3,r3,r2
 800606c:	01000104 	movi	r4,4
 8006070:	20c2cd0e 	bge	r4,r3,8006ba8 <_dtoa_r+0x1618>
 8006074:	00c00704 	movi	r3,28
 8006078:	1885c83a 	sub	r2,r3,r2
 800607c:	d8c00817 	ldw	r3,32(sp)
 8006080:	a0a9883a 	add	r20,r20,r2
 8006084:	b0ad883a 	add	r22,r22,r2
 8006088:	1887883a 	add	r3,r3,r2
 800608c:	d8c00815 	stw	r3,32(sp)
 8006090:	d9800817 	ldw	r6,32(sp)
 8006094:	0180040e 	bge	zero,r6,80060a8 <_dtoa_r+0xb18>
 8006098:	800b883a 	mov	r5,r16
 800609c:	e009883a 	mov	r4,fp
 80060a0:	800933c0 	call	800933c <__lshift>
 80060a4:	1021883a 	mov	r16,r2
 80060a8:	0580050e 	bge	zero,r22,80060c0 <_dtoa_r+0xb30>
 80060ac:	a80b883a 	mov	r5,r21
 80060b0:	b00d883a 	mov	r6,r22
 80060b4:	e009883a 	mov	r4,fp
 80060b8:	800933c0 	call	800933c <__lshift>
 80060bc:	102b883a 	mov	r21,r2
 80060c0:	d9c00e17 	ldw	r7,56(sp)
 80060c4:	3801211e 	bne	r7,zero,800654c <_dtoa_r+0xfbc>
 80060c8:	d9800617 	ldw	r6,24(sp)
 80060cc:	0181380e 	bge	zero,r6,80065b0 <_dtoa_r+0x1020>
 80060d0:	d8c00b17 	ldw	r3,44(sp)
 80060d4:	1800ab1e 	bne	r3,zero,8006384 <_dtoa_r+0xdf4>
 80060d8:	dc800717 	ldw	r18,28(sp)
 80060dc:	dcc00617 	ldw	r19,24(sp)
 80060e0:	9029883a 	mov	r20,r18
 80060e4:	00000206 	br	80060f0 <_dtoa_r+0xb60>
 80060e8:	8008bd00 	call	8008bd0 <__multadd>
 80060ec:	1021883a 	mov	r16,r2
 80060f0:	a80b883a 	mov	r5,r21
 80060f4:	8009883a 	mov	r4,r16
 80060f8:	80053680 	call	8005368 <quorem>
 80060fc:	10800c04 	addi	r2,r2,48
 8006100:	90800005 	stb	r2,0(r18)
 8006104:	94800044 	addi	r18,r18,1
 8006108:	9507c83a 	sub	r3,r18,r20
 800610c:	000f883a 	mov	r7,zero
 8006110:	01800284 	movi	r6,10
 8006114:	800b883a 	mov	r5,r16
 8006118:	e009883a 	mov	r4,fp
 800611c:	1cfff216 	blt	r3,r19,80060e8 <__alt_data_end+0xfc0060e8>
 8006120:	1011883a 	mov	r8,r2
 8006124:	d8800617 	ldw	r2,24(sp)
 8006128:	0082370e 	bge	zero,r2,8006a08 <_dtoa_r+0x1478>
 800612c:	d9000717 	ldw	r4,28(sp)
 8006130:	0025883a 	mov	r18,zero
 8006134:	20af883a 	add	r23,r4,r2
 8006138:	01800044 	movi	r6,1
 800613c:	800b883a 	mov	r5,r16
 8006140:	e009883a 	mov	r4,fp
 8006144:	da001715 	stw	r8,92(sp)
 8006148:	800933c0 	call	800933c <__lshift>
 800614c:	a80b883a 	mov	r5,r21
 8006150:	1009883a 	mov	r4,r2
 8006154:	d8800915 	stw	r2,36(sp)
 8006158:	80094840 	call	8009484 <__mcmp>
 800615c:	da001717 	ldw	r8,92(sp)
 8006160:	0081800e 	bge	zero,r2,8006764 <_dtoa_r+0x11d4>
 8006164:	b93fffc3 	ldbu	r4,-1(r23)
 8006168:	b8bfffc4 	addi	r2,r23,-1
 800616c:	1007883a 	mov	r3,r2
 8006170:	01800e44 	movi	r6,57
 8006174:	d9c00717 	ldw	r7,28(sp)
 8006178:	00000506 	br	8006190 <_dtoa_r+0xc00>
 800617c:	18ffffc4 	addi	r3,r3,-1
 8006180:	11c12326 	beq	r2,r7,8006610 <_dtoa_r+0x1080>
 8006184:	19000003 	ldbu	r4,0(r3)
 8006188:	102f883a 	mov	r23,r2
 800618c:	10bfffc4 	addi	r2,r2,-1
 8006190:	21403fcc 	andi	r5,r4,255
 8006194:	2940201c 	xori	r5,r5,128
 8006198:	297fe004 	addi	r5,r5,-128
 800619c:	29bff726 	beq	r5,r6,800617c <__alt_data_end+0xfc00617c>
 80061a0:	21000044 	addi	r4,r4,1
 80061a4:	11000005 	stb	r4,0(r2)
 80061a8:	a80b883a 	mov	r5,r21
 80061ac:	e009883a 	mov	r4,fp
 80061b0:	8008ba80 	call	8008ba8 <_Bfree>
 80061b4:	883ea026 	beq	r17,zero,8005c38 <__alt_data_end+0xfc005c38>
 80061b8:	90000426 	beq	r18,zero,80061cc <_dtoa_r+0xc3c>
 80061bc:	94400326 	beq	r18,r17,80061cc <_dtoa_r+0xc3c>
 80061c0:	900b883a 	mov	r5,r18
 80061c4:	e009883a 	mov	r4,fp
 80061c8:	8008ba80 	call	8008ba8 <_Bfree>
 80061cc:	880b883a 	mov	r5,r17
 80061d0:	e009883a 	mov	r4,fp
 80061d4:	8008ba80 	call	8008ba8 <_Bfree>
 80061d8:	003e9706 	br	8005c38 <__alt_data_end+0xfc005c38>
 80061dc:	01800044 	movi	r6,1
 80061e0:	d9800e15 	stw	r6,56(sp)
 80061e4:	003d9606 	br	8005840 <__alt_data_end+0xfc005840>
 80061e8:	d8800817 	ldw	r2,32(sp)
 80061ec:	d8c00517 	ldw	r3,20(sp)
 80061f0:	d8000d15 	stw	zero,52(sp)
 80061f4:	10c5c83a 	sub	r2,r2,r3
 80061f8:	00c9c83a 	sub	r4,zero,r3
 80061fc:	d8800815 	stw	r2,32(sp)
 8006200:	d9000a15 	stw	r4,40(sp)
 8006204:	003d9706 	br	8005864 <__alt_data_end+0xfc005864>
 8006208:	05adc83a 	sub	r22,zero,r22
 800620c:	dd800815 	stw	r22,32(sp)
 8006210:	002d883a 	mov	r22,zero
 8006214:	003d8e06 	br	8005850 <__alt_data_end+0xfc005850>
 8006218:	d9000517 	ldw	r4,20(sp)
 800621c:	800f8240 	call	800f824 <__floatsidf>
 8006220:	100d883a 	mov	r6,r2
 8006224:	180f883a 	mov	r7,r3
 8006228:	a009883a 	mov	r4,r20
 800622c:	880b883a 	mov	r5,r17
 8006230:	800e3e40 	call	800e3e4 <__eqdf2>
 8006234:	103d7126 	beq	r2,zero,80057fc <__alt_data_end+0xfc0057fc>
 8006238:	d9c00517 	ldw	r7,20(sp)
 800623c:	39ffffc4 	addi	r7,r7,-1
 8006240:	d9c00515 	stw	r7,20(sp)
 8006244:	003d6d06 	br	80057fc <__alt_data_end+0xfc0057fc>
 8006248:	dd400a17 	ldw	r21,40(sp)
 800624c:	dd000817 	ldw	r20,32(sp)
 8006250:	0023883a 	mov	r17,zero
 8006254:	003f4806 	br	8005f78 <__alt_data_end+0xfc005f78>
 8006258:	10e3c83a 	sub	r17,r2,r3
 800625c:	9448983a 	sll	r4,r18,r17
 8006260:	003d3206 	br	800572c <__alt_data_end+0xfc00572c>
 8006264:	d8000e15 	stw	zero,56(sp)
 8006268:	003d7506 	br	8005840 <__alt_data_end+0xfc005840>
 800626c:	b005883a 	mov	r2,r22
 8006270:	003f4506 	br	8005f88 <__alt_data_end+0xfc005f88>
 8006274:	dc000915 	stw	r16,36(sp)
 8006278:	d9800a17 	ldw	r6,40(sp)
 800627c:	d9400917 	ldw	r5,36(sp)
 8006280:	e009883a 	mov	r4,fp
 8006284:	80091fc0 	call	80091fc <__pow5mult>
 8006288:	1021883a 	mov	r16,r2
 800628c:	003f5a06 	br	8005ff8 <__alt_data_end+0xfc005ff8>
 8006290:	01c00044 	movi	r7,1
 8006294:	d9c00b15 	stw	r7,44(sp)
 8006298:	d8802217 	ldw	r2,136(sp)
 800629c:	0081280e 	bge	zero,r2,8006740 <_dtoa_r+0x11b0>
 80062a0:	100d883a 	mov	r6,r2
 80062a4:	1021883a 	mov	r16,r2
 80062a8:	d8800c15 	stw	r2,48(sp)
 80062ac:	d8800615 	stw	r2,24(sp)
 80062b0:	003d8806 	br	80058d4 <__alt_data_end+0xfc0058d4>
 80062b4:	d8800617 	ldw	r2,24(sp)
 80062b8:	00be9b16 	blt	zero,r2,8005d28 <__alt_data_end+0xfc005d28>
 80062bc:	10010f1e 	bne	r2,zero,80066fc <_dtoa_r+0x116c>
 80062c0:	880b883a 	mov	r5,r17
 80062c4:	000d883a 	mov	r6,zero
 80062c8:	01d00534 	movhi	r7,16404
 80062cc:	8009883a 	mov	r4,r16
 80062d0:	800e63c0 	call	800e63c <__muldf3>
 80062d4:	900d883a 	mov	r6,r18
 80062d8:	980f883a 	mov	r7,r19
 80062dc:	1009883a 	mov	r4,r2
 80062e0:	180b883a 	mov	r5,r3
 80062e4:	800e46c0 	call	800e46c <__gedf2>
 80062e8:	002b883a 	mov	r21,zero
 80062ec:	0023883a 	mov	r17,zero
 80062f0:	1000bf16 	blt	r2,zero,80065f0 <_dtoa_r+0x1060>
 80062f4:	d9802217 	ldw	r6,136(sp)
 80062f8:	ddc00717 	ldw	r23,28(sp)
 80062fc:	018c303a 	nor	r6,zero,r6
 8006300:	d9800515 	stw	r6,20(sp)
 8006304:	a80b883a 	mov	r5,r21
 8006308:	e009883a 	mov	r4,fp
 800630c:	8008ba80 	call	8008ba8 <_Bfree>
 8006310:	883e4926 	beq	r17,zero,8005c38 <__alt_data_end+0xfc005c38>
 8006314:	003fad06 	br	80061cc <__alt_data_end+0xfc0061cc>
 8006318:	d9c01117 	ldw	r7,68(sp)
 800631c:	3801bc26 	beq	r7,zero,8006a10 <_dtoa_r+0x1480>
 8006320:	10810cc4 	addi	r2,r2,1075
 8006324:	dd400a17 	ldw	r21,40(sp)
 8006328:	dd000817 	ldw	r20,32(sp)
 800632c:	003f0a06 	br	8005f58 <__alt_data_end+0xfc005f58>
 8006330:	00800704 	movi	r2,28
 8006334:	d9000817 	ldw	r4,32(sp)
 8006338:	a0a9883a 	add	r20,r20,r2
 800633c:	b0ad883a 	add	r22,r22,r2
 8006340:	2089883a 	add	r4,r4,r2
 8006344:	d9000815 	stw	r4,32(sp)
 8006348:	003f5106 	br	8006090 <__alt_data_end+0xfc006090>
 800634c:	d8c00317 	ldw	r3,12(sp)
 8006350:	b8c1fc0e 	bge	r23,r3,8006b44 <_dtoa_r+0x15b4>
 8006354:	0027883a 	mov	r19,zero
 8006358:	b805883a 	mov	r2,r23
 800635c:	003f3e06 	br	8006058 <__alt_data_end+0xfc006058>
 8006360:	880b883a 	mov	r5,r17
 8006364:	e009883a 	mov	r4,fp
 8006368:	000f883a 	mov	r7,zero
 800636c:	01800284 	movi	r6,10
 8006370:	8008bd00 	call	8008bd0 <__multadd>
 8006374:	d9000c17 	ldw	r4,48(sp)
 8006378:	1023883a 	mov	r17,r2
 800637c:	0102040e 	bge	zero,r4,8006b90 <_dtoa_r+0x1600>
 8006380:	d9000615 	stw	r4,24(sp)
 8006384:	0500050e 	bge	zero,r20,800639c <_dtoa_r+0xe0c>
 8006388:	880b883a 	mov	r5,r17
 800638c:	a00d883a 	mov	r6,r20
 8006390:	e009883a 	mov	r4,fp
 8006394:	800933c0 	call	800933c <__lshift>
 8006398:	1023883a 	mov	r17,r2
 800639c:	9801241e 	bne	r19,zero,8006830 <_dtoa_r+0x12a0>
 80063a0:	8829883a 	mov	r20,r17
 80063a4:	d9000617 	ldw	r4,24(sp)
 80063a8:	dcc00717 	ldw	r19,28(sp)
 80063ac:	9480004c 	andi	r18,r18,1
 80063b0:	20bfffc4 	addi	r2,r4,-1
 80063b4:	9885883a 	add	r2,r19,r2
 80063b8:	d8800415 	stw	r2,16(sp)
 80063bc:	dc800615 	stw	r18,24(sp)
 80063c0:	a80b883a 	mov	r5,r21
 80063c4:	8009883a 	mov	r4,r16
 80063c8:	80053680 	call	8005368 <quorem>
 80063cc:	880b883a 	mov	r5,r17
 80063d0:	8009883a 	mov	r4,r16
 80063d4:	102f883a 	mov	r23,r2
 80063d8:	80094840 	call	8009484 <__mcmp>
 80063dc:	a80b883a 	mov	r5,r21
 80063e0:	a00d883a 	mov	r6,r20
 80063e4:	e009883a 	mov	r4,fp
 80063e8:	102d883a 	mov	r22,r2
 80063ec:	80094e40 	call	80094e4 <__mdiff>
 80063f0:	1007883a 	mov	r3,r2
 80063f4:	10800317 	ldw	r2,12(r2)
 80063f8:	bc800c04 	addi	r18,r23,48
 80063fc:	180b883a 	mov	r5,r3
 8006400:	10004e1e 	bne	r2,zero,800653c <_dtoa_r+0xfac>
 8006404:	8009883a 	mov	r4,r16
 8006408:	d8c01615 	stw	r3,88(sp)
 800640c:	80094840 	call	8009484 <__mcmp>
 8006410:	d8c01617 	ldw	r3,88(sp)
 8006414:	e009883a 	mov	r4,fp
 8006418:	d8801615 	stw	r2,88(sp)
 800641c:	180b883a 	mov	r5,r3
 8006420:	8008ba80 	call	8008ba8 <_Bfree>
 8006424:	d8801617 	ldw	r2,88(sp)
 8006428:	1000041e 	bne	r2,zero,800643c <_dtoa_r+0xeac>
 800642c:	d9800317 	ldw	r6,12(sp)
 8006430:	3000021e 	bne	r6,zero,800643c <_dtoa_r+0xeac>
 8006434:	d8c00617 	ldw	r3,24(sp)
 8006438:	18003726 	beq	r3,zero,8006518 <_dtoa_r+0xf88>
 800643c:	b0002016 	blt	r22,zero,80064c0 <_dtoa_r+0xf30>
 8006440:	b000041e 	bne	r22,zero,8006454 <_dtoa_r+0xec4>
 8006444:	d9000317 	ldw	r4,12(sp)
 8006448:	2000021e 	bne	r4,zero,8006454 <_dtoa_r+0xec4>
 800644c:	d8c00617 	ldw	r3,24(sp)
 8006450:	18001b26 	beq	r3,zero,80064c0 <_dtoa_r+0xf30>
 8006454:	00810716 	blt	zero,r2,8006874 <_dtoa_r+0x12e4>
 8006458:	d8c00417 	ldw	r3,16(sp)
 800645c:	9d800044 	addi	r22,r19,1
 8006460:	9c800005 	stb	r18,0(r19)
 8006464:	b02f883a 	mov	r23,r22
 8006468:	98c10626 	beq	r19,r3,8006884 <_dtoa_r+0x12f4>
 800646c:	800b883a 	mov	r5,r16
 8006470:	000f883a 	mov	r7,zero
 8006474:	01800284 	movi	r6,10
 8006478:	e009883a 	mov	r4,fp
 800647c:	8008bd00 	call	8008bd0 <__multadd>
 8006480:	1021883a 	mov	r16,r2
 8006484:	000f883a 	mov	r7,zero
 8006488:	01800284 	movi	r6,10
 800648c:	880b883a 	mov	r5,r17
 8006490:	e009883a 	mov	r4,fp
 8006494:	8d002526 	beq	r17,r20,800652c <_dtoa_r+0xf9c>
 8006498:	8008bd00 	call	8008bd0 <__multadd>
 800649c:	a00b883a 	mov	r5,r20
 80064a0:	000f883a 	mov	r7,zero
 80064a4:	01800284 	movi	r6,10
 80064a8:	e009883a 	mov	r4,fp
 80064ac:	1023883a 	mov	r17,r2
 80064b0:	8008bd00 	call	8008bd0 <__multadd>
 80064b4:	1029883a 	mov	r20,r2
 80064b8:	b027883a 	mov	r19,r22
 80064bc:	003fc006 	br	80063c0 <__alt_data_end+0xfc0063c0>
 80064c0:	9011883a 	mov	r8,r18
 80064c4:	00800e0e 	bge	zero,r2,8006500 <_dtoa_r+0xf70>
 80064c8:	800b883a 	mov	r5,r16
 80064cc:	01800044 	movi	r6,1
 80064d0:	e009883a 	mov	r4,fp
 80064d4:	da001715 	stw	r8,92(sp)
 80064d8:	800933c0 	call	800933c <__lshift>
 80064dc:	a80b883a 	mov	r5,r21
 80064e0:	1009883a 	mov	r4,r2
 80064e4:	1021883a 	mov	r16,r2
 80064e8:	80094840 	call	8009484 <__mcmp>
 80064ec:	da001717 	ldw	r8,92(sp)
 80064f0:	0081960e 	bge	zero,r2,8006b4c <_dtoa_r+0x15bc>
 80064f4:	00800e44 	movi	r2,57
 80064f8:	40817026 	beq	r8,r2,8006abc <_dtoa_r+0x152c>
 80064fc:	ba000c44 	addi	r8,r23,49
 8006500:	8825883a 	mov	r18,r17
 8006504:	9dc00044 	addi	r23,r19,1
 8006508:	9a000005 	stb	r8,0(r19)
 800650c:	a023883a 	mov	r17,r20
 8006510:	dc000915 	stw	r16,36(sp)
 8006514:	003f2406 	br	80061a8 <__alt_data_end+0xfc0061a8>
 8006518:	00800e44 	movi	r2,57
 800651c:	9011883a 	mov	r8,r18
 8006520:	90816626 	beq	r18,r2,8006abc <_dtoa_r+0x152c>
 8006524:	05bff516 	blt	zero,r22,80064fc <__alt_data_end+0xfc0064fc>
 8006528:	003ff506 	br	8006500 <__alt_data_end+0xfc006500>
 800652c:	8008bd00 	call	8008bd0 <__multadd>
 8006530:	1023883a 	mov	r17,r2
 8006534:	1029883a 	mov	r20,r2
 8006538:	003fdf06 	br	80064b8 <__alt_data_end+0xfc0064b8>
 800653c:	e009883a 	mov	r4,fp
 8006540:	8008ba80 	call	8008ba8 <_Bfree>
 8006544:	00800044 	movi	r2,1
 8006548:	003fbc06 	br	800643c <__alt_data_end+0xfc00643c>
 800654c:	a80b883a 	mov	r5,r21
 8006550:	8009883a 	mov	r4,r16
 8006554:	80094840 	call	8009484 <__mcmp>
 8006558:	103edb0e 	bge	r2,zero,80060c8 <__alt_data_end+0xfc0060c8>
 800655c:	800b883a 	mov	r5,r16
 8006560:	000f883a 	mov	r7,zero
 8006564:	01800284 	movi	r6,10
 8006568:	e009883a 	mov	r4,fp
 800656c:	8008bd00 	call	8008bd0 <__multadd>
 8006570:	1021883a 	mov	r16,r2
 8006574:	d8800517 	ldw	r2,20(sp)
 8006578:	d8c00b17 	ldw	r3,44(sp)
 800657c:	10bfffc4 	addi	r2,r2,-1
 8006580:	d8800515 	stw	r2,20(sp)
 8006584:	183f761e 	bne	r3,zero,8006360 <__alt_data_end+0xfc006360>
 8006588:	d9000c17 	ldw	r4,48(sp)
 800658c:	0101730e 	bge	zero,r4,8006b5c <_dtoa_r+0x15cc>
 8006590:	d9000615 	stw	r4,24(sp)
 8006594:	003ed006 	br	80060d8 <__alt_data_end+0xfc0060d8>
 8006598:	00800084 	movi	r2,2
 800659c:	3081861e 	bne	r6,r2,8006bb8 <_dtoa_r+0x1628>
 80065a0:	d8000b15 	stw	zero,44(sp)
 80065a4:	003f3c06 	br	8006298 <__alt_data_end+0xfc006298>
 80065a8:	dc000917 	ldw	r16,36(sp)
 80065ac:	003e9206 	br	8005ff8 <__alt_data_end+0xfc005ff8>
 80065b0:	d9c00317 	ldw	r7,12(sp)
 80065b4:	00800084 	movi	r2,2
 80065b8:	11fec50e 	bge	r2,r7,80060d0 <__alt_data_end+0xfc0060d0>
 80065bc:	d9000617 	ldw	r4,24(sp)
 80065c0:	20013c1e 	bne	r4,zero,8006ab4 <_dtoa_r+0x1524>
 80065c4:	a80b883a 	mov	r5,r21
 80065c8:	000f883a 	mov	r7,zero
 80065cc:	01800144 	movi	r6,5
 80065d0:	e009883a 	mov	r4,fp
 80065d4:	8008bd00 	call	8008bd0 <__multadd>
 80065d8:	100b883a 	mov	r5,r2
 80065dc:	8009883a 	mov	r4,r16
 80065e0:	102b883a 	mov	r21,r2
 80065e4:	80094840 	call	8009484 <__mcmp>
 80065e8:	dc000915 	stw	r16,36(sp)
 80065ec:	00bf410e 	bge	zero,r2,80062f4 <__alt_data_end+0xfc0062f4>
 80065f0:	d9c00717 	ldw	r7,28(sp)
 80065f4:	00800c44 	movi	r2,49
 80065f8:	38800005 	stb	r2,0(r7)
 80065fc:	d8800517 	ldw	r2,20(sp)
 8006600:	3dc00044 	addi	r23,r7,1
 8006604:	10800044 	addi	r2,r2,1
 8006608:	d8800515 	stw	r2,20(sp)
 800660c:	003f3d06 	br	8006304 <__alt_data_end+0xfc006304>
 8006610:	d9800517 	ldw	r6,20(sp)
 8006614:	d9c00717 	ldw	r7,28(sp)
 8006618:	00800c44 	movi	r2,49
 800661c:	31800044 	addi	r6,r6,1
 8006620:	d9800515 	stw	r6,20(sp)
 8006624:	38800005 	stb	r2,0(r7)
 8006628:	003edf06 	br	80061a8 <__alt_data_end+0xfc0061a8>
 800662c:	d8000b15 	stw	zero,44(sp)
 8006630:	003c9f06 	br	80058b0 <__alt_data_end+0xfc0058b0>
 8006634:	903e7e1e 	bne	r18,zero,8006030 <__alt_data_end+0xfc006030>
 8006638:	00800434 	movhi	r2,16
 800663c:	10bfffc4 	addi	r2,r2,-1
 8006640:	9884703a 	and	r2,r19,r2
 8006644:	1000ea1e 	bne	r2,zero,80069f0 <_dtoa_r+0x1460>
 8006648:	9cdffc2c 	andhi	r19,r19,32752
 800664c:	9800e826 	beq	r19,zero,80069f0 <_dtoa_r+0x1460>
 8006650:	d9c00817 	ldw	r7,32(sp)
 8006654:	b5800044 	addi	r22,r22,1
 8006658:	04c00044 	movi	r19,1
 800665c:	39c00044 	addi	r7,r7,1
 8006660:	d9c00815 	stw	r7,32(sp)
 8006664:	d8800d17 	ldw	r2,52(sp)
 8006668:	103e721e 	bne	r2,zero,8006034 <__alt_data_end+0xfc006034>
 800666c:	00800044 	movi	r2,1
 8006670:	003e7906 	br	8006058 <__alt_data_end+0xfc006058>
 8006674:	8009883a 	mov	r4,r16
 8006678:	800f8240 	call	800f824 <__floatsidf>
 800667c:	d9800f17 	ldw	r6,60(sp)
 8006680:	d9c01017 	ldw	r7,64(sp)
 8006684:	1009883a 	mov	r4,r2
 8006688:	180b883a 	mov	r5,r3
 800668c:	800e63c0 	call	800e63c <__muldf3>
 8006690:	000d883a 	mov	r6,zero
 8006694:	01d00734 	movhi	r7,16412
 8006698:	1009883a 	mov	r4,r2
 800669c:	180b883a 	mov	r5,r3
 80066a0:	800d1680 	call	800d168 <__adddf3>
 80066a4:	047f3034 	movhi	r17,64704
 80066a8:	1021883a 	mov	r16,r2
 80066ac:	1c63883a 	add	r17,r3,r17
 80066b0:	d9000f17 	ldw	r4,60(sp)
 80066b4:	d9401017 	ldw	r5,64(sp)
 80066b8:	000d883a 	mov	r6,zero
 80066bc:	01d00534 	movhi	r7,16404
 80066c0:	800eea80 	call	800eea8 <__subdf3>
 80066c4:	800d883a 	mov	r6,r16
 80066c8:	880f883a 	mov	r7,r17
 80066cc:	1009883a 	mov	r4,r2
 80066d0:	180b883a 	mov	r5,r3
 80066d4:	102b883a 	mov	r21,r2
 80066d8:	1829883a 	mov	r20,r3
 80066dc:	800e46c0 	call	800e46c <__gedf2>
 80066e0:	00806c16 	blt	zero,r2,8006894 <_dtoa_r+0x1304>
 80066e4:	89e0003c 	xorhi	r7,r17,32768
 80066e8:	800d883a 	mov	r6,r16
 80066ec:	a809883a 	mov	r4,r21
 80066f0:	a00b883a 	mov	r5,r20
 80066f4:	800e5480 	call	800e548 <__ledf2>
 80066f8:	103d7e0e 	bge	r2,zero,8005cf4 <__alt_data_end+0xfc005cf4>
 80066fc:	002b883a 	mov	r21,zero
 8006700:	0023883a 	mov	r17,zero
 8006704:	003efb06 	br	80062f4 <__alt_data_end+0xfc0062f4>
 8006708:	d8800717 	ldw	r2,28(sp)
 800670c:	003bd006 	br	8005650 <__alt_data_end+0xfc005650>
 8006710:	d9000a17 	ldw	r4,40(sp)
 8006714:	d9800d17 	ldw	r6,52(sp)
 8006718:	dd400a15 	stw	r21,40(sp)
 800671c:	a905c83a 	sub	r2,r21,r4
 8006720:	308d883a 	add	r6,r6,r2
 8006724:	d9800d15 	stw	r6,52(sp)
 8006728:	002b883a 	mov	r21,zero
 800672c:	003e0606 	br	8005f48 <__alt_data_end+0xfc005f48>
 8006730:	9023883a 	mov	r17,r18
 8006734:	9829883a 	mov	r20,r19
 8006738:	04000084 	movi	r16,2
 800673c:	003c9206 	br	8005988 <__alt_data_end+0xfc005988>
 8006740:	04000044 	movi	r16,1
 8006744:	dc000c15 	stw	r16,48(sp)
 8006748:	dc000615 	stw	r16,24(sp)
 800674c:	dc002215 	stw	r16,136(sp)
 8006750:	e0001115 	stw	zero,68(fp)
 8006754:	000b883a 	mov	r5,zero
 8006758:	003c6906 	br	8005900 <__alt_data_end+0xfc005900>
 800675c:	3021883a 	mov	r16,r6
 8006760:	003ffb06 	br	8006750 <__alt_data_end+0xfc006750>
 8006764:	1000021e 	bne	r2,zero,8006770 <_dtoa_r+0x11e0>
 8006768:	4200004c 	andi	r8,r8,1
 800676c:	403e7d1e 	bne	r8,zero,8006164 <__alt_data_end+0xfc006164>
 8006770:	01000c04 	movi	r4,48
 8006774:	00000106 	br	800677c <_dtoa_r+0x11ec>
 8006778:	102f883a 	mov	r23,r2
 800677c:	b8bfffc4 	addi	r2,r23,-1
 8006780:	10c00007 	ldb	r3,0(r2)
 8006784:	193ffc26 	beq	r3,r4,8006778 <__alt_data_end+0xfc006778>
 8006788:	003e8706 	br	80061a8 <__alt_data_end+0xfc0061a8>
 800678c:	d8800517 	ldw	r2,20(sp)
 8006790:	00a3c83a 	sub	r17,zero,r2
 8006794:	8800a426 	beq	r17,zero,8006a28 <_dtoa_r+0x1498>
 8006798:	888003cc 	andi	r2,r17,15
 800679c:	100490fa 	slli	r2,r2,3
 80067a0:	00c20074 	movhi	r3,2049
 80067a4:	18d05004 	addi	r3,r3,16704
 80067a8:	1885883a 	add	r2,r3,r2
 80067ac:	11800017 	ldw	r6,0(r2)
 80067b0:	11c00117 	ldw	r7,4(r2)
 80067b4:	9009883a 	mov	r4,r18
 80067b8:	980b883a 	mov	r5,r19
 80067bc:	8823d13a 	srai	r17,r17,4
 80067c0:	800e63c0 	call	800e63c <__muldf3>
 80067c4:	d8800f15 	stw	r2,60(sp)
 80067c8:	d8c01015 	stw	r3,64(sp)
 80067cc:	8800e826 	beq	r17,zero,8006b70 <_dtoa_r+0x15e0>
 80067d0:	05020074 	movhi	r20,2049
 80067d4:	a5104604 	addi	r20,r20,16664
 80067d8:	04000084 	movi	r16,2
 80067dc:	8980004c 	andi	r6,r17,1
 80067e0:	1009883a 	mov	r4,r2
 80067e4:	8823d07a 	srai	r17,r17,1
 80067e8:	180b883a 	mov	r5,r3
 80067ec:	30000426 	beq	r6,zero,8006800 <_dtoa_r+0x1270>
 80067f0:	a1800017 	ldw	r6,0(r20)
 80067f4:	a1c00117 	ldw	r7,4(r20)
 80067f8:	84000044 	addi	r16,r16,1
 80067fc:	800e63c0 	call	800e63c <__muldf3>
 8006800:	a5000204 	addi	r20,r20,8
 8006804:	883ff51e 	bne	r17,zero,80067dc <__alt_data_end+0xfc0067dc>
 8006808:	d8800f15 	stw	r2,60(sp)
 800680c:	d8c01015 	stw	r3,64(sp)
 8006810:	003c7606 	br	80059ec <__alt_data_end+0xfc0059ec>
 8006814:	00c00c04 	movi	r3,48
 8006818:	10c00005 	stb	r3,0(r2)
 800681c:	d8c00517 	ldw	r3,20(sp)
 8006820:	bd3fffc3 	ldbu	r20,-1(r23)
 8006824:	18c00044 	addi	r3,r3,1
 8006828:	d8c00515 	stw	r3,20(sp)
 800682c:	003db906 	br	8005f14 <__alt_data_end+0xfc005f14>
 8006830:	89400117 	ldw	r5,4(r17)
 8006834:	e009883a 	mov	r4,fp
 8006838:	8008b000 	call	8008b00 <_Balloc>
 800683c:	89800417 	ldw	r6,16(r17)
 8006840:	89400304 	addi	r5,r17,12
 8006844:	11000304 	addi	r4,r2,12
 8006848:	31800084 	addi	r6,r6,2
 800684c:	318d883a 	add	r6,r6,r6
 8006850:	318d883a 	add	r6,r6,r6
 8006854:	1027883a 	mov	r19,r2
 8006858:	8002b200 	call	8002b20 <memcpy>
 800685c:	01800044 	movi	r6,1
 8006860:	980b883a 	mov	r5,r19
 8006864:	e009883a 	mov	r4,fp
 8006868:	800933c0 	call	800933c <__lshift>
 800686c:	1029883a 	mov	r20,r2
 8006870:	003ecc06 	br	80063a4 <__alt_data_end+0xfc0063a4>
 8006874:	00800e44 	movi	r2,57
 8006878:	90809026 	beq	r18,r2,8006abc <_dtoa_r+0x152c>
 800687c:	92000044 	addi	r8,r18,1
 8006880:	003f1f06 	br	8006500 <__alt_data_end+0xfc006500>
 8006884:	9011883a 	mov	r8,r18
 8006888:	8825883a 	mov	r18,r17
 800688c:	a023883a 	mov	r17,r20
 8006890:	003e2906 	br	8006138 <__alt_data_end+0xfc006138>
 8006894:	002b883a 	mov	r21,zero
 8006898:	0023883a 	mov	r17,zero
 800689c:	003f5406 	br	80065f0 <__alt_data_end+0xfc0065f0>
 80068a0:	61bfffc4 	addi	r6,r12,-1
 80068a4:	300490fa 	slli	r2,r6,3
 80068a8:	00c20074 	movhi	r3,2049
 80068ac:	18d05004 	addi	r3,r3,16704
 80068b0:	1885883a 	add	r2,r3,r2
 80068b4:	11000017 	ldw	r4,0(r2)
 80068b8:	11400117 	ldw	r5,4(r2)
 80068bc:	d8800717 	ldw	r2,28(sp)
 80068c0:	880f883a 	mov	r7,r17
 80068c4:	d9801215 	stw	r6,72(sp)
 80068c8:	800d883a 	mov	r6,r16
 80068cc:	db001615 	stw	r12,88(sp)
 80068d0:	15c00044 	addi	r23,r2,1
 80068d4:	800e63c0 	call	800e63c <__muldf3>
 80068d8:	d9401017 	ldw	r5,64(sp)
 80068dc:	d9000f17 	ldw	r4,60(sp)
 80068e0:	d8c01515 	stw	r3,84(sp)
 80068e4:	d8801415 	stw	r2,80(sp)
 80068e8:	800f7a40 	call	800f7a4 <__fixdfsi>
 80068ec:	1009883a 	mov	r4,r2
 80068f0:	1021883a 	mov	r16,r2
 80068f4:	800f8240 	call	800f824 <__floatsidf>
 80068f8:	d9000f17 	ldw	r4,60(sp)
 80068fc:	d9401017 	ldw	r5,64(sp)
 8006900:	100d883a 	mov	r6,r2
 8006904:	180f883a 	mov	r7,r3
 8006908:	800eea80 	call	800eea8 <__subdf3>
 800690c:	1829883a 	mov	r20,r3
 8006910:	d8c00717 	ldw	r3,28(sp)
 8006914:	84000c04 	addi	r16,r16,48
 8006918:	1023883a 	mov	r17,r2
 800691c:	1c000005 	stb	r16,0(r3)
 8006920:	db001617 	ldw	r12,88(sp)
 8006924:	00800044 	movi	r2,1
 8006928:	60802226 	beq	r12,r2,80069b4 <_dtoa_r+0x1424>
 800692c:	d9c00717 	ldw	r7,28(sp)
 8006930:	8805883a 	mov	r2,r17
 8006934:	b82b883a 	mov	r21,r23
 8006938:	3b19883a 	add	r12,r7,r12
 800693c:	6023883a 	mov	r17,r12
 8006940:	a007883a 	mov	r3,r20
 8006944:	dc800f15 	stw	r18,60(sp)
 8006948:	000d883a 	mov	r6,zero
 800694c:	01d00934 	movhi	r7,16420
 8006950:	1009883a 	mov	r4,r2
 8006954:	180b883a 	mov	r5,r3
 8006958:	800e63c0 	call	800e63c <__muldf3>
 800695c:	180b883a 	mov	r5,r3
 8006960:	1009883a 	mov	r4,r2
 8006964:	1829883a 	mov	r20,r3
 8006968:	1025883a 	mov	r18,r2
 800696c:	800f7a40 	call	800f7a4 <__fixdfsi>
 8006970:	1009883a 	mov	r4,r2
 8006974:	1021883a 	mov	r16,r2
 8006978:	800f8240 	call	800f824 <__floatsidf>
 800697c:	100d883a 	mov	r6,r2
 8006980:	180f883a 	mov	r7,r3
 8006984:	9009883a 	mov	r4,r18
 8006988:	a00b883a 	mov	r5,r20
 800698c:	84000c04 	addi	r16,r16,48
 8006990:	800eea80 	call	800eea8 <__subdf3>
 8006994:	ad400044 	addi	r21,r21,1
 8006998:	ac3fffc5 	stb	r16,-1(r21)
 800699c:	ac7fea1e 	bne	r21,r17,8006948 <__alt_data_end+0xfc006948>
 80069a0:	1023883a 	mov	r17,r2
 80069a4:	d8801217 	ldw	r2,72(sp)
 80069a8:	dc800f17 	ldw	r18,60(sp)
 80069ac:	1829883a 	mov	r20,r3
 80069b0:	b8af883a 	add	r23,r23,r2
 80069b4:	d9001417 	ldw	r4,80(sp)
 80069b8:	d9401517 	ldw	r5,84(sp)
 80069bc:	000d883a 	mov	r6,zero
 80069c0:	01cff834 	movhi	r7,16352
 80069c4:	800d1680 	call	800d168 <__adddf3>
 80069c8:	880d883a 	mov	r6,r17
 80069cc:	a00f883a 	mov	r7,r20
 80069d0:	1009883a 	mov	r4,r2
 80069d4:	180b883a 	mov	r5,r3
 80069d8:	800e5480 	call	800e548 <__ledf2>
 80069dc:	10003e0e 	bge	r2,zero,8006ad8 <_dtoa_r+0x1548>
 80069e0:	d9001317 	ldw	r4,76(sp)
 80069e4:	bd3fffc3 	ldbu	r20,-1(r23)
 80069e8:	d9000515 	stw	r4,20(sp)
 80069ec:	003d3b06 	br	8005edc <__alt_data_end+0xfc005edc>
 80069f0:	0027883a 	mov	r19,zero
 80069f4:	003f1b06 	br	8006664 <__alt_data_end+0xfc006664>
 80069f8:	d8800817 	ldw	r2,32(sp)
 80069fc:	11e9c83a 	sub	r20,r2,r7
 8006a00:	0005883a 	mov	r2,zero
 8006a04:	003d5406 	br	8005f58 <__alt_data_end+0xfc005f58>
 8006a08:	00800044 	movi	r2,1
 8006a0c:	003dc706 	br	800612c <__alt_data_end+0xfc00612c>
 8006a10:	d8c00217 	ldw	r3,8(sp)
 8006a14:	00800d84 	movi	r2,54
 8006a18:	dd400a17 	ldw	r21,40(sp)
 8006a1c:	10c5c83a 	sub	r2,r2,r3
 8006a20:	dd000817 	ldw	r20,32(sp)
 8006a24:	003d4c06 	br	8005f58 <__alt_data_end+0xfc005f58>
 8006a28:	dc800f15 	stw	r18,60(sp)
 8006a2c:	dcc01015 	stw	r19,64(sp)
 8006a30:	04000084 	movi	r16,2
 8006a34:	003bed06 	br	80059ec <__alt_data_end+0xfc0059ec>
 8006a38:	d9000617 	ldw	r4,24(sp)
 8006a3c:	203f0d26 	beq	r4,zero,8006674 <__alt_data_end+0xfc006674>
 8006a40:	d9800c17 	ldw	r6,48(sp)
 8006a44:	01bcab0e 	bge	zero,r6,8005cf4 <__alt_data_end+0xfc005cf4>
 8006a48:	d9401017 	ldw	r5,64(sp)
 8006a4c:	d9000f17 	ldw	r4,60(sp)
 8006a50:	000d883a 	mov	r6,zero
 8006a54:	01d00934 	movhi	r7,16420
 8006a58:	800e63c0 	call	800e63c <__muldf3>
 8006a5c:	81000044 	addi	r4,r16,1
 8006a60:	d8800f15 	stw	r2,60(sp)
 8006a64:	d8c01015 	stw	r3,64(sp)
 8006a68:	800f8240 	call	800f824 <__floatsidf>
 8006a6c:	d9800f17 	ldw	r6,60(sp)
 8006a70:	d9c01017 	ldw	r7,64(sp)
 8006a74:	1009883a 	mov	r4,r2
 8006a78:	180b883a 	mov	r5,r3
 8006a7c:	800e63c0 	call	800e63c <__muldf3>
 8006a80:	01d00734 	movhi	r7,16412
 8006a84:	000d883a 	mov	r6,zero
 8006a88:	1009883a 	mov	r4,r2
 8006a8c:	180b883a 	mov	r5,r3
 8006a90:	800d1680 	call	800d168 <__adddf3>
 8006a94:	d9c00517 	ldw	r7,20(sp)
 8006a98:	047f3034 	movhi	r17,64704
 8006a9c:	1021883a 	mov	r16,r2
 8006aa0:	39ffffc4 	addi	r7,r7,-1
 8006aa4:	d9c01315 	stw	r7,76(sp)
 8006aa8:	1c63883a 	add	r17,r3,r17
 8006aac:	db000c17 	ldw	r12,48(sp)
 8006ab0:	003bea06 	br	8005a5c <__alt_data_end+0xfc005a5c>
 8006ab4:	dc000915 	stw	r16,36(sp)
 8006ab8:	003e0e06 	br	80062f4 <__alt_data_end+0xfc0062f4>
 8006abc:	01000e44 	movi	r4,57
 8006ac0:	8825883a 	mov	r18,r17
 8006ac4:	9dc00044 	addi	r23,r19,1
 8006ac8:	99000005 	stb	r4,0(r19)
 8006acc:	a023883a 	mov	r17,r20
 8006ad0:	dc000915 	stw	r16,36(sp)
 8006ad4:	003da406 	br	8006168 <__alt_data_end+0xfc006168>
 8006ad8:	d9801417 	ldw	r6,80(sp)
 8006adc:	d9c01517 	ldw	r7,84(sp)
 8006ae0:	0009883a 	mov	r4,zero
 8006ae4:	014ff834 	movhi	r5,16352
 8006ae8:	800eea80 	call	800eea8 <__subdf3>
 8006aec:	880d883a 	mov	r6,r17
 8006af0:	a00f883a 	mov	r7,r20
 8006af4:	1009883a 	mov	r4,r2
 8006af8:	180b883a 	mov	r5,r3
 8006afc:	800e46c0 	call	800e46c <__gedf2>
 8006b00:	00bc7c0e 	bge	zero,r2,8005cf4 <__alt_data_end+0xfc005cf4>
 8006b04:	01000c04 	movi	r4,48
 8006b08:	00000106 	br	8006b10 <_dtoa_r+0x1580>
 8006b0c:	102f883a 	mov	r23,r2
 8006b10:	b8bfffc4 	addi	r2,r23,-1
 8006b14:	10c00007 	ldb	r3,0(r2)
 8006b18:	193ffc26 	beq	r3,r4,8006b0c <__alt_data_end+0xfc006b0c>
 8006b1c:	d9801317 	ldw	r6,76(sp)
 8006b20:	d9800515 	stw	r6,20(sp)
 8006b24:	003c4406 	br	8005c38 <__alt_data_end+0xfc005c38>
 8006b28:	d9801317 	ldw	r6,76(sp)
 8006b2c:	d9800515 	stw	r6,20(sp)
 8006b30:	003cea06 	br	8005edc <__alt_data_end+0xfc005edc>
 8006b34:	dd800f17 	ldw	r22,60(sp)
 8006b38:	dcc01017 	ldw	r19,64(sp)
 8006b3c:	dc801217 	ldw	r18,72(sp)
 8006b40:	003c6c06 	br	8005cf4 <__alt_data_end+0xfc005cf4>
 8006b44:	903e031e 	bne	r18,zero,8006354 <__alt_data_end+0xfc006354>
 8006b48:	003ebb06 	br	8006638 <__alt_data_end+0xfc006638>
 8006b4c:	103e6c1e 	bne	r2,zero,8006500 <__alt_data_end+0xfc006500>
 8006b50:	4080004c 	andi	r2,r8,1
 8006b54:	103e6a26 	beq	r2,zero,8006500 <__alt_data_end+0xfc006500>
 8006b58:	003e6606 	br	80064f4 <__alt_data_end+0xfc0064f4>
 8006b5c:	d8c00317 	ldw	r3,12(sp)
 8006b60:	00800084 	movi	r2,2
 8006b64:	10c02916 	blt	r2,r3,8006c0c <_dtoa_r+0x167c>
 8006b68:	d9000c17 	ldw	r4,48(sp)
 8006b6c:	003e8806 	br	8006590 <__alt_data_end+0xfc006590>
 8006b70:	04000084 	movi	r16,2
 8006b74:	003b9d06 	br	80059ec <__alt_data_end+0xfc0059ec>
 8006b78:	d9001317 	ldw	r4,76(sp)
 8006b7c:	d9000515 	stw	r4,20(sp)
 8006b80:	003cd606 	br	8005edc <__alt_data_end+0xfc005edc>
 8006b84:	d8801317 	ldw	r2,76(sp)
 8006b88:	d8800515 	stw	r2,20(sp)
 8006b8c:	003c2a06 	br	8005c38 <__alt_data_end+0xfc005c38>
 8006b90:	d9800317 	ldw	r6,12(sp)
 8006b94:	00800084 	movi	r2,2
 8006b98:	11801516 	blt	r2,r6,8006bf0 <_dtoa_r+0x1660>
 8006b9c:	d9c00c17 	ldw	r7,48(sp)
 8006ba0:	d9c00615 	stw	r7,24(sp)
 8006ba4:	003df706 	br	8006384 <__alt_data_end+0xfc006384>
 8006ba8:	193d3926 	beq	r3,r4,8006090 <__alt_data_end+0xfc006090>
 8006bac:	00c00f04 	movi	r3,60
 8006bb0:	1885c83a 	sub	r2,r3,r2
 8006bb4:	003ddf06 	br	8006334 <__alt_data_end+0xfc006334>
 8006bb8:	e009883a 	mov	r4,fp
 8006bbc:	e0001115 	stw	zero,68(fp)
 8006bc0:	000b883a 	mov	r5,zero
 8006bc4:	8008b000 	call	8008b00 <_Balloc>
 8006bc8:	d8800715 	stw	r2,28(sp)
 8006bcc:	d8c00717 	ldw	r3,28(sp)
 8006bd0:	00bfffc4 	movi	r2,-1
 8006bd4:	01000044 	movi	r4,1
 8006bd8:	d8800c15 	stw	r2,48(sp)
 8006bdc:	e0c01015 	stw	r3,64(fp)
 8006be0:	d9000b15 	stw	r4,44(sp)
 8006be4:	d8800615 	stw	r2,24(sp)
 8006be8:	d8002215 	stw	zero,136(sp)
 8006bec:	003c4106 	br	8005cf4 <__alt_data_end+0xfc005cf4>
 8006bf0:	d8c00c17 	ldw	r3,48(sp)
 8006bf4:	d8c00615 	stw	r3,24(sp)
 8006bf8:	003e7006 	br	80065bc <__alt_data_end+0xfc0065bc>
 8006bfc:	04400044 	movi	r17,1
 8006c00:	003b2006 	br	8005884 <__alt_data_end+0xfc005884>
 8006c04:	000b883a 	mov	r5,zero
 8006c08:	003b3d06 	br	8005900 <__alt_data_end+0xfc005900>
 8006c0c:	d8800c17 	ldw	r2,48(sp)
 8006c10:	d8800615 	stw	r2,24(sp)
 8006c14:	003e6906 	br	80065bc <__alt_data_end+0xfc0065bc>

08006c18 <__sflush_r>:
 8006c18:	2880030b 	ldhu	r2,12(r5)
 8006c1c:	defffb04 	addi	sp,sp,-20
 8006c20:	dcc00315 	stw	r19,12(sp)
 8006c24:	dc400115 	stw	r17,4(sp)
 8006c28:	dfc00415 	stw	ra,16(sp)
 8006c2c:	dc800215 	stw	r18,8(sp)
 8006c30:	dc000015 	stw	r16,0(sp)
 8006c34:	10c0020c 	andi	r3,r2,8
 8006c38:	2823883a 	mov	r17,r5
 8006c3c:	2027883a 	mov	r19,r4
 8006c40:	1800311e 	bne	r3,zero,8006d08 <__sflush_r+0xf0>
 8006c44:	28c00117 	ldw	r3,4(r5)
 8006c48:	10820014 	ori	r2,r2,2048
 8006c4c:	2880030d 	sth	r2,12(r5)
 8006c50:	00c04b0e 	bge	zero,r3,8006d80 <__sflush_r+0x168>
 8006c54:	8a000a17 	ldw	r8,40(r17)
 8006c58:	40002326 	beq	r8,zero,8006ce8 <__sflush_r+0xd0>
 8006c5c:	9c000017 	ldw	r16,0(r19)
 8006c60:	10c4000c 	andi	r3,r2,4096
 8006c64:	98000015 	stw	zero,0(r19)
 8006c68:	18004826 	beq	r3,zero,8006d8c <__sflush_r+0x174>
 8006c6c:	89801417 	ldw	r6,80(r17)
 8006c70:	10c0010c 	andi	r3,r2,4
 8006c74:	18000626 	beq	r3,zero,8006c90 <__sflush_r+0x78>
 8006c78:	88c00117 	ldw	r3,4(r17)
 8006c7c:	88800c17 	ldw	r2,48(r17)
 8006c80:	30cdc83a 	sub	r6,r6,r3
 8006c84:	10000226 	beq	r2,zero,8006c90 <__sflush_r+0x78>
 8006c88:	88800f17 	ldw	r2,60(r17)
 8006c8c:	308dc83a 	sub	r6,r6,r2
 8006c90:	89400717 	ldw	r5,28(r17)
 8006c94:	000f883a 	mov	r7,zero
 8006c98:	9809883a 	mov	r4,r19
 8006c9c:	403ee83a 	callr	r8
 8006ca0:	00ffffc4 	movi	r3,-1
 8006ca4:	10c04426 	beq	r2,r3,8006db8 <__sflush_r+0x1a0>
 8006ca8:	88c0030b 	ldhu	r3,12(r17)
 8006cac:	89000417 	ldw	r4,16(r17)
 8006cb0:	88000115 	stw	zero,4(r17)
 8006cb4:	197dffcc 	andi	r5,r3,63487
 8006cb8:	8940030d 	sth	r5,12(r17)
 8006cbc:	89000015 	stw	r4,0(r17)
 8006cc0:	18c4000c 	andi	r3,r3,4096
 8006cc4:	18002c1e 	bne	r3,zero,8006d78 <__sflush_r+0x160>
 8006cc8:	89400c17 	ldw	r5,48(r17)
 8006ccc:	9c000015 	stw	r16,0(r19)
 8006cd0:	28000526 	beq	r5,zero,8006ce8 <__sflush_r+0xd0>
 8006cd4:	88801004 	addi	r2,r17,64
 8006cd8:	28800226 	beq	r5,r2,8006ce4 <__sflush_r+0xcc>
 8006cdc:	9809883a 	mov	r4,r19
 8006ce0:	80073940 	call	8007394 <_free_r>
 8006ce4:	88000c15 	stw	zero,48(r17)
 8006ce8:	0005883a 	mov	r2,zero
 8006cec:	dfc00417 	ldw	ra,16(sp)
 8006cf0:	dcc00317 	ldw	r19,12(sp)
 8006cf4:	dc800217 	ldw	r18,8(sp)
 8006cf8:	dc400117 	ldw	r17,4(sp)
 8006cfc:	dc000017 	ldw	r16,0(sp)
 8006d00:	dec00504 	addi	sp,sp,20
 8006d04:	f800283a 	ret
 8006d08:	2c800417 	ldw	r18,16(r5)
 8006d0c:	903ff626 	beq	r18,zero,8006ce8 <__alt_data_end+0xfc006ce8>
 8006d10:	2c000017 	ldw	r16,0(r5)
 8006d14:	108000cc 	andi	r2,r2,3
 8006d18:	2c800015 	stw	r18,0(r5)
 8006d1c:	84a1c83a 	sub	r16,r16,r18
 8006d20:	1000131e 	bne	r2,zero,8006d70 <__sflush_r+0x158>
 8006d24:	28800517 	ldw	r2,20(r5)
 8006d28:	88800215 	stw	r2,8(r17)
 8006d2c:	04000316 	blt	zero,r16,8006d3c <__sflush_r+0x124>
 8006d30:	003fed06 	br	8006ce8 <__alt_data_end+0xfc006ce8>
 8006d34:	90a5883a 	add	r18,r18,r2
 8006d38:	043feb0e 	bge	zero,r16,8006ce8 <__alt_data_end+0xfc006ce8>
 8006d3c:	88800917 	ldw	r2,36(r17)
 8006d40:	89400717 	ldw	r5,28(r17)
 8006d44:	800f883a 	mov	r7,r16
 8006d48:	900d883a 	mov	r6,r18
 8006d4c:	9809883a 	mov	r4,r19
 8006d50:	103ee83a 	callr	r2
 8006d54:	80a1c83a 	sub	r16,r16,r2
 8006d58:	00bff616 	blt	zero,r2,8006d34 <__alt_data_end+0xfc006d34>
 8006d5c:	88c0030b 	ldhu	r3,12(r17)
 8006d60:	00bfffc4 	movi	r2,-1
 8006d64:	18c01014 	ori	r3,r3,64
 8006d68:	88c0030d 	sth	r3,12(r17)
 8006d6c:	003fdf06 	br	8006cec <__alt_data_end+0xfc006cec>
 8006d70:	0005883a 	mov	r2,zero
 8006d74:	003fec06 	br	8006d28 <__alt_data_end+0xfc006d28>
 8006d78:	88801415 	stw	r2,80(r17)
 8006d7c:	003fd206 	br	8006cc8 <__alt_data_end+0xfc006cc8>
 8006d80:	28c00f17 	ldw	r3,60(r5)
 8006d84:	00ffb316 	blt	zero,r3,8006c54 <__alt_data_end+0xfc006c54>
 8006d88:	003fd706 	br	8006ce8 <__alt_data_end+0xfc006ce8>
 8006d8c:	89400717 	ldw	r5,28(r17)
 8006d90:	000d883a 	mov	r6,zero
 8006d94:	01c00044 	movi	r7,1
 8006d98:	9809883a 	mov	r4,r19
 8006d9c:	403ee83a 	callr	r8
 8006da0:	100d883a 	mov	r6,r2
 8006da4:	00bfffc4 	movi	r2,-1
 8006da8:	30801426 	beq	r6,r2,8006dfc <__sflush_r+0x1e4>
 8006dac:	8880030b 	ldhu	r2,12(r17)
 8006db0:	8a000a17 	ldw	r8,40(r17)
 8006db4:	003fae06 	br	8006c70 <__alt_data_end+0xfc006c70>
 8006db8:	98c00017 	ldw	r3,0(r19)
 8006dbc:	183fba26 	beq	r3,zero,8006ca8 <__alt_data_end+0xfc006ca8>
 8006dc0:	01000744 	movi	r4,29
 8006dc4:	19000626 	beq	r3,r4,8006de0 <__sflush_r+0x1c8>
 8006dc8:	01000584 	movi	r4,22
 8006dcc:	19000426 	beq	r3,r4,8006de0 <__sflush_r+0x1c8>
 8006dd0:	88c0030b 	ldhu	r3,12(r17)
 8006dd4:	18c01014 	ori	r3,r3,64
 8006dd8:	88c0030d 	sth	r3,12(r17)
 8006ddc:	003fc306 	br	8006cec <__alt_data_end+0xfc006cec>
 8006de0:	8880030b 	ldhu	r2,12(r17)
 8006de4:	88c00417 	ldw	r3,16(r17)
 8006de8:	88000115 	stw	zero,4(r17)
 8006dec:	10bdffcc 	andi	r2,r2,63487
 8006df0:	8880030d 	sth	r2,12(r17)
 8006df4:	88c00015 	stw	r3,0(r17)
 8006df8:	003fb306 	br	8006cc8 <__alt_data_end+0xfc006cc8>
 8006dfc:	98800017 	ldw	r2,0(r19)
 8006e00:	103fea26 	beq	r2,zero,8006dac <__alt_data_end+0xfc006dac>
 8006e04:	00c00744 	movi	r3,29
 8006e08:	10c00226 	beq	r2,r3,8006e14 <__sflush_r+0x1fc>
 8006e0c:	00c00584 	movi	r3,22
 8006e10:	10c0031e 	bne	r2,r3,8006e20 <__sflush_r+0x208>
 8006e14:	9c000015 	stw	r16,0(r19)
 8006e18:	0005883a 	mov	r2,zero
 8006e1c:	003fb306 	br	8006cec <__alt_data_end+0xfc006cec>
 8006e20:	88c0030b 	ldhu	r3,12(r17)
 8006e24:	3005883a 	mov	r2,r6
 8006e28:	18c01014 	ori	r3,r3,64
 8006e2c:	88c0030d 	sth	r3,12(r17)
 8006e30:	003fae06 	br	8006cec <__alt_data_end+0xfc006cec>

08006e34 <_fflush_r>:
 8006e34:	defffd04 	addi	sp,sp,-12
 8006e38:	dc000115 	stw	r16,4(sp)
 8006e3c:	dfc00215 	stw	ra,8(sp)
 8006e40:	2021883a 	mov	r16,r4
 8006e44:	20000226 	beq	r4,zero,8006e50 <_fflush_r+0x1c>
 8006e48:	20800e17 	ldw	r2,56(r4)
 8006e4c:	10000c26 	beq	r2,zero,8006e80 <_fflush_r+0x4c>
 8006e50:	2880030f 	ldh	r2,12(r5)
 8006e54:	1000051e 	bne	r2,zero,8006e6c <_fflush_r+0x38>
 8006e58:	0005883a 	mov	r2,zero
 8006e5c:	dfc00217 	ldw	ra,8(sp)
 8006e60:	dc000117 	ldw	r16,4(sp)
 8006e64:	dec00304 	addi	sp,sp,12
 8006e68:	f800283a 	ret
 8006e6c:	8009883a 	mov	r4,r16
 8006e70:	dfc00217 	ldw	ra,8(sp)
 8006e74:	dc000117 	ldw	r16,4(sp)
 8006e78:	dec00304 	addi	sp,sp,12
 8006e7c:	8006c181 	jmpi	8006c18 <__sflush_r>
 8006e80:	d9400015 	stw	r5,0(sp)
 8006e84:	80072200 	call	8007220 <__sinit>
 8006e88:	d9400017 	ldw	r5,0(sp)
 8006e8c:	003ff006 	br	8006e50 <__alt_data_end+0xfc006e50>

08006e90 <fflush>:
 8006e90:	20000526 	beq	r4,zero,8006ea8 <fflush+0x18>
 8006e94:	00820074 	movhi	r2,2049
 8006e98:	10979504 	addi	r2,r2,24148
 8006e9c:	200b883a 	mov	r5,r4
 8006ea0:	11000017 	ldw	r4,0(r2)
 8006ea4:	8006e341 	jmpi	8006e34 <_fflush_r>
 8006ea8:	00820074 	movhi	r2,2049
 8006eac:	10979404 	addi	r2,r2,24144
 8006eb0:	11000017 	ldw	r4,0(r2)
 8006eb4:	01420034 	movhi	r5,2048
 8006eb8:	295b8d04 	addi	r5,r5,28212
 8006ebc:	8007c301 	jmpi	8007c30 <_fwalk_reent>

08006ec0 <__fp_unlock>:
 8006ec0:	0005883a 	mov	r2,zero
 8006ec4:	f800283a 	ret

08006ec8 <_cleanup_r>:
 8006ec8:	01420074 	movhi	r5,2049
 8006ecc:	296fd104 	addi	r5,r5,-16572
 8006ed0:	8007c301 	jmpi	8007c30 <_fwalk_reent>

08006ed4 <__sinit.part.1>:
 8006ed4:	defff704 	addi	sp,sp,-36
 8006ed8:	00c20034 	movhi	r3,2048
 8006edc:	dfc00815 	stw	ra,32(sp)
 8006ee0:	ddc00715 	stw	r23,28(sp)
 8006ee4:	dd800615 	stw	r22,24(sp)
 8006ee8:	dd400515 	stw	r21,20(sp)
 8006eec:	dd000415 	stw	r20,16(sp)
 8006ef0:	dcc00315 	stw	r19,12(sp)
 8006ef4:	dc800215 	stw	r18,8(sp)
 8006ef8:	dc400115 	stw	r17,4(sp)
 8006efc:	dc000015 	stw	r16,0(sp)
 8006f00:	18dbb204 	addi	r3,r3,28360
 8006f04:	24000117 	ldw	r16,4(r4)
 8006f08:	20c00f15 	stw	r3,60(r4)
 8006f0c:	2080bb04 	addi	r2,r4,748
 8006f10:	00c000c4 	movi	r3,3
 8006f14:	20c0b915 	stw	r3,740(r4)
 8006f18:	2080ba15 	stw	r2,744(r4)
 8006f1c:	2000b815 	stw	zero,736(r4)
 8006f20:	05c00204 	movi	r23,8
 8006f24:	00800104 	movi	r2,4
 8006f28:	2025883a 	mov	r18,r4
 8006f2c:	b80d883a 	mov	r6,r23
 8006f30:	81001704 	addi	r4,r16,92
 8006f34:	000b883a 	mov	r5,zero
 8006f38:	80000015 	stw	zero,0(r16)
 8006f3c:	80000115 	stw	zero,4(r16)
 8006f40:	80000215 	stw	zero,8(r16)
 8006f44:	8080030d 	sth	r2,12(r16)
 8006f48:	80001915 	stw	zero,100(r16)
 8006f4c:	8000038d 	sth	zero,14(r16)
 8006f50:	80000415 	stw	zero,16(r16)
 8006f54:	80000515 	stw	zero,20(r16)
 8006f58:	80000615 	stw	zero,24(r16)
 8006f5c:	80089d80 	call	80089d8 <memset>
 8006f60:	05820074 	movhi	r22,2049
 8006f64:	94400217 	ldw	r17,8(r18)
 8006f68:	05420074 	movhi	r21,2049
 8006f6c:	05020074 	movhi	r20,2049
 8006f70:	04c20074 	movhi	r19,2049
 8006f74:	b5a8d304 	addi	r22,r22,-23732
 8006f78:	ad68ea04 	addi	r21,r21,-23640
 8006f7c:	a5290904 	addi	r20,r20,-23516
 8006f80:	9ce92004 	addi	r19,r19,-23424
 8006f84:	85800815 	stw	r22,32(r16)
 8006f88:	85400915 	stw	r21,36(r16)
 8006f8c:	85000a15 	stw	r20,40(r16)
 8006f90:	84c00b15 	stw	r19,44(r16)
 8006f94:	84000715 	stw	r16,28(r16)
 8006f98:	00800284 	movi	r2,10
 8006f9c:	8880030d 	sth	r2,12(r17)
 8006fa0:	00800044 	movi	r2,1
 8006fa4:	b80d883a 	mov	r6,r23
 8006fa8:	89001704 	addi	r4,r17,92
 8006fac:	000b883a 	mov	r5,zero
 8006fb0:	88000015 	stw	zero,0(r17)
 8006fb4:	88000115 	stw	zero,4(r17)
 8006fb8:	88000215 	stw	zero,8(r17)
 8006fbc:	88001915 	stw	zero,100(r17)
 8006fc0:	8880038d 	sth	r2,14(r17)
 8006fc4:	88000415 	stw	zero,16(r17)
 8006fc8:	88000515 	stw	zero,20(r17)
 8006fcc:	88000615 	stw	zero,24(r17)
 8006fd0:	80089d80 	call	80089d8 <memset>
 8006fd4:	94000317 	ldw	r16,12(r18)
 8006fd8:	00800484 	movi	r2,18
 8006fdc:	8c400715 	stw	r17,28(r17)
 8006fe0:	8d800815 	stw	r22,32(r17)
 8006fe4:	8d400915 	stw	r21,36(r17)
 8006fe8:	8d000a15 	stw	r20,40(r17)
 8006fec:	8cc00b15 	stw	r19,44(r17)
 8006ff0:	8080030d 	sth	r2,12(r16)
 8006ff4:	00800084 	movi	r2,2
 8006ff8:	80000015 	stw	zero,0(r16)
 8006ffc:	80000115 	stw	zero,4(r16)
 8007000:	80000215 	stw	zero,8(r16)
 8007004:	80001915 	stw	zero,100(r16)
 8007008:	8080038d 	sth	r2,14(r16)
 800700c:	80000415 	stw	zero,16(r16)
 8007010:	80000515 	stw	zero,20(r16)
 8007014:	80000615 	stw	zero,24(r16)
 8007018:	b80d883a 	mov	r6,r23
 800701c:	000b883a 	mov	r5,zero
 8007020:	81001704 	addi	r4,r16,92
 8007024:	80089d80 	call	80089d8 <memset>
 8007028:	00800044 	movi	r2,1
 800702c:	84000715 	stw	r16,28(r16)
 8007030:	85800815 	stw	r22,32(r16)
 8007034:	85400915 	stw	r21,36(r16)
 8007038:	85000a15 	stw	r20,40(r16)
 800703c:	84c00b15 	stw	r19,44(r16)
 8007040:	90800e15 	stw	r2,56(r18)
 8007044:	dfc00817 	ldw	ra,32(sp)
 8007048:	ddc00717 	ldw	r23,28(sp)
 800704c:	dd800617 	ldw	r22,24(sp)
 8007050:	dd400517 	ldw	r21,20(sp)
 8007054:	dd000417 	ldw	r20,16(sp)
 8007058:	dcc00317 	ldw	r19,12(sp)
 800705c:	dc800217 	ldw	r18,8(sp)
 8007060:	dc400117 	ldw	r17,4(sp)
 8007064:	dc000017 	ldw	r16,0(sp)
 8007068:	dec00904 	addi	sp,sp,36
 800706c:	f800283a 	ret

08007070 <__fp_lock>:
 8007070:	0005883a 	mov	r2,zero
 8007074:	f800283a 	ret

08007078 <__sfmoreglue>:
 8007078:	defffc04 	addi	sp,sp,-16
 800707c:	dc800215 	stw	r18,8(sp)
 8007080:	2825883a 	mov	r18,r5
 8007084:	dc000015 	stw	r16,0(sp)
 8007088:	01401a04 	movi	r5,104
 800708c:	2021883a 	mov	r16,r4
 8007090:	913fffc4 	addi	r4,r18,-1
 8007094:	dfc00315 	stw	ra,12(sp)
 8007098:	dc400115 	stw	r17,4(sp)
 800709c:	8002af80 	call	8002af8 <__mulsi3>
 80070a0:	8009883a 	mov	r4,r16
 80070a4:	11401d04 	addi	r5,r2,116
 80070a8:	1023883a 	mov	r17,r2
 80070ac:	8007f8c0 	call	8007f8c <_malloc_r>
 80070b0:	1021883a 	mov	r16,r2
 80070b4:	10000726 	beq	r2,zero,80070d4 <__sfmoreglue+0x5c>
 80070b8:	11000304 	addi	r4,r2,12
 80070bc:	10000015 	stw	zero,0(r2)
 80070c0:	14800115 	stw	r18,4(r2)
 80070c4:	11000215 	stw	r4,8(r2)
 80070c8:	89801a04 	addi	r6,r17,104
 80070cc:	000b883a 	mov	r5,zero
 80070d0:	80089d80 	call	80089d8 <memset>
 80070d4:	8005883a 	mov	r2,r16
 80070d8:	dfc00317 	ldw	ra,12(sp)
 80070dc:	dc800217 	ldw	r18,8(sp)
 80070e0:	dc400117 	ldw	r17,4(sp)
 80070e4:	dc000017 	ldw	r16,0(sp)
 80070e8:	dec00404 	addi	sp,sp,16
 80070ec:	f800283a 	ret

080070f0 <__sfp>:
 80070f0:	defffb04 	addi	sp,sp,-20
 80070f4:	dc000015 	stw	r16,0(sp)
 80070f8:	04020074 	movhi	r16,2049
 80070fc:	84179404 	addi	r16,r16,24144
 8007100:	dcc00315 	stw	r19,12(sp)
 8007104:	2027883a 	mov	r19,r4
 8007108:	81000017 	ldw	r4,0(r16)
 800710c:	dfc00415 	stw	ra,16(sp)
 8007110:	dc800215 	stw	r18,8(sp)
 8007114:	20800e17 	ldw	r2,56(r4)
 8007118:	dc400115 	stw	r17,4(sp)
 800711c:	1000021e 	bne	r2,zero,8007128 <__sfp+0x38>
 8007120:	8006ed40 	call	8006ed4 <__sinit.part.1>
 8007124:	81000017 	ldw	r4,0(r16)
 8007128:	2480b804 	addi	r18,r4,736
 800712c:	047fffc4 	movi	r17,-1
 8007130:	91000117 	ldw	r4,4(r18)
 8007134:	94000217 	ldw	r16,8(r18)
 8007138:	213fffc4 	addi	r4,r4,-1
 800713c:	20000a16 	blt	r4,zero,8007168 <__sfp+0x78>
 8007140:	8080030f 	ldh	r2,12(r16)
 8007144:	10000c26 	beq	r2,zero,8007178 <__sfp+0x88>
 8007148:	80c01d04 	addi	r3,r16,116
 800714c:	00000206 	br	8007158 <__sfp+0x68>
 8007150:	18bfe60f 	ldh	r2,-104(r3)
 8007154:	10000826 	beq	r2,zero,8007178 <__sfp+0x88>
 8007158:	213fffc4 	addi	r4,r4,-1
 800715c:	1c3ffd04 	addi	r16,r3,-12
 8007160:	18c01a04 	addi	r3,r3,104
 8007164:	247ffa1e 	bne	r4,r17,8007150 <__alt_data_end+0xfc007150>
 8007168:	90800017 	ldw	r2,0(r18)
 800716c:	10001d26 	beq	r2,zero,80071e4 <__sfp+0xf4>
 8007170:	1025883a 	mov	r18,r2
 8007174:	003fee06 	br	8007130 <__alt_data_end+0xfc007130>
 8007178:	00bfffc4 	movi	r2,-1
 800717c:	8080038d 	sth	r2,14(r16)
 8007180:	00800044 	movi	r2,1
 8007184:	8080030d 	sth	r2,12(r16)
 8007188:	80001915 	stw	zero,100(r16)
 800718c:	80000015 	stw	zero,0(r16)
 8007190:	80000215 	stw	zero,8(r16)
 8007194:	80000115 	stw	zero,4(r16)
 8007198:	80000415 	stw	zero,16(r16)
 800719c:	80000515 	stw	zero,20(r16)
 80071a0:	80000615 	stw	zero,24(r16)
 80071a4:	01800204 	movi	r6,8
 80071a8:	000b883a 	mov	r5,zero
 80071ac:	81001704 	addi	r4,r16,92
 80071b0:	80089d80 	call	80089d8 <memset>
 80071b4:	8005883a 	mov	r2,r16
 80071b8:	80000c15 	stw	zero,48(r16)
 80071bc:	80000d15 	stw	zero,52(r16)
 80071c0:	80001115 	stw	zero,68(r16)
 80071c4:	80001215 	stw	zero,72(r16)
 80071c8:	dfc00417 	ldw	ra,16(sp)
 80071cc:	dcc00317 	ldw	r19,12(sp)
 80071d0:	dc800217 	ldw	r18,8(sp)
 80071d4:	dc400117 	ldw	r17,4(sp)
 80071d8:	dc000017 	ldw	r16,0(sp)
 80071dc:	dec00504 	addi	sp,sp,20
 80071e0:	f800283a 	ret
 80071e4:	01400104 	movi	r5,4
 80071e8:	9809883a 	mov	r4,r19
 80071ec:	80070780 	call	8007078 <__sfmoreglue>
 80071f0:	90800015 	stw	r2,0(r18)
 80071f4:	103fde1e 	bne	r2,zero,8007170 <__alt_data_end+0xfc007170>
 80071f8:	00800304 	movi	r2,12
 80071fc:	98800015 	stw	r2,0(r19)
 8007200:	0005883a 	mov	r2,zero
 8007204:	003ff006 	br	80071c8 <__alt_data_end+0xfc0071c8>

08007208 <_cleanup>:
 8007208:	00820074 	movhi	r2,2049
 800720c:	10979404 	addi	r2,r2,24144
 8007210:	11000017 	ldw	r4,0(r2)
 8007214:	01420074 	movhi	r5,2049
 8007218:	296fd104 	addi	r5,r5,-16572
 800721c:	8007c301 	jmpi	8007c30 <_fwalk_reent>

08007220 <__sinit>:
 8007220:	20800e17 	ldw	r2,56(r4)
 8007224:	10000126 	beq	r2,zero,800722c <__sinit+0xc>
 8007228:	f800283a 	ret
 800722c:	8006ed41 	jmpi	8006ed4 <__sinit.part.1>

08007230 <__sfp_lock_acquire>:
 8007230:	f800283a 	ret

08007234 <__sfp_lock_release>:
 8007234:	f800283a 	ret

08007238 <__sinit_lock_acquire>:
 8007238:	f800283a 	ret

0800723c <__sinit_lock_release>:
 800723c:	f800283a 	ret

08007240 <__fp_lock_all>:
 8007240:	00820074 	movhi	r2,2049
 8007244:	10979504 	addi	r2,r2,24148
 8007248:	11000017 	ldw	r4,0(r2)
 800724c:	01420034 	movhi	r5,2048
 8007250:	295c1c04 	addi	r5,r5,28784
 8007254:	8007b6c1 	jmpi	8007b6c <_fwalk>

08007258 <__fp_unlock_all>:
 8007258:	00820074 	movhi	r2,2049
 800725c:	10979504 	addi	r2,r2,24148
 8007260:	11000017 	ldw	r4,0(r2)
 8007264:	01420034 	movhi	r5,2048
 8007268:	295bb004 	addi	r5,r5,28352
 800726c:	8007b6c1 	jmpi	8007b6c <_fwalk>

08007270 <_malloc_trim_r>:
 8007270:	defffb04 	addi	sp,sp,-20
 8007274:	dcc00315 	stw	r19,12(sp)
 8007278:	04c20074 	movhi	r19,2049
 800727c:	dc800215 	stw	r18,8(sp)
 8007280:	dc400115 	stw	r17,4(sp)
 8007284:	dc000015 	stw	r16,0(sp)
 8007288:	dfc00415 	stw	ra,16(sp)
 800728c:	2821883a 	mov	r16,r5
 8007290:	9cd20a04 	addi	r19,r19,18472
 8007294:	2025883a 	mov	r18,r4
 8007298:	800ffa80 	call	800ffa8 <__malloc_lock>
 800729c:	98800217 	ldw	r2,8(r19)
 80072a0:	14400117 	ldw	r17,4(r2)
 80072a4:	00bfff04 	movi	r2,-4
 80072a8:	88a2703a 	and	r17,r17,r2
 80072ac:	8c21c83a 	sub	r16,r17,r16
 80072b0:	8403fbc4 	addi	r16,r16,4079
 80072b4:	8020d33a 	srli	r16,r16,12
 80072b8:	0083ffc4 	movi	r2,4095
 80072bc:	843fffc4 	addi	r16,r16,-1
 80072c0:	8020933a 	slli	r16,r16,12
 80072c4:	1400060e 	bge	r2,r16,80072e0 <_malloc_trim_r+0x70>
 80072c8:	000b883a 	mov	r5,zero
 80072cc:	9009883a 	mov	r4,r18
 80072d0:	800a2f80 	call	800a2f8 <_sbrk_r>
 80072d4:	98c00217 	ldw	r3,8(r19)
 80072d8:	1c47883a 	add	r3,r3,r17
 80072dc:	10c00a26 	beq	r2,r3,8007308 <_malloc_trim_r+0x98>
 80072e0:	9009883a 	mov	r4,r18
 80072e4:	800ffcc0 	call	800ffcc <__malloc_unlock>
 80072e8:	0005883a 	mov	r2,zero
 80072ec:	dfc00417 	ldw	ra,16(sp)
 80072f0:	dcc00317 	ldw	r19,12(sp)
 80072f4:	dc800217 	ldw	r18,8(sp)
 80072f8:	dc400117 	ldw	r17,4(sp)
 80072fc:	dc000017 	ldw	r16,0(sp)
 8007300:	dec00504 	addi	sp,sp,20
 8007304:	f800283a 	ret
 8007308:	040bc83a 	sub	r5,zero,r16
 800730c:	9009883a 	mov	r4,r18
 8007310:	800a2f80 	call	800a2f8 <_sbrk_r>
 8007314:	00ffffc4 	movi	r3,-1
 8007318:	10c00d26 	beq	r2,r3,8007350 <_malloc_trim_r+0xe0>
 800731c:	00c20074 	movhi	r3,2049
 8007320:	18de8f04 	addi	r3,r3,31292
 8007324:	18800017 	ldw	r2,0(r3)
 8007328:	99000217 	ldw	r4,8(r19)
 800732c:	8c23c83a 	sub	r17,r17,r16
 8007330:	8c400054 	ori	r17,r17,1
 8007334:	1421c83a 	sub	r16,r2,r16
 8007338:	24400115 	stw	r17,4(r4)
 800733c:	9009883a 	mov	r4,r18
 8007340:	1c000015 	stw	r16,0(r3)
 8007344:	800ffcc0 	call	800ffcc <__malloc_unlock>
 8007348:	00800044 	movi	r2,1
 800734c:	003fe706 	br	80072ec <__alt_data_end+0xfc0072ec>
 8007350:	000b883a 	mov	r5,zero
 8007354:	9009883a 	mov	r4,r18
 8007358:	800a2f80 	call	800a2f8 <_sbrk_r>
 800735c:	99000217 	ldw	r4,8(r19)
 8007360:	014003c4 	movi	r5,15
 8007364:	1107c83a 	sub	r3,r2,r4
 8007368:	28ffdd0e 	bge	r5,r3,80072e0 <__alt_data_end+0xfc0072e0>
 800736c:	01420074 	movhi	r5,2049
 8007370:	29579704 	addi	r5,r5,24156
 8007374:	29400017 	ldw	r5,0(r5)
 8007378:	18c00054 	ori	r3,r3,1
 800737c:	20c00115 	stw	r3,4(r4)
 8007380:	00c20074 	movhi	r3,2049
 8007384:	1145c83a 	sub	r2,r2,r5
 8007388:	18de8f04 	addi	r3,r3,31292
 800738c:	18800015 	stw	r2,0(r3)
 8007390:	003fd306 	br	80072e0 <__alt_data_end+0xfc0072e0>

08007394 <_free_r>:
 8007394:	28004126 	beq	r5,zero,800749c <_free_r+0x108>
 8007398:	defffd04 	addi	sp,sp,-12
 800739c:	dc400115 	stw	r17,4(sp)
 80073a0:	dc000015 	stw	r16,0(sp)
 80073a4:	2023883a 	mov	r17,r4
 80073a8:	2821883a 	mov	r16,r5
 80073ac:	dfc00215 	stw	ra,8(sp)
 80073b0:	800ffa80 	call	800ffa8 <__malloc_lock>
 80073b4:	81ffff17 	ldw	r7,-4(r16)
 80073b8:	00bfff84 	movi	r2,-2
 80073bc:	01020074 	movhi	r4,2049
 80073c0:	81bffe04 	addi	r6,r16,-8
 80073c4:	3884703a 	and	r2,r7,r2
 80073c8:	21120a04 	addi	r4,r4,18472
 80073cc:	308b883a 	add	r5,r6,r2
 80073d0:	2a400117 	ldw	r9,4(r5)
 80073d4:	22000217 	ldw	r8,8(r4)
 80073d8:	00ffff04 	movi	r3,-4
 80073dc:	48c6703a 	and	r3,r9,r3
 80073e0:	2a005726 	beq	r5,r8,8007540 <_free_r+0x1ac>
 80073e4:	28c00115 	stw	r3,4(r5)
 80073e8:	39c0004c 	andi	r7,r7,1
 80073ec:	3800091e 	bne	r7,zero,8007414 <_free_r+0x80>
 80073f0:	823ffe17 	ldw	r8,-8(r16)
 80073f4:	22400204 	addi	r9,r4,8
 80073f8:	320dc83a 	sub	r6,r6,r8
 80073fc:	31c00217 	ldw	r7,8(r6)
 8007400:	1205883a 	add	r2,r2,r8
 8007404:	3a406526 	beq	r7,r9,800759c <_free_r+0x208>
 8007408:	32000317 	ldw	r8,12(r6)
 800740c:	3a000315 	stw	r8,12(r7)
 8007410:	41c00215 	stw	r7,8(r8)
 8007414:	28cf883a 	add	r7,r5,r3
 8007418:	39c00117 	ldw	r7,4(r7)
 800741c:	39c0004c 	andi	r7,r7,1
 8007420:	38003a26 	beq	r7,zero,800750c <_free_r+0x178>
 8007424:	10c00054 	ori	r3,r2,1
 8007428:	30c00115 	stw	r3,4(r6)
 800742c:	3087883a 	add	r3,r6,r2
 8007430:	18800015 	stw	r2,0(r3)
 8007434:	00c07fc4 	movi	r3,511
 8007438:	18801936 	bltu	r3,r2,80074a0 <_free_r+0x10c>
 800743c:	1004d0fa 	srli	r2,r2,3
 8007440:	01c00044 	movi	r7,1
 8007444:	21400117 	ldw	r5,4(r4)
 8007448:	10c00044 	addi	r3,r2,1
 800744c:	18c7883a 	add	r3,r3,r3
 8007450:	1005d0ba 	srai	r2,r2,2
 8007454:	18c7883a 	add	r3,r3,r3
 8007458:	18c7883a 	add	r3,r3,r3
 800745c:	1907883a 	add	r3,r3,r4
 8007460:	3884983a 	sll	r2,r7,r2
 8007464:	19c00017 	ldw	r7,0(r3)
 8007468:	1a3ffe04 	addi	r8,r3,-8
 800746c:	1144b03a 	or	r2,r2,r5
 8007470:	32000315 	stw	r8,12(r6)
 8007474:	31c00215 	stw	r7,8(r6)
 8007478:	20800115 	stw	r2,4(r4)
 800747c:	19800015 	stw	r6,0(r3)
 8007480:	39800315 	stw	r6,12(r7)
 8007484:	8809883a 	mov	r4,r17
 8007488:	dfc00217 	ldw	ra,8(sp)
 800748c:	dc400117 	ldw	r17,4(sp)
 8007490:	dc000017 	ldw	r16,0(sp)
 8007494:	dec00304 	addi	sp,sp,12
 8007498:	800ffcc1 	jmpi	800ffcc <__malloc_unlock>
 800749c:	f800283a 	ret
 80074a0:	100ad27a 	srli	r5,r2,9
 80074a4:	00c00104 	movi	r3,4
 80074a8:	19404a36 	bltu	r3,r5,80075d4 <_free_r+0x240>
 80074ac:	100ad1ba 	srli	r5,r2,6
 80074b0:	28c00e44 	addi	r3,r5,57
 80074b4:	18c7883a 	add	r3,r3,r3
 80074b8:	29400e04 	addi	r5,r5,56
 80074bc:	18c7883a 	add	r3,r3,r3
 80074c0:	18c7883a 	add	r3,r3,r3
 80074c4:	1909883a 	add	r4,r3,r4
 80074c8:	20c00017 	ldw	r3,0(r4)
 80074cc:	01c20074 	movhi	r7,2049
 80074d0:	213ffe04 	addi	r4,r4,-8
 80074d4:	39d20a04 	addi	r7,r7,18472
 80074d8:	20c04426 	beq	r4,r3,80075ec <_free_r+0x258>
 80074dc:	01ffff04 	movi	r7,-4
 80074e0:	19400117 	ldw	r5,4(r3)
 80074e4:	29ca703a 	and	r5,r5,r7
 80074e8:	1140022e 	bgeu	r2,r5,80074f4 <_free_r+0x160>
 80074ec:	18c00217 	ldw	r3,8(r3)
 80074f0:	20fffb1e 	bne	r4,r3,80074e0 <__alt_data_end+0xfc0074e0>
 80074f4:	19000317 	ldw	r4,12(r3)
 80074f8:	31000315 	stw	r4,12(r6)
 80074fc:	30c00215 	stw	r3,8(r6)
 8007500:	21800215 	stw	r6,8(r4)
 8007504:	19800315 	stw	r6,12(r3)
 8007508:	003fde06 	br	8007484 <__alt_data_end+0xfc007484>
 800750c:	29c00217 	ldw	r7,8(r5)
 8007510:	10c5883a 	add	r2,r2,r3
 8007514:	00c20074 	movhi	r3,2049
 8007518:	18d20c04 	addi	r3,r3,18480
 800751c:	38c03b26 	beq	r7,r3,800760c <_free_r+0x278>
 8007520:	2a000317 	ldw	r8,12(r5)
 8007524:	11400054 	ori	r5,r2,1
 8007528:	3087883a 	add	r3,r6,r2
 800752c:	3a000315 	stw	r8,12(r7)
 8007530:	41c00215 	stw	r7,8(r8)
 8007534:	31400115 	stw	r5,4(r6)
 8007538:	18800015 	stw	r2,0(r3)
 800753c:	003fbd06 	br	8007434 <__alt_data_end+0xfc007434>
 8007540:	39c0004c 	andi	r7,r7,1
 8007544:	10c5883a 	add	r2,r2,r3
 8007548:	3800071e 	bne	r7,zero,8007568 <_free_r+0x1d4>
 800754c:	81fffe17 	ldw	r7,-8(r16)
 8007550:	31cdc83a 	sub	r6,r6,r7
 8007554:	30c00317 	ldw	r3,12(r6)
 8007558:	31400217 	ldw	r5,8(r6)
 800755c:	11c5883a 	add	r2,r2,r7
 8007560:	28c00315 	stw	r3,12(r5)
 8007564:	19400215 	stw	r5,8(r3)
 8007568:	10c00054 	ori	r3,r2,1
 800756c:	30c00115 	stw	r3,4(r6)
 8007570:	00c20074 	movhi	r3,2049
 8007574:	18d79804 	addi	r3,r3,24160
 8007578:	18c00017 	ldw	r3,0(r3)
 800757c:	21800215 	stw	r6,8(r4)
 8007580:	10ffc036 	bltu	r2,r3,8007484 <__alt_data_end+0xfc007484>
 8007584:	00820074 	movhi	r2,2049
 8007588:	109e7c04 	addi	r2,r2,31216
 800758c:	11400017 	ldw	r5,0(r2)
 8007590:	8809883a 	mov	r4,r17
 8007594:	80072700 	call	8007270 <_malloc_trim_r>
 8007598:	003fba06 	br	8007484 <__alt_data_end+0xfc007484>
 800759c:	28c9883a 	add	r4,r5,r3
 80075a0:	21000117 	ldw	r4,4(r4)
 80075a4:	2100004c 	andi	r4,r4,1
 80075a8:	2000391e 	bne	r4,zero,8007690 <_free_r+0x2fc>
 80075ac:	29c00217 	ldw	r7,8(r5)
 80075b0:	29000317 	ldw	r4,12(r5)
 80075b4:	1885883a 	add	r2,r3,r2
 80075b8:	10c00054 	ori	r3,r2,1
 80075bc:	39000315 	stw	r4,12(r7)
 80075c0:	21c00215 	stw	r7,8(r4)
 80075c4:	30c00115 	stw	r3,4(r6)
 80075c8:	308d883a 	add	r6,r6,r2
 80075cc:	30800015 	stw	r2,0(r6)
 80075d0:	003fac06 	br	8007484 <__alt_data_end+0xfc007484>
 80075d4:	00c00504 	movi	r3,20
 80075d8:	19401536 	bltu	r3,r5,8007630 <_free_r+0x29c>
 80075dc:	28c01704 	addi	r3,r5,92
 80075e0:	18c7883a 	add	r3,r3,r3
 80075e4:	294016c4 	addi	r5,r5,91
 80075e8:	003fb406 	br	80074bc <__alt_data_end+0xfc0074bc>
 80075ec:	280bd0ba 	srai	r5,r5,2
 80075f0:	00c00044 	movi	r3,1
 80075f4:	38800117 	ldw	r2,4(r7)
 80075f8:	194a983a 	sll	r5,r3,r5
 80075fc:	2007883a 	mov	r3,r4
 8007600:	2884b03a 	or	r2,r5,r2
 8007604:	38800115 	stw	r2,4(r7)
 8007608:	003fbb06 	br	80074f8 <__alt_data_end+0xfc0074f8>
 800760c:	21800515 	stw	r6,20(r4)
 8007610:	21800415 	stw	r6,16(r4)
 8007614:	10c00054 	ori	r3,r2,1
 8007618:	31c00315 	stw	r7,12(r6)
 800761c:	31c00215 	stw	r7,8(r6)
 8007620:	30c00115 	stw	r3,4(r6)
 8007624:	308d883a 	add	r6,r6,r2
 8007628:	30800015 	stw	r2,0(r6)
 800762c:	003f9506 	br	8007484 <__alt_data_end+0xfc007484>
 8007630:	00c01504 	movi	r3,84
 8007634:	19400536 	bltu	r3,r5,800764c <_free_r+0x2b8>
 8007638:	100ad33a 	srli	r5,r2,12
 800763c:	28c01bc4 	addi	r3,r5,111
 8007640:	18c7883a 	add	r3,r3,r3
 8007644:	29401b84 	addi	r5,r5,110
 8007648:	003f9c06 	br	80074bc <__alt_data_end+0xfc0074bc>
 800764c:	00c05504 	movi	r3,340
 8007650:	19400536 	bltu	r3,r5,8007668 <_free_r+0x2d4>
 8007654:	100ad3fa 	srli	r5,r2,15
 8007658:	28c01e04 	addi	r3,r5,120
 800765c:	18c7883a 	add	r3,r3,r3
 8007660:	29401dc4 	addi	r5,r5,119
 8007664:	003f9506 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007668:	00c15504 	movi	r3,1364
 800766c:	19400536 	bltu	r3,r5,8007684 <_free_r+0x2f0>
 8007670:	100ad4ba 	srli	r5,r2,18
 8007674:	28c01f44 	addi	r3,r5,125
 8007678:	18c7883a 	add	r3,r3,r3
 800767c:	29401f04 	addi	r5,r5,124
 8007680:	003f8e06 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007684:	00c03f84 	movi	r3,254
 8007688:	01401f84 	movi	r5,126
 800768c:	003f8b06 	br	80074bc <__alt_data_end+0xfc0074bc>
 8007690:	10c00054 	ori	r3,r2,1
 8007694:	30c00115 	stw	r3,4(r6)
 8007698:	308d883a 	add	r6,r6,r2
 800769c:	30800015 	stw	r2,0(r6)
 80076a0:	003f7806 	br	8007484 <__alt_data_end+0xfc007484>

080076a4 <__sfvwrite_r>:
 80076a4:	30800217 	ldw	r2,8(r6)
 80076a8:	10006726 	beq	r2,zero,8007848 <__sfvwrite_r+0x1a4>
 80076ac:	28c0030b 	ldhu	r3,12(r5)
 80076b0:	defff404 	addi	sp,sp,-48
 80076b4:	dd400715 	stw	r21,28(sp)
 80076b8:	dd000615 	stw	r20,24(sp)
 80076bc:	dc000215 	stw	r16,8(sp)
 80076c0:	dfc00b15 	stw	ra,44(sp)
 80076c4:	df000a15 	stw	fp,40(sp)
 80076c8:	ddc00915 	stw	r23,36(sp)
 80076cc:	dd800815 	stw	r22,32(sp)
 80076d0:	dcc00515 	stw	r19,20(sp)
 80076d4:	dc800415 	stw	r18,16(sp)
 80076d8:	dc400315 	stw	r17,12(sp)
 80076dc:	1880020c 	andi	r2,r3,8
 80076e0:	2821883a 	mov	r16,r5
 80076e4:	202b883a 	mov	r21,r4
 80076e8:	3029883a 	mov	r20,r6
 80076ec:	10002726 	beq	r2,zero,800778c <__sfvwrite_r+0xe8>
 80076f0:	28800417 	ldw	r2,16(r5)
 80076f4:	10002526 	beq	r2,zero,800778c <__sfvwrite_r+0xe8>
 80076f8:	1880008c 	andi	r2,r3,2
 80076fc:	a4400017 	ldw	r17,0(r20)
 8007700:	10002a26 	beq	r2,zero,80077ac <__sfvwrite_r+0x108>
 8007704:	05a00034 	movhi	r22,32768
 8007708:	0027883a 	mov	r19,zero
 800770c:	0025883a 	mov	r18,zero
 8007710:	b5bf0004 	addi	r22,r22,-1024
 8007714:	980d883a 	mov	r6,r19
 8007718:	a809883a 	mov	r4,r21
 800771c:	90004626 	beq	r18,zero,8007838 <__sfvwrite_r+0x194>
 8007720:	900f883a 	mov	r7,r18
 8007724:	b480022e 	bgeu	r22,r18,8007730 <__sfvwrite_r+0x8c>
 8007728:	01e00034 	movhi	r7,32768
 800772c:	39ff0004 	addi	r7,r7,-1024
 8007730:	80800917 	ldw	r2,36(r16)
 8007734:	81400717 	ldw	r5,28(r16)
 8007738:	103ee83a 	callr	r2
 800773c:	00805a0e 	bge	zero,r2,80078a8 <__sfvwrite_r+0x204>
 8007740:	a0c00217 	ldw	r3,8(r20)
 8007744:	98a7883a 	add	r19,r19,r2
 8007748:	90a5c83a 	sub	r18,r18,r2
 800774c:	1885c83a 	sub	r2,r3,r2
 8007750:	a0800215 	stw	r2,8(r20)
 8007754:	103fef1e 	bne	r2,zero,8007714 <__alt_data_end+0xfc007714>
 8007758:	0005883a 	mov	r2,zero
 800775c:	dfc00b17 	ldw	ra,44(sp)
 8007760:	df000a17 	ldw	fp,40(sp)
 8007764:	ddc00917 	ldw	r23,36(sp)
 8007768:	dd800817 	ldw	r22,32(sp)
 800776c:	dd400717 	ldw	r21,28(sp)
 8007770:	dd000617 	ldw	r20,24(sp)
 8007774:	dcc00517 	ldw	r19,20(sp)
 8007778:	dc800417 	ldw	r18,16(sp)
 800777c:	dc400317 	ldw	r17,12(sp)
 8007780:	dc000217 	ldw	r16,8(sp)
 8007784:	dec00c04 	addi	sp,sp,48
 8007788:	f800283a 	ret
 800778c:	800b883a 	mov	r5,r16
 8007790:	a809883a 	mov	r4,r21
 8007794:	80052140 	call	8005214 <__swsetup_r>
 8007798:	1000ee1e 	bne	r2,zero,8007b54 <__sfvwrite_r+0x4b0>
 800779c:	80c0030b 	ldhu	r3,12(r16)
 80077a0:	a4400017 	ldw	r17,0(r20)
 80077a4:	1880008c 	andi	r2,r3,2
 80077a8:	103fd61e 	bne	r2,zero,8007704 <__alt_data_end+0xfc007704>
 80077ac:	1880004c 	andi	r2,r3,1
 80077b0:	1000421e 	bne	r2,zero,80078bc <__sfvwrite_r+0x218>
 80077b4:	0039883a 	mov	fp,zero
 80077b8:	0025883a 	mov	r18,zero
 80077bc:	90001a26 	beq	r18,zero,8007828 <__sfvwrite_r+0x184>
 80077c0:	1880800c 	andi	r2,r3,512
 80077c4:	84c00217 	ldw	r19,8(r16)
 80077c8:	10002126 	beq	r2,zero,8007850 <__sfvwrite_r+0x1ac>
 80077cc:	982f883a 	mov	r23,r19
 80077d0:	94c09636 	bltu	r18,r19,8007a2c <__sfvwrite_r+0x388>
 80077d4:	1881200c 	andi	r2,r3,1152
 80077d8:	1000a11e 	bne	r2,zero,8007a60 <__sfvwrite_r+0x3bc>
 80077dc:	81000017 	ldw	r4,0(r16)
 80077e0:	b80d883a 	mov	r6,r23
 80077e4:	e00b883a 	mov	r5,fp
 80077e8:	800887c0 	call	800887c <memmove>
 80077ec:	80c00217 	ldw	r3,8(r16)
 80077f0:	81000017 	ldw	r4,0(r16)
 80077f4:	9005883a 	mov	r2,r18
 80077f8:	1ce7c83a 	sub	r19,r3,r19
 80077fc:	25cf883a 	add	r7,r4,r23
 8007800:	84c00215 	stw	r19,8(r16)
 8007804:	81c00015 	stw	r7,0(r16)
 8007808:	a0c00217 	ldw	r3,8(r20)
 800780c:	e0b9883a 	add	fp,fp,r2
 8007810:	90a5c83a 	sub	r18,r18,r2
 8007814:	18a7c83a 	sub	r19,r3,r2
 8007818:	a4c00215 	stw	r19,8(r20)
 800781c:	983fce26 	beq	r19,zero,8007758 <__alt_data_end+0xfc007758>
 8007820:	80c0030b 	ldhu	r3,12(r16)
 8007824:	903fe61e 	bne	r18,zero,80077c0 <__alt_data_end+0xfc0077c0>
 8007828:	8f000017 	ldw	fp,0(r17)
 800782c:	8c800117 	ldw	r18,4(r17)
 8007830:	8c400204 	addi	r17,r17,8
 8007834:	003fe106 	br	80077bc <__alt_data_end+0xfc0077bc>
 8007838:	8cc00017 	ldw	r19,0(r17)
 800783c:	8c800117 	ldw	r18,4(r17)
 8007840:	8c400204 	addi	r17,r17,8
 8007844:	003fb306 	br	8007714 <__alt_data_end+0xfc007714>
 8007848:	0005883a 	mov	r2,zero
 800784c:	f800283a 	ret
 8007850:	81000017 	ldw	r4,0(r16)
 8007854:	80800417 	ldw	r2,16(r16)
 8007858:	11005a36 	bltu	r2,r4,80079c4 <__sfvwrite_r+0x320>
 800785c:	85c00517 	ldw	r23,20(r16)
 8007860:	95c05836 	bltu	r18,r23,80079c4 <__sfvwrite_r+0x320>
 8007864:	00a00034 	movhi	r2,32768
 8007868:	10bfffc4 	addi	r2,r2,-1
 800786c:	9009883a 	mov	r4,r18
 8007870:	1480012e 	bgeu	r2,r18,8007878 <__sfvwrite_r+0x1d4>
 8007874:	1009883a 	mov	r4,r2
 8007878:	b80b883a 	mov	r5,r23
 800787c:	80029440 	call	8002944 <__divsi3>
 8007880:	b80b883a 	mov	r5,r23
 8007884:	1009883a 	mov	r4,r2
 8007888:	8002af80 	call	8002af8 <__mulsi3>
 800788c:	81400717 	ldw	r5,28(r16)
 8007890:	80c00917 	ldw	r3,36(r16)
 8007894:	100f883a 	mov	r7,r2
 8007898:	e00d883a 	mov	r6,fp
 800789c:	a809883a 	mov	r4,r21
 80078a0:	183ee83a 	callr	r3
 80078a4:	00bfd816 	blt	zero,r2,8007808 <__alt_data_end+0xfc007808>
 80078a8:	8080030b 	ldhu	r2,12(r16)
 80078ac:	10801014 	ori	r2,r2,64
 80078b0:	8080030d 	sth	r2,12(r16)
 80078b4:	00bfffc4 	movi	r2,-1
 80078b8:	003fa806 	br	800775c <__alt_data_end+0xfc00775c>
 80078bc:	0027883a 	mov	r19,zero
 80078c0:	0011883a 	mov	r8,zero
 80078c4:	0039883a 	mov	fp,zero
 80078c8:	0025883a 	mov	r18,zero
 80078cc:	90001f26 	beq	r18,zero,800794c <__sfvwrite_r+0x2a8>
 80078d0:	40005a26 	beq	r8,zero,8007a3c <__sfvwrite_r+0x398>
 80078d4:	982d883a 	mov	r22,r19
 80078d8:	94c0012e 	bgeu	r18,r19,80078e0 <__sfvwrite_r+0x23c>
 80078dc:	902d883a 	mov	r22,r18
 80078e0:	81000017 	ldw	r4,0(r16)
 80078e4:	80800417 	ldw	r2,16(r16)
 80078e8:	b02f883a 	mov	r23,r22
 80078ec:	81c00517 	ldw	r7,20(r16)
 80078f0:	1100032e 	bgeu	r2,r4,8007900 <__sfvwrite_r+0x25c>
 80078f4:	80c00217 	ldw	r3,8(r16)
 80078f8:	38c7883a 	add	r3,r7,r3
 80078fc:	1d801816 	blt	r3,r22,8007960 <__sfvwrite_r+0x2bc>
 8007900:	b1c03e16 	blt	r22,r7,80079fc <__sfvwrite_r+0x358>
 8007904:	80800917 	ldw	r2,36(r16)
 8007908:	81400717 	ldw	r5,28(r16)
 800790c:	e00d883a 	mov	r6,fp
 8007910:	da000115 	stw	r8,4(sp)
 8007914:	a809883a 	mov	r4,r21
 8007918:	103ee83a 	callr	r2
 800791c:	102f883a 	mov	r23,r2
 8007920:	da000117 	ldw	r8,4(sp)
 8007924:	00bfe00e 	bge	zero,r2,80078a8 <__alt_data_end+0xfc0078a8>
 8007928:	9de7c83a 	sub	r19,r19,r23
 800792c:	98001f26 	beq	r19,zero,80079ac <__sfvwrite_r+0x308>
 8007930:	a0800217 	ldw	r2,8(r20)
 8007934:	e5f9883a 	add	fp,fp,r23
 8007938:	95e5c83a 	sub	r18,r18,r23
 800793c:	15efc83a 	sub	r23,r2,r23
 8007940:	a5c00215 	stw	r23,8(r20)
 8007944:	b83f8426 	beq	r23,zero,8007758 <__alt_data_end+0xfc007758>
 8007948:	903fe11e 	bne	r18,zero,80078d0 <__alt_data_end+0xfc0078d0>
 800794c:	8f000017 	ldw	fp,0(r17)
 8007950:	8c800117 	ldw	r18,4(r17)
 8007954:	0011883a 	mov	r8,zero
 8007958:	8c400204 	addi	r17,r17,8
 800795c:	003fdb06 	br	80078cc <__alt_data_end+0xfc0078cc>
 8007960:	180d883a 	mov	r6,r3
 8007964:	e00b883a 	mov	r5,fp
 8007968:	da000115 	stw	r8,4(sp)
 800796c:	d8c00015 	stw	r3,0(sp)
 8007970:	800887c0 	call	800887c <memmove>
 8007974:	d8c00017 	ldw	r3,0(sp)
 8007978:	80800017 	ldw	r2,0(r16)
 800797c:	800b883a 	mov	r5,r16
 8007980:	a809883a 	mov	r4,r21
 8007984:	10c5883a 	add	r2,r2,r3
 8007988:	80800015 	stw	r2,0(r16)
 800798c:	d8c00015 	stw	r3,0(sp)
 8007990:	8006e340 	call	8006e34 <_fflush_r>
 8007994:	d8c00017 	ldw	r3,0(sp)
 8007998:	da000117 	ldw	r8,4(sp)
 800799c:	103fc21e 	bne	r2,zero,80078a8 <__alt_data_end+0xfc0078a8>
 80079a0:	182f883a 	mov	r23,r3
 80079a4:	9de7c83a 	sub	r19,r19,r23
 80079a8:	983fe11e 	bne	r19,zero,8007930 <__alt_data_end+0xfc007930>
 80079ac:	800b883a 	mov	r5,r16
 80079b0:	a809883a 	mov	r4,r21
 80079b4:	8006e340 	call	8006e34 <_fflush_r>
 80079b8:	103fbb1e 	bne	r2,zero,80078a8 <__alt_data_end+0xfc0078a8>
 80079bc:	0011883a 	mov	r8,zero
 80079c0:	003fdb06 	br	8007930 <__alt_data_end+0xfc007930>
 80079c4:	94c0012e 	bgeu	r18,r19,80079cc <__sfvwrite_r+0x328>
 80079c8:	9027883a 	mov	r19,r18
 80079cc:	980d883a 	mov	r6,r19
 80079d0:	e00b883a 	mov	r5,fp
 80079d4:	800887c0 	call	800887c <memmove>
 80079d8:	80800217 	ldw	r2,8(r16)
 80079dc:	80c00017 	ldw	r3,0(r16)
 80079e0:	14c5c83a 	sub	r2,r2,r19
 80079e4:	1cc7883a 	add	r3,r3,r19
 80079e8:	80800215 	stw	r2,8(r16)
 80079ec:	80c00015 	stw	r3,0(r16)
 80079f0:	10004326 	beq	r2,zero,8007b00 <__sfvwrite_r+0x45c>
 80079f4:	9805883a 	mov	r2,r19
 80079f8:	003f8306 	br	8007808 <__alt_data_end+0xfc007808>
 80079fc:	b00d883a 	mov	r6,r22
 8007a00:	e00b883a 	mov	r5,fp
 8007a04:	da000115 	stw	r8,4(sp)
 8007a08:	800887c0 	call	800887c <memmove>
 8007a0c:	80800217 	ldw	r2,8(r16)
 8007a10:	80c00017 	ldw	r3,0(r16)
 8007a14:	da000117 	ldw	r8,4(sp)
 8007a18:	1585c83a 	sub	r2,r2,r22
 8007a1c:	1dad883a 	add	r22,r3,r22
 8007a20:	80800215 	stw	r2,8(r16)
 8007a24:	85800015 	stw	r22,0(r16)
 8007a28:	003fbf06 	br	8007928 <__alt_data_end+0xfc007928>
 8007a2c:	81000017 	ldw	r4,0(r16)
 8007a30:	9027883a 	mov	r19,r18
 8007a34:	902f883a 	mov	r23,r18
 8007a38:	003f6906 	br	80077e0 <__alt_data_end+0xfc0077e0>
 8007a3c:	900d883a 	mov	r6,r18
 8007a40:	01400284 	movi	r5,10
 8007a44:	e009883a 	mov	r4,fp
 8007a48:	80087980 	call	8008798 <memchr>
 8007a4c:	10003e26 	beq	r2,zero,8007b48 <__sfvwrite_r+0x4a4>
 8007a50:	10800044 	addi	r2,r2,1
 8007a54:	1727c83a 	sub	r19,r2,fp
 8007a58:	02000044 	movi	r8,1
 8007a5c:	003f9d06 	br	80078d4 <__alt_data_end+0xfc0078d4>
 8007a60:	80800517 	ldw	r2,20(r16)
 8007a64:	81400417 	ldw	r5,16(r16)
 8007a68:	81c00017 	ldw	r7,0(r16)
 8007a6c:	10a7883a 	add	r19,r2,r2
 8007a70:	9885883a 	add	r2,r19,r2
 8007a74:	1026d7fa 	srli	r19,r2,31
 8007a78:	396dc83a 	sub	r22,r7,r5
 8007a7c:	b1000044 	addi	r4,r22,1
 8007a80:	9885883a 	add	r2,r19,r2
 8007a84:	1027d07a 	srai	r19,r2,1
 8007a88:	2485883a 	add	r2,r4,r18
 8007a8c:	980d883a 	mov	r6,r19
 8007a90:	9880022e 	bgeu	r19,r2,8007a9c <__sfvwrite_r+0x3f8>
 8007a94:	1027883a 	mov	r19,r2
 8007a98:	100d883a 	mov	r6,r2
 8007a9c:	18c1000c 	andi	r3,r3,1024
 8007aa0:	18001c26 	beq	r3,zero,8007b14 <__sfvwrite_r+0x470>
 8007aa4:	300b883a 	mov	r5,r6
 8007aa8:	a809883a 	mov	r4,r21
 8007aac:	8007f8c0 	call	8007f8c <_malloc_r>
 8007ab0:	102f883a 	mov	r23,r2
 8007ab4:	10002926 	beq	r2,zero,8007b5c <__sfvwrite_r+0x4b8>
 8007ab8:	81400417 	ldw	r5,16(r16)
 8007abc:	b00d883a 	mov	r6,r22
 8007ac0:	1009883a 	mov	r4,r2
 8007ac4:	8002b200 	call	8002b20 <memcpy>
 8007ac8:	8080030b 	ldhu	r2,12(r16)
 8007acc:	00fedfc4 	movi	r3,-1153
 8007ad0:	10c4703a 	and	r2,r2,r3
 8007ad4:	10802014 	ori	r2,r2,128
 8007ad8:	8080030d 	sth	r2,12(r16)
 8007adc:	bd89883a 	add	r4,r23,r22
 8007ae0:	9d8fc83a 	sub	r7,r19,r22
 8007ae4:	85c00415 	stw	r23,16(r16)
 8007ae8:	84c00515 	stw	r19,20(r16)
 8007aec:	81000015 	stw	r4,0(r16)
 8007af0:	9027883a 	mov	r19,r18
 8007af4:	81c00215 	stw	r7,8(r16)
 8007af8:	902f883a 	mov	r23,r18
 8007afc:	003f3806 	br	80077e0 <__alt_data_end+0xfc0077e0>
 8007b00:	800b883a 	mov	r5,r16
 8007b04:	a809883a 	mov	r4,r21
 8007b08:	8006e340 	call	8006e34 <_fflush_r>
 8007b0c:	103fb926 	beq	r2,zero,80079f4 <__alt_data_end+0xfc0079f4>
 8007b10:	003f6506 	br	80078a8 <__alt_data_end+0xfc0078a8>
 8007b14:	a809883a 	mov	r4,r21
 8007b18:	8009d200 	call	8009d20 <_realloc_r>
 8007b1c:	102f883a 	mov	r23,r2
 8007b20:	103fee1e 	bne	r2,zero,8007adc <__alt_data_end+0xfc007adc>
 8007b24:	81400417 	ldw	r5,16(r16)
 8007b28:	a809883a 	mov	r4,r21
 8007b2c:	80073940 	call	8007394 <_free_r>
 8007b30:	8080030b 	ldhu	r2,12(r16)
 8007b34:	00ffdfc4 	movi	r3,-129
 8007b38:	1884703a 	and	r2,r3,r2
 8007b3c:	00c00304 	movi	r3,12
 8007b40:	a8c00015 	stw	r3,0(r21)
 8007b44:	003f5906 	br	80078ac <__alt_data_end+0xfc0078ac>
 8007b48:	94c00044 	addi	r19,r18,1
 8007b4c:	02000044 	movi	r8,1
 8007b50:	003f6006 	br	80078d4 <__alt_data_end+0xfc0078d4>
 8007b54:	00bfffc4 	movi	r2,-1
 8007b58:	003f0006 	br	800775c <__alt_data_end+0xfc00775c>
 8007b5c:	00800304 	movi	r2,12
 8007b60:	a8800015 	stw	r2,0(r21)
 8007b64:	8080030b 	ldhu	r2,12(r16)
 8007b68:	003f5006 	br	80078ac <__alt_data_end+0xfc0078ac>

08007b6c <_fwalk>:
 8007b6c:	defff704 	addi	sp,sp,-36
 8007b70:	dd000415 	stw	r20,16(sp)
 8007b74:	dfc00815 	stw	ra,32(sp)
 8007b78:	ddc00715 	stw	r23,28(sp)
 8007b7c:	dd800615 	stw	r22,24(sp)
 8007b80:	dd400515 	stw	r21,20(sp)
 8007b84:	dcc00315 	stw	r19,12(sp)
 8007b88:	dc800215 	stw	r18,8(sp)
 8007b8c:	dc400115 	stw	r17,4(sp)
 8007b90:	dc000015 	stw	r16,0(sp)
 8007b94:	2500b804 	addi	r20,r4,736
 8007b98:	a0002326 	beq	r20,zero,8007c28 <_fwalk+0xbc>
 8007b9c:	282b883a 	mov	r21,r5
 8007ba0:	002f883a 	mov	r23,zero
 8007ba4:	05800044 	movi	r22,1
 8007ba8:	04ffffc4 	movi	r19,-1
 8007bac:	a4400117 	ldw	r17,4(r20)
 8007bb0:	a4800217 	ldw	r18,8(r20)
 8007bb4:	8c7fffc4 	addi	r17,r17,-1
 8007bb8:	88000d16 	blt	r17,zero,8007bf0 <_fwalk+0x84>
 8007bbc:	94000304 	addi	r16,r18,12
 8007bc0:	94800384 	addi	r18,r18,14
 8007bc4:	8080000b 	ldhu	r2,0(r16)
 8007bc8:	8c7fffc4 	addi	r17,r17,-1
 8007bcc:	813ffd04 	addi	r4,r16,-12
 8007bd0:	b080042e 	bgeu	r22,r2,8007be4 <_fwalk+0x78>
 8007bd4:	9080000f 	ldh	r2,0(r18)
 8007bd8:	14c00226 	beq	r2,r19,8007be4 <_fwalk+0x78>
 8007bdc:	a83ee83a 	callr	r21
 8007be0:	b8aeb03a 	or	r23,r23,r2
 8007be4:	84001a04 	addi	r16,r16,104
 8007be8:	94801a04 	addi	r18,r18,104
 8007bec:	8cfff51e 	bne	r17,r19,8007bc4 <__alt_data_end+0xfc007bc4>
 8007bf0:	a5000017 	ldw	r20,0(r20)
 8007bf4:	a03fed1e 	bne	r20,zero,8007bac <__alt_data_end+0xfc007bac>
 8007bf8:	b805883a 	mov	r2,r23
 8007bfc:	dfc00817 	ldw	ra,32(sp)
 8007c00:	ddc00717 	ldw	r23,28(sp)
 8007c04:	dd800617 	ldw	r22,24(sp)
 8007c08:	dd400517 	ldw	r21,20(sp)
 8007c0c:	dd000417 	ldw	r20,16(sp)
 8007c10:	dcc00317 	ldw	r19,12(sp)
 8007c14:	dc800217 	ldw	r18,8(sp)
 8007c18:	dc400117 	ldw	r17,4(sp)
 8007c1c:	dc000017 	ldw	r16,0(sp)
 8007c20:	dec00904 	addi	sp,sp,36
 8007c24:	f800283a 	ret
 8007c28:	002f883a 	mov	r23,zero
 8007c2c:	003ff206 	br	8007bf8 <__alt_data_end+0xfc007bf8>

08007c30 <_fwalk_reent>:
 8007c30:	defff704 	addi	sp,sp,-36
 8007c34:	dd000415 	stw	r20,16(sp)
 8007c38:	dfc00815 	stw	ra,32(sp)
 8007c3c:	ddc00715 	stw	r23,28(sp)
 8007c40:	dd800615 	stw	r22,24(sp)
 8007c44:	dd400515 	stw	r21,20(sp)
 8007c48:	dcc00315 	stw	r19,12(sp)
 8007c4c:	dc800215 	stw	r18,8(sp)
 8007c50:	dc400115 	stw	r17,4(sp)
 8007c54:	dc000015 	stw	r16,0(sp)
 8007c58:	2500b804 	addi	r20,r4,736
 8007c5c:	a0002326 	beq	r20,zero,8007cec <_fwalk_reent+0xbc>
 8007c60:	282b883a 	mov	r21,r5
 8007c64:	2027883a 	mov	r19,r4
 8007c68:	002f883a 	mov	r23,zero
 8007c6c:	05800044 	movi	r22,1
 8007c70:	04bfffc4 	movi	r18,-1
 8007c74:	a4400117 	ldw	r17,4(r20)
 8007c78:	a4000217 	ldw	r16,8(r20)
 8007c7c:	8c7fffc4 	addi	r17,r17,-1
 8007c80:	88000c16 	blt	r17,zero,8007cb4 <_fwalk_reent+0x84>
 8007c84:	84000304 	addi	r16,r16,12
 8007c88:	8080000b 	ldhu	r2,0(r16)
 8007c8c:	8c7fffc4 	addi	r17,r17,-1
 8007c90:	817ffd04 	addi	r5,r16,-12
 8007c94:	b080052e 	bgeu	r22,r2,8007cac <_fwalk_reent+0x7c>
 8007c98:	8080008f 	ldh	r2,2(r16)
 8007c9c:	9809883a 	mov	r4,r19
 8007ca0:	14800226 	beq	r2,r18,8007cac <_fwalk_reent+0x7c>
 8007ca4:	a83ee83a 	callr	r21
 8007ca8:	b8aeb03a 	or	r23,r23,r2
 8007cac:	84001a04 	addi	r16,r16,104
 8007cb0:	8cbff51e 	bne	r17,r18,8007c88 <__alt_data_end+0xfc007c88>
 8007cb4:	a5000017 	ldw	r20,0(r20)
 8007cb8:	a03fee1e 	bne	r20,zero,8007c74 <__alt_data_end+0xfc007c74>
 8007cbc:	b805883a 	mov	r2,r23
 8007cc0:	dfc00817 	ldw	ra,32(sp)
 8007cc4:	ddc00717 	ldw	r23,28(sp)
 8007cc8:	dd800617 	ldw	r22,24(sp)
 8007ccc:	dd400517 	ldw	r21,20(sp)
 8007cd0:	dd000417 	ldw	r20,16(sp)
 8007cd4:	dcc00317 	ldw	r19,12(sp)
 8007cd8:	dc800217 	ldw	r18,8(sp)
 8007cdc:	dc400117 	ldw	r17,4(sp)
 8007ce0:	dc000017 	ldw	r16,0(sp)
 8007ce4:	dec00904 	addi	sp,sp,36
 8007ce8:	f800283a 	ret
 8007cec:	002f883a 	mov	r23,zero
 8007cf0:	003ff206 	br	8007cbc <__alt_data_end+0xfc007cbc>

08007cf4 <_setlocale_r>:
 8007cf4:	30001b26 	beq	r6,zero,8007d64 <_setlocale_r+0x70>
 8007cf8:	01420074 	movhi	r5,2049
 8007cfc:	defffe04 	addi	sp,sp,-8
 8007d00:	29503604 	addi	r5,r5,16600
 8007d04:	3009883a 	mov	r4,r6
 8007d08:	dc000015 	stw	r16,0(sp)
 8007d0c:	dfc00115 	stw	ra,4(sp)
 8007d10:	3021883a 	mov	r16,r6
 8007d14:	800a4880 	call	800a488 <strcmp>
 8007d18:	1000061e 	bne	r2,zero,8007d34 <_setlocale_r+0x40>
 8007d1c:	00820074 	movhi	r2,2049
 8007d20:	10903504 	addi	r2,r2,16596
 8007d24:	dfc00117 	ldw	ra,4(sp)
 8007d28:	dc000017 	ldw	r16,0(sp)
 8007d2c:	dec00204 	addi	sp,sp,8
 8007d30:	f800283a 	ret
 8007d34:	01420074 	movhi	r5,2049
 8007d38:	29503504 	addi	r5,r5,16596
 8007d3c:	8009883a 	mov	r4,r16
 8007d40:	800a4880 	call	800a488 <strcmp>
 8007d44:	103ff526 	beq	r2,zero,8007d1c <__alt_data_end+0xfc007d1c>
 8007d48:	01420074 	movhi	r5,2049
 8007d4c:	29502004 	addi	r5,r5,16512
 8007d50:	8009883a 	mov	r4,r16
 8007d54:	800a4880 	call	800a488 <strcmp>
 8007d58:	103ff026 	beq	r2,zero,8007d1c <__alt_data_end+0xfc007d1c>
 8007d5c:	0005883a 	mov	r2,zero
 8007d60:	003ff006 	br	8007d24 <__alt_data_end+0xfc007d24>
 8007d64:	00820074 	movhi	r2,2049
 8007d68:	10903504 	addi	r2,r2,16596
 8007d6c:	f800283a 	ret

08007d70 <__locale_charset>:
 8007d70:	00820074 	movhi	r2,2049
 8007d74:	1091f404 	addi	r2,r2,18384
 8007d78:	f800283a 	ret

08007d7c <__locale_mb_cur_max>:
 8007d7c:	00820074 	movhi	r2,2049
 8007d80:	10979604 	addi	r2,r2,24152
 8007d84:	10800017 	ldw	r2,0(r2)
 8007d88:	f800283a 	ret

08007d8c <__locale_msgcharset>:
 8007d8c:	00820074 	movhi	r2,2049
 8007d90:	1091ec04 	addi	r2,r2,18352
 8007d94:	f800283a 	ret

08007d98 <__locale_cjk_lang>:
 8007d98:	0005883a 	mov	r2,zero
 8007d9c:	f800283a 	ret

08007da0 <_localeconv_r>:
 8007da0:	00820074 	movhi	r2,2049
 8007da4:	1091fc04 	addi	r2,r2,18416
 8007da8:	f800283a 	ret

08007dac <setlocale>:
 8007dac:	00820074 	movhi	r2,2049
 8007db0:	10979504 	addi	r2,r2,24148
 8007db4:	280d883a 	mov	r6,r5
 8007db8:	200b883a 	mov	r5,r4
 8007dbc:	11000017 	ldw	r4,0(r2)
 8007dc0:	8007cf41 	jmpi	8007cf4 <_setlocale_r>

08007dc4 <localeconv>:
 8007dc4:	00820074 	movhi	r2,2049
 8007dc8:	1091fc04 	addi	r2,r2,18416
 8007dcc:	f800283a 	ret

08007dd0 <__smakebuf_r>:
 8007dd0:	2880030b 	ldhu	r2,12(r5)
 8007dd4:	10c0008c 	andi	r3,r2,2
 8007dd8:	1800411e 	bne	r3,zero,8007ee0 <__smakebuf_r+0x110>
 8007ddc:	deffec04 	addi	sp,sp,-80
 8007de0:	dc000f15 	stw	r16,60(sp)
 8007de4:	2821883a 	mov	r16,r5
 8007de8:	2940038f 	ldh	r5,14(r5)
 8007dec:	dc401015 	stw	r17,64(sp)
 8007df0:	dfc01315 	stw	ra,76(sp)
 8007df4:	dcc01215 	stw	r19,72(sp)
 8007df8:	dc801115 	stw	r18,68(sp)
 8007dfc:	2023883a 	mov	r17,r4
 8007e00:	28001c16 	blt	r5,zero,8007e74 <__smakebuf_r+0xa4>
 8007e04:	d80d883a 	mov	r6,sp
 8007e08:	800c2500 	call	800c250 <_fstat_r>
 8007e0c:	10001816 	blt	r2,zero,8007e70 <__smakebuf_r+0xa0>
 8007e10:	d8800117 	ldw	r2,4(sp)
 8007e14:	00e00014 	movui	r3,32768
 8007e18:	10bc000c 	andi	r2,r2,61440
 8007e1c:	14c80020 	cmpeqi	r19,r2,8192
 8007e20:	10c03726 	beq	r2,r3,8007f00 <__smakebuf_r+0x130>
 8007e24:	80c0030b 	ldhu	r3,12(r16)
 8007e28:	18c20014 	ori	r3,r3,2048
 8007e2c:	80c0030d 	sth	r3,12(r16)
 8007e30:	00c80004 	movi	r3,8192
 8007e34:	10c0521e 	bne	r2,r3,8007f80 <__smakebuf_r+0x1b0>
 8007e38:	8140038f 	ldh	r5,14(r16)
 8007e3c:	8809883a 	mov	r4,r17
 8007e40:	800c2ac0 	call	800c2ac <_isatty_r>
 8007e44:	10004c26 	beq	r2,zero,8007f78 <__smakebuf_r+0x1a8>
 8007e48:	8080030b 	ldhu	r2,12(r16)
 8007e4c:	80c010c4 	addi	r3,r16,67
 8007e50:	80c00015 	stw	r3,0(r16)
 8007e54:	10800054 	ori	r2,r2,1
 8007e58:	8080030d 	sth	r2,12(r16)
 8007e5c:	00800044 	movi	r2,1
 8007e60:	80c00415 	stw	r3,16(r16)
 8007e64:	80800515 	stw	r2,20(r16)
 8007e68:	04810004 	movi	r18,1024
 8007e6c:	00000706 	br	8007e8c <__smakebuf_r+0xbc>
 8007e70:	8080030b 	ldhu	r2,12(r16)
 8007e74:	10c0200c 	andi	r3,r2,128
 8007e78:	18001f1e 	bne	r3,zero,8007ef8 <__smakebuf_r+0x128>
 8007e7c:	04810004 	movi	r18,1024
 8007e80:	10820014 	ori	r2,r2,2048
 8007e84:	8080030d 	sth	r2,12(r16)
 8007e88:	0027883a 	mov	r19,zero
 8007e8c:	900b883a 	mov	r5,r18
 8007e90:	8809883a 	mov	r4,r17
 8007e94:	8007f8c0 	call	8007f8c <_malloc_r>
 8007e98:	10002c26 	beq	r2,zero,8007f4c <__smakebuf_r+0x17c>
 8007e9c:	80c0030b 	ldhu	r3,12(r16)
 8007ea0:	01020034 	movhi	r4,2048
 8007ea4:	211bb204 	addi	r4,r4,28360
 8007ea8:	89000f15 	stw	r4,60(r17)
 8007eac:	18c02014 	ori	r3,r3,128
 8007eb0:	80c0030d 	sth	r3,12(r16)
 8007eb4:	80800015 	stw	r2,0(r16)
 8007eb8:	80800415 	stw	r2,16(r16)
 8007ebc:	84800515 	stw	r18,20(r16)
 8007ec0:	98001a1e 	bne	r19,zero,8007f2c <__smakebuf_r+0x15c>
 8007ec4:	dfc01317 	ldw	ra,76(sp)
 8007ec8:	dcc01217 	ldw	r19,72(sp)
 8007ecc:	dc801117 	ldw	r18,68(sp)
 8007ed0:	dc401017 	ldw	r17,64(sp)
 8007ed4:	dc000f17 	ldw	r16,60(sp)
 8007ed8:	dec01404 	addi	sp,sp,80
 8007edc:	f800283a 	ret
 8007ee0:	288010c4 	addi	r2,r5,67
 8007ee4:	28800015 	stw	r2,0(r5)
 8007ee8:	28800415 	stw	r2,16(r5)
 8007eec:	00800044 	movi	r2,1
 8007ef0:	28800515 	stw	r2,20(r5)
 8007ef4:	f800283a 	ret
 8007ef8:	04801004 	movi	r18,64
 8007efc:	003fe006 	br	8007e80 <__alt_data_end+0xfc007e80>
 8007f00:	81000a17 	ldw	r4,40(r16)
 8007f04:	00c20074 	movhi	r3,2049
 8007f08:	18e90904 	addi	r3,r3,-23516
 8007f0c:	20ffc51e 	bne	r4,r3,8007e24 <__alt_data_end+0xfc007e24>
 8007f10:	8080030b 	ldhu	r2,12(r16)
 8007f14:	04810004 	movi	r18,1024
 8007f18:	84801315 	stw	r18,76(r16)
 8007f1c:	1484b03a 	or	r2,r2,r18
 8007f20:	8080030d 	sth	r2,12(r16)
 8007f24:	0027883a 	mov	r19,zero
 8007f28:	003fd806 	br	8007e8c <__alt_data_end+0xfc007e8c>
 8007f2c:	8140038f 	ldh	r5,14(r16)
 8007f30:	8809883a 	mov	r4,r17
 8007f34:	800c2ac0 	call	800c2ac <_isatty_r>
 8007f38:	103fe226 	beq	r2,zero,8007ec4 <__alt_data_end+0xfc007ec4>
 8007f3c:	8080030b 	ldhu	r2,12(r16)
 8007f40:	10800054 	ori	r2,r2,1
 8007f44:	8080030d 	sth	r2,12(r16)
 8007f48:	003fde06 	br	8007ec4 <__alt_data_end+0xfc007ec4>
 8007f4c:	8080030b 	ldhu	r2,12(r16)
 8007f50:	10c0800c 	andi	r3,r2,512
 8007f54:	183fdb1e 	bne	r3,zero,8007ec4 <__alt_data_end+0xfc007ec4>
 8007f58:	10800094 	ori	r2,r2,2
 8007f5c:	80c010c4 	addi	r3,r16,67
 8007f60:	8080030d 	sth	r2,12(r16)
 8007f64:	00800044 	movi	r2,1
 8007f68:	80c00015 	stw	r3,0(r16)
 8007f6c:	80c00415 	stw	r3,16(r16)
 8007f70:	80800515 	stw	r2,20(r16)
 8007f74:	003fd306 	br	8007ec4 <__alt_data_end+0xfc007ec4>
 8007f78:	04810004 	movi	r18,1024
 8007f7c:	003fc306 	br	8007e8c <__alt_data_end+0xfc007e8c>
 8007f80:	0027883a 	mov	r19,zero
 8007f84:	04810004 	movi	r18,1024
 8007f88:	003fc006 	br	8007e8c <__alt_data_end+0xfc007e8c>

08007f8c <_malloc_r>:
 8007f8c:	defff504 	addi	sp,sp,-44
 8007f90:	dc800315 	stw	r18,12(sp)
 8007f94:	dfc00a15 	stw	ra,40(sp)
 8007f98:	df000915 	stw	fp,36(sp)
 8007f9c:	ddc00815 	stw	r23,32(sp)
 8007fa0:	dd800715 	stw	r22,28(sp)
 8007fa4:	dd400615 	stw	r21,24(sp)
 8007fa8:	dd000515 	stw	r20,20(sp)
 8007fac:	dcc00415 	stw	r19,16(sp)
 8007fb0:	dc400215 	stw	r17,8(sp)
 8007fb4:	dc000115 	stw	r16,4(sp)
 8007fb8:	288002c4 	addi	r2,r5,11
 8007fbc:	00c00584 	movi	r3,22
 8007fc0:	2025883a 	mov	r18,r4
 8007fc4:	18807f2e 	bgeu	r3,r2,80081c4 <_malloc_r+0x238>
 8007fc8:	047ffe04 	movi	r17,-8
 8007fcc:	1462703a 	and	r17,r2,r17
 8007fd0:	8800a316 	blt	r17,zero,8008260 <_malloc_r+0x2d4>
 8007fd4:	8940a236 	bltu	r17,r5,8008260 <_malloc_r+0x2d4>
 8007fd8:	800ffa80 	call	800ffa8 <__malloc_lock>
 8007fdc:	00807dc4 	movi	r2,503
 8007fe0:	1441e92e 	bgeu	r2,r17,8008788 <_malloc_r+0x7fc>
 8007fe4:	8804d27a 	srli	r2,r17,9
 8007fe8:	1000a126 	beq	r2,zero,8008270 <_malloc_r+0x2e4>
 8007fec:	00c00104 	movi	r3,4
 8007ff0:	18811e36 	bltu	r3,r2,800846c <_malloc_r+0x4e0>
 8007ff4:	8804d1ba 	srli	r2,r17,6
 8007ff8:	12000e44 	addi	r8,r2,57
 8007ffc:	11c00e04 	addi	r7,r2,56
 8008000:	4209883a 	add	r4,r8,r8
 8008004:	04c20074 	movhi	r19,2049
 8008008:	2109883a 	add	r4,r4,r4
 800800c:	9cd20a04 	addi	r19,r19,18472
 8008010:	2109883a 	add	r4,r4,r4
 8008014:	9909883a 	add	r4,r19,r4
 8008018:	24000117 	ldw	r16,4(r4)
 800801c:	213ffe04 	addi	r4,r4,-8
 8008020:	24009726 	beq	r4,r16,8008280 <_malloc_r+0x2f4>
 8008024:	80800117 	ldw	r2,4(r16)
 8008028:	01bfff04 	movi	r6,-4
 800802c:	014003c4 	movi	r5,15
 8008030:	1184703a 	and	r2,r2,r6
 8008034:	1447c83a 	sub	r3,r2,r17
 8008038:	28c00716 	blt	r5,r3,8008058 <_malloc_r+0xcc>
 800803c:	1800920e 	bge	r3,zero,8008288 <_malloc_r+0x2fc>
 8008040:	84000317 	ldw	r16,12(r16)
 8008044:	24008e26 	beq	r4,r16,8008280 <_malloc_r+0x2f4>
 8008048:	80800117 	ldw	r2,4(r16)
 800804c:	1184703a 	and	r2,r2,r6
 8008050:	1447c83a 	sub	r3,r2,r17
 8008054:	28fff90e 	bge	r5,r3,800803c <__alt_data_end+0xfc00803c>
 8008058:	3809883a 	mov	r4,r7
 800805c:	01820074 	movhi	r6,2049
 8008060:	9c000417 	ldw	r16,16(r19)
 8008064:	31920a04 	addi	r6,r6,18472
 8008068:	32000204 	addi	r8,r6,8
 800806c:	82013426 	beq	r16,r8,8008540 <_malloc_r+0x5b4>
 8008070:	80c00117 	ldw	r3,4(r16)
 8008074:	00bfff04 	movi	r2,-4
 8008078:	188e703a 	and	r7,r3,r2
 800807c:	3c45c83a 	sub	r2,r7,r17
 8008080:	00c003c4 	movi	r3,15
 8008084:	18811f16 	blt	r3,r2,8008504 <_malloc_r+0x578>
 8008088:	32000515 	stw	r8,20(r6)
 800808c:	32000415 	stw	r8,16(r6)
 8008090:	10007f0e 	bge	r2,zero,8008290 <_malloc_r+0x304>
 8008094:	00807fc4 	movi	r2,511
 8008098:	11c0fd36 	bltu	r2,r7,8008490 <_malloc_r+0x504>
 800809c:	3806d0fa 	srli	r3,r7,3
 80080a0:	01c00044 	movi	r7,1
 80080a4:	30800117 	ldw	r2,4(r6)
 80080a8:	19400044 	addi	r5,r3,1
 80080ac:	294b883a 	add	r5,r5,r5
 80080b0:	1807d0ba 	srai	r3,r3,2
 80080b4:	294b883a 	add	r5,r5,r5
 80080b8:	294b883a 	add	r5,r5,r5
 80080bc:	298b883a 	add	r5,r5,r6
 80080c0:	38c6983a 	sll	r3,r7,r3
 80080c4:	29c00017 	ldw	r7,0(r5)
 80080c8:	2a7ffe04 	addi	r9,r5,-8
 80080cc:	1886b03a 	or	r3,r3,r2
 80080d0:	82400315 	stw	r9,12(r16)
 80080d4:	81c00215 	stw	r7,8(r16)
 80080d8:	30c00115 	stw	r3,4(r6)
 80080dc:	2c000015 	stw	r16,0(r5)
 80080e0:	3c000315 	stw	r16,12(r7)
 80080e4:	2005d0ba 	srai	r2,r4,2
 80080e8:	01400044 	movi	r5,1
 80080ec:	288a983a 	sll	r5,r5,r2
 80080f0:	19406f36 	bltu	r3,r5,80082b0 <_malloc_r+0x324>
 80080f4:	28c4703a 	and	r2,r5,r3
 80080f8:	10000a1e 	bne	r2,zero,8008124 <_malloc_r+0x198>
 80080fc:	00bfff04 	movi	r2,-4
 8008100:	294b883a 	add	r5,r5,r5
 8008104:	2088703a 	and	r4,r4,r2
 8008108:	28c4703a 	and	r2,r5,r3
 800810c:	21000104 	addi	r4,r4,4
 8008110:	1000041e 	bne	r2,zero,8008124 <_malloc_r+0x198>
 8008114:	294b883a 	add	r5,r5,r5
 8008118:	28c4703a 	and	r2,r5,r3
 800811c:	21000104 	addi	r4,r4,4
 8008120:	103ffc26 	beq	r2,zero,8008114 <__alt_data_end+0xfc008114>
 8008124:	02bfff04 	movi	r10,-4
 8008128:	024003c4 	movi	r9,15
 800812c:	21800044 	addi	r6,r4,1
 8008130:	318d883a 	add	r6,r6,r6
 8008134:	318d883a 	add	r6,r6,r6
 8008138:	318d883a 	add	r6,r6,r6
 800813c:	998d883a 	add	r6,r19,r6
 8008140:	333ffe04 	addi	r12,r6,-8
 8008144:	2017883a 	mov	r11,r4
 8008148:	31800104 	addi	r6,r6,4
 800814c:	34000017 	ldw	r16,0(r6)
 8008150:	31fffd04 	addi	r7,r6,-12
 8008154:	81c0041e 	bne	r16,r7,8008168 <_malloc_r+0x1dc>
 8008158:	0000fb06 	br	8008548 <_malloc_r+0x5bc>
 800815c:	1801030e 	bge	r3,zero,800856c <_malloc_r+0x5e0>
 8008160:	84000317 	ldw	r16,12(r16)
 8008164:	81c0f826 	beq	r16,r7,8008548 <_malloc_r+0x5bc>
 8008168:	80800117 	ldw	r2,4(r16)
 800816c:	1284703a 	and	r2,r2,r10
 8008170:	1447c83a 	sub	r3,r2,r17
 8008174:	48fff90e 	bge	r9,r3,800815c <__alt_data_end+0xfc00815c>
 8008178:	80800317 	ldw	r2,12(r16)
 800817c:	81000217 	ldw	r4,8(r16)
 8008180:	89400054 	ori	r5,r17,1
 8008184:	81400115 	stw	r5,4(r16)
 8008188:	20800315 	stw	r2,12(r4)
 800818c:	11000215 	stw	r4,8(r2)
 8008190:	8463883a 	add	r17,r16,r17
 8008194:	9c400515 	stw	r17,20(r19)
 8008198:	9c400415 	stw	r17,16(r19)
 800819c:	18800054 	ori	r2,r3,1
 80081a0:	88800115 	stw	r2,4(r17)
 80081a4:	8a000315 	stw	r8,12(r17)
 80081a8:	8a000215 	stw	r8,8(r17)
 80081ac:	88e3883a 	add	r17,r17,r3
 80081b0:	88c00015 	stw	r3,0(r17)
 80081b4:	9009883a 	mov	r4,r18
 80081b8:	800ffcc0 	call	800ffcc <__malloc_unlock>
 80081bc:	80800204 	addi	r2,r16,8
 80081c0:	00001b06 	br	8008230 <_malloc_r+0x2a4>
 80081c4:	04400404 	movi	r17,16
 80081c8:	89402536 	bltu	r17,r5,8008260 <_malloc_r+0x2d4>
 80081cc:	800ffa80 	call	800ffa8 <__malloc_lock>
 80081d0:	00800184 	movi	r2,6
 80081d4:	01000084 	movi	r4,2
 80081d8:	04c20074 	movhi	r19,2049
 80081dc:	1085883a 	add	r2,r2,r2
 80081e0:	9cd20a04 	addi	r19,r19,18472
 80081e4:	1085883a 	add	r2,r2,r2
 80081e8:	9885883a 	add	r2,r19,r2
 80081ec:	14000117 	ldw	r16,4(r2)
 80081f0:	10fffe04 	addi	r3,r2,-8
 80081f4:	80c0d926 	beq	r16,r3,800855c <_malloc_r+0x5d0>
 80081f8:	80c00117 	ldw	r3,4(r16)
 80081fc:	81000317 	ldw	r4,12(r16)
 8008200:	00bfff04 	movi	r2,-4
 8008204:	1884703a 	and	r2,r3,r2
 8008208:	81400217 	ldw	r5,8(r16)
 800820c:	8085883a 	add	r2,r16,r2
 8008210:	10c00117 	ldw	r3,4(r2)
 8008214:	29000315 	stw	r4,12(r5)
 8008218:	21400215 	stw	r5,8(r4)
 800821c:	18c00054 	ori	r3,r3,1
 8008220:	10c00115 	stw	r3,4(r2)
 8008224:	9009883a 	mov	r4,r18
 8008228:	800ffcc0 	call	800ffcc <__malloc_unlock>
 800822c:	80800204 	addi	r2,r16,8
 8008230:	dfc00a17 	ldw	ra,40(sp)
 8008234:	df000917 	ldw	fp,36(sp)
 8008238:	ddc00817 	ldw	r23,32(sp)
 800823c:	dd800717 	ldw	r22,28(sp)
 8008240:	dd400617 	ldw	r21,24(sp)
 8008244:	dd000517 	ldw	r20,20(sp)
 8008248:	dcc00417 	ldw	r19,16(sp)
 800824c:	dc800317 	ldw	r18,12(sp)
 8008250:	dc400217 	ldw	r17,8(sp)
 8008254:	dc000117 	ldw	r16,4(sp)
 8008258:	dec00b04 	addi	sp,sp,44
 800825c:	f800283a 	ret
 8008260:	00800304 	movi	r2,12
 8008264:	90800015 	stw	r2,0(r18)
 8008268:	0005883a 	mov	r2,zero
 800826c:	003ff006 	br	8008230 <__alt_data_end+0xfc008230>
 8008270:	01002004 	movi	r4,128
 8008274:	02001004 	movi	r8,64
 8008278:	01c00fc4 	movi	r7,63
 800827c:	003f6106 	br	8008004 <__alt_data_end+0xfc008004>
 8008280:	4009883a 	mov	r4,r8
 8008284:	003f7506 	br	800805c <__alt_data_end+0xfc00805c>
 8008288:	81000317 	ldw	r4,12(r16)
 800828c:	003fde06 	br	8008208 <__alt_data_end+0xfc008208>
 8008290:	81c5883a 	add	r2,r16,r7
 8008294:	11400117 	ldw	r5,4(r2)
 8008298:	9009883a 	mov	r4,r18
 800829c:	29400054 	ori	r5,r5,1
 80082a0:	11400115 	stw	r5,4(r2)
 80082a4:	800ffcc0 	call	800ffcc <__malloc_unlock>
 80082a8:	80800204 	addi	r2,r16,8
 80082ac:	003fe006 	br	8008230 <__alt_data_end+0xfc008230>
 80082b0:	9c000217 	ldw	r16,8(r19)
 80082b4:	00bfff04 	movi	r2,-4
 80082b8:	85800117 	ldw	r22,4(r16)
 80082bc:	b0ac703a 	and	r22,r22,r2
 80082c0:	b4400336 	bltu	r22,r17,80082d0 <_malloc_r+0x344>
 80082c4:	b445c83a 	sub	r2,r22,r17
 80082c8:	00c003c4 	movi	r3,15
 80082cc:	18805d16 	blt	r3,r2,8008444 <_malloc_r+0x4b8>
 80082d0:	05c20074 	movhi	r23,2049
 80082d4:	00820074 	movhi	r2,2049
 80082d8:	109e7c04 	addi	r2,r2,31216
 80082dc:	bdd79704 	addi	r23,r23,24156
 80082e0:	15400017 	ldw	r21,0(r2)
 80082e4:	b8c00017 	ldw	r3,0(r23)
 80082e8:	00bfffc4 	movi	r2,-1
 80082ec:	858d883a 	add	r6,r16,r22
 80082f0:	8d6b883a 	add	r21,r17,r21
 80082f4:	1880ea26 	beq	r3,r2,80086a0 <_malloc_r+0x714>
 80082f8:	ad4403c4 	addi	r21,r21,4111
 80082fc:	00bc0004 	movi	r2,-4096
 8008300:	a8aa703a 	and	r21,r21,r2
 8008304:	a80b883a 	mov	r5,r21
 8008308:	9009883a 	mov	r4,r18
 800830c:	d9800015 	stw	r6,0(sp)
 8008310:	800a2f80 	call	800a2f8 <_sbrk_r>
 8008314:	1029883a 	mov	r20,r2
 8008318:	00bfffc4 	movi	r2,-1
 800831c:	d9800017 	ldw	r6,0(sp)
 8008320:	a080e826 	beq	r20,r2,80086c4 <_malloc_r+0x738>
 8008324:	a180a636 	bltu	r20,r6,80085c0 <_malloc_r+0x634>
 8008328:	07020074 	movhi	fp,2049
 800832c:	e71e8f04 	addi	fp,fp,31292
 8008330:	e0800017 	ldw	r2,0(fp)
 8008334:	a887883a 	add	r3,r21,r2
 8008338:	e0c00015 	stw	r3,0(fp)
 800833c:	3500e626 	beq	r6,r20,80086d8 <_malloc_r+0x74c>
 8008340:	b9000017 	ldw	r4,0(r23)
 8008344:	00bfffc4 	movi	r2,-1
 8008348:	2080ee26 	beq	r4,r2,8008704 <_malloc_r+0x778>
 800834c:	a185c83a 	sub	r2,r20,r6
 8008350:	10c5883a 	add	r2,r2,r3
 8008354:	e0800015 	stw	r2,0(fp)
 8008358:	a0c001cc 	andi	r3,r20,7
 800835c:	1800bc26 	beq	r3,zero,8008650 <_malloc_r+0x6c4>
 8008360:	a0e9c83a 	sub	r20,r20,r3
 8008364:	00840204 	movi	r2,4104
 8008368:	a5000204 	addi	r20,r20,8
 800836c:	10c7c83a 	sub	r3,r2,r3
 8008370:	a545883a 	add	r2,r20,r21
 8008374:	1083ffcc 	andi	r2,r2,4095
 8008378:	18abc83a 	sub	r21,r3,r2
 800837c:	a80b883a 	mov	r5,r21
 8008380:	9009883a 	mov	r4,r18
 8008384:	800a2f80 	call	800a2f8 <_sbrk_r>
 8008388:	00ffffc4 	movi	r3,-1
 800838c:	10c0e126 	beq	r2,r3,8008714 <_malloc_r+0x788>
 8008390:	1505c83a 	sub	r2,r2,r20
 8008394:	1545883a 	add	r2,r2,r21
 8008398:	10800054 	ori	r2,r2,1
 800839c:	e0c00017 	ldw	r3,0(fp)
 80083a0:	9d000215 	stw	r20,8(r19)
 80083a4:	a0800115 	stw	r2,4(r20)
 80083a8:	a8c7883a 	add	r3,r21,r3
 80083ac:	e0c00015 	stw	r3,0(fp)
 80083b0:	84c00e26 	beq	r16,r19,80083ec <_malloc_r+0x460>
 80083b4:	018003c4 	movi	r6,15
 80083b8:	3580a72e 	bgeu	r6,r22,8008658 <_malloc_r+0x6cc>
 80083bc:	81400117 	ldw	r5,4(r16)
 80083c0:	013ffe04 	movi	r4,-8
 80083c4:	b0bffd04 	addi	r2,r22,-12
 80083c8:	1104703a 	and	r2,r2,r4
 80083cc:	2900004c 	andi	r4,r5,1
 80083d0:	2088b03a 	or	r4,r4,r2
 80083d4:	81000115 	stw	r4,4(r16)
 80083d8:	01400144 	movi	r5,5
 80083dc:	8089883a 	add	r4,r16,r2
 80083e0:	21400115 	stw	r5,4(r4)
 80083e4:	21400215 	stw	r5,8(r4)
 80083e8:	3080cd36 	bltu	r6,r2,8008720 <_malloc_r+0x794>
 80083ec:	00820074 	movhi	r2,2049
 80083f0:	109e7b04 	addi	r2,r2,31212
 80083f4:	11000017 	ldw	r4,0(r2)
 80083f8:	20c0012e 	bgeu	r4,r3,8008400 <_malloc_r+0x474>
 80083fc:	10c00015 	stw	r3,0(r2)
 8008400:	00820074 	movhi	r2,2049
 8008404:	109e7a04 	addi	r2,r2,31208
 8008408:	11000017 	ldw	r4,0(r2)
 800840c:	9c000217 	ldw	r16,8(r19)
 8008410:	20c0012e 	bgeu	r4,r3,8008418 <_malloc_r+0x48c>
 8008414:	10c00015 	stw	r3,0(r2)
 8008418:	80c00117 	ldw	r3,4(r16)
 800841c:	00bfff04 	movi	r2,-4
 8008420:	1886703a 	and	r3,r3,r2
 8008424:	1c45c83a 	sub	r2,r3,r17
 8008428:	1c400236 	bltu	r3,r17,8008434 <_malloc_r+0x4a8>
 800842c:	00c003c4 	movi	r3,15
 8008430:	18800416 	blt	r3,r2,8008444 <_malloc_r+0x4b8>
 8008434:	9009883a 	mov	r4,r18
 8008438:	800ffcc0 	call	800ffcc <__malloc_unlock>
 800843c:	0005883a 	mov	r2,zero
 8008440:	003f7b06 	br	8008230 <__alt_data_end+0xfc008230>
 8008444:	88c00054 	ori	r3,r17,1
 8008448:	80c00115 	stw	r3,4(r16)
 800844c:	8463883a 	add	r17,r16,r17
 8008450:	10800054 	ori	r2,r2,1
 8008454:	9c400215 	stw	r17,8(r19)
 8008458:	88800115 	stw	r2,4(r17)
 800845c:	9009883a 	mov	r4,r18
 8008460:	800ffcc0 	call	800ffcc <__malloc_unlock>
 8008464:	80800204 	addi	r2,r16,8
 8008468:	003f7106 	br	8008230 <__alt_data_end+0xfc008230>
 800846c:	00c00504 	movi	r3,20
 8008470:	18804a2e 	bgeu	r3,r2,800859c <_malloc_r+0x610>
 8008474:	00c01504 	movi	r3,84
 8008478:	18806e36 	bltu	r3,r2,8008634 <_malloc_r+0x6a8>
 800847c:	8804d33a 	srli	r2,r17,12
 8008480:	12001bc4 	addi	r8,r2,111
 8008484:	11c01b84 	addi	r7,r2,110
 8008488:	4209883a 	add	r4,r8,r8
 800848c:	003edd06 	br	8008004 <__alt_data_end+0xfc008004>
 8008490:	3804d27a 	srli	r2,r7,9
 8008494:	00c00104 	movi	r3,4
 8008498:	1880442e 	bgeu	r3,r2,80085ac <_malloc_r+0x620>
 800849c:	00c00504 	movi	r3,20
 80084a0:	18808136 	bltu	r3,r2,80086a8 <_malloc_r+0x71c>
 80084a4:	11401704 	addi	r5,r2,92
 80084a8:	10c016c4 	addi	r3,r2,91
 80084ac:	294b883a 	add	r5,r5,r5
 80084b0:	294b883a 	add	r5,r5,r5
 80084b4:	294b883a 	add	r5,r5,r5
 80084b8:	994b883a 	add	r5,r19,r5
 80084bc:	28800017 	ldw	r2,0(r5)
 80084c0:	01820074 	movhi	r6,2049
 80084c4:	297ffe04 	addi	r5,r5,-8
 80084c8:	31920a04 	addi	r6,r6,18472
 80084cc:	28806526 	beq	r5,r2,8008664 <_malloc_r+0x6d8>
 80084d0:	01bfff04 	movi	r6,-4
 80084d4:	10c00117 	ldw	r3,4(r2)
 80084d8:	1986703a 	and	r3,r3,r6
 80084dc:	38c0022e 	bgeu	r7,r3,80084e8 <_malloc_r+0x55c>
 80084e0:	10800217 	ldw	r2,8(r2)
 80084e4:	28bffb1e 	bne	r5,r2,80084d4 <__alt_data_end+0xfc0084d4>
 80084e8:	11400317 	ldw	r5,12(r2)
 80084ec:	98c00117 	ldw	r3,4(r19)
 80084f0:	81400315 	stw	r5,12(r16)
 80084f4:	80800215 	stw	r2,8(r16)
 80084f8:	2c000215 	stw	r16,8(r5)
 80084fc:	14000315 	stw	r16,12(r2)
 8008500:	003ef806 	br	80080e4 <__alt_data_end+0xfc0080e4>
 8008504:	88c00054 	ori	r3,r17,1
 8008508:	80c00115 	stw	r3,4(r16)
 800850c:	8463883a 	add	r17,r16,r17
 8008510:	34400515 	stw	r17,20(r6)
 8008514:	34400415 	stw	r17,16(r6)
 8008518:	10c00054 	ori	r3,r2,1
 800851c:	8a000315 	stw	r8,12(r17)
 8008520:	8a000215 	stw	r8,8(r17)
 8008524:	88c00115 	stw	r3,4(r17)
 8008528:	88a3883a 	add	r17,r17,r2
 800852c:	88800015 	stw	r2,0(r17)
 8008530:	9009883a 	mov	r4,r18
 8008534:	800ffcc0 	call	800ffcc <__malloc_unlock>
 8008538:	80800204 	addi	r2,r16,8
 800853c:	003f3c06 	br	8008230 <__alt_data_end+0xfc008230>
 8008540:	30c00117 	ldw	r3,4(r6)
 8008544:	003ee706 	br	80080e4 <__alt_data_end+0xfc0080e4>
 8008548:	5ac00044 	addi	r11,r11,1
 800854c:	588000cc 	andi	r2,r11,3
 8008550:	31800204 	addi	r6,r6,8
 8008554:	103efd1e 	bne	r2,zero,800814c <__alt_data_end+0xfc00814c>
 8008558:	00002406 	br	80085ec <_malloc_r+0x660>
 800855c:	14000317 	ldw	r16,12(r2)
 8008560:	143f251e 	bne	r2,r16,80081f8 <__alt_data_end+0xfc0081f8>
 8008564:	21000084 	addi	r4,r4,2
 8008568:	003ebc06 	br	800805c <__alt_data_end+0xfc00805c>
 800856c:	8085883a 	add	r2,r16,r2
 8008570:	10c00117 	ldw	r3,4(r2)
 8008574:	81000317 	ldw	r4,12(r16)
 8008578:	81400217 	ldw	r5,8(r16)
 800857c:	18c00054 	ori	r3,r3,1
 8008580:	10c00115 	stw	r3,4(r2)
 8008584:	29000315 	stw	r4,12(r5)
 8008588:	21400215 	stw	r5,8(r4)
 800858c:	9009883a 	mov	r4,r18
 8008590:	800ffcc0 	call	800ffcc <__malloc_unlock>
 8008594:	80800204 	addi	r2,r16,8
 8008598:	003f2506 	br	8008230 <__alt_data_end+0xfc008230>
 800859c:	12001704 	addi	r8,r2,92
 80085a0:	11c016c4 	addi	r7,r2,91
 80085a4:	4209883a 	add	r4,r8,r8
 80085a8:	003e9606 	br	8008004 <__alt_data_end+0xfc008004>
 80085ac:	3804d1ba 	srli	r2,r7,6
 80085b0:	11400e44 	addi	r5,r2,57
 80085b4:	10c00e04 	addi	r3,r2,56
 80085b8:	294b883a 	add	r5,r5,r5
 80085bc:	003fbc06 	br	80084b0 <__alt_data_end+0xfc0084b0>
 80085c0:	84ff5926 	beq	r16,r19,8008328 <__alt_data_end+0xfc008328>
 80085c4:	00820074 	movhi	r2,2049
 80085c8:	10920a04 	addi	r2,r2,18472
 80085cc:	14000217 	ldw	r16,8(r2)
 80085d0:	00bfff04 	movi	r2,-4
 80085d4:	80c00117 	ldw	r3,4(r16)
 80085d8:	1886703a 	and	r3,r3,r2
 80085dc:	003f9106 	br	8008424 <__alt_data_end+0xfc008424>
 80085e0:	60800217 	ldw	r2,8(r12)
 80085e4:	213fffc4 	addi	r4,r4,-1
 80085e8:	1300651e 	bne	r2,r12,8008780 <_malloc_r+0x7f4>
 80085ec:	208000cc 	andi	r2,r4,3
 80085f0:	633ffe04 	addi	r12,r12,-8
 80085f4:	103ffa1e 	bne	r2,zero,80085e0 <__alt_data_end+0xfc0085e0>
 80085f8:	98800117 	ldw	r2,4(r19)
 80085fc:	0146303a 	nor	r3,zero,r5
 8008600:	1884703a 	and	r2,r3,r2
 8008604:	98800115 	stw	r2,4(r19)
 8008608:	294b883a 	add	r5,r5,r5
 800860c:	117f2836 	bltu	r2,r5,80082b0 <__alt_data_end+0xfc0082b0>
 8008610:	283f2726 	beq	r5,zero,80082b0 <__alt_data_end+0xfc0082b0>
 8008614:	2886703a 	and	r3,r5,r2
 8008618:	5809883a 	mov	r4,r11
 800861c:	183ec31e 	bne	r3,zero,800812c <__alt_data_end+0xfc00812c>
 8008620:	294b883a 	add	r5,r5,r5
 8008624:	2886703a 	and	r3,r5,r2
 8008628:	21000104 	addi	r4,r4,4
 800862c:	183ffc26 	beq	r3,zero,8008620 <__alt_data_end+0xfc008620>
 8008630:	003ebe06 	br	800812c <__alt_data_end+0xfc00812c>
 8008634:	00c05504 	movi	r3,340
 8008638:	18801236 	bltu	r3,r2,8008684 <_malloc_r+0x6f8>
 800863c:	8804d3fa 	srli	r2,r17,15
 8008640:	12001e04 	addi	r8,r2,120
 8008644:	11c01dc4 	addi	r7,r2,119
 8008648:	4209883a 	add	r4,r8,r8
 800864c:	003e6d06 	br	8008004 <__alt_data_end+0xfc008004>
 8008650:	00c40004 	movi	r3,4096
 8008654:	003f4606 	br	8008370 <__alt_data_end+0xfc008370>
 8008658:	00800044 	movi	r2,1
 800865c:	a0800115 	stw	r2,4(r20)
 8008660:	003f7406 	br	8008434 <__alt_data_end+0xfc008434>
 8008664:	1805d0ba 	srai	r2,r3,2
 8008668:	01c00044 	movi	r7,1
 800866c:	30c00117 	ldw	r3,4(r6)
 8008670:	388e983a 	sll	r7,r7,r2
 8008674:	2805883a 	mov	r2,r5
 8008678:	38c6b03a 	or	r3,r7,r3
 800867c:	30c00115 	stw	r3,4(r6)
 8008680:	003f9b06 	br	80084f0 <__alt_data_end+0xfc0084f0>
 8008684:	00c15504 	movi	r3,1364
 8008688:	18801a36 	bltu	r3,r2,80086f4 <_malloc_r+0x768>
 800868c:	8804d4ba 	srli	r2,r17,18
 8008690:	12001f44 	addi	r8,r2,125
 8008694:	11c01f04 	addi	r7,r2,124
 8008698:	4209883a 	add	r4,r8,r8
 800869c:	003e5906 	br	8008004 <__alt_data_end+0xfc008004>
 80086a0:	ad400404 	addi	r21,r21,16
 80086a4:	003f1706 	br	8008304 <__alt_data_end+0xfc008304>
 80086a8:	00c01504 	movi	r3,84
 80086ac:	18802336 	bltu	r3,r2,800873c <_malloc_r+0x7b0>
 80086b0:	3804d33a 	srli	r2,r7,12
 80086b4:	11401bc4 	addi	r5,r2,111
 80086b8:	10c01b84 	addi	r3,r2,110
 80086bc:	294b883a 	add	r5,r5,r5
 80086c0:	003f7b06 	br	80084b0 <__alt_data_end+0xfc0084b0>
 80086c4:	9c000217 	ldw	r16,8(r19)
 80086c8:	00bfff04 	movi	r2,-4
 80086cc:	80c00117 	ldw	r3,4(r16)
 80086d0:	1886703a 	and	r3,r3,r2
 80086d4:	003f5306 	br	8008424 <__alt_data_end+0xfc008424>
 80086d8:	3083ffcc 	andi	r2,r6,4095
 80086dc:	103f181e 	bne	r2,zero,8008340 <__alt_data_end+0xfc008340>
 80086e0:	99000217 	ldw	r4,8(r19)
 80086e4:	b545883a 	add	r2,r22,r21
 80086e8:	10800054 	ori	r2,r2,1
 80086ec:	20800115 	stw	r2,4(r4)
 80086f0:	003f3e06 	br	80083ec <__alt_data_end+0xfc0083ec>
 80086f4:	01003f84 	movi	r4,254
 80086f8:	02001fc4 	movi	r8,127
 80086fc:	01c01f84 	movi	r7,126
 8008700:	003e4006 	br	8008004 <__alt_data_end+0xfc008004>
 8008704:	00820074 	movhi	r2,2049
 8008708:	10979704 	addi	r2,r2,24156
 800870c:	15000015 	stw	r20,0(r2)
 8008710:	003f1106 	br	8008358 <__alt_data_end+0xfc008358>
 8008714:	00800044 	movi	r2,1
 8008718:	002b883a 	mov	r21,zero
 800871c:	003f1f06 	br	800839c <__alt_data_end+0xfc00839c>
 8008720:	81400204 	addi	r5,r16,8
 8008724:	9009883a 	mov	r4,r18
 8008728:	80073940 	call	8007394 <_free_r>
 800872c:	00820074 	movhi	r2,2049
 8008730:	109e8f04 	addi	r2,r2,31292
 8008734:	10c00017 	ldw	r3,0(r2)
 8008738:	003f2c06 	br	80083ec <__alt_data_end+0xfc0083ec>
 800873c:	00c05504 	movi	r3,340
 8008740:	18800536 	bltu	r3,r2,8008758 <_malloc_r+0x7cc>
 8008744:	3804d3fa 	srli	r2,r7,15
 8008748:	11401e04 	addi	r5,r2,120
 800874c:	10c01dc4 	addi	r3,r2,119
 8008750:	294b883a 	add	r5,r5,r5
 8008754:	003f5606 	br	80084b0 <__alt_data_end+0xfc0084b0>
 8008758:	00c15504 	movi	r3,1364
 800875c:	18800536 	bltu	r3,r2,8008774 <_malloc_r+0x7e8>
 8008760:	3804d4ba 	srli	r2,r7,18
 8008764:	11401f44 	addi	r5,r2,125
 8008768:	10c01f04 	addi	r3,r2,124
 800876c:	294b883a 	add	r5,r5,r5
 8008770:	003f4f06 	br	80084b0 <__alt_data_end+0xfc0084b0>
 8008774:	01403f84 	movi	r5,254
 8008778:	00c01f84 	movi	r3,126
 800877c:	003f4c06 	br	80084b0 <__alt_data_end+0xfc0084b0>
 8008780:	98800117 	ldw	r2,4(r19)
 8008784:	003fa006 	br	8008608 <__alt_data_end+0xfc008608>
 8008788:	8808d0fa 	srli	r4,r17,3
 800878c:	20800044 	addi	r2,r4,1
 8008790:	1085883a 	add	r2,r2,r2
 8008794:	003e9006 	br	80081d8 <__alt_data_end+0xfc0081d8>

08008798 <memchr>:
 8008798:	208000cc 	andi	r2,r4,3
 800879c:	280f883a 	mov	r7,r5
 80087a0:	10003426 	beq	r2,zero,8008874 <memchr+0xdc>
 80087a4:	30bfffc4 	addi	r2,r6,-1
 80087a8:	30001a26 	beq	r6,zero,8008814 <memchr+0x7c>
 80087ac:	20c00003 	ldbu	r3,0(r4)
 80087b0:	29803fcc 	andi	r6,r5,255
 80087b4:	30c0051e 	bne	r6,r3,80087cc <memchr+0x34>
 80087b8:	00001806 	br	800881c <memchr+0x84>
 80087bc:	10001526 	beq	r2,zero,8008814 <memchr+0x7c>
 80087c0:	20c00003 	ldbu	r3,0(r4)
 80087c4:	10bfffc4 	addi	r2,r2,-1
 80087c8:	30c01426 	beq	r6,r3,800881c <memchr+0x84>
 80087cc:	21000044 	addi	r4,r4,1
 80087d0:	20c000cc 	andi	r3,r4,3
 80087d4:	183ff91e 	bne	r3,zero,80087bc <__alt_data_end+0xfc0087bc>
 80087d8:	020000c4 	movi	r8,3
 80087dc:	40801136 	bltu	r8,r2,8008824 <memchr+0x8c>
 80087e0:	10000c26 	beq	r2,zero,8008814 <memchr+0x7c>
 80087e4:	20c00003 	ldbu	r3,0(r4)
 80087e8:	29403fcc 	andi	r5,r5,255
 80087ec:	28c00b26 	beq	r5,r3,800881c <memchr+0x84>
 80087f0:	20c00044 	addi	r3,r4,1
 80087f4:	39803fcc 	andi	r6,r7,255
 80087f8:	2089883a 	add	r4,r4,r2
 80087fc:	00000306 	br	800880c <memchr+0x74>
 8008800:	18c00044 	addi	r3,r3,1
 8008804:	197fffc3 	ldbu	r5,-1(r3)
 8008808:	31400526 	beq	r6,r5,8008820 <memchr+0x88>
 800880c:	1805883a 	mov	r2,r3
 8008810:	20fffb1e 	bne	r4,r3,8008800 <__alt_data_end+0xfc008800>
 8008814:	0005883a 	mov	r2,zero
 8008818:	f800283a 	ret
 800881c:	2005883a 	mov	r2,r4
 8008820:	f800283a 	ret
 8008824:	28c03fcc 	andi	r3,r5,255
 8008828:	1812923a 	slli	r9,r3,8
 800882c:	02ffbff4 	movhi	r11,65279
 8008830:	02a02074 	movhi	r10,32897
 8008834:	48d2b03a 	or	r9,r9,r3
 8008838:	4806943a 	slli	r3,r9,16
 800883c:	5affbfc4 	addi	r11,r11,-257
 8008840:	52a02004 	addi	r10,r10,-32640
 8008844:	48d2b03a 	or	r9,r9,r3
 8008848:	20c00017 	ldw	r3,0(r4)
 800884c:	48c6f03a 	xor	r3,r9,r3
 8008850:	1acd883a 	add	r6,r3,r11
 8008854:	00c6303a 	nor	r3,zero,r3
 8008858:	30c6703a 	and	r3,r6,r3
 800885c:	1a86703a 	and	r3,r3,r10
 8008860:	183fe01e 	bne	r3,zero,80087e4 <__alt_data_end+0xfc0087e4>
 8008864:	10bfff04 	addi	r2,r2,-4
 8008868:	21000104 	addi	r4,r4,4
 800886c:	40bff636 	bltu	r8,r2,8008848 <__alt_data_end+0xfc008848>
 8008870:	003fdb06 	br	80087e0 <__alt_data_end+0xfc0087e0>
 8008874:	3005883a 	mov	r2,r6
 8008878:	003fd706 	br	80087d8 <__alt_data_end+0xfc0087d8>

0800887c <memmove>:
 800887c:	2005883a 	mov	r2,r4
 8008880:	29000b2e 	bgeu	r5,r4,80088b0 <memmove+0x34>
 8008884:	298f883a 	add	r7,r5,r6
 8008888:	21c0092e 	bgeu	r4,r7,80088b0 <memmove+0x34>
 800888c:	2187883a 	add	r3,r4,r6
 8008890:	198bc83a 	sub	r5,r3,r6
 8008894:	30004826 	beq	r6,zero,80089b8 <memmove+0x13c>
 8008898:	39ffffc4 	addi	r7,r7,-1
 800889c:	39000003 	ldbu	r4,0(r7)
 80088a0:	18ffffc4 	addi	r3,r3,-1
 80088a4:	19000005 	stb	r4,0(r3)
 80088a8:	28fffb1e 	bne	r5,r3,8008898 <__alt_data_end+0xfc008898>
 80088ac:	f800283a 	ret
 80088b0:	00c003c4 	movi	r3,15
 80088b4:	1980412e 	bgeu	r3,r6,80089bc <memmove+0x140>
 80088b8:	2886b03a 	or	r3,r5,r2
 80088bc:	18c000cc 	andi	r3,r3,3
 80088c0:	1800401e 	bne	r3,zero,80089c4 <memmove+0x148>
 80088c4:	33fffc04 	addi	r15,r6,-16
 80088c8:	781ed13a 	srli	r15,r15,4
 80088cc:	28c00104 	addi	r3,r5,4
 80088d0:	13400104 	addi	r13,r2,4
 80088d4:	781c913a 	slli	r14,r15,4
 80088d8:	2b000204 	addi	r12,r5,8
 80088dc:	12c00204 	addi	r11,r2,8
 80088e0:	73800504 	addi	r14,r14,20
 80088e4:	2a800304 	addi	r10,r5,12
 80088e8:	12400304 	addi	r9,r2,12
 80088ec:	2b9d883a 	add	r14,r5,r14
 80088f0:	2811883a 	mov	r8,r5
 80088f4:	100f883a 	mov	r7,r2
 80088f8:	41000017 	ldw	r4,0(r8)
 80088fc:	39c00404 	addi	r7,r7,16
 8008900:	18c00404 	addi	r3,r3,16
 8008904:	393ffc15 	stw	r4,-16(r7)
 8008908:	193ffc17 	ldw	r4,-16(r3)
 800890c:	6b400404 	addi	r13,r13,16
 8008910:	5ac00404 	addi	r11,r11,16
 8008914:	693ffc15 	stw	r4,-16(r13)
 8008918:	61000017 	ldw	r4,0(r12)
 800891c:	4a400404 	addi	r9,r9,16
 8008920:	42000404 	addi	r8,r8,16
 8008924:	593ffc15 	stw	r4,-16(r11)
 8008928:	51000017 	ldw	r4,0(r10)
 800892c:	63000404 	addi	r12,r12,16
 8008930:	52800404 	addi	r10,r10,16
 8008934:	493ffc15 	stw	r4,-16(r9)
 8008938:	1bbfef1e 	bne	r3,r14,80088f8 <__alt_data_end+0xfc0088f8>
 800893c:	79000044 	addi	r4,r15,1
 8008940:	2008913a 	slli	r4,r4,4
 8008944:	328003cc 	andi	r10,r6,15
 8008948:	02c000c4 	movi	r11,3
 800894c:	1107883a 	add	r3,r2,r4
 8008950:	290b883a 	add	r5,r5,r4
 8008954:	5a801e2e 	bgeu	r11,r10,80089d0 <memmove+0x154>
 8008958:	1813883a 	mov	r9,r3
 800895c:	2811883a 	mov	r8,r5
 8008960:	500f883a 	mov	r7,r10
 8008964:	41000017 	ldw	r4,0(r8)
 8008968:	4a400104 	addi	r9,r9,4
 800896c:	39ffff04 	addi	r7,r7,-4
 8008970:	493fff15 	stw	r4,-4(r9)
 8008974:	42000104 	addi	r8,r8,4
 8008978:	59fffa36 	bltu	r11,r7,8008964 <__alt_data_end+0xfc008964>
 800897c:	513fff04 	addi	r4,r10,-4
 8008980:	2008d0ba 	srli	r4,r4,2
 8008984:	318000cc 	andi	r6,r6,3
 8008988:	21000044 	addi	r4,r4,1
 800898c:	2109883a 	add	r4,r4,r4
 8008990:	2109883a 	add	r4,r4,r4
 8008994:	1907883a 	add	r3,r3,r4
 8008998:	290b883a 	add	r5,r5,r4
 800899c:	30000b26 	beq	r6,zero,80089cc <memmove+0x150>
 80089a0:	198d883a 	add	r6,r3,r6
 80089a4:	29c00003 	ldbu	r7,0(r5)
 80089a8:	18c00044 	addi	r3,r3,1
 80089ac:	29400044 	addi	r5,r5,1
 80089b0:	19ffffc5 	stb	r7,-1(r3)
 80089b4:	19bffb1e 	bne	r3,r6,80089a4 <__alt_data_end+0xfc0089a4>
 80089b8:	f800283a 	ret
 80089bc:	1007883a 	mov	r3,r2
 80089c0:	003ff606 	br	800899c <__alt_data_end+0xfc00899c>
 80089c4:	1007883a 	mov	r3,r2
 80089c8:	003ff506 	br	80089a0 <__alt_data_end+0xfc0089a0>
 80089cc:	f800283a 	ret
 80089d0:	500d883a 	mov	r6,r10
 80089d4:	003ff106 	br	800899c <__alt_data_end+0xfc00899c>

080089d8 <memset>:
 80089d8:	20c000cc 	andi	r3,r4,3
 80089dc:	2005883a 	mov	r2,r4
 80089e0:	18004426 	beq	r3,zero,8008af4 <memset+0x11c>
 80089e4:	31ffffc4 	addi	r7,r6,-1
 80089e8:	30004026 	beq	r6,zero,8008aec <memset+0x114>
 80089ec:	2813883a 	mov	r9,r5
 80089f0:	200d883a 	mov	r6,r4
 80089f4:	2007883a 	mov	r3,r4
 80089f8:	00000406 	br	8008a0c <memset+0x34>
 80089fc:	3a3fffc4 	addi	r8,r7,-1
 8008a00:	31800044 	addi	r6,r6,1
 8008a04:	38003926 	beq	r7,zero,8008aec <memset+0x114>
 8008a08:	400f883a 	mov	r7,r8
 8008a0c:	18c00044 	addi	r3,r3,1
 8008a10:	32400005 	stb	r9,0(r6)
 8008a14:	1a0000cc 	andi	r8,r3,3
 8008a18:	403ff81e 	bne	r8,zero,80089fc <__alt_data_end+0xfc0089fc>
 8008a1c:	010000c4 	movi	r4,3
 8008a20:	21c02d2e 	bgeu	r4,r7,8008ad8 <memset+0x100>
 8008a24:	29003fcc 	andi	r4,r5,255
 8008a28:	200c923a 	slli	r6,r4,8
 8008a2c:	3108b03a 	or	r4,r6,r4
 8008a30:	200c943a 	slli	r6,r4,16
 8008a34:	218cb03a 	or	r6,r4,r6
 8008a38:	010003c4 	movi	r4,15
 8008a3c:	21c0182e 	bgeu	r4,r7,8008aa0 <memset+0xc8>
 8008a40:	3b3ffc04 	addi	r12,r7,-16
 8008a44:	6018d13a 	srli	r12,r12,4
 8008a48:	1a000104 	addi	r8,r3,4
 8008a4c:	1ac00204 	addi	r11,r3,8
 8008a50:	6008913a 	slli	r4,r12,4
 8008a54:	1a800304 	addi	r10,r3,12
 8008a58:	1813883a 	mov	r9,r3
 8008a5c:	21000504 	addi	r4,r4,20
 8008a60:	1909883a 	add	r4,r3,r4
 8008a64:	49800015 	stw	r6,0(r9)
 8008a68:	41800015 	stw	r6,0(r8)
 8008a6c:	59800015 	stw	r6,0(r11)
 8008a70:	51800015 	stw	r6,0(r10)
 8008a74:	42000404 	addi	r8,r8,16
 8008a78:	4a400404 	addi	r9,r9,16
 8008a7c:	5ac00404 	addi	r11,r11,16
 8008a80:	52800404 	addi	r10,r10,16
 8008a84:	413ff71e 	bne	r8,r4,8008a64 <__alt_data_end+0xfc008a64>
 8008a88:	63000044 	addi	r12,r12,1
 8008a8c:	6018913a 	slli	r12,r12,4
 8008a90:	39c003cc 	andi	r7,r7,15
 8008a94:	010000c4 	movi	r4,3
 8008a98:	1b07883a 	add	r3,r3,r12
 8008a9c:	21c00e2e 	bgeu	r4,r7,8008ad8 <memset+0x100>
 8008aa0:	1813883a 	mov	r9,r3
 8008aa4:	3811883a 	mov	r8,r7
 8008aa8:	010000c4 	movi	r4,3
 8008aac:	49800015 	stw	r6,0(r9)
 8008ab0:	423fff04 	addi	r8,r8,-4
 8008ab4:	4a400104 	addi	r9,r9,4
 8008ab8:	223ffc36 	bltu	r4,r8,8008aac <__alt_data_end+0xfc008aac>
 8008abc:	393fff04 	addi	r4,r7,-4
 8008ac0:	2008d0ba 	srli	r4,r4,2
 8008ac4:	39c000cc 	andi	r7,r7,3
 8008ac8:	21000044 	addi	r4,r4,1
 8008acc:	2109883a 	add	r4,r4,r4
 8008ad0:	2109883a 	add	r4,r4,r4
 8008ad4:	1907883a 	add	r3,r3,r4
 8008ad8:	38000526 	beq	r7,zero,8008af0 <memset+0x118>
 8008adc:	19cf883a 	add	r7,r3,r7
 8008ae0:	19400005 	stb	r5,0(r3)
 8008ae4:	18c00044 	addi	r3,r3,1
 8008ae8:	38fffd1e 	bne	r7,r3,8008ae0 <__alt_data_end+0xfc008ae0>
 8008aec:	f800283a 	ret
 8008af0:	f800283a 	ret
 8008af4:	2007883a 	mov	r3,r4
 8008af8:	300f883a 	mov	r7,r6
 8008afc:	003fc706 	br	8008a1c <__alt_data_end+0xfc008a1c>

08008b00 <_Balloc>:
 8008b00:	20801317 	ldw	r2,76(r4)
 8008b04:	defffc04 	addi	sp,sp,-16
 8008b08:	dc400115 	stw	r17,4(sp)
 8008b0c:	dc000015 	stw	r16,0(sp)
 8008b10:	dfc00315 	stw	ra,12(sp)
 8008b14:	dc800215 	stw	r18,8(sp)
 8008b18:	2023883a 	mov	r17,r4
 8008b1c:	2821883a 	mov	r16,r5
 8008b20:	10000f26 	beq	r2,zero,8008b60 <_Balloc+0x60>
 8008b24:	8407883a 	add	r3,r16,r16
 8008b28:	18c7883a 	add	r3,r3,r3
 8008b2c:	10c7883a 	add	r3,r2,r3
 8008b30:	18800017 	ldw	r2,0(r3)
 8008b34:	10001126 	beq	r2,zero,8008b7c <_Balloc+0x7c>
 8008b38:	11000017 	ldw	r4,0(r2)
 8008b3c:	19000015 	stw	r4,0(r3)
 8008b40:	10000415 	stw	zero,16(r2)
 8008b44:	10000315 	stw	zero,12(r2)
 8008b48:	dfc00317 	ldw	ra,12(sp)
 8008b4c:	dc800217 	ldw	r18,8(sp)
 8008b50:	dc400117 	ldw	r17,4(sp)
 8008b54:	dc000017 	ldw	r16,0(sp)
 8008b58:	dec00404 	addi	sp,sp,16
 8008b5c:	f800283a 	ret
 8008b60:	01800844 	movi	r6,33
 8008b64:	01400104 	movi	r5,4
 8008b68:	800be680 	call	800be68 <_calloc_r>
 8008b6c:	88801315 	stw	r2,76(r17)
 8008b70:	103fec1e 	bne	r2,zero,8008b24 <__alt_data_end+0xfc008b24>
 8008b74:	0005883a 	mov	r2,zero
 8008b78:	003ff306 	br	8008b48 <__alt_data_end+0xfc008b48>
 8008b7c:	01400044 	movi	r5,1
 8008b80:	2c24983a 	sll	r18,r5,r16
 8008b84:	8809883a 	mov	r4,r17
 8008b88:	91800144 	addi	r6,r18,5
 8008b8c:	318d883a 	add	r6,r6,r6
 8008b90:	318d883a 	add	r6,r6,r6
 8008b94:	800be680 	call	800be68 <_calloc_r>
 8008b98:	103ff626 	beq	r2,zero,8008b74 <__alt_data_end+0xfc008b74>
 8008b9c:	14000115 	stw	r16,4(r2)
 8008ba0:	14800215 	stw	r18,8(r2)
 8008ba4:	003fe606 	br	8008b40 <__alt_data_end+0xfc008b40>

08008ba8 <_Bfree>:
 8008ba8:	28000826 	beq	r5,zero,8008bcc <_Bfree+0x24>
 8008bac:	28c00117 	ldw	r3,4(r5)
 8008bb0:	20801317 	ldw	r2,76(r4)
 8008bb4:	18c7883a 	add	r3,r3,r3
 8008bb8:	18c7883a 	add	r3,r3,r3
 8008bbc:	10c5883a 	add	r2,r2,r3
 8008bc0:	10c00017 	ldw	r3,0(r2)
 8008bc4:	28c00015 	stw	r3,0(r5)
 8008bc8:	11400015 	stw	r5,0(r2)
 8008bcc:	f800283a 	ret

08008bd0 <__multadd>:
 8008bd0:	defff704 	addi	sp,sp,-36
 8008bd4:	dc800215 	stw	r18,8(sp)
 8008bd8:	2c800417 	ldw	r18,16(r5)
 8008bdc:	dd800615 	stw	r22,24(sp)
 8008be0:	dd400515 	stw	r21,20(sp)
 8008be4:	dd000415 	stw	r20,16(sp)
 8008be8:	dcc00315 	stw	r19,12(sp)
 8008bec:	dc400115 	stw	r17,4(sp)
 8008bf0:	dc000015 	stw	r16,0(sp)
 8008bf4:	dfc00815 	stw	ra,32(sp)
 8008bf8:	ddc00715 	stw	r23,28(sp)
 8008bfc:	2827883a 	mov	r19,r5
 8008c00:	2029883a 	mov	r20,r4
 8008c04:	3023883a 	mov	r17,r6
 8008c08:	3821883a 	mov	r16,r7
 8008c0c:	2d400504 	addi	r21,r5,20
 8008c10:	002d883a 	mov	r22,zero
 8008c14:	adc00017 	ldw	r23,0(r21)
 8008c18:	880b883a 	mov	r5,r17
 8008c1c:	ad400104 	addi	r21,r21,4
 8008c20:	b93fffcc 	andi	r4,r23,65535
 8008c24:	8002af80 	call	8002af8 <__mulsi3>
 8008c28:	b808d43a 	srli	r4,r23,16
 8008c2c:	880b883a 	mov	r5,r17
 8008c30:	1421883a 	add	r16,r2,r16
 8008c34:	8002af80 	call	8002af8 <__mulsi3>
 8008c38:	800ed43a 	srli	r7,r16,16
 8008c3c:	80ffffcc 	andi	r3,r16,65535
 8008c40:	b5800044 	addi	r22,r22,1
 8008c44:	11c5883a 	add	r2,r2,r7
 8008c48:	100e943a 	slli	r7,r2,16
 8008c4c:	1020d43a 	srli	r16,r2,16
 8008c50:	38c7883a 	add	r3,r7,r3
 8008c54:	a8ffff15 	stw	r3,-4(r21)
 8008c58:	b4bfee16 	blt	r22,r18,8008c14 <__alt_data_end+0xfc008c14>
 8008c5c:	80000926 	beq	r16,zero,8008c84 <__multadd+0xb4>
 8008c60:	98800217 	ldw	r2,8(r19)
 8008c64:	9080130e 	bge	r18,r2,8008cb4 <__multadd+0xe4>
 8008c68:	90800144 	addi	r2,r18,5
 8008c6c:	1085883a 	add	r2,r2,r2
 8008c70:	1085883a 	add	r2,r2,r2
 8008c74:	9885883a 	add	r2,r19,r2
 8008c78:	14000015 	stw	r16,0(r2)
 8008c7c:	94800044 	addi	r18,r18,1
 8008c80:	9c800415 	stw	r18,16(r19)
 8008c84:	9805883a 	mov	r2,r19
 8008c88:	dfc00817 	ldw	ra,32(sp)
 8008c8c:	ddc00717 	ldw	r23,28(sp)
 8008c90:	dd800617 	ldw	r22,24(sp)
 8008c94:	dd400517 	ldw	r21,20(sp)
 8008c98:	dd000417 	ldw	r20,16(sp)
 8008c9c:	dcc00317 	ldw	r19,12(sp)
 8008ca0:	dc800217 	ldw	r18,8(sp)
 8008ca4:	dc400117 	ldw	r17,4(sp)
 8008ca8:	dc000017 	ldw	r16,0(sp)
 8008cac:	dec00904 	addi	sp,sp,36
 8008cb0:	f800283a 	ret
 8008cb4:	99400117 	ldw	r5,4(r19)
 8008cb8:	a009883a 	mov	r4,r20
 8008cbc:	29400044 	addi	r5,r5,1
 8008cc0:	8008b000 	call	8008b00 <_Balloc>
 8008cc4:	99800417 	ldw	r6,16(r19)
 8008cc8:	99400304 	addi	r5,r19,12
 8008ccc:	11000304 	addi	r4,r2,12
 8008cd0:	31800084 	addi	r6,r6,2
 8008cd4:	318d883a 	add	r6,r6,r6
 8008cd8:	318d883a 	add	r6,r6,r6
 8008cdc:	1023883a 	mov	r17,r2
 8008ce0:	8002b200 	call	8002b20 <memcpy>
 8008ce4:	98000a26 	beq	r19,zero,8008d10 <__multadd+0x140>
 8008ce8:	98c00117 	ldw	r3,4(r19)
 8008cec:	a0801317 	ldw	r2,76(r20)
 8008cf0:	18c7883a 	add	r3,r3,r3
 8008cf4:	18c7883a 	add	r3,r3,r3
 8008cf8:	10c5883a 	add	r2,r2,r3
 8008cfc:	10c00017 	ldw	r3,0(r2)
 8008d00:	98c00015 	stw	r3,0(r19)
 8008d04:	14c00015 	stw	r19,0(r2)
 8008d08:	8827883a 	mov	r19,r17
 8008d0c:	003fd606 	br	8008c68 <__alt_data_end+0xfc008c68>
 8008d10:	8827883a 	mov	r19,r17
 8008d14:	003fd406 	br	8008c68 <__alt_data_end+0xfc008c68>

08008d18 <__s2b>:
 8008d18:	defff904 	addi	sp,sp,-28
 8008d1c:	dc400115 	stw	r17,4(sp)
 8008d20:	dc000015 	stw	r16,0(sp)
 8008d24:	2023883a 	mov	r17,r4
 8008d28:	2821883a 	mov	r16,r5
 8008d2c:	39000204 	addi	r4,r7,8
 8008d30:	01400244 	movi	r5,9
 8008d34:	dcc00315 	stw	r19,12(sp)
 8008d38:	dc800215 	stw	r18,8(sp)
 8008d3c:	dfc00615 	stw	ra,24(sp)
 8008d40:	dd400515 	stw	r21,20(sp)
 8008d44:	dd000415 	stw	r20,16(sp)
 8008d48:	3825883a 	mov	r18,r7
 8008d4c:	3027883a 	mov	r19,r6
 8008d50:	80029440 	call	8002944 <__divsi3>
 8008d54:	00c00044 	movi	r3,1
 8008d58:	000b883a 	mov	r5,zero
 8008d5c:	1880030e 	bge	r3,r2,8008d6c <__s2b+0x54>
 8008d60:	18c7883a 	add	r3,r3,r3
 8008d64:	29400044 	addi	r5,r5,1
 8008d68:	18bffd16 	blt	r3,r2,8008d60 <__alt_data_end+0xfc008d60>
 8008d6c:	8809883a 	mov	r4,r17
 8008d70:	8008b000 	call	8008b00 <_Balloc>
 8008d74:	d8c00717 	ldw	r3,28(sp)
 8008d78:	10c00515 	stw	r3,20(r2)
 8008d7c:	00c00044 	movi	r3,1
 8008d80:	10c00415 	stw	r3,16(r2)
 8008d84:	00c00244 	movi	r3,9
 8008d88:	1cc0210e 	bge	r3,r19,8008e10 <__s2b+0xf8>
 8008d8c:	80eb883a 	add	r21,r16,r3
 8008d90:	a829883a 	mov	r20,r21
 8008d94:	84e1883a 	add	r16,r16,r19
 8008d98:	a1c00007 	ldb	r7,0(r20)
 8008d9c:	01800284 	movi	r6,10
 8008da0:	a5000044 	addi	r20,r20,1
 8008da4:	100b883a 	mov	r5,r2
 8008da8:	39fff404 	addi	r7,r7,-48
 8008dac:	8809883a 	mov	r4,r17
 8008db0:	8008bd00 	call	8008bd0 <__multadd>
 8008db4:	a43ff81e 	bne	r20,r16,8008d98 <__alt_data_end+0xfc008d98>
 8008db8:	ace1883a 	add	r16,r21,r19
 8008dbc:	843ffe04 	addi	r16,r16,-8
 8008dc0:	9c800a0e 	bge	r19,r18,8008dec <__s2b+0xd4>
 8008dc4:	94e5c83a 	sub	r18,r18,r19
 8008dc8:	84a5883a 	add	r18,r16,r18
 8008dcc:	81c00007 	ldb	r7,0(r16)
 8008dd0:	01800284 	movi	r6,10
 8008dd4:	84000044 	addi	r16,r16,1
 8008dd8:	100b883a 	mov	r5,r2
 8008ddc:	39fff404 	addi	r7,r7,-48
 8008de0:	8809883a 	mov	r4,r17
 8008de4:	8008bd00 	call	8008bd0 <__multadd>
 8008de8:	84bff81e 	bne	r16,r18,8008dcc <__alt_data_end+0xfc008dcc>
 8008dec:	dfc00617 	ldw	ra,24(sp)
 8008df0:	dd400517 	ldw	r21,20(sp)
 8008df4:	dd000417 	ldw	r20,16(sp)
 8008df8:	dcc00317 	ldw	r19,12(sp)
 8008dfc:	dc800217 	ldw	r18,8(sp)
 8008e00:	dc400117 	ldw	r17,4(sp)
 8008e04:	dc000017 	ldw	r16,0(sp)
 8008e08:	dec00704 	addi	sp,sp,28
 8008e0c:	f800283a 	ret
 8008e10:	84000284 	addi	r16,r16,10
 8008e14:	1827883a 	mov	r19,r3
 8008e18:	003fe906 	br	8008dc0 <__alt_data_end+0xfc008dc0>

08008e1c <__hi0bits>:
 8008e1c:	20bfffec 	andhi	r2,r4,65535
 8008e20:	1000141e 	bne	r2,zero,8008e74 <__hi0bits+0x58>
 8008e24:	2008943a 	slli	r4,r4,16
 8008e28:	00800404 	movi	r2,16
 8008e2c:	20ffc02c 	andhi	r3,r4,65280
 8008e30:	1800021e 	bne	r3,zero,8008e3c <__hi0bits+0x20>
 8008e34:	2008923a 	slli	r4,r4,8
 8008e38:	10800204 	addi	r2,r2,8
 8008e3c:	20fc002c 	andhi	r3,r4,61440
 8008e40:	1800021e 	bne	r3,zero,8008e4c <__hi0bits+0x30>
 8008e44:	2008913a 	slli	r4,r4,4
 8008e48:	10800104 	addi	r2,r2,4
 8008e4c:	20f0002c 	andhi	r3,r4,49152
 8008e50:	1800031e 	bne	r3,zero,8008e60 <__hi0bits+0x44>
 8008e54:	2109883a 	add	r4,r4,r4
 8008e58:	10800084 	addi	r2,r2,2
 8008e5c:	2109883a 	add	r4,r4,r4
 8008e60:	20000316 	blt	r4,zero,8008e70 <__hi0bits+0x54>
 8008e64:	2110002c 	andhi	r4,r4,16384
 8008e68:	2000041e 	bne	r4,zero,8008e7c <__hi0bits+0x60>
 8008e6c:	00800804 	movi	r2,32
 8008e70:	f800283a 	ret
 8008e74:	0005883a 	mov	r2,zero
 8008e78:	003fec06 	br	8008e2c <__alt_data_end+0xfc008e2c>
 8008e7c:	10800044 	addi	r2,r2,1
 8008e80:	f800283a 	ret

08008e84 <__lo0bits>:
 8008e84:	20c00017 	ldw	r3,0(r4)
 8008e88:	188001cc 	andi	r2,r3,7
 8008e8c:	10000826 	beq	r2,zero,8008eb0 <__lo0bits+0x2c>
 8008e90:	1880004c 	andi	r2,r3,1
 8008e94:	1000211e 	bne	r2,zero,8008f1c <__lo0bits+0x98>
 8008e98:	1880008c 	andi	r2,r3,2
 8008e9c:	1000211e 	bne	r2,zero,8008f24 <__lo0bits+0xa0>
 8008ea0:	1806d0ba 	srli	r3,r3,2
 8008ea4:	00800084 	movi	r2,2
 8008ea8:	20c00015 	stw	r3,0(r4)
 8008eac:	f800283a 	ret
 8008eb0:	18bfffcc 	andi	r2,r3,65535
 8008eb4:	10001326 	beq	r2,zero,8008f04 <__lo0bits+0x80>
 8008eb8:	0005883a 	mov	r2,zero
 8008ebc:	19403fcc 	andi	r5,r3,255
 8008ec0:	2800021e 	bne	r5,zero,8008ecc <__lo0bits+0x48>
 8008ec4:	1806d23a 	srli	r3,r3,8
 8008ec8:	10800204 	addi	r2,r2,8
 8008ecc:	194003cc 	andi	r5,r3,15
 8008ed0:	2800021e 	bne	r5,zero,8008edc <__lo0bits+0x58>
 8008ed4:	1806d13a 	srli	r3,r3,4
 8008ed8:	10800104 	addi	r2,r2,4
 8008edc:	194000cc 	andi	r5,r3,3
 8008ee0:	2800021e 	bne	r5,zero,8008eec <__lo0bits+0x68>
 8008ee4:	1806d0ba 	srli	r3,r3,2
 8008ee8:	10800084 	addi	r2,r2,2
 8008eec:	1940004c 	andi	r5,r3,1
 8008ef0:	2800081e 	bne	r5,zero,8008f14 <__lo0bits+0x90>
 8008ef4:	1806d07a 	srli	r3,r3,1
 8008ef8:	1800051e 	bne	r3,zero,8008f10 <__lo0bits+0x8c>
 8008efc:	00800804 	movi	r2,32
 8008f00:	f800283a 	ret
 8008f04:	1806d43a 	srli	r3,r3,16
 8008f08:	00800404 	movi	r2,16
 8008f0c:	003feb06 	br	8008ebc <__alt_data_end+0xfc008ebc>
 8008f10:	10800044 	addi	r2,r2,1
 8008f14:	20c00015 	stw	r3,0(r4)
 8008f18:	f800283a 	ret
 8008f1c:	0005883a 	mov	r2,zero
 8008f20:	f800283a 	ret
 8008f24:	1806d07a 	srli	r3,r3,1
 8008f28:	00800044 	movi	r2,1
 8008f2c:	20c00015 	stw	r3,0(r4)
 8008f30:	f800283a 	ret

08008f34 <__i2b>:
 8008f34:	defffd04 	addi	sp,sp,-12
 8008f38:	dc000015 	stw	r16,0(sp)
 8008f3c:	04000044 	movi	r16,1
 8008f40:	dc400115 	stw	r17,4(sp)
 8008f44:	2823883a 	mov	r17,r5
 8008f48:	800b883a 	mov	r5,r16
 8008f4c:	dfc00215 	stw	ra,8(sp)
 8008f50:	8008b000 	call	8008b00 <_Balloc>
 8008f54:	14400515 	stw	r17,20(r2)
 8008f58:	14000415 	stw	r16,16(r2)
 8008f5c:	dfc00217 	ldw	ra,8(sp)
 8008f60:	dc400117 	ldw	r17,4(sp)
 8008f64:	dc000017 	ldw	r16,0(sp)
 8008f68:	dec00304 	addi	sp,sp,12
 8008f6c:	f800283a 	ret

08008f70 <__multiply>:
 8008f70:	deffef04 	addi	sp,sp,-68
 8008f74:	dc400815 	stw	r17,32(sp)
 8008f78:	dc000715 	stw	r16,28(sp)
 8008f7c:	34400417 	ldw	r17,16(r6)
 8008f80:	2c000417 	ldw	r16,16(r5)
 8008f84:	dd800d15 	stw	r22,52(sp)
 8008f88:	dc800915 	stw	r18,36(sp)
 8008f8c:	dfc01015 	stw	ra,64(sp)
 8008f90:	df000f15 	stw	fp,60(sp)
 8008f94:	ddc00e15 	stw	r23,56(sp)
 8008f98:	dd400c15 	stw	r21,48(sp)
 8008f9c:	dd000b15 	stw	r20,44(sp)
 8008fa0:	dcc00a15 	stw	r19,40(sp)
 8008fa4:	2825883a 	mov	r18,r5
 8008fa8:	302d883a 	mov	r22,r6
 8008fac:	8440050e 	bge	r16,r17,8008fc4 <__multiply+0x54>
 8008fb0:	8007883a 	mov	r3,r16
 8008fb4:	3025883a 	mov	r18,r6
 8008fb8:	8821883a 	mov	r16,r17
 8008fbc:	282d883a 	mov	r22,r5
 8008fc0:	1823883a 	mov	r17,r3
 8008fc4:	90800217 	ldw	r2,8(r18)
 8008fc8:	8447883a 	add	r3,r16,r17
 8008fcc:	d8c00215 	stw	r3,8(sp)
 8008fd0:	91400117 	ldw	r5,4(r18)
 8008fd4:	10c0010e 	bge	r2,r3,8008fdc <__multiply+0x6c>
 8008fd8:	29400044 	addi	r5,r5,1
 8008fdc:	8008b000 	call	8008b00 <_Balloc>
 8008fe0:	d8c00217 	ldw	r3,8(sp)
 8008fe4:	d8800615 	stw	r2,24(sp)
 8008fe8:	18eb883a 	add	r21,r3,r3
 8008fec:	ad6b883a 	add	r21,r21,r21
 8008ff0:	10c00504 	addi	r3,r2,20
 8008ff4:	1d6b883a 	add	r21,r3,r21
 8008ff8:	d8c00115 	stw	r3,4(sp)
 8008ffc:	dd400315 	stw	r21,12(sp)
 8009000:	1805883a 	mov	r2,r3
 8009004:	1d40042e 	bgeu	r3,r21,8009018 <__multiply+0xa8>
 8009008:	d8c00317 	ldw	r3,12(sp)
 800900c:	10000015 	stw	zero,0(r2)
 8009010:	10800104 	addi	r2,r2,4
 8009014:	10fffc36 	bltu	r2,r3,8009008 <__alt_data_end+0xfc009008>
 8009018:	8c63883a 	add	r17,r17,r17
 800901c:	b5800504 	addi	r22,r22,20
 8009020:	8c63883a 	add	r17,r17,r17
 8009024:	94800504 	addi	r18,r18,20
 8009028:	8421883a 	add	r16,r16,r16
 800902c:	b463883a 	add	r17,r22,r17
 8009030:	8421883a 	add	r16,r16,r16
 8009034:	dd800015 	stw	r22,0(sp)
 8009038:	dc800415 	stw	r18,16(sp)
 800903c:	dc400515 	stw	r17,20(sp)
 8009040:	9429883a 	add	r20,r18,r16
 8009044:	b4404f2e 	bgeu	r22,r17,8009184 <__multiply+0x214>
 8009048:	d8c00017 	ldw	r3,0(sp)
 800904c:	1c800017 	ldw	r18,0(r3)
 8009050:	947fffcc 	andi	r17,r18,65535
 8009054:	88001e26 	beq	r17,zero,80090d0 <__multiply+0x160>
 8009058:	dd800117 	ldw	r22,4(sp)
 800905c:	dd400417 	ldw	r21,16(sp)
 8009060:	0027883a 	mov	r19,zero
 8009064:	ac800017 	ldw	r18,0(r21)
 8009068:	b4000017 	ldw	r16,0(r22)
 800906c:	880b883a 	mov	r5,r17
 8009070:	913fffcc 	andi	r4,r18,65535
 8009074:	8002af80 	call	8002af8 <__mulsi3>
 8009078:	9008d43a 	srli	r4,r18,16
 800907c:	84bfffcc 	andi	r18,r16,65535
 8009080:	1485883a 	add	r2,r2,r18
 8009084:	14e5883a 	add	r18,r2,r19
 8009088:	8020d43a 	srli	r16,r16,16
 800908c:	9026d43a 	srli	r19,r18,16
 8009090:	880b883a 	mov	r5,r17
 8009094:	8002af80 	call	8002af8 <__mulsi3>
 8009098:	1405883a 	add	r2,r2,r16
 800909c:	14e1883a 	add	r16,r2,r19
 80090a0:	90ffffcc 	andi	r3,r18,65535
 80090a4:	8024943a 	slli	r18,r16,16
 80090a8:	ad400104 	addi	r21,r21,4
 80090ac:	b005883a 	mov	r2,r22
 80090b0:	90c6b03a 	or	r3,r18,r3
 80090b4:	b0c00015 	stw	r3,0(r22)
 80090b8:	8026d43a 	srli	r19,r16,16
 80090bc:	b5800104 	addi	r22,r22,4
 80090c0:	ad3fe836 	bltu	r21,r20,8009064 <__alt_data_end+0xfc009064>
 80090c4:	d8c00017 	ldw	r3,0(sp)
 80090c8:	14c00115 	stw	r19,4(r2)
 80090cc:	1c800017 	ldw	r18,0(r3)
 80090d0:	9024d43a 	srli	r18,r18,16
 80090d4:	90002226 	beq	r18,zero,8009160 <__multiply+0x1f0>
 80090d8:	d8c00117 	ldw	r3,4(sp)
 80090dc:	dd800417 	ldw	r22,16(sp)
 80090e0:	002f883a 	mov	r23,zero
 80090e4:	1f000017 	ldw	fp,0(r3)
 80090e8:	1823883a 	mov	r17,r3
 80090ec:	182b883a 	mov	r21,r3
 80090f0:	e021883a 	mov	r16,fp
 80090f4:	00000106 	br	80090fc <__multiply+0x18c>
 80090f8:	982b883a 	mov	r21,r19
 80090fc:	b100000b 	ldhu	r4,0(r22)
 8009100:	8020d43a 	srli	r16,r16,16
 8009104:	900b883a 	mov	r5,r18
 8009108:	8002af80 	call	8002af8 <__mulsi3>
 800910c:	1405883a 	add	r2,r2,r16
 8009110:	15ef883a 	add	r23,r2,r23
 8009114:	b804943a 	slli	r2,r23,16
 8009118:	e0ffffcc 	andi	r3,fp,65535
 800911c:	8c400104 	addi	r17,r17,4
 8009120:	10c6b03a 	or	r3,r2,r3
 8009124:	88ffff15 	stw	r3,-4(r17)
 8009128:	b5800104 	addi	r22,r22,4
 800912c:	b13fff17 	ldw	r4,-4(r22)
 8009130:	acc00104 	addi	r19,r21,4
 8009134:	900b883a 	mov	r5,r18
 8009138:	2008d43a 	srli	r4,r4,16
 800913c:	9c000017 	ldw	r16,0(r19)
 8009140:	8002af80 	call	8002af8 <__mulsi3>
 8009144:	b806d43a 	srli	r3,r23,16
 8009148:	813fffcc 	andi	r4,r16,65535
 800914c:	1105883a 	add	r2,r2,r4
 8009150:	10f9883a 	add	fp,r2,r3
 8009154:	e02ed43a 	srli	r23,fp,16
 8009158:	b53fe736 	bltu	r22,r20,80090f8 <__alt_data_end+0xfc0090f8>
 800915c:	af000115 	stw	fp,4(r21)
 8009160:	d8c00017 	ldw	r3,0(sp)
 8009164:	d9000517 	ldw	r4,20(sp)
 8009168:	18c00104 	addi	r3,r3,4
 800916c:	d8c00015 	stw	r3,0(sp)
 8009170:	d8c00117 	ldw	r3,4(sp)
 8009174:	18c00104 	addi	r3,r3,4
 8009178:	d8c00115 	stw	r3,4(sp)
 800917c:	d8c00017 	ldw	r3,0(sp)
 8009180:	193fb136 	bltu	r3,r4,8009048 <__alt_data_end+0xfc009048>
 8009184:	d8c00217 	ldw	r3,8(sp)
 8009188:	00c00c0e 	bge	zero,r3,80091bc <__multiply+0x24c>
 800918c:	d8c00317 	ldw	r3,12(sp)
 8009190:	18bfff17 	ldw	r2,-4(r3)
 8009194:	1d7fff04 	addi	r21,r3,-4
 8009198:	10000326 	beq	r2,zero,80091a8 <__multiply+0x238>
 800919c:	00000706 	br	80091bc <__multiply+0x24c>
 80091a0:	a8800017 	ldw	r2,0(r21)
 80091a4:	1000051e 	bne	r2,zero,80091bc <__multiply+0x24c>
 80091a8:	d8c00217 	ldw	r3,8(sp)
 80091ac:	ad7fff04 	addi	r21,r21,-4
 80091b0:	18ffffc4 	addi	r3,r3,-1
 80091b4:	d8c00215 	stw	r3,8(sp)
 80091b8:	183ff91e 	bne	r3,zero,80091a0 <__alt_data_end+0xfc0091a0>
 80091bc:	d8c00617 	ldw	r3,24(sp)
 80091c0:	d9000217 	ldw	r4,8(sp)
 80091c4:	1805883a 	mov	r2,r3
 80091c8:	19000415 	stw	r4,16(r3)
 80091cc:	dfc01017 	ldw	ra,64(sp)
 80091d0:	df000f17 	ldw	fp,60(sp)
 80091d4:	ddc00e17 	ldw	r23,56(sp)
 80091d8:	dd800d17 	ldw	r22,52(sp)
 80091dc:	dd400c17 	ldw	r21,48(sp)
 80091e0:	dd000b17 	ldw	r20,44(sp)
 80091e4:	dcc00a17 	ldw	r19,40(sp)
 80091e8:	dc800917 	ldw	r18,36(sp)
 80091ec:	dc400817 	ldw	r17,32(sp)
 80091f0:	dc000717 	ldw	r16,28(sp)
 80091f4:	dec01104 	addi	sp,sp,68
 80091f8:	f800283a 	ret

080091fc <__pow5mult>:
 80091fc:	defffa04 	addi	sp,sp,-24
 8009200:	dcc00315 	stw	r19,12(sp)
 8009204:	dc000015 	stw	r16,0(sp)
 8009208:	dfc00515 	stw	ra,20(sp)
 800920c:	dd000415 	stw	r20,16(sp)
 8009210:	dc800215 	stw	r18,8(sp)
 8009214:	dc400115 	stw	r17,4(sp)
 8009218:	308000cc 	andi	r2,r6,3
 800921c:	3021883a 	mov	r16,r6
 8009220:	2027883a 	mov	r19,r4
 8009224:	10002f1e 	bne	r2,zero,80092e4 <__pow5mult+0xe8>
 8009228:	2825883a 	mov	r18,r5
 800922c:	8021d0ba 	srai	r16,r16,2
 8009230:	80001a26 	beq	r16,zero,800929c <__pow5mult+0xa0>
 8009234:	9c401217 	ldw	r17,72(r19)
 8009238:	8800061e 	bne	r17,zero,8009254 <__pow5mult+0x58>
 800923c:	00003406 	br	8009310 <__pow5mult+0x114>
 8009240:	8021d07a 	srai	r16,r16,1
 8009244:	80001526 	beq	r16,zero,800929c <__pow5mult+0xa0>
 8009248:	88800017 	ldw	r2,0(r17)
 800924c:	10001c26 	beq	r2,zero,80092c0 <__pow5mult+0xc4>
 8009250:	1023883a 	mov	r17,r2
 8009254:	8080004c 	andi	r2,r16,1
 8009258:	103ff926 	beq	r2,zero,8009240 <__alt_data_end+0xfc009240>
 800925c:	880d883a 	mov	r6,r17
 8009260:	900b883a 	mov	r5,r18
 8009264:	9809883a 	mov	r4,r19
 8009268:	8008f700 	call	8008f70 <__multiply>
 800926c:	90001b26 	beq	r18,zero,80092dc <__pow5mult+0xe0>
 8009270:	91000117 	ldw	r4,4(r18)
 8009274:	98c01317 	ldw	r3,76(r19)
 8009278:	8021d07a 	srai	r16,r16,1
 800927c:	2109883a 	add	r4,r4,r4
 8009280:	2109883a 	add	r4,r4,r4
 8009284:	1907883a 	add	r3,r3,r4
 8009288:	19000017 	ldw	r4,0(r3)
 800928c:	91000015 	stw	r4,0(r18)
 8009290:	1c800015 	stw	r18,0(r3)
 8009294:	1025883a 	mov	r18,r2
 8009298:	803feb1e 	bne	r16,zero,8009248 <__alt_data_end+0xfc009248>
 800929c:	9005883a 	mov	r2,r18
 80092a0:	dfc00517 	ldw	ra,20(sp)
 80092a4:	dd000417 	ldw	r20,16(sp)
 80092a8:	dcc00317 	ldw	r19,12(sp)
 80092ac:	dc800217 	ldw	r18,8(sp)
 80092b0:	dc400117 	ldw	r17,4(sp)
 80092b4:	dc000017 	ldw	r16,0(sp)
 80092b8:	dec00604 	addi	sp,sp,24
 80092bc:	f800283a 	ret
 80092c0:	880d883a 	mov	r6,r17
 80092c4:	880b883a 	mov	r5,r17
 80092c8:	9809883a 	mov	r4,r19
 80092cc:	8008f700 	call	8008f70 <__multiply>
 80092d0:	88800015 	stw	r2,0(r17)
 80092d4:	10000015 	stw	zero,0(r2)
 80092d8:	003fdd06 	br	8009250 <__alt_data_end+0xfc009250>
 80092dc:	1025883a 	mov	r18,r2
 80092e0:	003fd706 	br	8009240 <__alt_data_end+0xfc009240>
 80092e4:	10bfffc4 	addi	r2,r2,-1
 80092e8:	1085883a 	add	r2,r2,r2
 80092ec:	00c20074 	movhi	r3,2049
 80092f0:	18d03904 	addi	r3,r3,16612
 80092f4:	1085883a 	add	r2,r2,r2
 80092f8:	1885883a 	add	r2,r3,r2
 80092fc:	11800017 	ldw	r6,0(r2)
 8009300:	000f883a 	mov	r7,zero
 8009304:	8008bd00 	call	8008bd0 <__multadd>
 8009308:	1025883a 	mov	r18,r2
 800930c:	003fc706 	br	800922c <__alt_data_end+0xfc00922c>
 8009310:	05000044 	movi	r20,1
 8009314:	a00b883a 	mov	r5,r20
 8009318:	9809883a 	mov	r4,r19
 800931c:	8008b000 	call	8008b00 <_Balloc>
 8009320:	1023883a 	mov	r17,r2
 8009324:	00809c44 	movi	r2,625
 8009328:	88800515 	stw	r2,20(r17)
 800932c:	8d000415 	stw	r20,16(r17)
 8009330:	9c401215 	stw	r17,72(r19)
 8009334:	88000015 	stw	zero,0(r17)
 8009338:	003fc606 	br	8009254 <__alt_data_end+0xfc009254>

0800933c <__lshift>:
 800933c:	defff904 	addi	sp,sp,-28
 8009340:	dd400515 	stw	r21,20(sp)
 8009344:	dcc00315 	stw	r19,12(sp)
 8009348:	302bd17a 	srai	r21,r6,5
 800934c:	2cc00417 	ldw	r19,16(r5)
 8009350:	28800217 	ldw	r2,8(r5)
 8009354:	dd000415 	stw	r20,16(sp)
 8009358:	ace7883a 	add	r19,r21,r19
 800935c:	dc800215 	stw	r18,8(sp)
 8009360:	dc400115 	stw	r17,4(sp)
 8009364:	dc000015 	stw	r16,0(sp)
 8009368:	dfc00615 	stw	ra,24(sp)
 800936c:	9c000044 	addi	r16,r19,1
 8009370:	2823883a 	mov	r17,r5
 8009374:	3029883a 	mov	r20,r6
 8009378:	2025883a 	mov	r18,r4
 800937c:	29400117 	ldw	r5,4(r5)
 8009380:	1400030e 	bge	r2,r16,8009390 <__lshift+0x54>
 8009384:	1085883a 	add	r2,r2,r2
 8009388:	29400044 	addi	r5,r5,1
 800938c:	143ffd16 	blt	r2,r16,8009384 <__alt_data_end+0xfc009384>
 8009390:	9009883a 	mov	r4,r18
 8009394:	8008b000 	call	8008b00 <_Balloc>
 8009398:	10c00504 	addi	r3,r2,20
 800939c:	0540070e 	bge	zero,r21,80093bc <__lshift+0x80>
 80093a0:	ad6b883a 	add	r21,r21,r21
 80093a4:	ad6b883a 	add	r21,r21,r21
 80093a8:	1809883a 	mov	r4,r3
 80093ac:	1d47883a 	add	r3,r3,r21
 80093b0:	20000015 	stw	zero,0(r4)
 80093b4:	21000104 	addi	r4,r4,4
 80093b8:	193ffd1e 	bne	r3,r4,80093b0 <__alt_data_end+0xfc0093b0>
 80093bc:	8a000417 	ldw	r8,16(r17)
 80093c0:	89000504 	addi	r4,r17,20
 80093c4:	a18007cc 	andi	r6,r20,31
 80093c8:	4211883a 	add	r8,r8,r8
 80093cc:	4211883a 	add	r8,r8,r8
 80093d0:	2211883a 	add	r8,r4,r8
 80093d4:	30002326 	beq	r6,zero,8009464 <__lshift+0x128>
 80093d8:	02400804 	movi	r9,32
 80093dc:	4993c83a 	sub	r9,r9,r6
 80093e0:	000b883a 	mov	r5,zero
 80093e4:	21c00017 	ldw	r7,0(r4)
 80093e8:	1815883a 	mov	r10,r3
 80093ec:	18c00104 	addi	r3,r3,4
 80093f0:	398e983a 	sll	r7,r7,r6
 80093f4:	21000104 	addi	r4,r4,4
 80093f8:	394ab03a 	or	r5,r7,r5
 80093fc:	197fff15 	stw	r5,-4(r3)
 8009400:	217fff17 	ldw	r5,-4(r4)
 8009404:	2a4ad83a 	srl	r5,r5,r9
 8009408:	223ff636 	bltu	r4,r8,80093e4 <__alt_data_end+0xfc0093e4>
 800940c:	51400115 	stw	r5,4(r10)
 8009410:	28001a1e 	bne	r5,zero,800947c <__lshift+0x140>
 8009414:	843fffc4 	addi	r16,r16,-1
 8009418:	14000415 	stw	r16,16(r2)
 800941c:	88000826 	beq	r17,zero,8009440 <__lshift+0x104>
 8009420:	89000117 	ldw	r4,4(r17)
 8009424:	90c01317 	ldw	r3,76(r18)
 8009428:	2109883a 	add	r4,r4,r4
 800942c:	2109883a 	add	r4,r4,r4
 8009430:	1907883a 	add	r3,r3,r4
 8009434:	19000017 	ldw	r4,0(r3)
 8009438:	89000015 	stw	r4,0(r17)
 800943c:	1c400015 	stw	r17,0(r3)
 8009440:	dfc00617 	ldw	ra,24(sp)
 8009444:	dd400517 	ldw	r21,20(sp)
 8009448:	dd000417 	ldw	r20,16(sp)
 800944c:	dcc00317 	ldw	r19,12(sp)
 8009450:	dc800217 	ldw	r18,8(sp)
 8009454:	dc400117 	ldw	r17,4(sp)
 8009458:	dc000017 	ldw	r16,0(sp)
 800945c:	dec00704 	addi	sp,sp,28
 8009460:	f800283a 	ret
 8009464:	21400017 	ldw	r5,0(r4)
 8009468:	18c00104 	addi	r3,r3,4
 800946c:	21000104 	addi	r4,r4,4
 8009470:	197fff15 	stw	r5,-4(r3)
 8009474:	223ffb36 	bltu	r4,r8,8009464 <__alt_data_end+0xfc009464>
 8009478:	003fe606 	br	8009414 <__alt_data_end+0xfc009414>
 800947c:	9c000084 	addi	r16,r19,2
 8009480:	003fe406 	br	8009414 <__alt_data_end+0xfc009414>

08009484 <__mcmp>:
 8009484:	20800417 	ldw	r2,16(r4)
 8009488:	28c00417 	ldw	r3,16(r5)
 800948c:	10c5c83a 	sub	r2,r2,r3
 8009490:	1000111e 	bne	r2,zero,80094d8 <__mcmp+0x54>
 8009494:	18c7883a 	add	r3,r3,r3
 8009498:	18c7883a 	add	r3,r3,r3
 800949c:	21000504 	addi	r4,r4,20
 80094a0:	29400504 	addi	r5,r5,20
 80094a4:	20c5883a 	add	r2,r4,r3
 80094a8:	28cb883a 	add	r5,r5,r3
 80094ac:	00000106 	br	80094b4 <__mcmp+0x30>
 80094b0:	20800a2e 	bgeu	r4,r2,80094dc <__mcmp+0x58>
 80094b4:	10bfff04 	addi	r2,r2,-4
 80094b8:	297fff04 	addi	r5,r5,-4
 80094bc:	11800017 	ldw	r6,0(r2)
 80094c0:	28c00017 	ldw	r3,0(r5)
 80094c4:	30fffa26 	beq	r6,r3,80094b0 <__alt_data_end+0xfc0094b0>
 80094c8:	30c00236 	bltu	r6,r3,80094d4 <__mcmp+0x50>
 80094cc:	00800044 	movi	r2,1
 80094d0:	f800283a 	ret
 80094d4:	00bfffc4 	movi	r2,-1
 80094d8:	f800283a 	ret
 80094dc:	0005883a 	mov	r2,zero
 80094e0:	f800283a 	ret

080094e4 <__mdiff>:
 80094e4:	28c00417 	ldw	r3,16(r5)
 80094e8:	30800417 	ldw	r2,16(r6)
 80094ec:	defffa04 	addi	sp,sp,-24
 80094f0:	dcc00315 	stw	r19,12(sp)
 80094f4:	dc800215 	stw	r18,8(sp)
 80094f8:	dfc00515 	stw	ra,20(sp)
 80094fc:	dd000415 	stw	r20,16(sp)
 8009500:	dc400115 	stw	r17,4(sp)
 8009504:	dc000015 	stw	r16,0(sp)
 8009508:	1887c83a 	sub	r3,r3,r2
 800950c:	2825883a 	mov	r18,r5
 8009510:	3027883a 	mov	r19,r6
 8009514:	1800141e 	bne	r3,zero,8009568 <__mdiff+0x84>
 8009518:	1085883a 	add	r2,r2,r2
 800951c:	1085883a 	add	r2,r2,r2
 8009520:	2a000504 	addi	r8,r5,20
 8009524:	34000504 	addi	r16,r6,20
 8009528:	4087883a 	add	r3,r8,r2
 800952c:	8085883a 	add	r2,r16,r2
 8009530:	00000106 	br	8009538 <__mdiff+0x54>
 8009534:	40c0592e 	bgeu	r8,r3,800969c <__mdiff+0x1b8>
 8009538:	18ffff04 	addi	r3,r3,-4
 800953c:	10bfff04 	addi	r2,r2,-4
 8009540:	19c00017 	ldw	r7,0(r3)
 8009544:	11400017 	ldw	r5,0(r2)
 8009548:	397ffa26 	beq	r7,r5,8009534 <__alt_data_end+0xfc009534>
 800954c:	3940592e 	bgeu	r7,r5,80096b4 <__mdiff+0x1d0>
 8009550:	9005883a 	mov	r2,r18
 8009554:	4023883a 	mov	r17,r8
 8009558:	9825883a 	mov	r18,r19
 800955c:	05000044 	movi	r20,1
 8009560:	1027883a 	mov	r19,r2
 8009564:	00000406 	br	8009578 <__mdiff+0x94>
 8009568:	18005616 	blt	r3,zero,80096c4 <__mdiff+0x1e0>
 800956c:	34400504 	addi	r17,r6,20
 8009570:	2c000504 	addi	r16,r5,20
 8009574:	0029883a 	mov	r20,zero
 8009578:	91400117 	ldw	r5,4(r18)
 800957c:	8008b000 	call	8008b00 <_Balloc>
 8009580:	92400417 	ldw	r9,16(r18)
 8009584:	9b000417 	ldw	r12,16(r19)
 8009588:	12c00504 	addi	r11,r2,20
 800958c:	4a51883a 	add	r8,r9,r9
 8009590:	6319883a 	add	r12,r12,r12
 8009594:	4211883a 	add	r8,r8,r8
 8009598:	6319883a 	add	r12,r12,r12
 800959c:	15000315 	stw	r20,12(r2)
 80095a0:	8211883a 	add	r8,r16,r8
 80095a4:	8b19883a 	add	r12,r17,r12
 80095a8:	0007883a 	mov	r3,zero
 80095ac:	81400017 	ldw	r5,0(r16)
 80095b0:	89c00017 	ldw	r7,0(r17)
 80095b4:	59800104 	addi	r6,r11,4
 80095b8:	293fffcc 	andi	r4,r5,65535
 80095bc:	20c7883a 	add	r3,r4,r3
 80095c0:	393fffcc 	andi	r4,r7,65535
 80095c4:	1909c83a 	sub	r4,r3,r4
 80095c8:	280ad43a 	srli	r5,r5,16
 80095cc:	380ed43a 	srli	r7,r7,16
 80095d0:	2007d43a 	srai	r3,r4,16
 80095d4:	213fffcc 	andi	r4,r4,65535
 80095d8:	29cbc83a 	sub	r5,r5,r7
 80095dc:	28c7883a 	add	r3,r5,r3
 80095e0:	180a943a 	slli	r5,r3,16
 80095e4:	8c400104 	addi	r17,r17,4
 80095e8:	84000104 	addi	r16,r16,4
 80095ec:	2908b03a 	or	r4,r5,r4
 80095f0:	59000015 	stw	r4,0(r11)
 80095f4:	1807d43a 	srai	r3,r3,16
 80095f8:	3015883a 	mov	r10,r6
 80095fc:	3017883a 	mov	r11,r6
 8009600:	8b3fea36 	bltu	r17,r12,80095ac <__alt_data_end+0xfc0095ac>
 8009604:	8200162e 	bgeu	r16,r8,8009660 <__mdiff+0x17c>
 8009608:	8017883a 	mov	r11,r16
 800960c:	59400017 	ldw	r5,0(r11)
 8009610:	31800104 	addi	r6,r6,4
 8009614:	5ac00104 	addi	r11,r11,4
 8009618:	293fffcc 	andi	r4,r5,65535
 800961c:	20c7883a 	add	r3,r4,r3
 8009620:	280ed43a 	srli	r7,r5,16
 8009624:	180bd43a 	srai	r5,r3,16
 8009628:	193fffcc 	andi	r4,r3,65535
 800962c:	3947883a 	add	r3,r7,r5
 8009630:	180a943a 	slli	r5,r3,16
 8009634:	1807d43a 	srai	r3,r3,16
 8009638:	2908b03a 	or	r4,r5,r4
 800963c:	313fff15 	stw	r4,-4(r6)
 8009640:	5a3ff236 	bltu	r11,r8,800960c <__alt_data_end+0xfc00960c>
 8009644:	0406303a 	nor	r3,zero,r16
 8009648:	1a07883a 	add	r3,r3,r8
 800964c:	1806d0ba 	srli	r3,r3,2
 8009650:	18c00044 	addi	r3,r3,1
 8009654:	18c7883a 	add	r3,r3,r3
 8009658:	18c7883a 	add	r3,r3,r3
 800965c:	50d5883a 	add	r10,r10,r3
 8009660:	50ffff04 	addi	r3,r10,-4
 8009664:	2000041e 	bne	r4,zero,8009678 <__mdiff+0x194>
 8009668:	18ffff04 	addi	r3,r3,-4
 800966c:	19000017 	ldw	r4,0(r3)
 8009670:	4a7fffc4 	addi	r9,r9,-1
 8009674:	203ffc26 	beq	r4,zero,8009668 <__alt_data_end+0xfc009668>
 8009678:	12400415 	stw	r9,16(r2)
 800967c:	dfc00517 	ldw	ra,20(sp)
 8009680:	dd000417 	ldw	r20,16(sp)
 8009684:	dcc00317 	ldw	r19,12(sp)
 8009688:	dc800217 	ldw	r18,8(sp)
 800968c:	dc400117 	ldw	r17,4(sp)
 8009690:	dc000017 	ldw	r16,0(sp)
 8009694:	dec00604 	addi	sp,sp,24
 8009698:	f800283a 	ret
 800969c:	000b883a 	mov	r5,zero
 80096a0:	8008b000 	call	8008b00 <_Balloc>
 80096a4:	00c00044 	movi	r3,1
 80096a8:	10c00415 	stw	r3,16(r2)
 80096ac:	10000515 	stw	zero,20(r2)
 80096b0:	003ff206 	br	800967c <__alt_data_end+0xfc00967c>
 80096b4:	8023883a 	mov	r17,r16
 80096b8:	0029883a 	mov	r20,zero
 80096bc:	4021883a 	mov	r16,r8
 80096c0:	003fad06 	br	8009578 <__alt_data_end+0xfc009578>
 80096c4:	9005883a 	mov	r2,r18
 80096c8:	94400504 	addi	r17,r18,20
 80096cc:	9c000504 	addi	r16,r19,20
 80096d0:	9825883a 	mov	r18,r19
 80096d4:	05000044 	movi	r20,1
 80096d8:	1027883a 	mov	r19,r2
 80096dc:	003fa606 	br	8009578 <__alt_data_end+0xfc009578>

080096e0 <__ulp>:
 80096e0:	295ffc2c 	andhi	r5,r5,32752
 80096e4:	00bf3034 	movhi	r2,64704
 80096e8:	2887883a 	add	r3,r5,r2
 80096ec:	00c0020e 	bge	zero,r3,80096f8 <__ulp+0x18>
 80096f0:	0005883a 	mov	r2,zero
 80096f4:	f800283a 	ret
 80096f8:	00c7c83a 	sub	r3,zero,r3
 80096fc:	1807d53a 	srai	r3,r3,20
 8009700:	008004c4 	movi	r2,19
 8009704:	10c00b0e 	bge	r2,r3,8009734 <__ulp+0x54>
 8009708:	18bffb04 	addi	r2,r3,-20
 800970c:	01000784 	movi	r4,30
 8009710:	0007883a 	mov	r3,zero
 8009714:	20800516 	blt	r4,r2,800972c <__ulp+0x4c>
 8009718:	010007c4 	movi	r4,31
 800971c:	2089c83a 	sub	r4,r4,r2
 8009720:	00800044 	movi	r2,1
 8009724:	1104983a 	sll	r2,r2,r4
 8009728:	f800283a 	ret
 800972c:	00800044 	movi	r2,1
 8009730:	f800283a 	ret
 8009734:	01400234 	movhi	r5,8
 8009738:	28c7d83a 	sra	r3,r5,r3
 800973c:	0005883a 	mov	r2,zero
 8009740:	f800283a 	ret

08009744 <__b2d>:
 8009744:	defffa04 	addi	sp,sp,-24
 8009748:	dc000015 	stw	r16,0(sp)
 800974c:	24000417 	ldw	r16,16(r4)
 8009750:	dc400115 	stw	r17,4(sp)
 8009754:	24400504 	addi	r17,r4,20
 8009758:	8421883a 	add	r16,r16,r16
 800975c:	8421883a 	add	r16,r16,r16
 8009760:	8c21883a 	add	r16,r17,r16
 8009764:	dc800215 	stw	r18,8(sp)
 8009768:	84bfff17 	ldw	r18,-4(r16)
 800976c:	dd000415 	stw	r20,16(sp)
 8009770:	dcc00315 	stw	r19,12(sp)
 8009774:	9009883a 	mov	r4,r18
 8009778:	2829883a 	mov	r20,r5
 800977c:	dfc00515 	stw	ra,20(sp)
 8009780:	8008e1c0 	call	8008e1c <__hi0bits>
 8009784:	00c00804 	movi	r3,32
 8009788:	1889c83a 	sub	r4,r3,r2
 800978c:	a1000015 	stw	r4,0(r20)
 8009790:	01000284 	movi	r4,10
 8009794:	84ffff04 	addi	r19,r16,-4
 8009798:	20801216 	blt	r4,r2,80097e4 <__b2d+0xa0>
 800979c:	018002c4 	movi	r6,11
 80097a0:	308dc83a 	sub	r6,r6,r2
 80097a4:	9186d83a 	srl	r3,r18,r6
 80097a8:	18cffc34 	orhi	r3,r3,16368
 80097ac:	8cc0212e 	bgeu	r17,r19,8009834 <__b2d+0xf0>
 80097b0:	813ffe17 	ldw	r4,-8(r16)
 80097b4:	218cd83a 	srl	r6,r4,r6
 80097b8:	10800544 	addi	r2,r2,21
 80097bc:	9084983a 	sll	r2,r18,r2
 80097c0:	1184b03a 	or	r2,r2,r6
 80097c4:	dfc00517 	ldw	ra,20(sp)
 80097c8:	dd000417 	ldw	r20,16(sp)
 80097cc:	dcc00317 	ldw	r19,12(sp)
 80097d0:	dc800217 	ldw	r18,8(sp)
 80097d4:	dc400117 	ldw	r17,4(sp)
 80097d8:	dc000017 	ldw	r16,0(sp)
 80097dc:	dec00604 	addi	sp,sp,24
 80097e0:	f800283a 	ret
 80097e4:	8cc00f2e 	bgeu	r17,r19,8009824 <__b2d+0xe0>
 80097e8:	117ffd44 	addi	r5,r2,-11
 80097ec:	80bffe17 	ldw	r2,-8(r16)
 80097f0:	28000e26 	beq	r5,zero,800982c <__b2d+0xe8>
 80097f4:	1949c83a 	sub	r4,r3,r5
 80097f8:	9164983a 	sll	r18,r18,r5
 80097fc:	1106d83a 	srl	r3,r2,r4
 8009800:	81bffe04 	addi	r6,r16,-8
 8009804:	948ffc34 	orhi	r18,r18,16368
 8009808:	90c6b03a 	or	r3,r18,r3
 800980c:	89800e2e 	bgeu	r17,r6,8009848 <__b2d+0x104>
 8009810:	81bffd17 	ldw	r6,-12(r16)
 8009814:	1144983a 	sll	r2,r2,r5
 8009818:	310ad83a 	srl	r5,r6,r4
 800981c:	2884b03a 	or	r2,r5,r2
 8009820:	003fe806 	br	80097c4 <__alt_data_end+0xfc0097c4>
 8009824:	10bffd44 	addi	r2,r2,-11
 8009828:	1000041e 	bne	r2,zero,800983c <__b2d+0xf8>
 800982c:	90cffc34 	orhi	r3,r18,16368
 8009830:	003fe406 	br	80097c4 <__alt_data_end+0xfc0097c4>
 8009834:	000d883a 	mov	r6,zero
 8009838:	003fdf06 	br	80097b8 <__alt_data_end+0xfc0097b8>
 800983c:	90a4983a 	sll	r18,r18,r2
 8009840:	0005883a 	mov	r2,zero
 8009844:	003ff906 	br	800982c <__alt_data_end+0xfc00982c>
 8009848:	1144983a 	sll	r2,r2,r5
 800984c:	003fdd06 	br	80097c4 <__alt_data_end+0xfc0097c4>

08009850 <__d2b>:
 8009850:	defff804 	addi	sp,sp,-32
 8009854:	dc000215 	stw	r16,8(sp)
 8009858:	3021883a 	mov	r16,r6
 800985c:	dc400315 	stw	r17,12(sp)
 8009860:	8022907a 	slli	r17,r16,1
 8009864:	dd000615 	stw	r20,24(sp)
 8009868:	2829883a 	mov	r20,r5
 800986c:	01400044 	movi	r5,1
 8009870:	dcc00515 	stw	r19,20(sp)
 8009874:	dc800415 	stw	r18,16(sp)
 8009878:	dfc00715 	stw	ra,28(sp)
 800987c:	3825883a 	mov	r18,r7
 8009880:	8822d57a 	srli	r17,r17,21
 8009884:	8008b000 	call	8008b00 <_Balloc>
 8009888:	1027883a 	mov	r19,r2
 800988c:	00800434 	movhi	r2,16
 8009890:	10bfffc4 	addi	r2,r2,-1
 8009894:	808c703a 	and	r6,r16,r2
 8009898:	88000126 	beq	r17,zero,80098a0 <__d2b+0x50>
 800989c:	31800434 	orhi	r6,r6,16
 80098a0:	d9800015 	stw	r6,0(sp)
 80098a4:	a0002426 	beq	r20,zero,8009938 <__d2b+0xe8>
 80098a8:	d9000104 	addi	r4,sp,4
 80098ac:	dd000115 	stw	r20,4(sp)
 80098b0:	8008e840 	call	8008e84 <__lo0bits>
 80098b4:	d8c00017 	ldw	r3,0(sp)
 80098b8:	10002f1e 	bne	r2,zero,8009978 <__d2b+0x128>
 80098bc:	d9000117 	ldw	r4,4(sp)
 80098c0:	99000515 	stw	r4,20(r19)
 80098c4:	1821003a 	cmpeq	r16,r3,zero
 80098c8:	01000084 	movi	r4,2
 80098cc:	2421c83a 	sub	r16,r4,r16
 80098d0:	98c00615 	stw	r3,24(r19)
 80098d4:	9c000415 	stw	r16,16(r19)
 80098d8:	88001f1e 	bne	r17,zero,8009958 <__d2b+0x108>
 80098dc:	10bef384 	addi	r2,r2,-1074
 80098e0:	90800015 	stw	r2,0(r18)
 80098e4:	00900034 	movhi	r2,16384
 80098e8:	10bfffc4 	addi	r2,r2,-1
 80098ec:	8085883a 	add	r2,r16,r2
 80098f0:	1085883a 	add	r2,r2,r2
 80098f4:	1085883a 	add	r2,r2,r2
 80098f8:	9885883a 	add	r2,r19,r2
 80098fc:	11000517 	ldw	r4,20(r2)
 8009900:	8020917a 	slli	r16,r16,5
 8009904:	8008e1c0 	call	8008e1c <__hi0bits>
 8009908:	d8c00817 	ldw	r3,32(sp)
 800990c:	8085c83a 	sub	r2,r16,r2
 8009910:	18800015 	stw	r2,0(r3)
 8009914:	9805883a 	mov	r2,r19
 8009918:	dfc00717 	ldw	ra,28(sp)
 800991c:	dd000617 	ldw	r20,24(sp)
 8009920:	dcc00517 	ldw	r19,20(sp)
 8009924:	dc800417 	ldw	r18,16(sp)
 8009928:	dc400317 	ldw	r17,12(sp)
 800992c:	dc000217 	ldw	r16,8(sp)
 8009930:	dec00804 	addi	sp,sp,32
 8009934:	f800283a 	ret
 8009938:	d809883a 	mov	r4,sp
 800993c:	8008e840 	call	8008e84 <__lo0bits>
 8009940:	d8c00017 	ldw	r3,0(sp)
 8009944:	04000044 	movi	r16,1
 8009948:	9c000415 	stw	r16,16(r19)
 800994c:	98c00515 	stw	r3,20(r19)
 8009950:	10800804 	addi	r2,r2,32
 8009954:	883fe126 	beq	r17,zero,80098dc <__alt_data_end+0xfc0098dc>
 8009958:	00c00d44 	movi	r3,53
 800995c:	8c7ef344 	addi	r17,r17,-1075
 8009960:	88a3883a 	add	r17,r17,r2
 8009964:	1885c83a 	sub	r2,r3,r2
 8009968:	d8c00817 	ldw	r3,32(sp)
 800996c:	94400015 	stw	r17,0(r18)
 8009970:	18800015 	stw	r2,0(r3)
 8009974:	003fe706 	br	8009914 <__alt_data_end+0xfc009914>
 8009978:	01000804 	movi	r4,32
 800997c:	2089c83a 	sub	r4,r4,r2
 8009980:	1908983a 	sll	r4,r3,r4
 8009984:	d9400117 	ldw	r5,4(sp)
 8009988:	1886d83a 	srl	r3,r3,r2
 800998c:	2148b03a 	or	r4,r4,r5
 8009990:	99000515 	stw	r4,20(r19)
 8009994:	d8c00015 	stw	r3,0(sp)
 8009998:	003fca06 	br	80098c4 <__alt_data_end+0xfc0098c4>

0800999c <__ratio>:
 800999c:	defff904 	addi	sp,sp,-28
 80099a0:	dc400315 	stw	r17,12(sp)
 80099a4:	2823883a 	mov	r17,r5
 80099a8:	d9400104 	addi	r5,sp,4
 80099ac:	dfc00615 	stw	ra,24(sp)
 80099b0:	dcc00515 	stw	r19,20(sp)
 80099b4:	dc800415 	stw	r18,16(sp)
 80099b8:	2027883a 	mov	r19,r4
 80099bc:	dc000215 	stw	r16,8(sp)
 80099c0:	80097440 	call	8009744 <__b2d>
 80099c4:	d80b883a 	mov	r5,sp
 80099c8:	8809883a 	mov	r4,r17
 80099cc:	1025883a 	mov	r18,r2
 80099d0:	1821883a 	mov	r16,r3
 80099d4:	80097440 	call	8009744 <__b2d>
 80099d8:	8a000417 	ldw	r8,16(r17)
 80099dc:	99000417 	ldw	r4,16(r19)
 80099e0:	d9400117 	ldw	r5,4(sp)
 80099e4:	2209c83a 	sub	r4,r4,r8
 80099e8:	2010917a 	slli	r8,r4,5
 80099ec:	d9000017 	ldw	r4,0(sp)
 80099f0:	2909c83a 	sub	r4,r5,r4
 80099f4:	4109883a 	add	r4,r8,r4
 80099f8:	01000e0e 	bge	zero,r4,8009a34 <__ratio+0x98>
 80099fc:	2008953a 	slli	r4,r4,20
 8009a00:	2421883a 	add	r16,r4,r16
 8009a04:	100d883a 	mov	r6,r2
 8009a08:	180f883a 	mov	r7,r3
 8009a0c:	9009883a 	mov	r4,r18
 8009a10:	800b883a 	mov	r5,r16
 8009a14:	800da140 	call	800da14 <__divdf3>
 8009a18:	dfc00617 	ldw	ra,24(sp)
 8009a1c:	dcc00517 	ldw	r19,20(sp)
 8009a20:	dc800417 	ldw	r18,16(sp)
 8009a24:	dc400317 	ldw	r17,12(sp)
 8009a28:	dc000217 	ldw	r16,8(sp)
 8009a2c:	dec00704 	addi	sp,sp,28
 8009a30:	f800283a 	ret
 8009a34:	2008953a 	slli	r4,r4,20
 8009a38:	1907c83a 	sub	r3,r3,r4
 8009a3c:	003ff106 	br	8009a04 <__alt_data_end+0xfc009a04>

08009a40 <_mprec_log10>:
 8009a40:	defffe04 	addi	sp,sp,-8
 8009a44:	dc000015 	stw	r16,0(sp)
 8009a48:	dfc00115 	stw	ra,4(sp)
 8009a4c:	008005c4 	movi	r2,23
 8009a50:	2021883a 	mov	r16,r4
 8009a54:	11000d0e 	bge	r2,r4,8009a8c <_mprec_log10+0x4c>
 8009a58:	0005883a 	mov	r2,zero
 8009a5c:	00cffc34 	movhi	r3,16368
 8009a60:	843fffc4 	addi	r16,r16,-1
 8009a64:	000d883a 	mov	r6,zero
 8009a68:	01d00934 	movhi	r7,16420
 8009a6c:	1009883a 	mov	r4,r2
 8009a70:	180b883a 	mov	r5,r3
 8009a74:	800e63c0 	call	800e63c <__muldf3>
 8009a78:	803ff91e 	bne	r16,zero,8009a60 <__alt_data_end+0xfc009a60>
 8009a7c:	dfc00117 	ldw	ra,4(sp)
 8009a80:	dc000017 	ldw	r16,0(sp)
 8009a84:	dec00204 	addi	sp,sp,8
 8009a88:	f800283a 	ret
 8009a8c:	202090fa 	slli	r16,r4,3
 8009a90:	00820074 	movhi	r2,2049
 8009a94:	10905004 	addi	r2,r2,16704
 8009a98:	1421883a 	add	r16,r2,r16
 8009a9c:	80800017 	ldw	r2,0(r16)
 8009aa0:	80c00117 	ldw	r3,4(r16)
 8009aa4:	dfc00117 	ldw	ra,4(sp)
 8009aa8:	dc000017 	ldw	r16,0(sp)
 8009aac:	dec00204 	addi	sp,sp,8
 8009ab0:	f800283a 	ret

08009ab4 <__copybits>:
 8009ab4:	297fffc4 	addi	r5,r5,-1
 8009ab8:	280fd17a 	srai	r7,r5,5
 8009abc:	30c00417 	ldw	r3,16(r6)
 8009ac0:	30800504 	addi	r2,r6,20
 8009ac4:	39c00044 	addi	r7,r7,1
 8009ac8:	18c7883a 	add	r3,r3,r3
 8009acc:	39cf883a 	add	r7,r7,r7
 8009ad0:	18c7883a 	add	r3,r3,r3
 8009ad4:	39cf883a 	add	r7,r7,r7
 8009ad8:	10c7883a 	add	r3,r2,r3
 8009adc:	21cf883a 	add	r7,r4,r7
 8009ae0:	10c00d2e 	bgeu	r2,r3,8009b18 <__copybits+0x64>
 8009ae4:	200b883a 	mov	r5,r4
 8009ae8:	12000017 	ldw	r8,0(r2)
 8009aec:	29400104 	addi	r5,r5,4
 8009af0:	10800104 	addi	r2,r2,4
 8009af4:	2a3fff15 	stw	r8,-4(r5)
 8009af8:	10fffb36 	bltu	r2,r3,8009ae8 <__alt_data_end+0xfc009ae8>
 8009afc:	1985c83a 	sub	r2,r3,r6
 8009b00:	10bffac4 	addi	r2,r2,-21
 8009b04:	1004d0ba 	srli	r2,r2,2
 8009b08:	10800044 	addi	r2,r2,1
 8009b0c:	1085883a 	add	r2,r2,r2
 8009b10:	1085883a 	add	r2,r2,r2
 8009b14:	2089883a 	add	r4,r4,r2
 8009b18:	21c0032e 	bgeu	r4,r7,8009b28 <__copybits+0x74>
 8009b1c:	20000015 	stw	zero,0(r4)
 8009b20:	21000104 	addi	r4,r4,4
 8009b24:	21fffd36 	bltu	r4,r7,8009b1c <__alt_data_end+0xfc009b1c>
 8009b28:	f800283a 	ret

08009b2c <__any_on>:
 8009b2c:	20c00417 	ldw	r3,16(r4)
 8009b30:	2805d17a 	srai	r2,r5,5
 8009b34:	21000504 	addi	r4,r4,20
 8009b38:	18800d0e 	bge	r3,r2,8009b70 <__any_on+0x44>
 8009b3c:	18c7883a 	add	r3,r3,r3
 8009b40:	18c7883a 	add	r3,r3,r3
 8009b44:	20c7883a 	add	r3,r4,r3
 8009b48:	20c0192e 	bgeu	r4,r3,8009bb0 <__any_on+0x84>
 8009b4c:	18bfff17 	ldw	r2,-4(r3)
 8009b50:	18ffff04 	addi	r3,r3,-4
 8009b54:	1000041e 	bne	r2,zero,8009b68 <__any_on+0x3c>
 8009b58:	20c0142e 	bgeu	r4,r3,8009bac <__any_on+0x80>
 8009b5c:	18ffff04 	addi	r3,r3,-4
 8009b60:	19400017 	ldw	r5,0(r3)
 8009b64:	283ffc26 	beq	r5,zero,8009b58 <__alt_data_end+0xfc009b58>
 8009b68:	00800044 	movi	r2,1
 8009b6c:	f800283a 	ret
 8009b70:	10c00a0e 	bge	r2,r3,8009b9c <__any_on+0x70>
 8009b74:	1085883a 	add	r2,r2,r2
 8009b78:	1085883a 	add	r2,r2,r2
 8009b7c:	294007cc 	andi	r5,r5,31
 8009b80:	2087883a 	add	r3,r4,r2
 8009b84:	283ff026 	beq	r5,zero,8009b48 <__alt_data_end+0xfc009b48>
 8009b88:	19800017 	ldw	r6,0(r3)
 8009b8c:	3144d83a 	srl	r2,r6,r5
 8009b90:	114a983a 	sll	r5,r2,r5
 8009b94:	317ff41e 	bne	r6,r5,8009b68 <__alt_data_end+0xfc009b68>
 8009b98:	003feb06 	br	8009b48 <__alt_data_end+0xfc009b48>
 8009b9c:	1085883a 	add	r2,r2,r2
 8009ba0:	1085883a 	add	r2,r2,r2
 8009ba4:	2087883a 	add	r3,r4,r2
 8009ba8:	003fe706 	br	8009b48 <__alt_data_end+0xfc009b48>
 8009bac:	f800283a 	ret
 8009bb0:	0005883a 	mov	r2,zero
 8009bb4:	f800283a 	ret

08009bb8 <_putc_r>:
 8009bb8:	defffc04 	addi	sp,sp,-16
 8009bbc:	dc000215 	stw	r16,8(sp)
 8009bc0:	dfc00315 	stw	ra,12(sp)
 8009bc4:	2021883a 	mov	r16,r4
 8009bc8:	20000226 	beq	r4,zero,8009bd4 <_putc_r+0x1c>
 8009bcc:	20800e17 	ldw	r2,56(r4)
 8009bd0:	10001b26 	beq	r2,zero,8009c40 <_putc_r+0x88>
 8009bd4:	30800217 	ldw	r2,8(r6)
 8009bd8:	10bfffc4 	addi	r2,r2,-1
 8009bdc:	30800215 	stw	r2,8(r6)
 8009be0:	10000a16 	blt	r2,zero,8009c0c <_putc_r+0x54>
 8009be4:	30800017 	ldw	r2,0(r6)
 8009be8:	11400005 	stb	r5,0(r2)
 8009bec:	30800017 	ldw	r2,0(r6)
 8009bf0:	10c00044 	addi	r3,r2,1
 8009bf4:	30c00015 	stw	r3,0(r6)
 8009bf8:	10800003 	ldbu	r2,0(r2)
 8009bfc:	dfc00317 	ldw	ra,12(sp)
 8009c00:	dc000217 	ldw	r16,8(sp)
 8009c04:	dec00404 	addi	sp,sp,16
 8009c08:	f800283a 	ret
 8009c0c:	30c00617 	ldw	r3,24(r6)
 8009c10:	10c00616 	blt	r2,r3,8009c2c <_putc_r+0x74>
 8009c14:	30800017 	ldw	r2,0(r6)
 8009c18:	00c00284 	movi	r3,10
 8009c1c:	11400005 	stb	r5,0(r2)
 8009c20:	30800017 	ldw	r2,0(r6)
 8009c24:	11400003 	ldbu	r5,0(r2)
 8009c28:	28fff11e 	bne	r5,r3,8009bf0 <__alt_data_end+0xfc009bf0>
 8009c2c:	8009883a 	mov	r4,r16
 8009c30:	dfc00317 	ldw	ra,12(sp)
 8009c34:	dc000217 	ldw	r16,8(sp)
 8009c38:	dec00404 	addi	sp,sp,16
 8009c3c:	800bc5c1 	jmpi	800bc5c <__swbuf_r>
 8009c40:	d9400015 	stw	r5,0(sp)
 8009c44:	d9800115 	stw	r6,4(sp)
 8009c48:	80072200 	call	8007220 <__sinit>
 8009c4c:	d9800117 	ldw	r6,4(sp)
 8009c50:	d9400017 	ldw	r5,0(sp)
 8009c54:	003fdf06 	br	8009bd4 <__alt_data_end+0xfc009bd4>

08009c58 <putc>:
 8009c58:	00820074 	movhi	r2,2049
 8009c5c:	defffc04 	addi	sp,sp,-16
 8009c60:	10979504 	addi	r2,r2,24148
 8009c64:	dc000115 	stw	r16,4(sp)
 8009c68:	14000017 	ldw	r16,0(r2)
 8009c6c:	dc400215 	stw	r17,8(sp)
 8009c70:	dfc00315 	stw	ra,12(sp)
 8009c74:	2023883a 	mov	r17,r4
 8009c78:	80000226 	beq	r16,zero,8009c84 <putc+0x2c>
 8009c7c:	80800e17 	ldw	r2,56(r16)
 8009c80:	10001a26 	beq	r2,zero,8009cec <putc+0x94>
 8009c84:	28800217 	ldw	r2,8(r5)
 8009c88:	10bfffc4 	addi	r2,r2,-1
 8009c8c:	28800215 	stw	r2,8(r5)
 8009c90:	10000b16 	blt	r2,zero,8009cc0 <putc+0x68>
 8009c94:	28800017 	ldw	r2,0(r5)
 8009c98:	14400005 	stb	r17,0(r2)
 8009c9c:	28800017 	ldw	r2,0(r5)
 8009ca0:	10c00044 	addi	r3,r2,1
 8009ca4:	28c00015 	stw	r3,0(r5)
 8009ca8:	10800003 	ldbu	r2,0(r2)
 8009cac:	dfc00317 	ldw	ra,12(sp)
 8009cb0:	dc400217 	ldw	r17,8(sp)
 8009cb4:	dc000117 	ldw	r16,4(sp)
 8009cb8:	dec00404 	addi	sp,sp,16
 8009cbc:	f800283a 	ret
 8009cc0:	28c00617 	ldw	r3,24(r5)
 8009cc4:	10c00e16 	blt	r2,r3,8009d00 <putc+0xa8>
 8009cc8:	28800017 	ldw	r2,0(r5)
 8009ccc:	01000284 	movi	r4,10
 8009cd0:	14400005 	stb	r17,0(r2)
 8009cd4:	28800017 	ldw	r2,0(r5)
 8009cd8:	10c00003 	ldbu	r3,0(r2)
 8009cdc:	193ff01e 	bne	r3,r4,8009ca0 <__alt_data_end+0xfc009ca0>
 8009ce0:	280d883a 	mov	r6,r5
 8009ce4:	180b883a 	mov	r5,r3
 8009ce8:	00000706 	br	8009d08 <putc+0xb0>
 8009cec:	8009883a 	mov	r4,r16
 8009cf0:	d9400015 	stw	r5,0(sp)
 8009cf4:	80072200 	call	8007220 <__sinit>
 8009cf8:	d9400017 	ldw	r5,0(sp)
 8009cfc:	003fe106 	br	8009c84 <__alt_data_end+0xfc009c84>
 8009d00:	280d883a 	mov	r6,r5
 8009d04:	880b883a 	mov	r5,r17
 8009d08:	8009883a 	mov	r4,r16
 8009d0c:	dfc00317 	ldw	ra,12(sp)
 8009d10:	dc400217 	ldw	r17,8(sp)
 8009d14:	dc000117 	ldw	r16,4(sp)
 8009d18:	dec00404 	addi	sp,sp,16
 8009d1c:	800bc5c1 	jmpi	800bc5c <__swbuf_r>

08009d20 <_realloc_r>:
 8009d20:	defff604 	addi	sp,sp,-40
 8009d24:	dc800215 	stw	r18,8(sp)
 8009d28:	dfc00915 	stw	ra,36(sp)
 8009d2c:	df000815 	stw	fp,32(sp)
 8009d30:	ddc00715 	stw	r23,28(sp)
 8009d34:	dd800615 	stw	r22,24(sp)
 8009d38:	dd400515 	stw	r21,20(sp)
 8009d3c:	dd000415 	stw	r20,16(sp)
 8009d40:	dcc00315 	stw	r19,12(sp)
 8009d44:	dc400115 	stw	r17,4(sp)
 8009d48:	dc000015 	stw	r16,0(sp)
 8009d4c:	3025883a 	mov	r18,r6
 8009d50:	2800b726 	beq	r5,zero,800a030 <_realloc_r+0x310>
 8009d54:	282b883a 	mov	r21,r5
 8009d58:	2029883a 	mov	r20,r4
 8009d5c:	800ffa80 	call	800ffa8 <__malloc_lock>
 8009d60:	a8bfff17 	ldw	r2,-4(r21)
 8009d64:	043fff04 	movi	r16,-4
 8009d68:	90c002c4 	addi	r3,r18,11
 8009d6c:	01000584 	movi	r4,22
 8009d70:	acfffe04 	addi	r19,r21,-8
 8009d74:	1420703a 	and	r16,r2,r16
 8009d78:	20c0332e 	bgeu	r4,r3,8009e48 <_realloc_r+0x128>
 8009d7c:	047ffe04 	movi	r17,-8
 8009d80:	1c62703a 	and	r17,r3,r17
 8009d84:	8807883a 	mov	r3,r17
 8009d88:	88005816 	blt	r17,zero,8009eec <_realloc_r+0x1cc>
 8009d8c:	8c805736 	bltu	r17,r18,8009eec <_realloc_r+0x1cc>
 8009d90:	80c0300e 	bge	r16,r3,8009e54 <_realloc_r+0x134>
 8009d94:	07020074 	movhi	fp,2049
 8009d98:	e7120a04 	addi	fp,fp,18472
 8009d9c:	e1c00217 	ldw	r7,8(fp)
 8009da0:	9c09883a 	add	r4,r19,r16
 8009da4:	22000117 	ldw	r8,4(r4)
 8009da8:	21c06326 	beq	r4,r7,8009f38 <_realloc_r+0x218>
 8009dac:	017fff84 	movi	r5,-2
 8009db0:	414a703a 	and	r5,r8,r5
 8009db4:	214b883a 	add	r5,r4,r5
 8009db8:	29800117 	ldw	r6,4(r5)
 8009dbc:	3180004c 	andi	r6,r6,1
 8009dc0:	30003f26 	beq	r6,zero,8009ec0 <_realloc_r+0x1a0>
 8009dc4:	1080004c 	andi	r2,r2,1
 8009dc8:	10008326 	beq	r2,zero,8009fd8 <_realloc_r+0x2b8>
 8009dcc:	900b883a 	mov	r5,r18
 8009dd0:	a009883a 	mov	r4,r20
 8009dd4:	8007f8c0 	call	8007f8c <_malloc_r>
 8009dd8:	1025883a 	mov	r18,r2
 8009ddc:	10011e26 	beq	r2,zero,800a258 <_realloc_r+0x538>
 8009de0:	a93fff17 	ldw	r4,-4(r21)
 8009de4:	10fffe04 	addi	r3,r2,-8
 8009de8:	00bfff84 	movi	r2,-2
 8009dec:	2084703a 	and	r2,r4,r2
 8009df0:	9885883a 	add	r2,r19,r2
 8009df4:	1880ee26 	beq	r3,r2,800a1b0 <_realloc_r+0x490>
 8009df8:	81bfff04 	addi	r6,r16,-4
 8009dfc:	00800904 	movi	r2,36
 8009e00:	1180b836 	bltu	r2,r6,800a0e4 <_realloc_r+0x3c4>
 8009e04:	00c004c4 	movi	r3,19
 8009e08:	19809636 	bltu	r3,r6,800a064 <_realloc_r+0x344>
 8009e0c:	9005883a 	mov	r2,r18
 8009e10:	a807883a 	mov	r3,r21
 8009e14:	19000017 	ldw	r4,0(r3)
 8009e18:	11000015 	stw	r4,0(r2)
 8009e1c:	19000117 	ldw	r4,4(r3)
 8009e20:	11000115 	stw	r4,4(r2)
 8009e24:	18c00217 	ldw	r3,8(r3)
 8009e28:	10c00215 	stw	r3,8(r2)
 8009e2c:	a80b883a 	mov	r5,r21
 8009e30:	a009883a 	mov	r4,r20
 8009e34:	80073940 	call	8007394 <_free_r>
 8009e38:	a009883a 	mov	r4,r20
 8009e3c:	800ffcc0 	call	800ffcc <__malloc_unlock>
 8009e40:	9005883a 	mov	r2,r18
 8009e44:	00001206 	br	8009e90 <_realloc_r+0x170>
 8009e48:	00c00404 	movi	r3,16
 8009e4c:	1823883a 	mov	r17,r3
 8009e50:	003fce06 	br	8009d8c <__alt_data_end+0xfc009d8c>
 8009e54:	a825883a 	mov	r18,r21
 8009e58:	8445c83a 	sub	r2,r16,r17
 8009e5c:	00c003c4 	movi	r3,15
 8009e60:	18802636 	bltu	r3,r2,8009efc <_realloc_r+0x1dc>
 8009e64:	99800117 	ldw	r6,4(r19)
 8009e68:	9c07883a 	add	r3,r19,r16
 8009e6c:	3180004c 	andi	r6,r6,1
 8009e70:	3420b03a 	or	r16,r6,r16
 8009e74:	9c000115 	stw	r16,4(r19)
 8009e78:	18800117 	ldw	r2,4(r3)
 8009e7c:	10800054 	ori	r2,r2,1
 8009e80:	18800115 	stw	r2,4(r3)
 8009e84:	a009883a 	mov	r4,r20
 8009e88:	800ffcc0 	call	800ffcc <__malloc_unlock>
 8009e8c:	9005883a 	mov	r2,r18
 8009e90:	dfc00917 	ldw	ra,36(sp)
 8009e94:	df000817 	ldw	fp,32(sp)
 8009e98:	ddc00717 	ldw	r23,28(sp)
 8009e9c:	dd800617 	ldw	r22,24(sp)
 8009ea0:	dd400517 	ldw	r21,20(sp)
 8009ea4:	dd000417 	ldw	r20,16(sp)
 8009ea8:	dcc00317 	ldw	r19,12(sp)
 8009eac:	dc800217 	ldw	r18,8(sp)
 8009eb0:	dc400117 	ldw	r17,4(sp)
 8009eb4:	dc000017 	ldw	r16,0(sp)
 8009eb8:	dec00a04 	addi	sp,sp,40
 8009ebc:	f800283a 	ret
 8009ec0:	017fff04 	movi	r5,-4
 8009ec4:	414a703a 	and	r5,r8,r5
 8009ec8:	814d883a 	add	r6,r16,r5
 8009ecc:	30c01f16 	blt	r6,r3,8009f4c <_realloc_r+0x22c>
 8009ed0:	20800317 	ldw	r2,12(r4)
 8009ed4:	20c00217 	ldw	r3,8(r4)
 8009ed8:	a825883a 	mov	r18,r21
 8009edc:	3021883a 	mov	r16,r6
 8009ee0:	18800315 	stw	r2,12(r3)
 8009ee4:	10c00215 	stw	r3,8(r2)
 8009ee8:	003fdb06 	br	8009e58 <__alt_data_end+0xfc009e58>
 8009eec:	00800304 	movi	r2,12
 8009ef0:	a0800015 	stw	r2,0(r20)
 8009ef4:	0005883a 	mov	r2,zero
 8009ef8:	003fe506 	br	8009e90 <__alt_data_end+0xfc009e90>
 8009efc:	98c00117 	ldw	r3,4(r19)
 8009f00:	9c4b883a 	add	r5,r19,r17
 8009f04:	11000054 	ori	r4,r2,1
 8009f08:	18c0004c 	andi	r3,r3,1
 8009f0c:	1c62b03a 	or	r17,r3,r17
 8009f10:	9c400115 	stw	r17,4(r19)
 8009f14:	29000115 	stw	r4,4(r5)
 8009f18:	2885883a 	add	r2,r5,r2
 8009f1c:	10c00117 	ldw	r3,4(r2)
 8009f20:	29400204 	addi	r5,r5,8
 8009f24:	a009883a 	mov	r4,r20
 8009f28:	18c00054 	ori	r3,r3,1
 8009f2c:	10c00115 	stw	r3,4(r2)
 8009f30:	80073940 	call	8007394 <_free_r>
 8009f34:	003fd306 	br	8009e84 <__alt_data_end+0xfc009e84>
 8009f38:	017fff04 	movi	r5,-4
 8009f3c:	414a703a 	and	r5,r8,r5
 8009f40:	89800404 	addi	r6,r17,16
 8009f44:	8151883a 	add	r8,r16,r5
 8009f48:	4180590e 	bge	r8,r6,800a0b0 <_realloc_r+0x390>
 8009f4c:	1080004c 	andi	r2,r2,1
 8009f50:	103f9e1e 	bne	r2,zero,8009dcc <__alt_data_end+0xfc009dcc>
 8009f54:	adbffe17 	ldw	r22,-8(r21)
 8009f58:	00bfff04 	movi	r2,-4
 8009f5c:	9dadc83a 	sub	r22,r19,r22
 8009f60:	b1800117 	ldw	r6,4(r22)
 8009f64:	3084703a 	and	r2,r6,r2
 8009f68:	20002026 	beq	r4,zero,8009fec <_realloc_r+0x2cc>
 8009f6c:	80af883a 	add	r23,r16,r2
 8009f70:	b96f883a 	add	r23,r23,r5
 8009f74:	21c05f26 	beq	r4,r7,800a0f4 <_realloc_r+0x3d4>
 8009f78:	b8c01c16 	blt	r23,r3,8009fec <_realloc_r+0x2cc>
 8009f7c:	20800317 	ldw	r2,12(r4)
 8009f80:	20c00217 	ldw	r3,8(r4)
 8009f84:	81bfff04 	addi	r6,r16,-4
 8009f88:	01000904 	movi	r4,36
 8009f8c:	18800315 	stw	r2,12(r3)
 8009f90:	10c00215 	stw	r3,8(r2)
 8009f94:	b0c00217 	ldw	r3,8(r22)
 8009f98:	b0800317 	ldw	r2,12(r22)
 8009f9c:	b4800204 	addi	r18,r22,8
 8009fa0:	18800315 	stw	r2,12(r3)
 8009fa4:	10c00215 	stw	r3,8(r2)
 8009fa8:	21801b36 	bltu	r4,r6,800a018 <_realloc_r+0x2f8>
 8009fac:	008004c4 	movi	r2,19
 8009fb0:	1180352e 	bgeu	r2,r6,800a088 <_realloc_r+0x368>
 8009fb4:	a8800017 	ldw	r2,0(r21)
 8009fb8:	b0800215 	stw	r2,8(r22)
 8009fbc:	a8800117 	ldw	r2,4(r21)
 8009fc0:	b0800315 	stw	r2,12(r22)
 8009fc4:	008006c4 	movi	r2,27
 8009fc8:	11807f36 	bltu	r2,r6,800a1c8 <_realloc_r+0x4a8>
 8009fcc:	b0800404 	addi	r2,r22,16
 8009fd0:	ad400204 	addi	r21,r21,8
 8009fd4:	00002d06 	br	800a08c <_realloc_r+0x36c>
 8009fd8:	adbffe17 	ldw	r22,-8(r21)
 8009fdc:	00bfff04 	movi	r2,-4
 8009fe0:	9dadc83a 	sub	r22,r19,r22
 8009fe4:	b1000117 	ldw	r4,4(r22)
 8009fe8:	2084703a 	and	r2,r4,r2
 8009fec:	b03f7726 	beq	r22,zero,8009dcc <__alt_data_end+0xfc009dcc>
 8009ff0:	80af883a 	add	r23,r16,r2
 8009ff4:	b8ff7516 	blt	r23,r3,8009dcc <__alt_data_end+0xfc009dcc>
 8009ff8:	b0800317 	ldw	r2,12(r22)
 8009ffc:	b0c00217 	ldw	r3,8(r22)
 800a000:	81bfff04 	addi	r6,r16,-4
 800a004:	01000904 	movi	r4,36
 800a008:	18800315 	stw	r2,12(r3)
 800a00c:	10c00215 	stw	r3,8(r2)
 800a010:	b4800204 	addi	r18,r22,8
 800a014:	21bfe52e 	bgeu	r4,r6,8009fac <__alt_data_end+0xfc009fac>
 800a018:	a80b883a 	mov	r5,r21
 800a01c:	9009883a 	mov	r4,r18
 800a020:	800887c0 	call	800887c <memmove>
 800a024:	b821883a 	mov	r16,r23
 800a028:	b027883a 	mov	r19,r22
 800a02c:	003f8a06 	br	8009e58 <__alt_data_end+0xfc009e58>
 800a030:	300b883a 	mov	r5,r6
 800a034:	dfc00917 	ldw	ra,36(sp)
 800a038:	df000817 	ldw	fp,32(sp)
 800a03c:	ddc00717 	ldw	r23,28(sp)
 800a040:	dd800617 	ldw	r22,24(sp)
 800a044:	dd400517 	ldw	r21,20(sp)
 800a048:	dd000417 	ldw	r20,16(sp)
 800a04c:	dcc00317 	ldw	r19,12(sp)
 800a050:	dc800217 	ldw	r18,8(sp)
 800a054:	dc400117 	ldw	r17,4(sp)
 800a058:	dc000017 	ldw	r16,0(sp)
 800a05c:	dec00a04 	addi	sp,sp,40
 800a060:	8007f8c1 	jmpi	8007f8c <_malloc_r>
 800a064:	a8c00017 	ldw	r3,0(r21)
 800a068:	90c00015 	stw	r3,0(r18)
 800a06c:	a8c00117 	ldw	r3,4(r21)
 800a070:	90c00115 	stw	r3,4(r18)
 800a074:	00c006c4 	movi	r3,27
 800a078:	19804536 	bltu	r3,r6,800a190 <_realloc_r+0x470>
 800a07c:	90800204 	addi	r2,r18,8
 800a080:	a8c00204 	addi	r3,r21,8
 800a084:	003f6306 	br	8009e14 <__alt_data_end+0xfc009e14>
 800a088:	9005883a 	mov	r2,r18
 800a08c:	a8c00017 	ldw	r3,0(r21)
 800a090:	b821883a 	mov	r16,r23
 800a094:	b027883a 	mov	r19,r22
 800a098:	10c00015 	stw	r3,0(r2)
 800a09c:	a8c00117 	ldw	r3,4(r21)
 800a0a0:	10c00115 	stw	r3,4(r2)
 800a0a4:	a8c00217 	ldw	r3,8(r21)
 800a0a8:	10c00215 	stw	r3,8(r2)
 800a0ac:	003f6a06 	br	8009e58 <__alt_data_end+0xfc009e58>
 800a0b0:	9c67883a 	add	r19,r19,r17
 800a0b4:	4445c83a 	sub	r2,r8,r17
 800a0b8:	e4c00215 	stw	r19,8(fp)
 800a0bc:	10800054 	ori	r2,r2,1
 800a0c0:	98800115 	stw	r2,4(r19)
 800a0c4:	a8bfff17 	ldw	r2,-4(r21)
 800a0c8:	a009883a 	mov	r4,r20
 800a0cc:	1080004c 	andi	r2,r2,1
 800a0d0:	1462b03a 	or	r17,r2,r17
 800a0d4:	ac7fff15 	stw	r17,-4(r21)
 800a0d8:	800ffcc0 	call	800ffcc <__malloc_unlock>
 800a0dc:	a805883a 	mov	r2,r21
 800a0e0:	003f6b06 	br	8009e90 <__alt_data_end+0xfc009e90>
 800a0e4:	a80b883a 	mov	r5,r21
 800a0e8:	9009883a 	mov	r4,r18
 800a0ec:	800887c0 	call	800887c <memmove>
 800a0f0:	003f4e06 	br	8009e2c <__alt_data_end+0xfc009e2c>
 800a0f4:	89000404 	addi	r4,r17,16
 800a0f8:	b93fbc16 	blt	r23,r4,8009fec <__alt_data_end+0xfc009fec>
 800a0fc:	b0800317 	ldw	r2,12(r22)
 800a100:	b0c00217 	ldw	r3,8(r22)
 800a104:	81bfff04 	addi	r6,r16,-4
 800a108:	01000904 	movi	r4,36
 800a10c:	18800315 	stw	r2,12(r3)
 800a110:	10c00215 	stw	r3,8(r2)
 800a114:	b4800204 	addi	r18,r22,8
 800a118:	21804336 	bltu	r4,r6,800a228 <_realloc_r+0x508>
 800a11c:	008004c4 	movi	r2,19
 800a120:	11803f2e 	bgeu	r2,r6,800a220 <_realloc_r+0x500>
 800a124:	a8800017 	ldw	r2,0(r21)
 800a128:	b0800215 	stw	r2,8(r22)
 800a12c:	a8800117 	ldw	r2,4(r21)
 800a130:	b0800315 	stw	r2,12(r22)
 800a134:	008006c4 	movi	r2,27
 800a138:	11803f36 	bltu	r2,r6,800a238 <_realloc_r+0x518>
 800a13c:	b0800404 	addi	r2,r22,16
 800a140:	ad400204 	addi	r21,r21,8
 800a144:	a8c00017 	ldw	r3,0(r21)
 800a148:	10c00015 	stw	r3,0(r2)
 800a14c:	a8c00117 	ldw	r3,4(r21)
 800a150:	10c00115 	stw	r3,4(r2)
 800a154:	a8c00217 	ldw	r3,8(r21)
 800a158:	10c00215 	stw	r3,8(r2)
 800a15c:	b447883a 	add	r3,r22,r17
 800a160:	bc45c83a 	sub	r2,r23,r17
 800a164:	e0c00215 	stw	r3,8(fp)
 800a168:	10800054 	ori	r2,r2,1
 800a16c:	18800115 	stw	r2,4(r3)
 800a170:	b0800117 	ldw	r2,4(r22)
 800a174:	a009883a 	mov	r4,r20
 800a178:	1080004c 	andi	r2,r2,1
 800a17c:	1462b03a 	or	r17,r2,r17
 800a180:	b4400115 	stw	r17,4(r22)
 800a184:	800ffcc0 	call	800ffcc <__malloc_unlock>
 800a188:	9005883a 	mov	r2,r18
 800a18c:	003f4006 	br	8009e90 <__alt_data_end+0xfc009e90>
 800a190:	a8c00217 	ldw	r3,8(r21)
 800a194:	90c00215 	stw	r3,8(r18)
 800a198:	a8c00317 	ldw	r3,12(r21)
 800a19c:	90c00315 	stw	r3,12(r18)
 800a1a0:	30801126 	beq	r6,r2,800a1e8 <_realloc_r+0x4c8>
 800a1a4:	90800404 	addi	r2,r18,16
 800a1a8:	a8c00404 	addi	r3,r21,16
 800a1ac:	003f1906 	br	8009e14 <__alt_data_end+0xfc009e14>
 800a1b0:	90ffff17 	ldw	r3,-4(r18)
 800a1b4:	00bfff04 	movi	r2,-4
 800a1b8:	a825883a 	mov	r18,r21
 800a1bc:	1884703a 	and	r2,r3,r2
 800a1c0:	80a1883a 	add	r16,r16,r2
 800a1c4:	003f2406 	br	8009e58 <__alt_data_end+0xfc009e58>
 800a1c8:	a8800217 	ldw	r2,8(r21)
 800a1cc:	b0800415 	stw	r2,16(r22)
 800a1d0:	a8800317 	ldw	r2,12(r21)
 800a1d4:	b0800515 	stw	r2,20(r22)
 800a1d8:	31000a26 	beq	r6,r4,800a204 <_realloc_r+0x4e4>
 800a1dc:	b0800604 	addi	r2,r22,24
 800a1e0:	ad400404 	addi	r21,r21,16
 800a1e4:	003fa906 	br	800a08c <__alt_data_end+0xfc00a08c>
 800a1e8:	a9000417 	ldw	r4,16(r21)
 800a1ec:	90800604 	addi	r2,r18,24
 800a1f0:	a8c00604 	addi	r3,r21,24
 800a1f4:	91000415 	stw	r4,16(r18)
 800a1f8:	a9000517 	ldw	r4,20(r21)
 800a1fc:	91000515 	stw	r4,20(r18)
 800a200:	003f0406 	br	8009e14 <__alt_data_end+0xfc009e14>
 800a204:	a8c00417 	ldw	r3,16(r21)
 800a208:	ad400604 	addi	r21,r21,24
 800a20c:	b0800804 	addi	r2,r22,32
 800a210:	b0c00615 	stw	r3,24(r22)
 800a214:	a8ffff17 	ldw	r3,-4(r21)
 800a218:	b0c00715 	stw	r3,28(r22)
 800a21c:	003f9b06 	br	800a08c <__alt_data_end+0xfc00a08c>
 800a220:	9005883a 	mov	r2,r18
 800a224:	003fc706 	br	800a144 <__alt_data_end+0xfc00a144>
 800a228:	a80b883a 	mov	r5,r21
 800a22c:	9009883a 	mov	r4,r18
 800a230:	800887c0 	call	800887c <memmove>
 800a234:	003fc906 	br	800a15c <__alt_data_end+0xfc00a15c>
 800a238:	a8800217 	ldw	r2,8(r21)
 800a23c:	b0800415 	stw	r2,16(r22)
 800a240:	a8800317 	ldw	r2,12(r21)
 800a244:	b0800515 	stw	r2,20(r22)
 800a248:	31000726 	beq	r6,r4,800a268 <_realloc_r+0x548>
 800a24c:	b0800604 	addi	r2,r22,24
 800a250:	ad400404 	addi	r21,r21,16
 800a254:	003fbb06 	br	800a144 <__alt_data_end+0xfc00a144>
 800a258:	a009883a 	mov	r4,r20
 800a25c:	800ffcc0 	call	800ffcc <__malloc_unlock>
 800a260:	0005883a 	mov	r2,zero
 800a264:	003f0a06 	br	8009e90 <__alt_data_end+0xfc009e90>
 800a268:	a8c00417 	ldw	r3,16(r21)
 800a26c:	ad400604 	addi	r21,r21,24
 800a270:	b0800804 	addi	r2,r22,32
 800a274:	b0c00615 	stw	r3,24(r22)
 800a278:	a8ffff17 	ldw	r3,-4(r21)
 800a27c:	b0c00715 	stw	r3,28(r22)
 800a280:	003fb006 	br	800a144 <__alt_data_end+0xfc00a144>

0800a284 <__fpclassifyd>:
 800a284:	00a00034 	movhi	r2,32768
 800a288:	10bfffc4 	addi	r2,r2,-1
 800a28c:	2884703a 	and	r2,r5,r2
 800a290:	10000726 	beq	r2,zero,800a2b0 <__fpclassifyd+0x2c>
 800a294:	00fffc34 	movhi	r3,65520
 800a298:	019ff834 	movhi	r6,32736
 800a29c:	28c7883a 	add	r3,r5,r3
 800a2a0:	31bfffc4 	addi	r6,r6,-1
 800a2a4:	30c00536 	bltu	r6,r3,800a2bc <__fpclassifyd+0x38>
 800a2a8:	00800104 	movi	r2,4
 800a2ac:	f800283a 	ret
 800a2b0:	2000021e 	bne	r4,zero,800a2bc <__fpclassifyd+0x38>
 800a2b4:	00800084 	movi	r2,2
 800a2b8:	f800283a 	ret
 800a2bc:	00dffc34 	movhi	r3,32752
 800a2c0:	019ff834 	movhi	r6,32736
 800a2c4:	28cb883a 	add	r5,r5,r3
 800a2c8:	31bfffc4 	addi	r6,r6,-1
 800a2cc:	317ff62e 	bgeu	r6,r5,800a2a8 <__alt_data_end+0xfc00a2a8>
 800a2d0:	01400434 	movhi	r5,16
 800a2d4:	297fffc4 	addi	r5,r5,-1
 800a2d8:	28800236 	bltu	r5,r2,800a2e4 <__fpclassifyd+0x60>
 800a2dc:	008000c4 	movi	r2,3
 800a2e0:	f800283a 	ret
 800a2e4:	10c00226 	beq	r2,r3,800a2f0 <__fpclassifyd+0x6c>
 800a2e8:	0005883a 	mov	r2,zero
 800a2ec:	f800283a 	ret
 800a2f0:	2005003a 	cmpeq	r2,r4,zero
 800a2f4:	f800283a 	ret

0800a2f8 <_sbrk_r>:
 800a2f8:	defffd04 	addi	sp,sp,-12
 800a2fc:	dc000015 	stw	r16,0(sp)
 800a300:	04020074 	movhi	r16,2049
 800a304:	dc400115 	stw	r17,4(sp)
 800a308:	841e7d04 	addi	r16,r16,31220
 800a30c:	2023883a 	mov	r17,r4
 800a310:	2809883a 	mov	r4,r5
 800a314:	dfc00215 	stw	ra,8(sp)
 800a318:	80000015 	stw	zero,0(r16)
 800a31c:	801041c0 	call	801041c <sbrk>
 800a320:	00ffffc4 	movi	r3,-1
 800a324:	10c00526 	beq	r2,r3,800a33c <_sbrk_r+0x44>
 800a328:	dfc00217 	ldw	ra,8(sp)
 800a32c:	dc400117 	ldw	r17,4(sp)
 800a330:	dc000017 	ldw	r16,0(sp)
 800a334:	dec00304 	addi	sp,sp,12
 800a338:	f800283a 	ret
 800a33c:	80c00017 	ldw	r3,0(r16)
 800a340:	183ff926 	beq	r3,zero,800a328 <__alt_data_end+0xfc00a328>
 800a344:	88c00015 	stw	r3,0(r17)
 800a348:	003ff706 	br	800a328 <__alt_data_end+0xfc00a328>

0800a34c <__sread>:
 800a34c:	defffe04 	addi	sp,sp,-8
 800a350:	dc000015 	stw	r16,0(sp)
 800a354:	2821883a 	mov	r16,r5
 800a358:	2940038f 	ldh	r5,14(r5)
 800a35c:	dfc00115 	stw	ra,4(sp)
 800a360:	800c3600 	call	800c360 <_read_r>
 800a364:	10000716 	blt	r2,zero,800a384 <__sread+0x38>
 800a368:	80c01417 	ldw	r3,80(r16)
 800a36c:	1887883a 	add	r3,r3,r2
 800a370:	80c01415 	stw	r3,80(r16)
 800a374:	dfc00117 	ldw	ra,4(sp)
 800a378:	dc000017 	ldw	r16,0(sp)
 800a37c:	dec00204 	addi	sp,sp,8
 800a380:	f800283a 	ret
 800a384:	80c0030b 	ldhu	r3,12(r16)
 800a388:	18fbffcc 	andi	r3,r3,61439
 800a38c:	80c0030d 	sth	r3,12(r16)
 800a390:	dfc00117 	ldw	ra,4(sp)
 800a394:	dc000017 	ldw	r16,0(sp)
 800a398:	dec00204 	addi	sp,sp,8
 800a39c:	f800283a 	ret

0800a3a0 <__seofread>:
 800a3a0:	0005883a 	mov	r2,zero
 800a3a4:	f800283a 	ret

0800a3a8 <__swrite>:
 800a3a8:	2880030b 	ldhu	r2,12(r5)
 800a3ac:	defffb04 	addi	sp,sp,-20
 800a3b0:	dcc00315 	stw	r19,12(sp)
 800a3b4:	dc800215 	stw	r18,8(sp)
 800a3b8:	dc400115 	stw	r17,4(sp)
 800a3bc:	dc000015 	stw	r16,0(sp)
 800a3c0:	dfc00415 	stw	ra,16(sp)
 800a3c4:	10c0400c 	andi	r3,r2,256
 800a3c8:	2821883a 	mov	r16,r5
 800a3cc:	2023883a 	mov	r17,r4
 800a3d0:	3025883a 	mov	r18,r6
 800a3d4:	3827883a 	mov	r19,r7
 800a3d8:	18000526 	beq	r3,zero,800a3f0 <__swrite+0x48>
 800a3dc:	2940038f 	ldh	r5,14(r5)
 800a3e0:	01c00084 	movi	r7,2
 800a3e4:	000d883a 	mov	r6,zero
 800a3e8:	800c3000 	call	800c300 <_lseek_r>
 800a3ec:	8080030b 	ldhu	r2,12(r16)
 800a3f0:	8140038f 	ldh	r5,14(r16)
 800a3f4:	10bbffcc 	andi	r2,r2,61439
 800a3f8:	980f883a 	mov	r7,r19
 800a3fc:	900d883a 	mov	r6,r18
 800a400:	8809883a 	mov	r4,r17
 800a404:	8080030d 	sth	r2,12(r16)
 800a408:	dfc00417 	ldw	ra,16(sp)
 800a40c:	dcc00317 	ldw	r19,12(sp)
 800a410:	dc800217 	ldw	r18,8(sp)
 800a414:	dc400117 	ldw	r17,4(sp)
 800a418:	dc000017 	ldw	r16,0(sp)
 800a41c:	dec00504 	addi	sp,sp,20
 800a420:	800bdb41 	jmpi	800bdb4 <_write_r>

0800a424 <__sseek>:
 800a424:	defffe04 	addi	sp,sp,-8
 800a428:	dc000015 	stw	r16,0(sp)
 800a42c:	2821883a 	mov	r16,r5
 800a430:	2940038f 	ldh	r5,14(r5)
 800a434:	dfc00115 	stw	ra,4(sp)
 800a438:	800c3000 	call	800c300 <_lseek_r>
 800a43c:	00ffffc4 	movi	r3,-1
 800a440:	10c00826 	beq	r2,r3,800a464 <__sseek+0x40>
 800a444:	80c0030b 	ldhu	r3,12(r16)
 800a448:	80801415 	stw	r2,80(r16)
 800a44c:	18c40014 	ori	r3,r3,4096
 800a450:	80c0030d 	sth	r3,12(r16)
 800a454:	dfc00117 	ldw	ra,4(sp)
 800a458:	dc000017 	ldw	r16,0(sp)
 800a45c:	dec00204 	addi	sp,sp,8
 800a460:	f800283a 	ret
 800a464:	80c0030b 	ldhu	r3,12(r16)
 800a468:	18fbffcc 	andi	r3,r3,61439
 800a46c:	80c0030d 	sth	r3,12(r16)
 800a470:	dfc00117 	ldw	ra,4(sp)
 800a474:	dc000017 	ldw	r16,0(sp)
 800a478:	dec00204 	addi	sp,sp,8
 800a47c:	f800283a 	ret

0800a480 <__sclose>:
 800a480:	2940038f 	ldh	r5,14(r5)
 800a484:	800be141 	jmpi	800be14 <_close_r>

0800a488 <strcmp>:
 800a488:	2144b03a 	or	r2,r4,r5
 800a48c:	108000cc 	andi	r2,r2,3
 800a490:	1000171e 	bne	r2,zero,800a4f0 <strcmp+0x68>
 800a494:	20800017 	ldw	r2,0(r4)
 800a498:	28c00017 	ldw	r3,0(r5)
 800a49c:	10c0141e 	bne	r2,r3,800a4f0 <strcmp+0x68>
 800a4a0:	027fbff4 	movhi	r9,65279
 800a4a4:	4a7fbfc4 	addi	r9,r9,-257
 800a4a8:	0086303a 	nor	r3,zero,r2
 800a4ac:	02202074 	movhi	r8,32897
 800a4b0:	1245883a 	add	r2,r2,r9
 800a4b4:	42202004 	addi	r8,r8,-32640
 800a4b8:	10c4703a 	and	r2,r2,r3
 800a4bc:	1204703a 	and	r2,r2,r8
 800a4c0:	10000226 	beq	r2,zero,800a4cc <strcmp+0x44>
 800a4c4:	00002306 	br	800a554 <strcmp+0xcc>
 800a4c8:	1000221e 	bne	r2,zero,800a554 <strcmp+0xcc>
 800a4cc:	21000104 	addi	r4,r4,4
 800a4d0:	20c00017 	ldw	r3,0(r4)
 800a4d4:	29400104 	addi	r5,r5,4
 800a4d8:	29800017 	ldw	r6,0(r5)
 800a4dc:	1a4f883a 	add	r7,r3,r9
 800a4e0:	00c4303a 	nor	r2,zero,r3
 800a4e4:	3884703a 	and	r2,r7,r2
 800a4e8:	1204703a 	and	r2,r2,r8
 800a4ec:	19bff626 	beq	r3,r6,800a4c8 <__alt_data_end+0xfc00a4c8>
 800a4f0:	20800003 	ldbu	r2,0(r4)
 800a4f4:	10c03fcc 	andi	r3,r2,255
 800a4f8:	18c0201c 	xori	r3,r3,128
 800a4fc:	18ffe004 	addi	r3,r3,-128
 800a500:	18000c26 	beq	r3,zero,800a534 <strcmp+0xac>
 800a504:	29800007 	ldb	r6,0(r5)
 800a508:	19800326 	beq	r3,r6,800a518 <strcmp+0x90>
 800a50c:	00001306 	br	800a55c <strcmp+0xd4>
 800a510:	29800007 	ldb	r6,0(r5)
 800a514:	11800b1e 	bne	r2,r6,800a544 <strcmp+0xbc>
 800a518:	21000044 	addi	r4,r4,1
 800a51c:	20c00003 	ldbu	r3,0(r4)
 800a520:	29400044 	addi	r5,r5,1
 800a524:	18803fcc 	andi	r2,r3,255
 800a528:	1080201c 	xori	r2,r2,128
 800a52c:	10bfe004 	addi	r2,r2,-128
 800a530:	103ff71e 	bne	r2,zero,800a510 <__alt_data_end+0xfc00a510>
 800a534:	0007883a 	mov	r3,zero
 800a538:	28800003 	ldbu	r2,0(r5)
 800a53c:	1885c83a 	sub	r2,r3,r2
 800a540:	f800283a 	ret
 800a544:	28800003 	ldbu	r2,0(r5)
 800a548:	18c03fcc 	andi	r3,r3,255
 800a54c:	1885c83a 	sub	r2,r3,r2
 800a550:	f800283a 	ret
 800a554:	0005883a 	mov	r2,zero
 800a558:	f800283a 	ret
 800a55c:	10c03fcc 	andi	r3,r2,255
 800a560:	003ff506 	br	800a538 <__alt_data_end+0xfc00a538>

0800a564 <__sprint_r.part.0>:
 800a564:	28801917 	ldw	r2,100(r5)
 800a568:	defff604 	addi	sp,sp,-40
 800a56c:	dd400515 	stw	r21,20(sp)
 800a570:	dfc00915 	stw	ra,36(sp)
 800a574:	df000815 	stw	fp,32(sp)
 800a578:	ddc00715 	stw	r23,28(sp)
 800a57c:	dd800615 	stw	r22,24(sp)
 800a580:	dd000415 	stw	r20,16(sp)
 800a584:	dcc00315 	stw	r19,12(sp)
 800a588:	dc800215 	stw	r18,8(sp)
 800a58c:	dc400115 	stw	r17,4(sp)
 800a590:	dc000015 	stw	r16,0(sp)
 800a594:	1088000c 	andi	r2,r2,8192
 800a598:	302b883a 	mov	r21,r6
 800a59c:	10002e26 	beq	r2,zero,800a658 <__sprint_r.part.0+0xf4>
 800a5a0:	30800217 	ldw	r2,8(r6)
 800a5a4:	35800017 	ldw	r22,0(r6)
 800a5a8:	10002926 	beq	r2,zero,800a650 <__sprint_r.part.0+0xec>
 800a5ac:	2827883a 	mov	r19,r5
 800a5b0:	2029883a 	mov	r20,r4
 800a5b4:	b5c00104 	addi	r23,r22,4
 800a5b8:	04bfffc4 	movi	r18,-1
 800a5bc:	bc400017 	ldw	r17,0(r23)
 800a5c0:	b4000017 	ldw	r16,0(r22)
 800a5c4:	0039883a 	mov	fp,zero
 800a5c8:	8822d0ba 	srli	r17,r17,2
 800a5cc:	8800031e 	bne	r17,zero,800a5dc <__sprint_r.part.0+0x78>
 800a5d0:	00001806 	br	800a634 <__sprint_r.part.0+0xd0>
 800a5d4:	84000104 	addi	r16,r16,4
 800a5d8:	8f001526 	beq	r17,fp,800a630 <__sprint_r.part.0+0xcc>
 800a5dc:	81400017 	ldw	r5,0(r16)
 800a5e0:	980d883a 	mov	r6,r19
 800a5e4:	a009883a 	mov	r4,r20
 800a5e8:	800c1ac0 	call	800c1ac <_fputwc_r>
 800a5ec:	e7000044 	addi	fp,fp,1
 800a5f0:	14bff81e 	bne	r2,r18,800a5d4 <__alt_data_end+0xfc00a5d4>
 800a5f4:	9005883a 	mov	r2,r18
 800a5f8:	a8000215 	stw	zero,8(r21)
 800a5fc:	a8000115 	stw	zero,4(r21)
 800a600:	dfc00917 	ldw	ra,36(sp)
 800a604:	df000817 	ldw	fp,32(sp)
 800a608:	ddc00717 	ldw	r23,28(sp)
 800a60c:	dd800617 	ldw	r22,24(sp)
 800a610:	dd400517 	ldw	r21,20(sp)
 800a614:	dd000417 	ldw	r20,16(sp)
 800a618:	dcc00317 	ldw	r19,12(sp)
 800a61c:	dc800217 	ldw	r18,8(sp)
 800a620:	dc400117 	ldw	r17,4(sp)
 800a624:	dc000017 	ldw	r16,0(sp)
 800a628:	dec00a04 	addi	sp,sp,40
 800a62c:	f800283a 	ret
 800a630:	a8800217 	ldw	r2,8(r21)
 800a634:	8c63883a 	add	r17,r17,r17
 800a638:	8c63883a 	add	r17,r17,r17
 800a63c:	1445c83a 	sub	r2,r2,r17
 800a640:	a8800215 	stw	r2,8(r21)
 800a644:	b5800204 	addi	r22,r22,8
 800a648:	bdc00204 	addi	r23,r23,8
 800a64c:	103fdb1e 	bne	r2,zero,800a5bc <__alt_data_end+0xfc00a5bc>
 800a650:	0005883a 	mov	r2,zero
 800a654:	003fe806 	br	800a5f8 <__alt_data_end+0xfc00a5f8>
 800a658:	80076a40 	call	80076a4 <__sfvwrite_r>
 800a65c:	003fe606 	br	800a5f8 <__alt_data_end+0xfc00a5f8>

0800a660 <__sprint_r>:
 800a660:	30c00217 	ldw	r3,8(r6)
 800a664:	18000126 	beq	r3,zero,800a66c <__sprint_r+0xc>
 800a668:	800a5641 	jmpi	800a564 <__sprint_r.part.0>
 800a66c:	30000115 	stw	zero,4(r6)
 800a670:	0005883a 	mov	r2,zero
 800a674:	f800283a 	ret

0800a678 <___vfiprintf_internal_r>:
 800a678:	deffca04 	addi	sp,sp,-216
 800a67c:	dd403115 	stw	r21,196(sp)
 800a680:	dfc03515 	stw	ra,212(sp)
 800a684:	df003415 	stw	fp,208(sp)
 800a688:	ddc03315 	stw	r23,204(sp)
 800a68c:	dd803215 	stw	r22,200(sp)
 800a690:	dd003015 	stw	r20,192(sp)
 800a694:	dcc02f15 	stw	r19,188(sp)
 800a698:	dc802e15 	stw	r18,184(sp)
 800a69c:	dc402d15 	stw	r17,180(sp)
 800a6a0:	dc002c15 	stw	r16,176(sp)
 800a6a4:	d9002115 	stw	r4,132(sp)
 800a6a8:	d9402015 	stw	r5,128(sp)
 800a6ac:	d9c02215 	stw	r7,136(sp)
 800a6b0:	302b883a 	mov	r21,r6
 800a6b4:	20000226 	beq	r4,zero,800a6c0 <___vfiprintf_internal_r+0x48>
 800a6b8:	20800e17 	ldw	r2,56(r4)
 800a6bc:	1000cf26 	beq	r2,zero,800a9fc <___vfiprintf_internal_r+0x384>
 800a6c0:	d8c02017 	ldw	r3,128(sp)
 800a6c4:	1880030b 	ldhu	r2,12(r3)
 800a6c8:	10c8000c 	andi	r3,r2,8192
 800a6cc:	1800071e 	bne	r3,zero,800a6ec <___vfiprintf_internal_r+0x74>
 800a6d0:	d9402017 	ldw	r5,128(sp)
 800a6d4:	00f7ffc4 	movi	r3,-8193
 800a6d8:	10880014 	ori	r2,r2,8192
 800a6dc:	29001917 	ldw	r4,100(r5)
 800a6e0:	2880030d 	sth	r2,12(r5)
 800a6e4:	20c6703a 	and	r3,r4,r3
 800a6e8:	28c01915 	stw	r3,100(r5)
 800a6ec:	10c0020c 	andi	r3,r2,8
 800a6f0:	1800a526 	beq	r3,zero,800a988 <___vfiprintf_internal_r+0x310>
 800a6f4:	d9002017 	ldw	r4,128(sp)
 800a6f8:	20c00417 	ldw	r3,16(r4)
 800a6fc:	1800a226 	beq	r3,zero,800a988 <___vfiprintf_internal_r+0x310>
 800a700:	1080068c 	andi	r2,r2,26
 800a704:	00c00284 	movi	r3,10
 800a708:	10c0a826 	beq	r2,r3,800a9ac <___vfiprintf_internal_r+0x334>
 800a70c:	d9001a04 	addi	r4,sp,104
 800a710:	d94019c4 	addi	r5,sp,103
 800a714:	04820074 	movhi	r18,2049
 800a718:	2145c83a 	sub	r2,r4,r5
 800a71c:	94908204 	addi	r18,r18,16904
 800a720:	d9001e15 	stw	r4,120(sp)
 800a724:	d9401f15 	stw	r5,124(sp)
 800a728:	dec01a15 	stw	sp,104(sp)
 800a72c:	d8001c15 	stw	zero,112(sp)
 800a730:	d8001b15 	stw	zero,108(sp)
 800a734:	d811883a 	mov	r8,sp
 800a738:	d8002615 	stw	zero,152(sp)
 800a73c:	d8002415 	stw	zero,144(sp)
 800a740:	d8802815 	stw	r2,160(sp)
 800a744:	a82d883a 	mov	r22,r21
 800a748:	b0800007 	ldb	r2,0(r22)
 800a74c:	10040d26 	beq	r2,zero,800b784 <___vfiprintf_internal_r+0x110c>
 800a750:	00c00944 	movi	r3,37
 800a754:	b029883a 	mov	r20,r22
 800a758:	10c0021e 	bne	r2,r3,800a764 <___vfiprintf_internal_r+0xec>
 800a75c:	00001606 	br	800a7b8 <___vfiprintf_internal_r+0x140>
 800a760:	10c00326 	beq	r2,r3,800a770 <___vfiprintf_internal_r+0xf8>
 800a764:	a5000044 	addi	r20,r20,1
 800a768:	a0800007 	ldb	r2,0(r20)
 800a76c:	103ffc1e 	bne	r2,zero,800a760 <__alt_data_end+0xfc00a760>
 800a770:	a5a1c83a 	sub	r16,r20,r22
 800a774:	80001026 	beq	r16,zero,800a7b8 <___vfiprintf_internal_r+0x140>
 800a778:	d8c01c17 	ldw	r3,112(sp)
 800a77c:	d8801b17 	ldw	r2,108(sp)
 800a780:	45800015 	stw	r22,0(r8)
 800a784:	80c7883a 	add	r3,r16,r3
 800a788:	10800044 	addi	r2,r2,1
 800a78c:	44000115 	stw	r16,4(r8)
 800a790:	d8c01c15 	stw	r3,112(sp)
 800a794:	d8801b15 	stw	r2,108(sp)
 800a798:	010001c4 	movi	r4,7
 800a79c:	2080750e 	bge	r4,r2,800a974 <___vfiprintf_internal_r+0x2fc>
 800a7a0:	1803951e 	bne	r3,zero,800b5f8 <___vfiprintf_internal_r+0xf80>
 800a7a4:	d8c02417 	ldw	r3,144(sp)
 800a7a8:	d8001b15 	stw	zero,108(sp)
 800a7ac:	d811883a 	mov	r8,sp
 800a7b0:	1c07883a 	add	r3,r3,r16
 800a7b4:	d8c02415 	stw	r3,144(sp)
 800a7b8:	a0800007 	ldb	r2,0(r20)
 800a7bc:	1002e026 	beq	r2,zero,800b340 <___vfiprintf_internal_r+0xcc8>
 800a7c0:	a5800044 	addi	r22,r20,1
 800a7c4:	a0c00047 	ldb	r3,1(r20)
 800a7c8:	d8001d85 	stb	zero,118(sp)
 800a7cc:	0027883a 	mov	r19,zero
 800a7d0:	d8002305 	stb	zero,140(sp)
 800a7d4:	043fffc4 	movi	r16,-1
 800a7d8:	d8002515 	stw	zero,148(sp)
 800a7dc:	0023883a 	mov	r17,zero
 800a7e0:	05001604 	movi	r20,88
 800a7e4:	05400244 	movi	r21,9
 800a7e8:	402f883a 	mov	r23,r8
 800a7ec:	b5800044 	addi	r22,r22,1
 800a7f0:	18bff804 	addi	r2,r3,-32
 800a7f4:	a0827736 	bltu	r20,r2,800b1d4 <___vfiprintf_internal_r+0xb5c>
 800a7f8:	100490ba 	slli	r2,r2,2
 800a7fc:	01020074 	movhi	r4,2049
 800a800:	212a0404 	addi	r4,r4,-22512
 800a804:	1105883a 	add	r2,r2,r4
 800a808:	10800017 	ldw	r2,0(r2)
 800a80c:	1000683a 	jmp	r2
 800a810:	0800aed4 	ori	zero,at,699
 800a814:	0800b1d4 	ori	zero,at,711
 800a818:	0800b1d4 	ori	zero,at,711
 800a81c:	0800aef0 	cmpltui	zero,at,699
 800a820:	0800b1d4 	ori	zero,at,711
 800a824:	0800b1d4 	ori	zero,at,711
 800a828:	0800b1d4 	ori	zero,at,711
 800a82c:	0800b1d4 	ori	zero,at,711
 800a830:	0800b1d4 	ori	zero,at,711
 800a834:	0800b1d4 	ori	zero,at,711
 800a838:	0800b0f8 	rdprs	zero,at,707
 800a83c:	0800b11c 	xori	zero,at,708
 800a840:	0800b1d4 	ori	zero,at,711
 800a844:	0800aa14 	ori	zero,at,680
 800a848:	0800b130 	cmpltui	zero,at,708
 800a84c:	0800b1d4 	ori	zero,at,711
 800a850:	0800aefc 	xorhi	zero,at,699
 800a854:	0800af08 	cmpgei	zero,at,700
 800a858:	0800af08 	cmpgei	zero,at,700
 800a85c:	0800af08 	cmpgei	zero,at,700
 800a860:	0800af08 	cmpgei	zero,at,700
 800a864:	0800af08 	cmpgei	zero,at,700
 800a868:	0800af08 	cmpgei	zero,at,700
 800a86c:	0800af08 	cmpgei	zero,at,700
 800a870:	0800af08 	cmpgei	zero,at,700
 800a874:	0800af08 	cmpgei	zero,at,700
 800a878:	0800b1d4 	ori	zero,at,711
 800a87c:	0800b1d4 	ori	zero,at,711
 800a880:	0800b1d4 	ori	zero,at,711
 800a884:	0800b1d4 	ori	zero,at,711
 800a888:	0800b1d4 	ori	zero,at,711
 800a88c:	0800b1d4 	ori	zero,at,711
 800a890:	0800b1d4 	ori	zero,at,711
 800a894:	0800b1d4 	ori	zero,at,711
 800a898:	0800b1d4 	ori	zero,at,711
 800a89c:	0800b1d4 	ori	zero,at,711
 800a8a0:	0800af48 	cmpgei	zero,at,701
 800a8a4:	0800b1d4 	ori	zero,at,711
 800a8a8:	0800b1d4 	ori	zero,at,711
 800a8ac:	0800b1d4 	ori	zero,at,711
 800a8b0:	0800b1d4 	ori	zero,at,711
 800a8b4:	0800b1d4 	ori	zero,at,711
 800a8b8:	0800b1d4 	ori	zero,at,711
 800a8bc:	0800b1d4 	ori	zero,at,711
 800a8c0:	0800b1d4 	ori	zero,at,711
 800a8c4:	0800b1d4 	ori	zero,at,711
 800a8c8:	0800b1d4 	ori	zero,at,711
 800a8cc:	0800af84 	addi	zero,at,702
 800a8d0:	0800b1d4 	ori	zero,at,711
 800a8d4:	0800b1d4 	ori	zero,at,711
 800a8d8:	0800b1d4 	ori	zero,at,711
 800a8dc:	0800b1d4 	ori	zero,at,711
 800a8e0:	0800b1d4 	ori	zero,at,711
 800a8e4:	0800afe0 	cmpeqi	zero,at,703
 800a8e8:	0800b1d4 	ori	zero,at,711
 800a8ec:	0800b1d4 	ori	zero,at,711
 800a8f0:	0800b054 	ori	zero,at,705
 800a8f4:	0800b1d4 	ori	zero,at,711
 800a8f8:	0800b1d4 	ori	zero,at,711
 800a8fc:	0800b1d4 	ori	zero,at,711
 800a900:	0800b1d4 	ori	zero,at,711
 800a904:	0800b1d4 	ori	zero,at,711
 800a908:	0800b1d4 	ori	zero,at,711
 800a90c:	0800b1d4 	ori	zero,at,711
 800a910:	0800b1d4 	ori	zero,at,711
 800a914:	0800b1d4 	ori	zero,at,711
 800a918:	0800b1d4 	ori	zero,at,711
 800a91c:	0800adfc 	xorhi	zero,at,695
 800a920:	0800ae2c 	andhi	zero,at,696
 800a924:	0800b1d4 	ori	zero,at,711
 800a928:	0800b1d4 	ori	zero,at,711
 800a92c:	0800b1d4 	ori	zero,at,711
 800a930:	0800b17c 	xorhi	zero,at,709
 800a934:	0800ae2c 	andhi	zero,at,696
 800a938:	0800b1d4 	ori	zero,at,711
 800a93c:	0800b1d4 	ori	zero,at,711
 800a940:	0800acd4 	ori	zero,at,691
 800a944:	0800b1d4 	ori	zero,at,711
 800a948:	0800ace8 	cmpgeui	zero,at,691
 800a94c:	0800ad20 	cmpeqi	zero,at,692
 800a950:	0800aa20 	cmpeqi	zero,at,680
 800a954:	0800acc8 	cmpgei	zero,at,691
 800a958:	0800b1d4 	ori	zero,at,711
 800a95c:	0800b094 	ori	zero,at,706
 800a960:	0800b1d4 	ori	zero,at,711
 800a964:	0800b0e0 	cmpeqi	zero,at,707
 800a968:	0800b1d4 	ori	zero,at,711
 800a96c:	0800b1d4 	ori	zero,at,711
 800a970:	0800ada4 	muli	zero,at,694
 800a974:	42000204 	addi	r8,r8,8
 800a978:	d8c02417 	ldw	r3,144(sp)
 800a97c:	1c07883a 	add	r3,r3,r16
 800a980:	d8c02415 	stw	r3,144(sp)
 800a984:	003f8c06 	br	800a7b8 <__alt_data_end+0xfc00a7b8>
 800a988:	d9402017 	ldw	r5,128(sp)
 800a98c:	d9002117 	ldw	r4,132(sp)
 800a990:	80052140 	call	8005214 <__swsetup_r>
 800a994:	1003c11e 	bne	r2,zero,800b89c <___vfiprintf_internal_r+0x1224>
 800a998:	d9402017 	ldw	r5,128(sp)
 800a99c:	00c00284 	movi	r3,10
 800a9a0:	2880030b 	ldhu	r2,12(r5)
 800a9a4:	1080068c 	andi	r2,r2,26
 800a9a8:	10ff581e 	bne	r2,r3,800a70c <__alt_data_end+0xfc00a70c>
 800a9ac:	d8c02017 	ldw	r3,128(sp)
 800a9b0:	1880038f 	ldh	r2,14(r3)
 800a9b4:	103f5516 	blt	r2,zero,800a70c <__alt_data_end+0xfc00a70c>
 800a9b8:	d9c02217 	ldw	r7,136(sp)
 800a9bc:	d9002117 	ldw	r4,132(sp)
 800a9c0:	a80d883a 	mov	r6,r21
 800a9c4:	180b883a 	mov	r5,r3
 800a9c8:	800bba00 	call	800bba0 <__sbprintf>
 800a9cc:	dfc03517 	ldw	ra,212(sp)
 800a9d0:	df003417 	ldw	fp,208(sp)
 800a9d4:	ddc03317 	ldw	r23,204(sp)
 800a9d8:	dd803217 	ldw	r22,200(sp)
 800a9dc:	dd403117 	ldw	r21,196(sp)
 800a9e0:	dd003017 	ldw	r20,192(sp)
 800a9e4:	dcc02f17 	ldw	r19,188(sp)
 800a9e8:	dc802e17 	ldw	r18,184(sp)
 800a9ec:	dc402d17 	ldw	r17,180(sp)
 800a9f0:	dc002c17 	ldw	r16,176(sp)
 800a9f4:	dec03604 	addi	sp,sp,216
 800a9f8:	f800283a 	ret
 800a9fc:	80072200 	call	8007220 <__sinit>
 800aa00:	003f2f06 	br	800a6c0 <__alt_data_end+0xfc00a6c0>
 800aa04:	d8c02517 	ldw	r3,148(sp)
 800aa08:	d8802215 	stw	r2,136(sp)
 800aa0c:	00c7c83a 	sub	r3,zero,r3
 800aa10:	d8c02515 	stw	r3,148(sp)
 800aa14:	8c400114 	ori	r17,r17,4
 800aa18:	b0c00007 	ldb	r3,0(r22)
 800aa1c:	003f7306 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800aa20:	00800c04 	movi	r2,48
 800aa24:	d9402217 	ldw	r5,136(sp)
 800aa28:	d8801d05 	stb	r2,116(sp)
 800aa2c:	00801e04 	movi	r2,120
 800aa30:	d8801d45 	stb	r2,117(sp)
 800aa34:	d8001d85 	stb	zero,118(sp)
 800aa38:	b811883a 	mov	r8,r23
 800aa3c:	28c00104 	addi	r3,r5,4
 800aa40:	2cc00017 	ldw	r19,0(r5)
 800aa44:	0029883a 	mov	r20,zero
 800aa48:	88800094 	ori	r2,r17,2
 800aa4c:	80032516 	blt	r16,zero,800b6e4 <___vfiprintf_internal_r+0x106c>
 800aa50:	00bfdfc4 	movi	r2,-129
 800aa54:	88a2703a 	and	r17,r17,r2
 800aa58:	d8c02215 	stw	r3,136(sp)
 800aa5c:	8c400094 	ori	r17,r17,2
 800aa60:	98032a1e 	bne	r19,zero,800b70c <___vfiprintf_internal_r+0x1094>
 800aa64:	00820074 	movhi	r2,2049
 800aa68:	10902104 	addi	r2,r2,16516
 800aa6c:	d8802615 	stw	r2,152(sp)
 800aa70:	002b883a 	mov	r21,zero
 800aa74:	8001741e 	bne	r16,zero,800b048 <___vfiprintf_internal_r+0x9d0>
 800aa78:	0021883a 	mov	r16,zero
 800aa7c:	0029883a 	mov	r20,zero
 800aa80:	ddc01a04 	addi	r23,sp,104
 800aa84:	8027883a 	mov	r19,r16
 800aa88:	8500010e 	bge	r16,r20,800aa90 <___vfiprintf_internal_r+0x418>
 800aa8c:	a027883a 	mov	r19,r20
 800aa90:	ad403fcc 	andi	r21,r21,255
 800aa94:	ad40201c 	xori	r21,r21,128
 800aa98:	ad7fe004 	addi	r21,r21,-128
 800aa9c:	a8000126 	beq	r21,zero,800aaa4 <___vfiprintf_internal_r+0x42c>
 800aaa0:	9cc00044 	addi	r19,r19,1
 800aaa4:	89c0008c 	andi	r7,r17,2
 800aaa8:	38000126 	beq	r7,zero,800aab0 <___vfiprintf_internal_r+0x438>
 800aaac:	9cc00084 	addi	r19,r19,2
 800aab0:	88c0210c 	andi	r3,r17,132
 800aab4:	1801dd1e 	bne	r3,zero,800b22c <___vfiprintf_internal_r+0xbb4>
 800aab8:	d9402517 	ldw	r5,148(sp)
 800aabc:	2cebc83a 	sub	r21,r5,r19
 800aac0:	0541da0e 	bge	zero,r21,800b22c <___vfiprintf_internal_r+0xbb4>
 800aac4:	07000404 	movi	fp,16
 800aac8:	d8801c17 	ldw	r2,112(sp)
 800aacc:	e543be0e 	bge	fp,r21,800b9c8 <___vfiprintf_internal_r+0x1350>
 800aad0:	01420074 	movhi	r5,2049
 800aad4:	29508604 	addi	r5,r5,16920
 800aad8:	dc002715 	stw	r16,156(sp)
 800aadc:	d9801b17 	ldw	r6,108(sp)
 800aae0:	a821883a 	mov	r16,r21
 800aae4:	d9402315 	stw	r5,140(sp)
 800aae8:	028001c4 	movi	r10,7
 800aaec:	d9c02915 	stw	r7,164(sp)
 800aaf0:	182b883a 	mov	r21,r3
 800aaf4:	00000506 	br	800ab0c <___vfiprintf_internal_r+0x494>
 800aaf8:	31000084 	addi	r4,r6,2
 800aafc:	42000204 	addi	r8,r8,8
 800ab00:	180d883a 	mov	r6,r3
 800ab04:	843ffc04 	addi	r16,r16,-16
 800ab08:	e4000f0e 	bge	fp,r16,800ab48 <___vfiprintf_internal_r+0x4d0>
 800ab0c:	01020074 	movhi	r4,2049
 800ab10:	10800404 	addi	r2,r2,16
 800ab14:	30c00044 	addi	r3,r6,1
 800ab18:	21108604 	addi	r4,r4,16920
 800ab1c:	41000015 	stw	r4,0(r8)
 800ab20:	47000115 	stw	fp,4(r8)
 800ab24:	d8801c15 	stw	r2,112(sp)
 800ab28:	d8c01b15 	stw	r3,108(sp)
 800ab2c:	50fff20e 	bge	r10,r3,800aaf8 <__alt_data_end+0xfc00aaf8>
 800ab30:	1001b21e 	bne	r2,zero,800b1fc <___vfiprintf_internal_r+0xb84>
 800ab34:	843ffc04 	addi	r16,r16,-16
 800ab38:	000d883a 	mov	r6,zero
 800ab3c:	01000044 	movi	r4,1
 800ab40:	d811883a 	mov	r8,sp
 800ab44:	e43ff116 	blt	fp,r16,800ab0c <__alt_data_end+0xfc00ab0c>
 800ab48:	a807883a 	mov	r3,r21
 800ab4c:	d9c02917 	ldw	r7,164(sp)
 800ab50:	802b883a 	mov	r21,r16
 800ab54:	dc002717 	ldw	r16,156(sp)
 800ab58:	d9402317 	ldw	r5,140(sp)
 800ab5c:	a885883a 	add	r2,r21,r2
 800ab60:	45400115 	stw	r21,4(r8)
 800ab64:	41400015 	stw	r5,0(r8)
 800ab68:	d8801c15 	stw	r2,112(sp)
 800ab6c:	d9001b15 	stw	r4,108(sp)
 800ab70:	014001c4 	movi	r5,7
 800ab74:	29026216 	blt	r5,r4,800b500 <___vfiprintf_internal_r+0xe88>
 800ab78:	d9801d87 	ldb	r6,118(sp)
 800ab7c:	42000204 	addi	r8,r8,8
 800ab80:	21400044 	addi	r5,r4,1
 800ab84:	3001ae1e 	bne	r6,zero,800b240 <___vfiprintf_internal_r+0xbc8>
 800ab88:	3801bb26 	beq	r7,zero,800b278 <___vfiprintf_internal_r+0xc00>
 800ab8c:	d9001d04 	addi	r4,sp,116
 800ab90:	10800084 	addi	r2,r2,2
 800ab94:	41000015 	stw	r4,0(r8)
 800ab98:	01000084 	movi	r4,2
 800ab9c:	41000115 	stw	r4,4(r8)
 800aba0:	d8801c15 	stw	r2,112(sp)
 800aba4:	d9401b15 	stw	r5,108(sp)
 800aba8:	010001c4 	movi	r4,7
 800abac:	2142680e 	bge	r4,r5,800b550 <___vfiprintf_internal_r+0xed8>
 800abb0:	1002b11e 	bne	r2,zero,800b678 <___vfiprintf_internal_r+0x1000>
 800abb4:	01802004 	movi	r6,128
 800abb8:	01400044 	movi	r5,1
 800abbc:	0009883a 	mov	r4,zero
 800abc0:	d811883a 	mov	r8,sp
 800abc4:	1981ae1e 	bne	r3,r6,800b280 <___vfiprintf_internal_r+0xc08>
 800abc8:	d8c02517 	ldw	r3,148(sp)
 800abcc:	1cf9c83a 	sub	fp,r3,r19
 800abd0:	0701ab0e 	bge	zero,fp,800b280 <___vfiprintf_internal_r+0xc08>
 800abd4:	05400404 	movi	r21,16
 800abd8:	af03a90e 	bge	r21,fp,800ba80 <___vfiprintf_internal_r+0x1408>
 800abdc:	01420074 	movhi	r5,2049
 800abe0:	29508204 	addi	r5,r5,16904
 800abe4:	d9402315 	stw	r5,140(sp)
 800abe8:	01c001c4 	movi	r7,7
 800abec:	00000506 	br	800ac04 <___vfiprintf_internal_r+0x58c>
 800abf0:	21800084 	addi	r6,r4,2
 800abf4:	42000204 	addi	r8,r8,8
 800abf8:	1809883a 	mov	r4,r3
 800abfc:	e73ffc04 	addi	fp,fp,-16
 800ac00:	af000d0e 	bge	r21,fp,800ac38 <___vfiprintf_internal_r+0x5c0>
 800ac04:	10800404 	addi	r2,r2,16
 800ac08:	20c00044 	addi	r3,r4,1
 800ac0c:	44800015 	stw	r18,0(r8)
 800ac10:	45400115 	stw	r21,4(r8)
 800ac14:	d8801c15 	stw	r2,112(sp)
 800ac18:	d8c01b15 	stw	r3,108(sp)
 800ac1c:	38fff40e 	bge	r7,r3,800abf0 <__alt_data_end+0xfc00abf0>
 800ac20:	10022b1e 	bne	r2,zero,800b4d0 <___vfiprintf_internal_r+0xe58>
 800ac24:	e73ffc04 	addi	fp,fp,-16
 800ac28:	01800044 	movi	r6,1
 800ac2c:	0009883a 	mov	r4,zero
 800ac30:	d811883a 	mov	r8,sp
 800ac34:	af3ff316 	blt	r21,fp,800ac04 <__alt_data_end+0xfc00ac04>
 800ac38:	d8c02317 	ldw	r3,140(sp)
 800ac3c:	1705883a 	add	r2,r2,fp
 800ac40:	47000115 	stw	fp,4(r8)
 800ac44:	40c00015 	stw	r3,0(r8)
 800ac48:	d8801c15 	stw	r2,112(sp)
 800ac4c:	d9801b15 	stw	r6,108(sp)
 800ac50:	00c001c4 	movi	r3,7
 800ac54:	19829416 	blt	r3,r6,800b6a8 <___vfiprintf_internal_r+0x1030>
 800ac58:	8521c83a 	sub	r16,r16,r20
 800ac5c:	42000204 	addi	r8,r8,8
 800ac60:	31400044 	addi	r5,r6,1
 800ac64:	3009883a 	mov	r4,r6
 800ac68:	04018716 	blt	zero,r16,800b288 <___vfiprintf_internal_r+0xc10>
 800ac6c:	a085883a 	add	r2,r20,r2
 800ac70:	45c00015 	stw	r23,0(r8)
 800ac74:	45000115 	stw	r20,4(r8)
 800ac78:	d8801c15 	stw	r2,112(sp)
 800ac7c:	d9401b15 	stw	r5,108(sp)
 800ac80:	00c001c4 	movi	r3,7
 800ac84:	1941c20e 	bge	r3,r5,800b390 <___vfiprintf_internal_r+0xd18>
 800ac88:	1002531e 	bne	r2,zero,800b5d8 <___vfiprintf_internal_r+0xf60>
 800ac8c:	d8001b15 	stw	zero,108(sp)
 800ac90:	8c40010c 	andi	r17,r17,4
 800ac94:	88023226 	beq	r17,zero,800b560 <___vfiprintf_internal_r+0xee8>
 800ac98:	d9002517 	ldw	r4,148(sp)
 800ac9c:	24e3c83a 	sub	r17,r4,r19
 800aca0:	04432916 	blt	zero,r17,800b948 <___vfiprintf_internal_r+0x12d0>
 800aca4:	d8802517 	ldw	r2,148(sp)
 800aca8:	14c0010e 	bge	r2,r19,800acb0 <___vfiprintf_internal_r+0x638>
 800acac:	9805883a 	mov	r2,r19
 800acb0:	d8c02417 	ldw	r3,144(sp)
 800acb4:	1887883a 	add	r3,r3,r2
 800acb8:	d8c02415 	stw	r3,144(sp)
 800acbc:	d8001b15 	stw	zero,108(sp)
 800acc0:	d811883a 	mov	r8,sp
 800acc4:	003ea006 	br	800a748 <__alt_data_end+0xfc00a748>
 800acc8:	8c400814 	ori	r17,r17,32
 800accc:	b0c00007 	ldb	r3,0(r22)
 800acd0:	003ec606 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800acd4:	b0c00007 	ldb	r3,0(r22)
 800acd8:	00801b04 	movi	r2,108
 800acdc:	18832026 	beq	r3,r2,800b960 <___vfiprintf_internal_r+0x12e8>
 800ace0:	8c400414 	ori	r17,r17,16
 800ace4:	003ec106 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800ace8:	9cc03fcc 	andi	r19,r19,255
 800acec:	b811883a 	mov	r8,r23
 800acf0:	9803981e 	bne	r19,zero,800bb54 <___vfiprintf_internal_r+0x14dc>
 800acf4:	8880080c 	andi	r2,r17,32
 800acf8:	1002be26 	beq	r2,zero,800b7f4 <___vfiprintf_internal_r+0x117c>
 800acfc:	d9002217 	ldw	r4,136(sp)
 800ad00:	d9402417 	ldw	r5,144(sp)
 800ad04:	20800017 	ldw	r2,0(r4)
 800ad08:	2807d7fa 	srai	r3,r5,31
 800ad0c:	21000104 	addi	r4,r4,4
 800ad10:	d9002215 	stw	r4,136(sp)
 800ad14:	11400015 	stw	r5,0(r2)
 800ad18:	10c00115 	stw	r3,4(r2)
 800ad1c:	003e8a06 	br	800a748 <__alt_data_end+0xfc00a748>
 800ad20:	9cc03fcc 	andi	r19,r19,255
 800ad24:	b811883a 	mov	r8,r23
 800ad28:	9803871e 	bne	r19,zero,800bb48 <___vfiprintf_internal_r+0x14d0>
 800ad2c:	8880080c 	andi	r2,r17,32
 800ad30:	10009a26 	beq	r2,zero,800af9c <___vfiprintf_internal_r+0x924>
 800ad34:	d9002217 	ldw	r4,136(sp)
 800ad38:	d8001d85 	stb	zero,118(sp)
 800ad3c:	20800204 	addi	r2,r4,8
 800ad40:	24c00017 	ldw	r19,0(r4)
 800ad44:	25000117 	ldw	r20,4(r4)
 800ad48:	8002a416 	blt	r16,zero,800b7dc <___vfiprintf_internal_r+0x1164>
 800ad4c:	013fdfc4 	movi	r4,-129
 800ad50:	9d06b03a 	or	r3,r19,r20
 800ad54:	d8802215 	stw	r2,136(sp)
 800ad58:	8922703a 	and	r17,r17,r4
 800ad5c:	18009b26 	beq	r3,zero,800afcc <___vfiprintf_internal_r+0x954>
 800ad60:	002b883a 	mov	r21,zero
 800ad64:	ddc01a04 	addi	r23,sp,104
 800ad68:	9806d0fa 	srli	r3,r19,3
 800ad6c:	a008977a 	slli	r4,r20,29
 800ad70:	a028d0fa 	srli	r20,r20,3
 800ad74:	9cc001cc 	andi	r19,r19,7
 800ad78:	98800c04 	addi	r2,r19,48
 800ad7c:	bdffffc4 	addi	r23,r23,-1
 800ad80:	20e6b03a 	or	r19,r4,r3
 800ad84:	b8800005 	stb	r2,0(r23)
 800ad88:	9d06b03a 	or	r3,r19,r20
 800ad8c:	183ff61e 	bne	r3,zero,800ad68 <__alt_data_end+0xfc00ad68>
 800ad90:	88c0004c 	andi	r3,r17,1
 800ad94:	18021f1e 	bne	r3,zero,800b614 <___vfiprintf_internal_r+0xf9c>
 800ad98:	d9401e17 	ldw	r5,120(sp)
 800ad9c:	2de9c83a 	sub	r20,r5,r23
 800ada0:	003f3806 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800ada4:	9cc03fcc 	andi	r19,r19,255
 800ada8:	b811883a 	mov	r8,r23
 800adac:	98034f1e 	bne	r19,zero,800baec <___vfiprintf_internal_r+0x1474>
 800adb0:	00820074 	movhi	r2,2049
 800adb4:	10902104 	addi	r2,r2,16516
 800adb8:	d8802615 	stw	r2,152(sp)
 800adbc:	8880080c 	andi	r2,r17,32
 800adc0:	1000ac26 	beq	r2,zero,800b074 <___vfiprintf_internal_r+0x9fc>
 800adc4:	d9002217 	ldw	r4,136(sp)
 800adc8:	24c00017 	ldw	r19,0(r4)
 800adcc:	25000117 	ldw	r20,4(r4)
 800add0:	21000204 	addi	r4,r4,8
 800add4:	d9002215 	stw	r4,136(sp)
 800add8:	8880004c 	andi	r2,r17,1
 800addc:	1001e726 	beq	r2,zero,800b57c <___vfiprintf_internal_r+0xf04>
 800ade0:	9d04b03a 	or	r2,r19,r20
 800ade4:	10025c1e 	bne	r2,zero,800b758 <___vfiprintf_internal_r+0x10e0>
 800ade8:	d8001d85 	stb	zero,118(sp)
 800adec:	80024416 	blt	r16,zero,800b700 <___vfiprintf_internal_r+0x1088>
 800adf0:	00bfdfc4 	movi	r2,-129
 800adf4:	88a2703a 	and	r17,r17,r2
 800adf8:	003f1d06 	br	800aa70 <__alt_data_end+0xfc00aa70>
 800adfc:	d8c02217 	ldw	r3,136(sp)
 800ae00:	04c00044 	movi	r19,1
 800ae04:	b811883a 	mov	r8,r23
 800ae08:	18800017 	ldw	r2,0(r3)
 800ae0c:	18c00104 	addi	r3,r3,4
 800ae10:	d8001d85 	stb	zero,118(sp)
 800ae14:	d8801005 	stb	r2,64(sp)
 800ae18:	d8c02215 	stw	r3,136(sp)
 800ae1c:	9829883a 	mov	r20,r19
 800ae20:	ddc01004 	addi	r23,sp,64
 800ae24:	0021883a 	mov	r16,zero
 800ae28:	003f1e06 	br	800aaa4 <__alt_data_end+0xfc00aaa4>
 800ae2c:	9cc03fcc 	andi	r19,r19,255
 800ae30:	b811883a 	mov	r8,r23
 800ae34:	9803331e 	bne	r19,zero,800bb04 <___vfiprintf_internal_r+0x148c>
 800ae38:	8880080c 	andi	r2,r17,32
 800ae3c:	10004826 	beq	r2,zero,800af60 <___vfiprintf_internal_r+0x8e8>
 800ae40:	d9002217 	ldw	r4,136(sp)
 800ae44:	20800117 	ldw	r2,4(r4)
 800ae48:	24c00017 	ldw	r19,0(r4)
 800ae4c:	21000204 	addi	r4,r4,8
 800ae50:	d9002215 	stw	r4,136(sp)
 800ae54:	1029883a 	mov	r20,r2
 800ae58:	10024c16 	blt	r2,zero,800b78c <___vfiprintf_internal_r+0x1114>
 800ae5c:	dd401d83 	ldbu	r21,118(sp)
 800ae60:	80007116 	blt	r16,zero,800b028 <___vfiprintf_internal_r+0x9b0>
 800ae64:	00ffdfc4 	movi	r3,-129
 800ae68:	9d04b03a 	or	r2,r19,r20
 800ae6c:	88e2703a 	and	r17,r17,r3
 800ae70:	1000d126 	beq	r2,zero,800b1b8 <___vfiprintf_internal_r+0xb40>
 800ae74:	a0023526 	beq	r20,zero,800b74c <___vfiprintf_internal_r+0x10d4>
 800ae78:	ddc01a04 	addi	r23,sp,104
 800ae7c:	4039883a 	mov	fp,r8
 800ae80:	9809883a 	mov	r4,r19
 800ae84:	a00b883a 	mov	r5,r20
 800ae88:	01800284 	movi	r6,10
 800ae8c:	000f883a 	mov	r7,zero
 800ae90:	800cba40 	call	800cba4 <__umoddi3>
 800ae94:	10800c04 	addi	r2,r2,48
 800ae98:	bdffffc4 	addi	r23,r23,-1
 800ae9c:	9809883a 	mov	r4,r19
 800aea0:	a00b883a 	mov	r5,r20
 800aea4:	b8800005 	stb	r2,0(r23)
 800aea8:	01800284 	movi	r6,10
 800aeac:	000f883a 	mov	r7,zero
 800aeb0:	800c5a80 	call	800c5a8 <__udivdi3>
 800aeb4:	1027883a 	mov	r19,r2
 800aeb8:	10c4b03a 	or	r2,r2,r3
 800aebc:	1829883a 	mov	r20,r3
 800aec0:	103fef1e 	bne	r2,zero,800ae80 <__alt_data_end+0xfc00ae80>
 800aec4:	d9001e17 	ldw	r4,120(sp)
 800aec8:	e011883a 	mov	r8,fp
 800aecc:	25e9c83a 	sub	r20,r4,r23
 800aed0:	003eec06 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800aed4:	d8802307 	ldb	r2,140(sp)
 800aed8:	1002361e 	bne	r2,zero,800b7b4 <___vfiprintf_internal_r+0x113c>
 800aedc:	00c00804 	movi	r3,32
 800aee0:	d8c02305 	stb	r3,140(sp)
 800aee4:	04c00044 	movi	r19,1
 800aee8:	b0c00007 	ldb	r3,0(r22)
 800aeec:	003e3f06 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800aef0:	8c400054 	ori	r17,r17,1
 800aef4:	b0c00007 	ldb	r3,0(r22)
 800aef8:	003e3c06 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800aefc:	8c402014 	ori	r17,r17,128
 800af00:	b0c00007 	ldb	r3,0(r22)
 800af04:	003e3906 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800af08:	dc002715 	stw	r16,156(sp)
 800af0c:	d8002515 	stw	zero,148(sp)
 800af10:	1f3ff404 	addi	fp,r3,-48
 800af14:	0009883a 	mov	r4,zero
 800af18:	b021883a 	mov	r16,r22
 800af1c:	01400284 	movi	r5,10
 800af20:	8002af80 	call	8002af8 <__mulsi3>
 800af24:	80c00007 	ldb	r3,0(r16)
 800af28:	e089883a 	add	r4,fp,r2
 800af2c:	b5800044 	addi	r22,r22,1
 800af30:	1f3ff404 	addi	fp,r3,-48
 800af34:	b021883a 	mov	r16,r22
 800af38:	af3ff82e 	bgeu	r21,fp,800af1c <__alt_data_end+0xfc00af1c>
 800af3c:	d9002515 	stw	r4,148(sp)
 800af40:	dc002717 	ldw	r16,156(sp)
 800af44:	003e2a06 	br	800a7f0 <__alt_data_end+0xfc00a7f0>
 800af48:	9cc03fcc 	andi	r19,r19,255
 800af4c:	b811883a 	mov	r8,r23
 800af50:	9802e91e 	bne	r19,zero,800baf8 <___vfiprintf_internal_r+0x1480>
 800af54:	8c400414 	ori	r17,r17,16
 800af58:	8880080c 	andi	r2,r17,32
 800af5c:	103fb81e 	bne	r2,zero,800ae40 <__alt_data_end+0xfc00ae40>
 800af60:	8880040c 	andi	r2,r17,16
 800af64:	10022e26 	beq	r2,zero,800b820 <___vfiprintf_internal_r+0x11a8>
 800af68:	d9402217 	ldw	r5,136(sp)
 800af6c:	2cc00017 	ldw	r19,0(r5)
 800af70:	29400104 	addi	r5,r5,4
 800af74:	d9402215 	stw	r5,136(sp)
 800af78:	9829d7fa 	srai	r20,r19,31
 800af7c:	a005883a 	mov	r2,r20
 800af80:	003fb506 	br	800ae58 <__alt_data_end+0xfc00ae58>
 800af84:	9cc03fcc 	andi	r19,r19,255
 800af88:	b811883a 	mov	r8,r23
 800af8c:	9802fa1e 	bne	r19,zero,800bb78 <___vfiprintf_internal_r+0x1500>
 800af90:	8c400414 	ori	r17,r17,16
 800af94:	8880080c 	andi	r2,r17,32
 800af98:	103f661e 	bne	r2,zero,800ad34 <__alt_data_end+0xfc00ad34>
 800af9c:	8880040c 	andi	r2,r17,16
 800afa0:	10020626 	beq	r2,zero,800b7bc <___vfiprintf_internal_r+0x1144>
 800afa4:	d9402217 	ldw	r5,136(sp)
 800afa8:	d8001d85 	stb	zero,118(sp)
 800afac:	0029883a 	mov	r20,zero
 800afb0:	28800104 	addi	r2,r5,4
 800afb4:	2cc00017 	ldw	r19,0(r5)
 800afb8:	80020816 	blt	r16,zero,800b7dc <___vfiprintf_internal_r+0x1164>
 800afbc:	00ffdfc4 	movi	r3,-129
 800afc0:	d8802215 	stw	r2,136(sp)
 800afc4:	88e2703a 	and	r17,r17,r3
 800afc8:	983f651e 	bne	r19,zero,800ad60 <__alt_data_end+0xfc00ad60>
 800afcc:	002b883a 	mov	r21,zero
 800afd0:	8002cf26 	beq	r16,zero,800bb10 <___vfiprintf_internal_r+0x1498>
 800afd4:	0027883a 	mov	r19,zero
 800afd8:	0029883a 	mov	r20,zero
 800afdc:	003f6106 	br	800ad64 <__alt_data_end+0xfc00ad64>
 800afe0:	9cc03fcc 	andi	r19,r19,255
 800afe4:	b811883a 	mov	r8,r23
 800afe8:	9802e01e 	bne	r19,zero,800bb6c <___vfiprintf_internal_r+0x14f4>
 800afec:	8c400414 	ori	r17,r17,16
 800aff0:	8880080c 	andi	r2,r17,32
 800aff4:	1000641e 	bne	r2,zero,800b188 <___vfiprintf_internal_r+0xb10>
 800aff8:	8880040c 	andi	r2,r17,16
 800affc:	1001c81e 	bne	r2,zero,800b720 <___vfiprintf_internal_r+0x10a8>
 800b000:	8880100c 	andi	r2,r17,64
 800b004:	d8001d85 	stb	zero,118(sp)
 800b008:	1002281e 	bne	r2,zero,800b8ac <___vfiprintf_internal_r+0x1234>
 800b00c:	d9002217 	ldw	r4,136(sp)
 800b010:	0029883a 	mov	r20,zero
 800b014:	20800104 	addi	r2,r4,4
 800b018:	24c00017 	ldw	r19,0(r4)
 800b01c:	8001c60e 	bge	r16,zero,800b738 <___vfiprintf_internal_r+0x10c0>
 800b020:	d8802215 	stw	r2,136(sp)
 800b024:	002b883a 	mov	r21,zero
 800b028:	9d04b03a 	or	r2,r19,r20
 800b02c:	103f911e 	bne	r2,zero,800ae74 <__alt_data_end+0xfc00ae74>
 800b030:	00800044 	movi	r2,1
 800b034:	10803fcc 	andi	r2,r2,255
 800b038:	00c00044 	movi	r3,1
 800b03c:	10c05f26 	beq	r2,r3,800b1bc <___vfiprintf_internal_r+0xb44>
 800b040:	00c00084 	movi	r3,2
 800b044:	10ffe31e 	bne	r2,r3,800afd4 <__alt_data_end+0xfc00afd4>
 800b048:	0027883a 	mov	r19,zero
 800b04c:	0029883a 	mov	r20,zero
 800b050:	00015106 	br	800b598 <___vfiprintf_internal_r+0xf20>
 800b054:	9cc03fcc 	andi	r19,r19,255
 800b058:	b811883a 	mov	r8,r23
 800b05c:	9802c01e 	bne	r19,zero,800bb60 <___vfiprintf_internal_r+0x14e8>
 800b060:	01420074 	movhi	r5,2049
 800b064:	29501c04 	addi	r5,r5,16496
 800b068:	d9402615 	stw	r5,152(sp)
 800b06c:	8880080c 	andi	r2,r17,32
 800b070:	103f541e 	bne	r2,zero,800adc4 <__alt_data_end+0xfc00adc4>
 800b074:	8880040c 	andi	r2,r17,16
 800b078:	1001f226 	beq	r2,zero,800b844 <___vfiprintf_internal_r+0x11cc>
 800b07c:	d9402217 	ldw	r5,136(sp)
 800b080:	0029883a 	mov	r20,zero
 800b084:	2cc00017 	ldw	r19,0(r5)
 800b088:	29400104 	addi	r5,r5,4
 800b08c:	d9402215 	stw	r5,136(sp)
 800b090:	003f5106 	br	800add8 <__alt_data_end+0xfc00add8>
 800b094:	d8c02217 	ldw	r3,136(sp)
 800b098:	b811883a 	mov	r8,r23
 800b09c:	d8001d85 	stb	zero,118(sp)
 800b0a0:	1dc00017 	ldw	r23,0(r3)
 800b0a4:	1f000104 	addi	fp,r3,4
 800b0a8:	b8025926 	beq	r23,zero,800ba10 <___vfiprintf_internal_r+0x1398>
 800b0ac:	80023316 	blt	r16,zero,800b97c <___vfiprintf_internal_r+0x1304>
 800b0b0:	800d883a 	mov	r6,r16
 800b0b4:	000b883a 	mov	r5,zero
 800b0b8:	b809883a 	mov	r4,r23
 800b0bc:	da002a15 	stw	r8,168(sp)
 800b0c0:	80087980 	call	8008798 <memchr>
 800b0c4:	da002a17 	ldw	r8,168(sp)
 800b0c8:	10026826 	beq	r2,zero,800ba6c <___vfiprintf_internal_r+0x13f4>
 800b0cc:	15e9c83a 	sub	r20,r2,r23
 800b0d0:	dd401d83 	ldbu	r21,118(sp)
 800b0d4:	df002215 	stw	fp,136(sp)
 800b0d8:	0021883a 	mov	r16,zero
 800b0dc:	003e6906 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800b0e0:	9cc03fcc 	andi	r19,r19,255
 800b0e4:	b811883a 	mov	r8,r23
 800b0e8:	983fc126 	beq	r19,zero,800aff0 <__alt_data_end+0xfc00aff0>
 800b0ec:	d8c02303 	ldbu	r3,140(sp)
 800b0f0:	d8c01d85 	stb	r3,118(sp)
 800b0f4:	003fbe06 	br	800aff0 <__alt_data_end+0xfc00aff0>
 800b0f8:	d9002217 	ldw	r4,136(sp)
 800b0fc:	d9402217 	ldw	r5,136(sp)
 800b100:	21000017 	ldw	r4,0(r4)
 800b104:	28800104 	addi	r2,r5,4
 800b108:	d9002515 	stw	r4,148(sp)
 800b10c:	203e3d16 	blt	r4,zero,800aa04 <__alt_data_end+0xfc00aa04>
 800b110:	d8802215 	stw	r2,136(sp)
 800b114:	b0c00007 	ldb	r3,0(r22)
 800b118:	003db406 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800b11c:	00c00ac4 	movi	r3,43
 800b120:	d8c02305 	stb	r3,140(sp)
 800b124:	04c00044 	movi	r19,1
 800b128:	b0c00007 	ldb	r3,0(r22)
 800b12c:	003daf06 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800b130:	b0c00007 	ldb	r3,0(r22)
 800b134:	01000a84 	movi	r4,42
 800b138:	b4000044 	addi	r16,r22,1
 800b13c:	19025e26 	beq	r3,r4,800bab8 <___vfiprintf_internal_r+0x1440>
 800b140:	1f3ff404 	addi	fp,r3,-48
 800b144:	0009883a 	mov	r4,zero
 800b148:	af025236 	bltu	r21,fp,800ba94 <___vfiprintf_internal_r+0x141c>
 800b14c:	01400284 	movi	r5,10
 800b150:	8002af80 	call	8002af8 <__mulsi3>
 800b154:	80c00007 	ldb	r3,0(r16)
 800b158:	1709883a 	add	r4,r2,fp
 800b15c:	85800044 	addi	r22,r16,1
 800b160:	1f3ff404 	addi	fp,r3,-48
 800b164:	b021883a 	mov	r16,r22
 800b168:	af3ff82e 	bgeu	r21,fp,800b14c <__alt_data_end+0xfc00b14c>
 800b16c:	2021883a 	mov	r16,r4
 800b170:	203d9f0e 	bge	r4,zero,800a7f0 <__alt_data_end+0xfc00a7f0>
 800b174:	043fffc4 	movi	r16,-1
 800b178:	003d9d06 	br	800a7f0 <__alt_data_end+0xfc00a7f0>
 800b17c:	8c401014 	ori	r17,r17,64
 800b180:	b0c00007 	ldb	r3,0(r22)
 800b184:	003d9906 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800b188:	d9002217 	ldw	r4,136(sp)
 800b18c:	d8001d85 	stb	zero,118(sp)
 800b190:	20c00204 	addi	r3,r4,8
 800b194:	24c00017 	ldw	r19,0(r4)
 800b198:	25000117 	ldw	r20,4(r4)
 800b19c:	8001e716 	blt	r16,zero,800b93c <___vfiprintf_internal_r+0x12c4>
 800b1a0:	013fdfc4 	movi	r4,-129
 800b1a4:	9d04b03a 	or	r2,r19,r20
 800b1a8:	d8c02215 	stw	r3,136(sp)
 800b1ac:	8922703a 	and	r17,r17,r4
 800b1b0:	002b883a 	mov	r21,zero
 800b1b4:	103f2f1e 	bne	r2,zero,800ae74 <__alt_data_end+0xfc00ae74>
 800b1b8:	803e2f26 	beq	r16,zero,800aa78 <__alt_data_end+0xfc00aa78>
 800b1bc:	0027883a 	mov	r19,zero
 800b1c0:	9cc00c04 	addi	r19,r19,48
 800b1c4:	dcc019c5 	stb	r19,103(sp)
 800b1c8:	dd002817 	ldw	r20,160(sp)
 800b1cc:	ddc019c4 	addi	r23,sp,103
 800b1d0:	003e2c06 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800b1d4:	9cc03fcc 	andi	r19,r19,255
 800b1d8:	b811883a 	mov	r8,r23
 800b1dc:	9802571e 	bne	r19,zero,800bb3c <___vfiprintf_internal_r+0x14c4>
 800b1e0:	18005726 	beq	r3,zero,800b340 <___vfiprintf_internal_r+0xcc8>
 800b1e4:	04c00044 	movi	r19,1
 800b1e8:	d8c01005 	stb	r3,64(sp)
 800b1ec:	d8001d85 	stb	zero,118(sp)
 800b1f0:	9829883a 	mov	r20,r19
 800b1f4:	ddc01004 	addi	r23,sp,64
 800b1f8:	003f0a06 	br	800ae24 <__alt_data_end+0xfc00ae24>
 800b1fc:	d9402017 	ldw	r5,128(sp)
 800b200:	d9002117 	ldw	r4,132(sp)
 800b204:	d9801a04 	addi	r6,sp,104
 800b208:	da802a15 	stw	r10,168(sp)
 800b20c:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b210:	da802a17 	ldw	r10,168(sp)
 800b214:	1000501e 	bne	r2,zero,800b358 <___vfiprintf_internal_r+0xce0>
 800b218:	d9801b17 	ldw	r6,108(sp)
 800b21c:	d8801c17 	ldw	r2,112(sp)
 800b220:	d811883a 	mov	r8,sp
 800b224:	31000044 	addi	r4,r6,1
 800b228:	003e3606 	br	800ab04 <__alt_data_end+0xfc00ab04>
 800b22c:	d9001b17 	ldw	r4,108(sp)
 800b230:	d8801c17 	ldw	r2,112(sp)
 800b234:	21400044 	addi	r5,r4,1
 800b238:	d9801d87 	ldb	r6,118(sp)
 800b23c:	303e5226 	beq	r6,zero,800ab88 <__alt_data_end+0xfc00ab88>
 800b240:	01800044 	movi	r6,1
 800b244:	d9001d84 	addi	r4,sp,118
 800b248:	1185883a 	add	r2,r2,r6
 800b24c:	41000015 	stw	r4,0(r8)
 800b250:	41800115 	stw	r6,4(r8)
 800b254:	d8801c15 	stw	r2,112(sp)
 800b258:	d9401b15 	stw	r5,108(sp)
 800b25c:	010001c4 	movi	r4,7
 800b260:	2140b00e 	bge	r4,r5,800b524 <___vfiprintf_internal_r+0xeac>
 800b264:	1000f61e 	bne	r2,zero,800b640 <___vfiprintf_internal_r+0xfc8>
 800b268:	3800b31e 	bne	r7,zero,800b538 <___vfiprintf_internal_r+0xec0>
 800b26c:	0009883a 	mov	r4,zero
 800b270:	300b883a 	mov	r5,r6
 800b274:	d811883a 	mov	r8,sp
 800b278:	01802004 	movi	r6,128
 800b27c:	19be5226 	beq	r3,r6,800abc8 <__alt_data_end+0xfc00abc8>
 800b280:	8521c83a 	sub	r16,r16,r20
 800b284:	043e790e 	bge	zero,r16,800ac6c <__alt_data_end+0xfc00ac6c>
 800b288:	05400404 	movi	r21,16
 800b28c:	ac01b00e 	bge	r21,r16,800b950 <___vfiprintf_internal_r+0x12d8>
 800b290:	01420074 	movhi	r5,2049
 800b294:	29508204 	addi	r5,r5,16904
 800b298:	d9402315 	stw	r5,140(sp)
 800b29c:	070001c4 	movi	fp,7
 800b2a0:	00000506 	br	800b2b8 <___vfiprintf_internal_r+0xc40>
 800b2a4:	21400084 	addi	r5,r4,2
 800b2a8:	42000204 	addi	r8,r8,8
 800b2ac:	1809883a 	mov	r4,r3
 800b2b0:	843ffc04 	addi	r16,r16,-16
 800b2b4:	ac000d0e 	bge	r21,r16,800b2ec <___vfiprintf_internal_r+0xc74>
 800b2b8:	10800404 	addi	r2,r2,16
 800b2bc:	20c00044 	addi	r3,r4,1
 800b2c0:	44800015 	stw	r18,0(r8)
 800b2c4:	45400115 	stw	r21,4(r8)
 800b2c8:	d8801c15 	stw	r2,112(sp)
 800b2cc:	d8c01b15 	stw	r3,108(sp)
 800b2d0:	e0fff40e 	bge	fp,r3,800b2a4 <__alt_data_end+0xfc00b2a4>
 800b2d4:	1000101e 	bne	r2,zero,800b318 <___vfiprintf_internal_r+0xca0>
 800b2d8:	843ffc04 	addi	r16,r16,-16
 800b2dc:	01400044 	movi	r5,1
 800b2e0:	0009883a 	mov	r4,zero
 800b2e4:	d811883a 	mov	r8,sp
 800b2e8:	ac3ff316 	blt	r21,r16,800b2b8 <__alt_data_end+0xfc00b2b8>
 800b2ec:	d8c02317 	ldw	r3,140(sp)
 800b2f0:	1405883a 	add	r2,r2,r16
 800b2f4:	44000115 	stw	r16,4(r8)
 800b2f8:	40c00015 	stw	r3,0(r8)
 800b2fc:	d8801c15 	stw	r2,112(sp)
 800b300:	d9401b15 	stw	r5,108(sp)
 800b304:	00c001c4 	movi	r3,7
 800b308:	19401916 	blt	r3,r5,800b370 <___vfiprintf_internal_r+0xcf8>
 800b30c:	42000204 	addi	r8,r8,8
 800b310:	29400044 	addi	r5,r5,1
 800b314:	003e5506 	br	800ac6c <__alt_data_end+0xfc00ac6c>
 800b318:	d9402017 	ldw	r5,128(sp)
 800b31c:	d9002117 	ldw	r4,132(sp)
 800b320:	d9801a04 	addi	r6,sp,104
 800b324:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b328:	10000b1e 	bne	r2,zero,800b358 <___vfiprintf_internal_r+0xce0>
 800b32c:	d9001b17 	ldw	r4,108(sp)
 800b330:	d8801c17 	ldw	r2,112(sp)
 800b334:	d811883a 	mov	r8,sp
 800b338:	21400044 	addi	r5,r4,1
 800b33c:	003fdc06 	br	800b2b0 <__alt_data_end+0xfc00b2b0>
 800b340:	d8801c17 	ldw	r2,112(sp)
 800b344:	10000426 	beq	r2,zero,800b358 <___vfiprintf_internal_r+0xce0>
 800b348:	d9402017 	ldw	r5,128(sp)
 800b34c:	d9002117 	ldw	r4,132(sp)
 800b350:	d9801a04 	addi	r6,sp,104
 800b354:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b358:	d9402017 	ldw	r5,128(sp)
 800b35c:	2880030b 	ldhu	r2,12(r5)
 800b360:	1080100c 	andi	r2,r2,64
 800b364:	10014d1e 	bne	r2,zero,800b89c <___vfiprintf_internal_r+0x1224>
 800b368:	d8802417 	ldw	r2,144(sp)
 800b36c:	003d9706 	br	800a9cc <__alt_data_end+0xfc00a9cc>
 800b370:	1000d21e 	bne	r2,zero,800b6bc <___vfiprintf_internal_r+0x1044>
 800b374:	00c00044 	movi	r3,1
 800b378:	a005883a 	mov	r2,r20
 800b37c:	ddc00015 	stw	r23,0(sp)
 800b380:	dd000115 	stw	r20,4(sp)
 800b384:	dd001c15 	stw	r20,112(sp)
 800b388:	d8c01b15 	stw	r3,108(sp)
 800b38c:	d811883a 	mov	r8,sp
 800b390:	42000204 	addi	r8,r8,8
 800b394:	8c40010c 	andi	r17,r17,4
 800b398:	88004026 	beq	r17,zero,800b49c <___vfiprintf_internal_r+0xe24>
 800b39c:	d9002517 	ldw	r4,148(sp)
 800b3a0:	24e3c83a 	sub	r17,r4,r19
 800b3a4:	04403d0e 	bge	zero,r17,800b49c <___vfiprintf_internal_r+0xe24>
 800b3a8:	04000404 	movi	r16,16
 800b3ac:	8441a90e 	bge	r16,r17,800ba54 <___vfiprintf_internal_r+0x13dc>
 800b3b0:	00c20074 	movhi	r3,2049
 800b3b4:	18d08604 	addi	r3,r3,16920
 800b3b8:	d9001b17 	ldw	r4,108(sp)
 800b3bc:	d8c02315 	stw	r3,140(sp)
 800b3c0:	050001c4 	movi	r20,7
 800b3c4:	dd402117 	ldw	r21,132(sp)
 800b3c8:	ddc02017 	ldw	r23,128(sp)
 800b3cc:	00000506 	br	800b3e4 <___vfiprintf_internal_r+0xd6c>
 800b3d0:	21400084 	addi	r5,r4,2
 800b3d4:	42000204 	addi	r8,r8,8
 800b3d8:	1809883a 	mov	r4,r3
 800b3dc:	8c7ffc04 	addi	r17,r17,-16
 800b3e0:	84400f0e 	bge	r16,r17,800b420 <___vfiprintf_internal_r+0xda8>
 800b3e4:	01420074 	movhi	r5,2049
 800b3e8:	10800404 	addi	r2,r2,16
 800b3ec:	20c00044 	addi	r3,r4,1
 800b3f0:	29508604 	addi	r5,r5,16920
 800b3f4:	41400015 	stw	r5,0(r8)
 800b3f8:	44000115 	stw	r16,4(r8)
 800b3fc:	d8801c15 	stw	r2,112(sp)
 800b400:	d8c01b15 	stw	r3,108(sp)
 800b404:	a0fff20e 	bge	r20,r3,800b3d0 <__alt_data_end+0xfc00b3d0>
 800b408:	1000141e 	bne	r2,zero,800b45c <___vfiprintf_internal_r+0xde4>
 800b40c:	8c7ffc04 	addi	r17,r17,-16
 800b410:	01400044 	movi	r5,1
 800b414:	0009883a 	mov	r4,zero
 800b418:	d811883a 	mov	r8,sp
 800b41c:	847ff116 	blt	r16,r17,800b3e4 <__alt_data_end+0xfc00b3e4>
 800b420:	d8c02317 	ldw	r3,140(sp)
 800b424:	1445883a 	add	r2,r2,r17
 800b428:	44400115 	stw	r17,4(r8)
 800b42c:	40c00015 	stw	r3,0(r8)
 800b430:	d8801c15 	stw	r2,112(sp)
 800b434:	d9401b15 	stw	r5,108(sp)
 800b438:	00c001c4 	movi	r3,7
 800b43c:	1940170e 	bge	r3,r5,800b49c <___vfiprintf_internal_r+0xe24>
 800b440:	1000101e 	bne	r2,zero,800b484 <___vfiprintf_internal_r+0xe0c>
 800b444:	d8802517 	ldw	r2,148(sp)
 800b448:	14c11616 	blt	r2,r19,800b8a4 <___vfiprintf_internal_r+0x122c>
 800b44c:	d9002417 	ldw	r4,144(sp)
 800b450:	2089883a 	add	r4,r4,r2
 800b454:	d9002415 	stw	r4,144(sp)
 800b458:	003e1806 	br	800acbc <__alt_data_end+0xfc00acbc>
 800b45c:	d9801a04 	addi	r6,sp,104
 800b460:	b80b883a 	mov	r5,r23
 800b464:	a809883a 	mov	r4,r21
 800b468:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b46c:	103fba1e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b470:	d9001b17 	ldw	r4,108(sp)
 800b474:	d8801c17 	ldw	r2,112(sp)
 800b478:	d811883a 	mov	r8,sp
 800b47c:	21400044 	addi	r5,r4,1
 800b480:	003fd606 	br	800b3dc <__alt_data_end+0xfc00b3dc>
 800b484:	d9402017 	ldw	r5,128(sp)
 800b488:	d9002117 	ldw	r4,132(sp)
 800b48c:	d9801a04 	addi	r6,sp,104
 800b490:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b494:	103fb01e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b498:	d8801c17 	ldw	r2,112(sp)
 800b49c:	d8c02517 	ldw	r3,148(sp)
 800b4a0:	1cc0010e 	bge	r3,r19,800b4a8 <___vfiprintf_internal_r+0xe30>
 800b4a4:	9807883a 	mov	r3,r19
 800b4a8:	d9002417 	ldw	r4,144(sp)
 800b4ac:	20c9883a 	add	r4,r4,r3
 800b4b0:	d9002415 	stw	r4,144(sp)
 800b4b4:	103e0126 	beq	r2,zero,800acbc <__alt_data_end+0xfc00acbc>
 800b4b8:	d9402017 	ldw	r5,128(sp)
 800b4bc:	d9002117 	ldw	r4,132(sp)
 800b4c0:	d9801a04 	addi	r6,sp,104
 800b4c4:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b4c8:	103dfc26 	beq	r2,zero,800acbc <__alt_data_end+0xfc00acbc>
 800b4cc:	003fa206 	br	800b358 <__alt_data_end+0xfc00b358>
 800b4d0:	d9402017 	ldw	r5,128(sp)
 800b4d4:	d9002117 	ldw	r4,132(sp)
 800b4d8:	d9801a04 	addi	r6,sp,104
 800b4dc:	d9c02b15 	stw	r7,172(sp)
 800b4e0:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b4e4:	d9c02b17 	ldw	r7,172(sp)
 800b4e8:	103f9b1e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b4ec:	d9001b17 	ldw	r4,108(sp)
 800b4f0:	d8801c17 	ldw	r2,112(sp)
 800b4f4:	d811883a 	mov	r8,sp
 800b4f8:	21800044 	addi	r6,r4,1
 800b4fc:	003dbf06 	br	800abfc <__alt_data_end+0xfc00abfc>
 800b500:	1000d81e 	bne	r2,zero,800b864 <___vfiprintf_internal_r+0x11ec>
 800b504:	d9001d87 	ldb	r4,118(sp)
 800b508:	20000a26 	beq	r4,zero,800b534 <___vfiprintf_internal_r+0xebc>
 800b50c:	00800044 	movi	r2,1
 800b510:	d9001d84 	addi	r4,sp,118
 800b514:	100b883a 	mov	r5,r2
 800b518:	d9000015 	stw	r4,0(sp)
 800b51c:	d8800115 	stw	r2,4(sp)
 800b520:	d811883a 	mov	r8,sp
 800b524:	2809883a 	mov	r4,r5
 800b528:	42000204 	addi	r8,r8,8
 800b52c:	29400044 	addi	r5,r5,1
 800b530:	003d9506 	br	800ab88 <__alt_data_end+0xfc00ab88>
 800b534:	3800fd26 	beq	r7,zero,800b92c <___vfiprintf_internal_r+0x12b4>
 800b538:	00800084 	movi	r2,2
 800b53c:	d9001d04 	addi	r4,sp,116
 800b540:	d9000015 	stw	r4,0(sp)
 800b544:	d8800115 	stw	r2,4(sp)
 800b548:	01400044 	movi	r5,1
 800b54c:	d811883a 	mov	r8,sp
 800b550:	2809883a 	mov	r4,r5
 800b554:	42000204 	addi	r8,r8,8
 800b558:	29400044 	addi	r5,r5,1
 800b55c:	003f4606 	br	800b278 <__alt_data_end+0xfc00b278>
 800b560:	d8802517 	ldw	r2,148(sp)
 800b564:	14c0010e 	bge	r2,r19,800b56c <___vfiprintf_internal_r+0xef4>
 800b568:	9805883a 	mov	r2,r19
 800b56c:	d9402417 	ldw	r5,144(sp)
 800b570:	288b883a 	add	r5,r5,r2
 800b574:	d9402415 	stw	r5,144(sp)
 800b578:	003dd006 	br	800acbc <__alt_data_end+0xfc00acbc>
 800b57c:	d8001d85 	stb	zero,118(sp)
 800b580:	80005d16 	blt	r16,zero,800b6f8 <___vfiprintf_internal_r+0x1080>
 800b584:	00ffdfc4 	movi	r3,-129
 800b588:	9d04b03a 	or	r2,r19,r20
 800b58c:	88e2703a 	and	r17,r17,r3
 800b590:	103d3726 	beq	r2,zero,800aa70 <__alt_data_end+0xfc00aa70>
 800b594:	002b883a 	mov	r21,zero
 800b598:	d9002617 	ldw	r4,152(sp)
 800b59c:	ddc01a04 	addi	r23,sp,104
 800b5a0:	988003cc 	andi	r2,r19,15
 800b5a4:	a006973a 	slli	r3,r20,28
 800b5a8:	2085883a 	add	r2,r4,r2
 800b5ac:	9826d13a 	srli	r19,r19,4
 800b5b0:	10800003 	ldbu	r2,0(r2)
 800b5b4:	a028d13a 	srli	r20,r20,4
 800b5b8:	bdffffc4 	addi	r23,r23,-1
 800b5bc:	1ce6b03a 	or	r19,r3,r19
 800b5c0:	b8800005 	stb	r2,0(r23)
 800b5c4:	9d04b03a 	or	r2,r19,r20
 800b5c8:	103ff51e 	bne	r2,zero,800b5a0 <__alt_data_end+0xfc00b5a0>
 800b5cc:	d8801e17 	ldw	r2,120(sp)
 800b5d0:	15e9c83a 	sub	r20,r2,r23
 800b5d4:	003d2b06 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800b5d8:	d9402017 	ldw	r5,128(sp)
 800b5dc:	d9002117 	ldw	r4,132(sp)
 800b5e0:	d9801a04 	addi	r6,sp,104
 800b5e4:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b5e8:	103f5b1e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b5ec:	d8801c17 	ldw	r2,112(sp)
 800b5f0:	d811883a 	mov	r8,sp
 800b5f4:	003f6706 	br	800b394 <__alt_data_end+0xfc00b394>
 800b5f8:	d9402017 	ldw	r5,128(sp)
 800b5fc:	d9002117 	ldw	r4,132(sp)
 800b600:	d9801a04 	addi	r6,sp,104
 800b604:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b608:	103f531e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b60c:	d811883a 	mov	r8,sp
 800b610:	003cd906 	br	800a978 <__alt_data_end+0xfc00a978>
 800b614:	10803fcc 	andi	r2,r2,255
 800b618:	1080201c 	xori	r2,r2,128
 800b61c:	10bfe004 	addi	r2,r2,-128
 800b620:	00c00c04 	movi	r3,48
 800b624:	10ffe926 	beq	r2,r3,800b5cc <__alt_data_end+0xfc00b5cc>
 800b628:	b8ffffc5 	stb	r3,-1(r23)
 800b62c:	d8c01e17 	ldw	r3,120(sp)
 800b630:	b8bfffc4 	addi	r2,r23,-1
 800b634:	102f883a 	mov	r23,r2
 800b638:	18a9c83a 	sub	r20,r3,r2
 800b63c:	003d1106 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800b640:	d9402017 	ldw	r5,128(sp)
 800b644:	d9002117 	ldw	r4,132(sp)
 800b648:	d9801a04 	addi	r6,sp,104
 800b64c:	d8c02a15 	stw	r3,168(sp)
 800b650:	d9c02b15 	stw	r7,172(sp)
 800b654:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b658:	d8c02a17 	ldw	r3,168(sp)
 800b65c:	d9c02b17 	ldw	r7,172(sp)
 800b660:	103f3d1e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b664:	d9001b17 	ldw	r4,108(sp)
 800b668:	d8801c17 	ldw	r2,112(sp)
 800b66c:	d811883a 	mov	r8,sp
 800b670:	21400044 	addi	r5,r4,1
 800b674:	003d4406 	br	800ab88 <__alt_data_end+0xfc00ab88>
 800b678:	d9402017 	ldw	r5,128(sp)
 800b67c:	d9002117 	ldw	r4,132(sp)
 800b680:	d9801a04 	addi	r6,sp,104
 800b684:	d8c02a15 	stw	r3,168(sp)
 800b688:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b68c:	d8c02a17 	ldw	r3,168(sp)
 800b690:	103f311e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b694:	d9001b17 	ldw	r4,108(sp)
 800b698:	d8801c17 	ldw	r2,112(sp)
 800b69c:	d811883a 	mov	r8,sp
 800b6a0:	21400044 	addi	r5,r4,1
 800b6a4:	003ef406 	br	800b278 <__alt_data_end+0xfc00b278>
 800b6a8:	1000bd1e 	bne	r2,zero,800b9a0 <___vfiprintf_internal_r+0x1328>
 800b6ac:	01400044 	movi	r5,1
 800b6b0:	0009883a 	mov	r4,zero
 800b6b4:	d811883a 	mov	r8,sp
 800b6b8:	003ef106 	br	800b280 <__alt_data_end+0xfc00b280>
 800b6bc:	d9402017 	ldw	r5,128(sp)
 800b6c0:	d9002117 	ldw	r4,132(sp)
 800b6c4:	d9801a04 	addi	r6,sp,104
 800b6c8:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b6cc:	103f221e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b6d0:	d9401b17 	ldw	r5,108(sp)
 800b6d4:	d8801c17 	ldw	r2,112(sp)
 800b6d8:	d811883a 	mov	r8,sp
 800b6dc:	29400044 	addi	r5,r5,1
 800b6e0:	003d6206 	br	800ac6c <__alt_data_end+0xfc00ac6c>
 800b6e4:	01420074 	movhi	r5,2049
 800b6e8:	29502104 	addi	r5,r5,16516
 800b6ec:	d9402615 	stw	r5,152(sp)
 800b6f0:	d8c02215 	stw	r3,136(sp)
 800b6f4:	1023883a 	mov	r17,r2
 800b6f8:	9d04b03a 	or	r2,r19,r20
 800b6fc:	103fa51e 	bne	r2,zero,800b594 <__alt_data_end+0xfc00b594>
 800b700:	002b883a 	mov	r21,zero
 800b704:	00800084 	movi	r2,2
 800b708:	003e4a06 	br	800b034 <__alt_data_end+0xfc00b034>
 800b70c:	01420074 	movhi	r5,2049
 800b710:	29502104 	addi	r5,r5,16516
 800b714:	002b883a 	mov	r21,zero
 800b718:	d9402615 	stw	r5,152(sp)
 800b71c:	003f9e06 	br	800b598 <__alt_data_end+0xfc00b598>
 800b720:	d9402217 	ldw	r5,136(sp)
 800b724:	d8001d85 	stb	zero,118(sp)
 800b728:	0029883a 	mov	r20,zero
 800b72c:	28800104 	addi	r2,r5,4
 800b730:	2cc00017 	ldw	r19,0(r5)
 800b734:	803e3a16 	blt	r16,zero,800b020 <__alt_data_end+0xfc00b020>
 800b738:	00ffdfc4 	movi	r3,-129
 800b73c:	d8802215 	stw	r2,136(sp)
 800b740:	88e2703a 	and	r17,r17,r3
 800b744:	002b883a 	mov	r21,zero
 800b748:	983e9b26 	beq	r19,zero,800b1b8 <__alt_data_end+0xfc00b1b8>
 800b74c:	00800244 	movi	r2,9
 800b750:	14fdc936 	bltu	r2,r19,800ae78 <__alt_data_end+0xfc00ae78>
 800b754:	003e9a06 	br	800b1c0 <__alt_data_end+0xfc00b1c0>
 800b758:	00800c04 	movi	r2,48
 800b75c:	d8c01d45 	stb	r3,117(sp)
 800b760:	d8801d05 	stb	r2,116(sp)
 800b764:	d8001d85 	stb	zero,118(sp)
 800b768:	88c00094 	ori	r3,r17,2
 800b76c:	80009c16 	blt	r16,zero,800b9e0 <___vfiprintf_internal_r+0x1368>
 800b770:	00bfdfc4 	movi	r2,-129
 800b774:	88a2703a 	and	r17,r17,r2
 800b778:	8c400094 	ori	r17,r17,2
 800b77c:	002b883a 	mov	r21,zero
 800b780:	003f8506 	br	800b598 <__alt_data_end+0xfc00b598>
 800b784:	b029883a 	mov	r20,r22
 800b788:	003c0b06 	br	800a7b8 <__alt_data_end+0xfc00a7b8>
 800b78c:	04e7c83a 	sub	r19,zero,r19
 800b790:	05400b44 	movi	r21,45
 800b794:	9804c03a 	cmpne	r2,r19,zero
 800b798:	0529c83a 	sub	r20,zero,r20
 800b79c:	dd401d85 	stb	r21,118(sp)
 800b7a0:	a0a9c83a 	sub	r20,r20,r2
 800b7a4:	80009716 	blt	r16,zero,800ba04 <___vfiprintf_internal_r+0x138c>
 800b7a8:	00bfdfc4 	movi	r2,-129
 800b7ac:	88a2703a 	and	r17,r17,r2
 800b7b0:	003db006 	br	800ae74 <__alt_data_end+0xfc00ae74>
 800b7b4:	b0c00007 	ldb	r3,0(r22)
 800b7b8:	003c0c06 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800b7bc:	8880100c 	andi	r2,r17,64
 800b7c0:	d8001d85 	stb	zero,118(sp)
 800b7c4:	1000461e 	bne	r2,zero,800b8e0 <___vfiprintf_internal_r+0x1268>
 800b7c8:	d9002217 	ldw	r4,136(sp)
 800b7cc:	0029883a 	mov	r20,zero
 800b7d0:	20800104 	addi	r2,r4,4
 800b7d4:	24c00017 	ldw	r19,0(r4)
 800b7d8:	803df80e 	bge	r16,zero,800afbc <__alt_data_end+0xfc00afbc>
 800b7dc:	9d06b03a 	or	r3,r19,r20
 800b7e0:	d8802215 	stw	r2,136(sp)
 800b7e4:	183d5e1e 	bne	r3,zero,800ad60 <__alt_data_end+0xfc00ad60>
 800b7e8:	002b883a 	mov	r21,zero
 800b7ec:	0005883a 	mov	r2,zero
 800b7f0:	003e1006 	br	800b034 <__alt_data_end+0xfc00b034>
 800b7f4:	8880040c 	andi	r2,r17,16
 800b7f8:	1000321e 	bne	r2,zero,800b8c4 <___vfiprintf_internal_r+0x124c>
 800b7fc:	8c40100c 	andi	r17,r17,64
 800b800:	88008d26 	beq	r17,zero,800ba38 <___vfiprintf_internal_r+0x13c0>
 800b804:	d9402217 	ldw	r5,136(sp)
 800b808:	d8c02417 	ldw	r3,144(sp)
 800b80c:	28800017 	ldw	r2,0(r5)
 800b810:	29400104 	addi	r5,r5,4
 800b814:	d9402215 	stw	r5,136(sp)
 800b818:	10c0000d 	sth	r3,0(r2)
 800b81c:	003bca06 	br	800a748 <__alt_data_end+0xfc00a748>
 800b820:	8880100c 	andi	r2,r17,64
 800b824:	10003a26 	beq	r2,zero,800b910 <___vfiprintf_internal_r+0x1298>
 800b828:	d8802217 	ldw	r2,136(sp)
 800b82c:	14c0000f 	ldh	r19,0(r2)
 800b830:	10800104 	addi	r2,r2,4
 800b834:	d8802215 	stw	r2,136(sp)
 800b838:	9829d7fa 	srai	r20,r19,31
 800b83c:	a005883a 	mov	r2,r20
 800b840:	003d8506 	br	800ae58 <__alt_data_end+0xfc00ae58>
 800b844:	8880100c 	andi	r2,r17,64
 800b848:	10002b26 	beq	r2,zero,800b8f8 <___vfiprintf_internal_r+0x1280>
 800b84c:	d8802217 	ldw	r2,136(sp)
 800b850:	0029883a 	mov	r20,zero
 800b854:	14c0000b 	ldhu	r19,0(r2)
 800b858:	10800104 	addi	r2,r2,4
 800b85c:	d8802215 	stw	r2,136(sp)
 800b860:	003d5d06 	br	800add8 <__alt_data_end+0xfc00add8>
 800b864:	d9402017 	ldw	r5,128(sp)
 800b868:	d9002117 	ldw	r4,132(sp)
 800b86c:	d9801a04 	addi	r6,sp,104
 800b870:	d8c02a15 	stw	r3,168(sp)
 800b874:	d9c02b15 	stw	r7,172(sp)
 800b878:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b87c:	d8c02a17 	ldw	r3,168(sp)
 800b880:	d9c02b17 	ldw	r7,172(sp)
 800b884:	103eb41e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b888:	d9001b17 	ldw	r4,108(sp)
 800b88c:	d8801c17 	ldw	r2,112(sp)
 800b890:	d811883a 	mov	r8,sp
 800b894:	21400044 	addi	r5,r4,1
 800b898:	003e6706 	br	800b238 <__alt_data_end+0xfc00b238>
 800b89c:	00bfffc4 	movi	r2,-1
 800b8a0:	003c4a06 	br	800a9cc <__alt_data_end+0xfc00a9cc>
 800b8a4:	9805883a 	mov	r2,r19
 800b8a8:	003ee806 	br	800b44c <__alt_data_end+0xfc00b44c>
 800b8ac:	d8c02217 	ldw	r3,136(sp)
 800b8b0:	0029883a 	mov	r20,zero
 800b8b4:	18800104 	addi	r2,r3,4
 800b8b8:	1cc0000b 	ldhu	r19,0(r3)
 800b8bc:	803f9e0e 	bge	r16,zero,800b738 <__alt_data_end+0xfc00b738>
 800b8c0:	003dd706 	br	800b020 <__alt_data_end+0xfc00b020>
 800b8c4:	d8c02217 	ldw	r3,136(sp)
 800b8c8:	d9002417 	ldw	r4,144(sp)
 800b8cc:	18800017 	ldw	r2,0(r3)
 800b8d0:	18c00104 	addi	r3,r3,4
 800b8d4:	d8c02215 	stw	r3,136(sp)
 800b8d8:	11000015 	stw	r4,0(r2)
 800b8dc:	003b9a06 	br	800a748 <__alt_data_end+0xfc00a748>
 800b8e0:	d8c02217 	ldw	r3,136(sp)
 800b8e4:	0029883a 	mov	r20,zero
 800b8e8:	18800104 	addi	r2,r3,4
 800b8ec:	1cc0000b 	ldhu	r19,0(r3)
 800b8f0:	803db20e 	bge	r16,zero,800afbc <__alt_data_end+0xfc00afbc>
 800b8f4:	003fb906 	br	800b7dc <__alt_data_end+0xfc00b7dc>
 800b8f8:	d9002217 	ldw	r4,136(sp)
 800b8fc:	0029883a 	mov	r20,zero
 800b900:	24c00017 	ldw	r19,0(r4)
 800b904:	21000104 	addi	r4,r4,4
 800b908:	d9002215 	stw	r4,136(sp)
 800b90c:	003d3206 	br	800add8 <__alt_data_end+0xfc00add8>
 800b910:	d8c02217 	ldw	r3,136(sp)
 800b914:	1cc00017 	ldw	r19,0(r3)
 800b918:	18c00104 	addi	r3,r3,4
 800b91c:	d8c02215 	stw	r3,136(sp)
 800b920:	9829d7fa 	srai	r20,r19,31
 800b924:	a005883a 	mov	r2,r20
 800b928:	003d4b06 	br	800ae58 <__alt_data_end+0xfc00ae58>
 800b92c:	0009883a 	mov	r4,zero
 800b930:	01400044 	movi	r5,1
 800b934:	d811883a 	mov	r8,sp
 800b938:	003e4f06 	br	800b278 <__alt_data_end+0xfc00b278>
 800b93c:	d8c02215 	stw	r3,136(sp)
 800b940:	002b883a 	mov	r21,zero
 800b944:	003db806 	br	800b028 <__alt_data_end+0xfc00b028>
 800b948:	d811883a 	mov	r8,sp
 800b94c:	003e9606 	br	800b3a8 <__alt_data_end+0xfc00b3a8>
 800b950:	01020074 	movhi	r4,2049
 800b954:	21108204 	addi	r4,r4,16904
 800b958:	d9002315 	stw	r4,140(sp)
 800b95c:	003e6306 	br	800b2ec <__alt_data_end+0xfc00b2ec>
 800b960:	b0c00043 	ldbu	r3,1(r22)
 800b964:	8c400814 	ori	r17,r17,32
 800b968:	b5800044 	addi	r22,r22,1
 800b96c:	18c03fcc 	andi	r3,r3,255
 800b970:	18c0201c 	xori	r3,r3,128
 800b974:	18ffe004 	addi	r3,r3,-128
 800b978:	003b9c06 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800b97c:	b809883a 	mov	r4,r23
 800b980:	da002a15 	stw	r8,168(sp)
 800b984:	8002dc80 	call	8002dc8 <strlen>
 800b988:	1029883a 	mov	r20,r2
 800b98c:	dd401d83 	ldbu	r21,118(sp)
 800b990:	df002215 	stw	fp,136(sp)
 800b994:	0021883a 	mov	r16,zero
 800b998:	da002a17 	ldw	r8,168(sp)
 800b99c:	003c3906 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800b9a0:	d9402017 	ldw	r5,128(sp)
 800b9a4:	d9002117 	ldw	r4,132(sp)
 800b9a8:	d9801a04 	addi	r6,sp,104
 800b9ac:	800a5640 	call	800a564 <__sprint_r.part.0>
 800b9b0:	103e691e 	bne	r2,zero,800b358 <__alt_data_end+0xfc00b358>
 800b9b4:	d9001b17 	ldw	r4,108(sp)
 800b9b8:	d8801c17 	ldw	r2,112(sp)
 800b9bc:	d811883a 	mov	r8,sp
 800b9c0:	21400044 	addi	r5,r4,1
 800b9c4:	003e2e06 	br	800b280 <__alt_data_end+0xfc00b280>
 800b9c8:	01020074 	movhi	r4,2049
 800b9cc:	21108604 	addi	r4,r4,16920
 800b9d0:	d9002315 	stw	r4,140(sp)
 800b9d4:	d9001b17 	ldw	r4,108(sp)
 800b9d8:	21000044 	addi	r4,r4,1
 800b9dc:	003c5e06 	br	800ab58 <__alt_data_end+0xfc00ab58>
 800b9e0:	002b883a 	mov	r21,zero
 800b9e4:	00800084 	movi	r2,2
 800b9e8:	10803fcc 	andi	r2,r2,255
 800b9ec:	01000044 	movi	r4,1
 800b9f0:	11002b26 	beq	r2,r4,800baa0 <___vfiprintf_internal_r+0x1428>
 800b9f4:	01000084 	movi	r4,2
 800b9f8:	11002b1e 	bne	r2,r4,800baa8 <___vfiprintf_internal_r+0x1430>
 800b9fc:	1823883a 	mov	r17,r3
 800ba00:	003ee506 	br	800b598 <__alt_data_end+0xfc00b598>
 800ba04:	8807883a 	mov	r3,r17
 800ba08:	00800044 	movi	r2,1
 800ba0c:	003ff606 	br	800b9e8 <__alt_data_end+0xfc00b9e8>
 800ba10:	00800184 	movi	r2,6
 800ba14:	1400012e 	bgeu	r2,r16,800ba1c <___vfiprintf_internal_r+0x13a4>
 800ba18:	1021883a 	mov	r16,r2
 800ba1c:	8029883a 	mov	r20,r16
 800ba20:	8027883a 	mov	r19,r16
 800ba24:	80002216 	blt	r16,zero,800bab0 <___vfiprintf_internal_r+0x1438>
 800ba28:	05c20074 	movhi	r23,2049
 800ba2c:	df002215 	stw	fp,136(sp)
 800ba30:	bdd02604 	addi	r23,r23,16536
 800ba34:	003cfb06 	br	800ae24 <__alt_data_end+0xfc00ae24>
 800ba38:	d9002217 	ldw	r4,136(sp)
 800ba3c:	d9402417 	ldw	r5,144(sp)
 800ba40:	20800017 	ldw	r2,0(r4)
 800ba44:	21000104 	addi	r4,r4,4
 800ba48:	d9002215 	stw	r4,136(sp)
 800ba4c:	11400015 	stw	r5,0(r2)
 800ba50:	003b3d06 	br	800a748 <__alt_data_end+0xfc00a748>
 800ba54:	01420074 	movhi	r5,2049
 800ba58:	29508604 	addi	r5,r5,16920
 800ba5c:	d9402315 	stw	r5,140(sp)
 800ba60:	d9401b17 	ldw	r5,108(sp)
 800ba64:	29400044 	addi	r5,r5,1
 800ba68:	003e6d06 	br	800b420 <__alt_data_end+0xfc00b420>
 800ba6c:	8029883a 	mov	r20,r16
 800ba70:	dd401d83 	ldbu	r21,118(sp)
 800ba74:	df002215 	stw	fp,136(sp)
 800ba78:	0021883a 	mov	r16,zero
 800ba7c:	003c0106 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800ba80:	00c20074 	movhi	r3,2049
 800ba84:	18d08204 	addi	r3,r3,16904
 800ba88:	d8c02315 	stw	r3,140(sp)
 800ba8c:	280d883a 	mov	r6,r5
 800ba90:	003c6906 	br	800ac38 <__alt_data_end+0xfc00ac38>
 800ba94:	802d883a 	mov	r22,r16
 800ba98:	0021883a 	mov	r16,zero
 800ba9c:	003b5406 	br	800a7f0 <__alt_data_end+0xfc00a7f0>
 800baa0:	1823883a 	mov	r17,r3
 800baa4:	003cf306 	br	800ae74 <__alt_data_end+0xfc00ae74>
 800baa8:	1823883a 	mov	r17,r3
 800baac:	003cad06 	br	800ad64 <__alt_data_end+0xfc00ad64>
 800bab0:	0027883a 	mov	r19,zero
 800bab4:	003fdc06 	br	800ba28 <__alt_data_end+0xfc00ba28>
 800bab8:	d9402217 	ldw	r5,136(sp)
 800babc:	8005883a 	mov	r2,r16
 800bac0:	b0c00043 	ldbu	r3,1(r22)
 800bac4:	2c000017 	ldw	r16,0(r5)
 800bac8:	29000104 	addi	r4,r5,4
 800bacc:	d9002215 	stw	r4,136(sp)
 800bad0:	102d883a 	mov	r22,r2
 800bad4:	803fa50e 	bge	r16,zero,800b96c <__alt_data_end+0xfc00b96c>
 800bad8:	18c03fcc 	andi	r3,r3,255
 800badc:	18c0201c 	xori	r3,r3,128
 800bae0:	043fffc4 	movi	r16,-1
 800bae4:	18ffe004 	addi	r3,r3,-128
 800bae8:	003b4006 	br	800a7ec <__alt_data_end+0xfc00a7ec>
 800baec:	d9402303 	ldbu	r5,140(sp)
 800baf0:	d9401d85 	stb	r5,118(sp)
 800baf4:	003cae06 	br	800adb0 <__alt_data_end+0xfc00adb0>
 800baf8:	d8c02303 	ldbu	r3,140(sp)
 800bafc:	d8c01d85 	stb	r3,118(sp)
 800bb00:	003d1406 	br	800af54 <__alt_data_end+0xfc00af54>
 800bb04:	d8c02303 	ldbu	r3,140(sp)
 800bb08:	d8c01d85 	stb	r3,118(sp)
 800bb0c:	003cca06 	br	800ae38 <__alt_data_end+0xfc00ae38>
 800bb10:	8880004c 	andi	r2,r17,1
 800bb14:	002b883a 	mov	r21,zero
 800bb18:	10000526 	beq	r2,zero,800bb30 <___vfiprintf_internal_r+0x14b8>
 800bb1c:	00800c04 	movi	r2,48
 800bb20:	d88019c5 	stb	r2,103(sp)
 800bb24:	dd002817 	ldw	r20,160(sp)
 800bb28:	ddc019c4 	addi	r23,sp,103
 800bb2c:	003bd506 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800bb30:	0029883a 	mov	r20,zero
 800bb34:	ddc01a04 	addi	r23,sp,104
 800bb38:	003bd206 	br	800aa84 <__alt_data_end+0xfc00aa84>
 800bb3c:	d9002303 	ldbu	r4,140(sp)
 800bb40:	d9001d85 	stb	r4,118(sp)
 800bb44:	003da606 	br	800b1e0 <__alt_data_end+0xfc00b1e0>
 800bb48:	d8c02303 	ldbu	r3,140(sp)
 800bb4c:	d8c01d85 	stb	r3,118(sp)
 800bb50:	003c7606 	br	800ad2c <__alt_data_end+0xfc00ad2c>
 800bb54:	d8c02303 	ldbu	r3,140(sp)
 800bb58:	d8c01d85 	stb	r3,118(sp)
 800bb5c:	003c6506 	br	800acf4 <__alt_data_end+0xfc00acf4>
 800bb60:	d9002303 	ldbu	r4,140(sp)
 800bb64:	d9001d85 	stb	r4,118(sp)
 800bb68:	003d3d06 	br	800b060 <__alt_data_end+0xfc00b060>
 800bb6c:	d8c02303 	ldbu	r3,140(sp)
 800bb70:	d8c01d85 	stb	r3,118(sp)
 800bb74:	003d1d06 	br	800afec <__alt_data_end+0xfc00afec>
 800bb78:	d8c02303 	ldbu	r3,140(sp)
 800bb7c:	d8c01d85 	stb	r3,118(sp)
 800bb80:	003d0306 	br	800af90 <__alt_data_end+0xfc00af90>

0800bb84 <__vfiprintf_internal>:
 800bb84:	00820074 	movhi	r2,2049
 800bb88:	10979504 	addi	r2,r2,24148
 800bb8c:	300f883a 	mov	r7,r6
 800bb90:	280d883a 	mov	r6,r5
 800bb94:	200b883a 	mov	r5,r4
 800bb98:	11000017 	ldw	r4,0(r2)
 800bb9c:	800a6781 	jmpi	800a678 <___vfiprintf_internal_r>

0800bba0 <__sbprintf>:
 800bba0:	2880030b 	ldhu	r2,12(r5)
 800bba4:	2ac01917 	ldw	r11,100(r5)
 800bba8:	2a80038b 	ldhu	r10,14(r5)
 800bbac:	2a400717 	ldw	r9,28(r5)
 800bbb0:	2a000917 	ldw	r8,36(r5)
 800bbb4:	defee204 	addi	sp,sp,-1144
 800bbb8:	00c10004 	movi	r3,1024
 800bbbc:	dc011a15 	stw	r16,1128(sp)
 800bbc0:	10bfff4c 	andi	r2,r2,65533
 800bbc4:	2821883a 	mov	r16,r5
 800bbc8:	d8cb883a 	add	r5,sp,r3
 800bbcc:	dc811c15 	stw	r18,1136(sp)
 800bbd0:	dc411b15 	stw	r17,1132(sp)
 800bbd4:	dfc11d15 	stw	ra,1140(sp)
 800bbd8:	2025883a 	mov	r18,r4
 800bbdc:	d881030d 	sth	r2,1036(sp)
 800bbe0:	dac11915 	stw	r11,1124(sp)
 800bbe4:	da81038d 	sth	r10,1038(sp)
 800bbe8:	da410715 	stw	r9,1052(sp)
 800bbec:	da010915 	stw	r8,1060(sp)
 800bbf0:	dec10015 	stw	sp,1024(sp)
 800bbf4:	dec10415 	stw	sp,1040(sp)
 800bbf8:	d8c10215 	stw	r3,1032(sp)
 800bbfc:	d8c10515 	stw	r3,1044(sp)
 800bc00:	d8010615 	stw	zero,1048(sp)
 800bc04:	800a6780 	call	800a678 <___vfiprintf_internal_r>
 800bc08:	1023883a 	mov	r17,r2
 800bc0c:	10000416 	blt	r2,zero,800bc20 <__sbprintf+0x80>
 800bc10:	d9410004 	addi	r5,sp,1024
 800bc14:	9009883a 	mov	r4,r18
 800bc18:	8006e340 	call	8006e34 <_fflush_r>
 800bc1c:	10000d1e 	bne	r2,zero,800bc54 <__sbprintf+0xb4>
 800bc20:	d881030b 	ldhu	r2,1036(sp)
 800bc24:	1080100c 	andi	r2,r2,64
 800bc28:	10000326 	beq	r2,zero,800bc38 <__sbprintf+0x98>
 800bc2c:	8080030b 	ldhu	r2,12(r16)
 800bc30:	10801014 	ori	r2,r2,64
 800bc34:	8080030d 	sth	r2,12(r16)
 800bc38:	8805883a 	mov	r2,r17
 800bc3c:	dfc11d17 	ldw	ra,1140(sp)
 800bc40:	dc811c17 	ldw	r18,1136(sp)
 800bc44:	dc411b17 	ldw	r17,1132(sp)
 800bc48:	dc011a17 	ldw	r16,1128(sp)
 800bc4c:	dec11e04 	addi	sp,sp,1144
 800bc50:	f800283a 	ret
 800bc54:	047fffc4 	movi	r17,-1
 800bc58:	003ff106 	br	800bc20 <__alt_data_end+0xfc00bc20>

0800bc5c <__swbuf_r>:
 800bc5c:	defffb04 	addi	sp,sp,-20
 800bc60:	dcc00315 	stw	r19,12(sp)
 800bc64:	dc800215 	stw	r18,8(sp)
 800bc68:	dc000015 	stw	r16,0(sp)
 800bc6c:	dfc00415 	stw	ra,16(sp)
 800bc70:	dc400115 	stw	r17,4(sp)
 800bc74:	2025883a 	mov	r18,r4
 800bc78:	2827883a 	mov	r19,r5
 800bc7c:	3021883a 	mov	r16,r6
 800bc80:	20000226 	beq	r4,zero,800bc8c <__swbuf_r+0x30>
 800bc84:	20800e17 	ldw	r2,56(r4)
 800bc88:	10004226 	beq	r2,zero,800bd94 <__swbuf_r+0x138>
 800bc8c:	80800617 	ldw	r2,24(r16)
 800bc90:	8100030b 	ldhu	r4,12(r16)
 800bc94:	80800215 	stw	r2,8(r16)
 800bc98:	2080020c 	andi	r2,r4,8
 800bc9c:	10003626 	beq	r2,zero,800bd78 <__swbuf_r+0x11c>
 800bca0:	80c00417 	ldw	r3,16(r16)
 800bca4:	18003426 	beq	r3,zero,800bd78 <__swbuf_r+0x11c>
 800bca8:	2088000c 	andi	r2,r4,8192
 800bcac:	9c403fcc 	andi	r17,r19,255
 800bcb0:	10001a26 	beq	r2,zero,800bd1c <__swbuf_r+0xc0>
 800bcb4:	80800017 	ldw	r2,0(r16)
 800bcb8:	81000517 	ldw	r4,20(r16)
 800bcbc:	10c7c83a 	sub	r3,r2,r3
 800bcc0:	1900200e 	bge	r3,r4,800bd44 <__swbuf_r+0xe8>
 800bcc4:	18c00044 	addi	r3,r3,1
 800bcc8:	81000217 	ldw	r4,8(r16)
 800bccc:	11400044 	addi	r5,r2,1
 800bcd0:	81400015 	stw	r5,0(r16)
 800bcd4:	213fffc4 	addi	r4,r4,-1
 800bcd8:	81000215 	stw	r4,8(r16)
 800bcdc:	14c00005 	stb	r19,0(r2)
 800bce0:	80800517 	ldw	r2,20(r16)
 800bce4:	10c01e26 	beq	r2,r3,800bd60 <__swbuf_r+0x104>
 800bce8:	8080030b 	ldhu	r2,12(r16)
 800bcec:	1080004c 	andi	r2,r2,1
 800bcf0:	10000226 	beq	r2,zero,800bcfc <__swbuf_r+0xa0>
 800bcf4:	00800284 	movi	r2,10
 800bcf8:	88801926 	beq	r17,r2,800bd60 <__swbuf_r+0x104>
 800bcfc:	8805883a 	mov	r2,r17
 800bd00:	dfc00417 	ldw	ra,16(sp)
 800bd04:	dcc00317 	ldw	r19,12(sp)
 800bd08:	dc800217 	ldw	r18,8(sp)
 800bd0c:	dc400117 	ldw	r17,4(sp)
 800bd10:	dc000017 	ldw	r16,0(sp)
 800bd14:	dec00504 	addi	sp,sp,20
 800bd18:	f800283a 	ret
 800bd1c:	81401917 	ldw	r5,100(r16)
 800bd20:	00b7ffc4 	movi	r2,-8193
 800bd24:	21080014 	ori	r4,r4,8192
 800bd28:	2884703a 	and	r2,r5,r2
 800bd2c:	80801915 	stw	r2,100(r16)
 800bd30:	80800017 	ldw	r2,0(r16)
 800bd34:	8100030d 	sth	r4,12(r16)
 800bd38:	81000517 	ldw	r4,20(r16)
 800bd3c:	10c7c83a 	sub	r3,r2,r3
 800bd40:	193fe016 	blt	r3,r4,800bcc4 <__alt_data_end+0xfc00bcc4>
 800bd44:	800b883a 	mov	r5,r16
 800bd48:	9009883a 	mov	r4,r18
 800bd4c:	8006e340 	call	8006e34 <_fflush_r>
 800bd50:	1000071e 	bne	r2,zero,800bd70 <__swbuf_r+0x114>
 800bd54:	80800017 	ldw	r2,0(r16)
 800bd58:	00c00044 	movi	r3,1
 800bd5c:	003fda06 	br	800bcc8 <__alt_data_end+0xfc00bcc8>
 800bd60:	800b883a 	mov	r5,r16
 800bd64:	9009883a 	mov	r4,r18
 800bd68:	8006e340 	call	8006e34 <_fflush_r>
 800bd6c:	103fe326 	beq	r2,zero,800bcfc <__alt_data_end+0xfc00bcfc>
 800bd70:	00bfffc4 	movi	r2,-1
 800bd74:	003fe206 	br	800bd00 <__alt_data_end+0xfc00bd00>
 800bd78:	800b883a 	mov	r5,r16
 800bd7c:	9009883a 	mov	r4,r18
 800bd80:	80052140 	call	8005214 <__swsetup_r>
 800bd84:	103ffa1e 	bne	r2,zero,800bd70 <__alt_data_end+0xfc00bd70>
 800bd88:	8100030b 	ldhu	r4,12(r16)
 800bd8c:	80c00417 	ldw	r3,16(r16)
 800bd90:	003fc506 	br	800bca8 <__alt_data_end+0xfc00bca8>
 800bd94:	80072200 	call	8007220 <__sinit>
 800bd98:	003fbc06 	br	800bc8c <__alt_data_end+0xfc00bc8c>

0800bd9c <__swbuf>:
 800bd9c:	00820074 	movhi	r2,2049
 800bda0:	10979504 	addi	r2,r2,24148
 800bda4:	280d883a 	mov	r6,r5
 800bda8:	200b883a 	mov	r5,r4
 800bdac:	11000017 	ldw	r4,0(r2)
 800bdb0:	800bc5c1 	jmpi	800bc5c <__swbuf_r>

0800bdb4 <_write_r>:
 800bdb4:	defffd04 	addi	sp,sp,-12
 800bdb8:	2805883a 	mov	r2,r5
 800bdbc:	dc000015 	stw	r16,0(sp)
 800bdc0:	04020074 	movhi	r16,2049
 800bdc4:	dc400115 	stw	r17,4(sp)
 800bdc8:	300b883a 	mov	r5,r6
 800bdcc:	841e7d04 	addi	r16,r16,31220
 800bdd0:	2023883a 	mov	r17,r4
 800bdd4:	380d883a 	mov	r6,r7
 800bdd8:	1009883a 	mov	r4,r2
 800bddc:	dfc00215 	stw	ra,8(sp)
 800bde0:	80000015 	stw	zero,0(r16)
 800bde4:	80106dc0 	call	80106dc <write>
 800bde8:	00ffffc4 	movi	r3,-1
 800bdec:	10c00526 	beq	r2,r3,800be04 <_write_r+0x50>
 800bdf0:	dfc00217 	ldw	ra,8(sp)
 800bdf4:	dc400117 	ldw	r17,4(sp)
 800bdf8:	dc000017 	ldw	r16,0(sp)
 800bdfc:	dec00304 	addi	sp,sp,12
 800be00:	f800283a 	ret
 800be04:	80c00017 	ldw	r3,0(r16)
 800be08:	183ff926 	beq	r3,zero,800bdf0 <__alt_data_end+0xfc00bdf0>
 800be0c:	88c00015 	stw	r3,0(r17)
 800be10:	003ff706 	br	800bdf0 <__alt_data_end+0xfc00bdf0>

0800be14 <_close_r>:
 800be14:	defffd04 	addi	sp,sp,-12
 800be18:	dc000015 	stw	r16,0(sp)
 800be1c:	04020074 	movhi	r16,2049
 800be20:	dc400115 	stw	r17,4(sp)
 800be24:	841e7d04 	addi	r16,r16,31220
 800be28:	2023883a 	mov	r17,r4
 800be2c:	2809883a 	mov	r4,r5
 800be30:	dfc00215 	stw	ra,8(sp)
 800be34:	80000015 	stw	zero,0(r16)
 800be38:	800fa480 	call	800fa48 <close>
 800be3c:	00ffffc4 	movi	r3,-1
 800be40:	10c00526 	beq	r2,r3,800be58 <_close_r+0x44>
 800be44:	dfc00217 	ldw	ra,8(sp)
 800be48:	dc400117 	ldw	r17,4(sp)
 800be4c:	dc000017 	ldw	r16,0(sp)
 800be50:	dec00304 	addi	sp,sp,12
 800be54:	f800283a 	ret
 800be58:	80c00017 	ldw	r3,0(r16)
 800be5c:	183ff926 	beq	r3,zero,800be44 <__alt_data_end+0xfc00be44>
 800be60:	88c00015 	stw	r3,0(r17)
 800be64:	003ff706 	br	800be44 <__alt_data_end+0xfc00be44>

0800be68 <_calloc_r>:
 800be68:	defffe04 	addi	sp,sp,-8
 800be6c:	2805883a 	mov	r2,r5
 800be70:	dc000015 	stw	r16,0(sp)
 800be74:	300b883a 	mov	r5,r6
 800be78:	2021883a 	mov	r16,r4
 800be7c:	1009883a 	mov	r4,r2
 800be80:	dfc00115 	stw	ra,4(sp)
 800be84:	8002af80 	call	8002af8 <__mulsi3>
 800be88:	100b883a 	mov	r5,r2
 800be8c:	8009883a 	mov	r4,r16
 800be90:	8007f8c0 	call	8007f8c <_malloc_r>
 800be94:	10002926 	beq	r2,zero,800bf3c <_calloc_r+0xd4>
 800be98:	11bfff17 	ldw	r6,-4(r2)
 800be9c:	1021883a 	mov	r16,r2
 800bea0:	00bfff04 	movi	r2,-4
 800bea4:	308c703a 	and	r6,r6,r2
 800bea8:	00c00904 	movi	r3,36
 800beac:	308d883a 	add	r6,r6,r2
 800beb0:	19801636 	bltu	r3,r6,800bf0c <_calloc_r+0xa4>
 800beb4:	008004c4 	movi	r2,19
 800beb8:	11800b2e 	bgeu	r2,r6,800bee8 <_calloc_r+0x80>
 800bebc:	80000015 	stw	zero,0(r16)
 800bec0:	80000115 	stw	zero,4(r16)
 800bec4:	008006c4 	movi	r2,27
 800bec8:	11801a2e 	bgeu	r2,r6,800bf34 <_calloc_r+0xcc>
 800becc:	80000215 	stw	zero,8(r16)
 800bed0:	80000315 	stw	zero,12(r16)
 800bed4:	30c0151e 	bne	r6,r3,800bf2c <_calloc_r+0xc4>
 800bed8:	80000415 	stw	zero,16(r16)
 800bedc:	80800604 	addi	r2,r16,24
 800bee0:	80000515 	stw	zero,20(r16)
 800bee4:	00000106 	br	800beec <_calloc_r+0x84>
 800bee8:	8005883a 	mov	r2,r16
 800beec:	10000015 	stw	zero,0(r2)
 800bef0:	10000115 	stw	zero,4(r2)
 800bef4:	10000215 	stw	zero,8(r2)
 800bef8:	8005883a 	mov	r2,r16
 800befc:	dfc00117 	ldw	ra,4(sp)
 800bf00:	dc000017 	ldw	r16,0(sp)
 800bf04:	dec00204 	addi	sp,sp,8
 800bf08:	f800283a 	ret
 800bf0c:	000b883a 	mov	r5,zero
 800bf10:	8009883a 	mov	r4,r16
 800bf14:	80089d80 	call	80089d8 <memset>
 800bf18:	8005883a 	mov	r2,r16
 800bf1c:	dfc00117 	ldw	ra,4(sp)
 800bf20:	dc000017 	ldw	r16,0(sp)
 800bf24:	dec00204 	addi	sp,sp,8
 800bf28:	f800283a 	ret
 800bf2c:	80800404 	addi	r2,r16,16
 800bf30:	003fee06 	br	800beec <__alt_data_end+0xfc00beec>
 800bf34:	80800204 	addi	r2,r16,8
 800bf38:	003fec06 	br	800beec <__alt_data_end+0xfc00beec>
 800bf3c:	0005883a 	mov	r2,zero
 800bf40:	003fee06 	br	800befc <__alt_data_end+0xfc00befc>

0800bf44 <_fclose_r>:
 800bf44:	28003926 	beq	r5,zero,800c02c <_fclose_r+0xe8>
 800bf48:	defffc04 	addi	sp,sp,-16
 800bf4c:	dc400115 	stw	r17,4(sp)
 800bf50:	dc000015 	stw	r16,0(sp)
 800bf54:	dfc00315 	stw	ra,12(sp)
 800bf58:	dc800215 	stw	r18,8(sp)
 800bf5c:	2023883a 	mov	r17,r4
 800bf60:	2821883a 	mov	r16,r5
 800bf64:	20000226 	beq	r4,zero,800bf70 <_fclose_r+0x2c>
 800bf68:	20800e17 	ldw	r2,56(r4)
 800bf6c:	10002726 	beq	r2,zero,800c00c <_fclose_r+0xc8>
 800bf70:	8080030f 	ldh	r2,12(r16)
 800bf74:	1000071e 	bne	r2,zero,800bf94 <_fclose_r+0x50>
 800bf78:	0005883a 	mov	r2,zero
 800bf7c:	dfc00317 	ldw	ra,12(sp)
 800bf80:	dc800217 	ldw	r18,8(sp)
 800bf84:	dc400117 	ldw	r17,4(sp)
 800bf88:	dc000017 	ldw	r16,0(sp)
 800bf8c:	dec00404 	addi	sp,sp,16
 800bf90:	f800283a 	ret
 800bf94:	800b883a 	mov	r5,r16
 800bf98:	8809883a 	mov	r4,r17
 800bf9c:	8006c180 	call	8006c18 <__sflush_r>
 800bfa0:	1025883a 	mov	r18,r2
 800bfa4:	80800b17 	ldw	r2,44(r16)
 800bfa8:	10000426 	beq	r2,zero,800bfbc <_fclose_r+0x78>
 800bfac:	81400717 	ldw	r5,28(r16)
 800bfb0:	8809883a 	mov	r4,r17
 800bfb4:	103ee83a 	callr	r2
 800bfb8:	10001616 	blt	r2,zero,800c014 <_fclose_r+0xd0>
 800bfbc:	8080030b 	ldhu	r2,12(r16)
 800bfc0:	1080200c 	andi	r2,r2,128
 800bfc4:	1000151e 	bne	r2,zero,800c01c <_fclose_r+0xd8>
 800bfc8:	81400c17 	ldw	r5,48(r16)
 800bfcc:	28000526 	beq	r5,zero,800bfe4 <_fclose_r+0xa0>
 800bfd0:	80801004 	addi	r2,r16,64
 800bfd4:	28800226 	beq	r5,r2,800bfe0 <_fclose_r+0x9c>
 800bfd8:	8809883a 	mov	r4,r17
 800bfdc:	80073940 	call	8007394 <_free_r>
 800bfe0:	80000c15 	stw	zero,48(r16)
 800bfe4:	81401117 	ldw	r5,68(r16)
 800bfe8:	28000326 	beq	r5,zero,800bff8 <_fclose_r+0xb4>
 800bfec:	8809883a 	mov	r4,r17
 800bff0:	80073940 	call	8007394 <_free_r>
 800bff4:	80001115 	stw	zero,68(r16)
 800bff8:	80072300 	call	8007230 <__sfp_lock_acquire>
 800bffc:	8000030d 	sth	zero,12(r16)
 800c000:	80072340 	call	8007234 <__sfp_lock_release>
 800c004:	9005883a 	mov	r2,r18
 800c008:	003fdc06 	br	800bf7c <__alt_data_end+0xfc00bf7c>
 800c00c:	80072200 	call	8007220 <__sinit>
 800c010:	003fd706 	br	800bf70 <__alt_data_end+0xfc00bf70>
 800c014:	04bfffc4 	movi	r18,-1
 800c018:	003fe806 	br	800bfbc <__alt_data_end+0xfc00bfbc>
 800c01c:	81400417 	ldw	r5,16(r16)
 800c020:	8809883a 	mov	r4,r17
 800c024:	80073940 	call	8007394 <_free_r>
 800c028:	003fe706 	br	800bfc8 <__alt_data_end+0xfc00bfc8>
 800c02c:	0005883a 	mov	r2,zero
 800c030:	f800283a 	ret

0800c034 <fclose>:
 800c034:	00820074 	movhi	r2,2049
 800c038:	10979504 	addi	r2,r2,24148
 800c03c:	200b883a 	mov	r5,r4
 800c040:	11000017 	ldw	r4,0(r2)
 800c044:	800bf441 	jmpi	800bf44 <_fclose_r>

0800c048 <__fputwc>:
 800c048:	defff804 	addi	sp,sp,-32
 800c04c:	dcc00415 	stw	r19,16(sp)
 800c050:	dc800315 	stw	r18,12(sp)
 800c054:	dc000115 	stw	r16,4(sp)
 800c058:	dfc00715 	stw	ra,28(sp)
 800c05c:	dd400615 	stw	r21,24(sp)
 800c060:	dd000515 	stw	r20,20(sp)
 800c064:	dc400215 	stw	r17,8(sp)
 800c068:	2027883a 	mov	r19,r4
 800c06c:	2825883a 	mov	r18,r5
 800c070:	3021883a 	mov	r16,r6
 800c074:	8007d7c0 	call	8007d7c <__locale_mb_cur_max>
 800c078:	00c00044 	movi	r3,1
 800c07c:	10c03e26 	beq	r2,r3,800c178 <__fputwc+0x130>
 800c080:	81c01704 	addi	r7,r16,92
 800c084:	900d883a 	mov	r6,r18
 800c088:	d80b883a 	mov	r5,sp
 800c08c:	9809883a 	mov	r4,r19
 800c090:	800c3c00 	call	800c3c0 <_wcrtomb_r>
 800c094:	1029883a 	mov	r20,r2
 800c098:	00bfffc4 	movi	r2,-1
 800c09c:	a0802026 	beq	r20,r2,800c120 <__fputwc+0xd8>
 800c0a0:	d9400003 	ldbu	r5,0(sp)
 800c0a4:	a0001c26 	beq	r20,zero,800c118 <__fputwc+0xd0>
 800c0a8:	0023883a 	mov	r17,zero
 800c0ac:	05400284 	movi	r21,10
 800c0b0:	00000906 	br	800c0d8 <__fputwc+0x90>
 800c0b4:	80800017 	ldw	r2,0(r16)
 800c0b8:	11400005 	stb	r5,0(r2)
 800c0bc:	80c00017 	ldw	r3,0(r16)
 800c0c0:	18c00044 	addi	r3,r3,1
 800c0c4:	80c00015 	stw	r3,0(r16)
 800c0c8:	8c400044 	addi	r17,r17,1
 800c0cc:	dc45883a 	add	r2,sp,r17
 800c0d0:	8d00112e 	bgeu	r17,r20,800c118 <__fputwc+0xd0>
 800c0d4:	11400003 	ldbu	r5,0(r2)
 800c0d8:	80c00217 	ldw	r3,8(r16)
 800c0dc:	18ffffc4 	addi	r3,r3,-1
 800c0e0:	80c00215 	stw	r3,8(r16)
 800c0e4:	183ff30e 	bge	r3,zero,800c0b4 <__alt_data_end+0xfc00c0b4>
 800c0e8:	80800617 	ldw	r2,24(r16)
 800c0ec:	18801916 	blt	r3,r2,800c154 <__fputwc+0x10c>
 800c0f0:	80800017 	ldw	r2,0(r16)
 800c0f4:	11400005 	stb	r5,0(r2)
 800c0f8:	80800017 	ldw	r2,0(r16)
 800c0fc:	10c00003 	ldbu	r3,0(r2)
 800c100:	10800044 	addi	r2,r2,1
 800c104:	1d402326 	beq	r3,r21,800c194 <__fputwc+0x14c>
 800c108:	80800015 	stw	r2,0(r16)
 800c10c:	8c400044 	addi	r17,r17,1
 800c110:	dc45883a 	add	r2,sp,r17
 800c114:	8d3fef36 	bltu	r17,r20,800c0d4 <__alt_data_end+0xfc00c0d4>
 800c118:	9005883a 	mov	r2,r18
 800c11c:	00000406 	br	800c130 <__fputwc+0xe8>
 800c120:	80c0030b 	ldhu	r3,12(r16)
 800c124:	a005883a 	mov	r2,r20
 800c128:	18c01014 	ori	r3,r3,64
 800c12c:	80c0030d 	sth	r3,12(r16)
 800c130:	dfc00717 	ldw	ra,28(sp)
 800c134:	dd400617 	ldw	r21,24(sp)
 800c138:	dd000517 	ldw	r20,20(sp)
 800c13c:	dcc00417 	ldw	r19,16(sp)
 800c140:	dc800317 	ldw	r18,12(sp)
 800c144:	dc400217 	ldw	r17,8(sp)
 800c148:	dc000117 	ldw	r16,4(sp)
 800c14c:	dec00804 	addi	sp,sp,32
 800c150:	f800283a 	ret
 800c154:	800d883a 	mov	r6,r16
 800c158:	29403fcc 	andi	r5,r5,255
 800c15c:	9809883a 	mov	r4,r19
 800c160:	800bc5c0 	call	800bc5c <__swbuf_r>
 800c164:	10bfffe0 	cmpeqi	r2,r2,-1
 800c168:	10803fcc 	andi	r2,r2,255
 800c16c:	103fd626 	beq	r2,zero,800c0c8 <__alt_data_end+0xfc00c0c8>
 800c170:	00bfffc4 	movi	r2,-1
 800c174:	003fee06 	br	800c130 <__alt_data_end+0xfc00c130>
 800c178:	90ffffc4 	addi	r3,r18,-1
 800c17c:	01003f84 	movi	r4,254
 800c180:	20ffbf36 	bltu	r4,r3,800c080 <__alt_data_end+0xfc00c080>
 800c184:	900b883a 	mov	r5,r18
 800c188:	dc800005 	stb	r18,0(sp)
 800c18c:	1029883a 	mov	r20,r2
 800c190:	003fc506 	br	800c0a8 <__alt_data_end+0xfc00c0a8>
 800c194:	800d883a 	mov	r6,r16
 800c198:	a80b883a 	mov	r5,r21
 800c19c:	9809883a 	mov	r4,r19
 800c1a0:	800bc5c0 	call	800bc5c <__swbuf_r>
 800c1a4:	10bfffe0 	cmpeqi	r2,r2,-1
 800c1a8:	003fef06 	br	800c168 <__alt_data_end+0xfc00c168>

0800c1ac <_fputwc_r>:
 800c1ac:	3080030b 	ldhu	r2,12(r6)
 800c1b0:	10c8000c 	andi	r3,r2,8192
 800c1b4:	1800051e 	bne	r3,zero,800c1cc <_fputwc_r+0x20>
 800c1b8:	30c01917 	ldw	r3,100(r6)
 800c1bc:	10880014 	ori	r2,r2,8192
 800c1c0:	3080030d 	sth	r2,12(r6)
 800c1c4:	18880014 	ori	r2,r3,8192
 800c1c8:	30801915 	stw	r2,100(r6)
 800c1cc:	800c0481 	jmpi	800c048 <__fputwc>

0800c1d0 <fputwc>:
 800c1d0:	00820074 	movhi	r2,2049
 800c1d4:	defffc04 	addi	sp,sp,-16
 800c1d8:	10979504 	addi	r2,r2,24148
 800c1dc:	dc000115 	stw	r16,4(sp)
 800c1e0:	14000017 	ldw	r16,0(r2)
 800c1e4:	dc400215 	stw	r17,8(sp)
 800c1e8:	dfc00315 	stw	ra,12(sp)
 800c1ec:	2023883a 	mov	r17,r4
 800c1f0:	80000226 	beq	r16,zero,800c1fc <fputwc+0x2c>
 800c1f4:	80800e17 	ldw	r2,56(r16)
 800c1f8:	10001026 	beq	r2,zero,800c23c <fputwc+0x6c>
 800c1fc:	2880030b 	ldhu	r2,12(r5)
 800c200:	10c8000c 	andi	r3,r2,8192
 800c204:	1800051e 	bne	r3,zero,800c21c <fputwc+0x4c>
 800c208:	28c01917 	ldw	r3,100(r5)
 800c20c:	10880014 	ori	r2,r2,8192
 800c210:	2880030d 	sth	r2,12(r5)
 800c214:	18880014 	ori	r2,r3,8192
 800c218:	28801915 	stw	r2,100(r5)
 800c21c:	280d883a 	mov	r6,r5
 800c220:	8009883a 	mov	r4,r16
 800c224:	880b883a 	mov	r5,r17
 800c228:	dfc00317 	ldw	ra,12(sp)
 800c22c:	dc400217 	ldw	r17,8(sp)
 800c230:	dc000117 	ldw	r16,4(sp)
 800c234:	dec00404 	addi	sp,sp,16
 800c238:	800c0481 	jmpi	800c048 <__fputwc>
 800c23c:	8009883a 	mov	r4,r16
 800c240:	d9400015 	stw	r5,0(sp)
 800c244:	80072200 	call	8007220 <__sinit>
 800c248:	d9400017 	ldw	r5,0(sp)
 800c24c:	003feb06 	br	800c1fc <__alt_data_end+0xfc00c1fc>

0800c250 <_fstat_r>:
 800c250:	defffd04 	addi	sp,sp,-12
 800c254:	2805883a 	mov	r2,r5
 800c258:	dc000015 	stw	r16,0(sp)
 800c25c:	04020074 	movhi	r16,2049
 800c260:	dc400115 	stw	r17,4(sp)
 800c264:	841e7d04 	addi	r16,r16,31220
 800c268:	2023883a 	mov	r17,r4
 800c26c:	300b883a 	mov	r5,r6
 800c270:	1009883a 	mov	r4,r2
 800c274:	dfc00215 	stw	ra,8(sp)
 800c278:	80000015 	stw	zero,0(r16)
 800c27c:	800fb880 	call	800fb88 <fstat>
 800c280:	00ffffc4 	movi	r3,-1
 800c284:	10c00526 	beq	r2,r3,800c29c <_fstat_r+0x4c>
 800c288:	dfc00217 	ldw	ra,8(sp)
 800c28c:	dc400117 	ldw	r17,4(sp)
 800c290:	dc000017 	ldw	r16,0(sp)
 800c294:	dec00304 	addi	sp,sp,12
 800c298:	f800283a 	ret
 800c29c:	80c00017 	ldw	r3,0(r16)
 800c2a0:	183ff926 	beq	r3,zero,800c288 <__alt_data_end+0xfc00c288>
 800c2a4:	88c00015 	stw	r3,0(r17)
 800c2a8:	003ff706 	br	800c288 <__alt_data_end+0xfc00c288>

0800c2ac <_isatty_r>:
 800c2ac:	defffd04 	addi	sp,sp,-12
 800c2b0:	dc000015 	stw	r16,0(sp)
 800c2b4:	04020074 	movhi	r16,2049
 800c2b8:	dc400115 	stw	r17,4(sp)
 800c2bc:	841e7d04 	addi	r16,r16,31220
 800c2c0:	2023883a 	mov	r17,r4
 800c2c4:	2809883a 	mov	r4,r5
 800c2c8:	dfc00215 	stw	ra,8(sp)
 800c2cc:	80000015 	stw	zero,0(r16)
 800c2d0:	800fc7c0 	call	800fc7c <isatty>
 800c2d4:	00ffffc4 	movi	r3,-1
 800c2d8:	10c00526 	beq	r2,r3,800c2f0 <_isatty_r+0x44>
 800c2dc:	dfc00217 	ldw	ra,8(sp)
 800c2e0:	dc400117 	ldw	r17,4(sp)
 800c2e4:	dc000017 	ldw	r16,0(sp)
 800c2e8:	dec00304 	addi	sp,sp,12
 800c2ec:	f800283a 	ret
 800c2f0:	80c00017 	ldw	r3,0(r16)
 800c2f4:	183ff926 	beq	r3,zero,800c2dc <__alt_data_end+0xfc00c2dc>
 800c2f8:	88c00015 	stw	r3,0(r17)
 800c2fc:	003ff706 	br	800c2dc <__alt_data_end+0xfc00c2dc>

0800c300 <_lseek_r>:
 800c300:	defffd04 	addi	sp,sp,-12
 800c304:	2805883a 	mov	r2,r5
 800c308:	dc000015 	stw	r16,0(sp)
 800c30c:	04020074 	movhi	r16,2049
 800c310:	dc400115 	stw	r17,4(sp)
 800c314:	300b883a 	mov	r5,r6
 800c318:	841e7d04 	addi	r16,r16,31220
 800c31c:	2023883a 	mov	r17,r4
 800c320:	380d883a 	mov	r6,r7
 800c324:	1009883a 	mov	r4,r2
 800c328:	dfc00215 	stw	ra,8(sp)
 800c32c:	80000015 	stw	zero,0(r16)
 800c330:	800fe500 	call	800fe50 <lseek>
 800c334:	00ffffc4 	movi	r3,-1
 800c338:	10c00526 	beq	r2,r3,800c350 <_lseek_r+0x50>
 800c33c:	dfc00217 	ldw	ra,8(sp)
 800c340:	dc400117 	ldw	r17,4(sp)
 800c344:	dc000017 	ldw	r16,0(sp)
 800c348:	dec00304 	addi	sp,sp,12
 800c34c:	f800283a 	ret
 800c350:	80c00017 	ldw	r3,0(r16)
 800c354:	183ff926 	beq	r3,zero,800c33c <__alt_data_end+0xfc00c33c>
 800c358:	88c00015 	stw	r3,0(r17)
 800c35c:	003ff706 	br	800c33c <__alt_data_end+0xfc00c33c>

0800c360 <_read_r>:
 800c360:	defffd04 	addi	sp,sp,-12
 800c364:	2805883a 	mov	r2,r5
 800c368:	dc000015 	stw	r16,0(sp)
 800c36c:	04020074 	movhi	r16,2049
 800c370:	dc400115 	stw	r17,4(sp)
 800c374:	300b883a 	mov	r5,r6
 800c378:	841e7d04 	addi	r16,r16,31220
 800c37c:	2023883a 	mov	r17,r4
 800c380:	380d883a 	mov	r6,r7
 800c384:	1009883a 	mov	r4,r2
 800c388:	dfc00215 	stw	ra,8(sp)
 800c38c:	80000015 	stw	zero,0(r16)
 800c390:	80102940 	call	8010294 <read>
 800c394:	00ffffc4 	movi	r3,-1
 800c398:	10c00526 	beq	r2,r3,800c3b0 <_read_r+0x50>
 800c39c:	dfc00217 	ldw	ra,8(sp)
 800c3a0:	dc400117 	ldw	r17,4(sp)
 800c3a4:	dc000017 	ldw	r16,0(sp)
 800c3a8:	dec00304 	addi	sp,sp,12
 800c3ac:	f800283a 	ret
 800c3b0:	80c00017 	ldw	r3,0(r16)
 800c3b4:	183ff926 	beq	r3,zero,800c39c <__alt_data_end+0xfc00c39c>
 800c3b8:	88c00015 	stw	r3,0(r17)
 800c3bc:	003ff706 	br	800c39c <__alt_data_end+0xfc00c39c>

0800c3c0 <_wcrtomb_r>:
 800c3c0:	defff604 	addi	sp,sp,-40
 800c3c4:	00820074 	movhi	r2,2049
 800c3c8:	dc800815 	stw	r18,32(sp)
 800c3cc:	dc400715 	stw	r17,28(sp)
 800c3d0:	dc000615 	stw	r16,24(sp)
 800c3d4:	10979904 	addi	r2,r2,24164
 800c3d8:	dfc00915 	stw	ra,36(sp)
 800c3dc:	2021883a 	mov	r16,r4
 800c3e0:	3823883a 	mov	r17,r7
 800c3e4:	14800017 	ldw	r18,0(r2)
 800c3e8:	28001426 	beq	r5,zero,800c43c <_wcrtomb_r+0x7c>
 800c3ec:	d9400415 	stw	r5,16(sp)
 800c3f0:	d9800515 	stw	r6,20(sp)
 800c3f4:	8007d700 	call	8007d70 <__locale_charset>
 800c3f8:	d9800517 	ldw	r6,20(sp)
 800c3fc:	d9400417 	ldw	r5,16(sp)
 800c400:	100f883a 	mov	r7,r2
 800c404:	dc400015 	stw	r17,0(sp)
 800c408:	8009883a 	mov	r4,r16
 800c40c:	903ee83a 	callr	r18
 800c410:	00ffffc4 	movi	r3,-1
 800c414:	10c0031e 	bne	r2,r3,800c424 <_wcrtomb_r+0x64>
 800c418:	88000015 	stw	zero,0(r17)
 800c41c:	00c02284 	movi	r3,138
 800c420:	80c00015 	stw	r3,0(r16)
 800c424:	dfc00917 	ldw	ra,36(sp)
 800c428:	dc800817 	ldw	r18,32(sp)
 800c42c:	dc400717 	ldw	r17,28(sp)
 800c430:	dc000617 	ldw	r16,24(sp)
 800c434:	dec00a04 	addi	sp,sp,40
 800c438:	f800283a 	ret
 800c43c:	8007d700 	call	8007d70 <__locale_charset>
 800c440:	100f883a 	mov	r7,r2
 800c444:	dc400015 	stw	r17,0(sp)
 800c448:	000d883a 	mov	r6,zero
 800c44c:	d9400104 	addi	r5,sp,4
 800c450:	8009883a 	mov	r4,r16
 800c454:	903ee83a 	callr	r18
 800c458:	003fed06 	br	800c410 <__alt_data_end+0xfc00c410>

0800c45c <wcrtomb>:
 800c45c:	defff604 	addi	sp,sp,-40
 800c460:	00820074 	movhi	r2,2049
 800c464:	dc800615 	stw	r18,24(sp)
 800c468:	dc400515 	stw	r17,20(sp)
 800c46c:	10979504 	addi	r2,r2,24148
 800c470:	dfc00915 	stw	ra,36(sp)
 800c474:	dd000815 	stw	r20,32(sp)
 800c478:	dcc00715 	stw	r19,28(sp)
 800c47c:	dc000415 	stw	r16,16(sp)
 800c480:	3025883a 	mov	r18,r6
 800c484:	14400017 	ldw	r17,0(r2)
 800c488:	20001926 	beq	r4,zero,800c4f0 <wcrtomb+0x94>
 800c48c:	00820074 	movhi	r2,2049
 800c490:	10979904 	addi	r2,r2,24164
 800c494:	15000017 	ldw	r20,0(r2)
 800c498:	2021883a 	mov	r16,r4
 800c49c:	2827883a 	mov	r19,r5
 800c4a0:	8007d700 	call	8007d70 <__locale_charset>
 800c4a4:	100f883a 	mov	r7,r2
 800c4a8:	dc800015 	stw	r18,0(sp)
 800c4ac:	980d883a 	mov	r6,r19
 800c4b0:	800b883a 	mov	r5,r16
 800c4b4:	8809883a 	mov	r4,r17
 800c4b8:	a03ee83a 	callr	r20
 800c4bc:	00ffffc4 	movi	r3,-1
 800c4c0:	10c0031e 	bne	r2,r3,800c4d0 <wcrtomb+0x74>
 800c4c4:	90000015 	stw	zero,0(r18)
 800c4c8:	00c02284 	movi	r3,138
 800c4cc:	88c00015 	stw	r3,0(r17)
 800c4d0:	dfc00917 	ldw	ra,36(sp)
 800c4d4:	dd000817 	ldw	r20,32(sp)
 800c4d8:	dcc00717 	ldw	r19,28(sp)
 800c4dc:	dc800617 	ldw	r18,24(sp)
 800c4e0:	dc400517 	ldw	r17,20(sp)
 800c4e4:	dc000417 	ldw	r16,16(sp)
 800c4e8:	dec00a04 	addi	sp,sp,40
 800c4ec:	f800283a 	ret
 800c4f0:	00820074 	movhi	r2,2049
 800c4f4:	10979904 	addi	r2,r2,24164
 800c4f8:	14000017 	ldw	r16,0(r2)
 800c4fc:	8007d700 	call	8007d70 <__locale_charset>
 800c500:	100f883a 	mov	r7,r2
 800c504:	dc800015 	stw	r18,0(sp)
 800c508:	000d883a 	mov	r6,zero
 800c50c:	d9400104 	addi	r5,sp,4
 800c510:	8809883a 	mov	r4,r17
 800c514:	803ee83a 	callr	r16
 800c518:	003fe806 	br	800c4bc <__alt_data_end+0xfc00c4bc>

0800c51c <__ascii_wctomb>:
 800c51c:	28000526 	beq	r5,zero,800c534 <__ascii_wctomb+0x18>
 800c520:	00803fc4 	movi	r2,255
 800c524:	11800536 	bltu	r2,r6,800c53c <__ascii_wctomb+0x20>
 800c528:	29800005 	stb	r6,0(r5)
 800c52c:	00800044 	movi	r2,1
 800c530:	f800283a 	ret
 800c534:	0005883a 	mov	r2,zero
 800c538:	f800283a 	ret
 800c53c:	00802284 	movi	r2,138
 800c540:	20800015 	stw	r2,0(r4)
 800c544:	00bfffc4 	movi	r2,-1
 800c548:	f800283a 	ret

0800c54c <_wctomb_r>:
 800c54c:	00820074 	movhi	r2,2049
 800c550:	defff904 	addi	sp,sp,-28
 800c554:	10979904 	addi	r2,r2,24164
 800c558:	dfc00615 	stw	ra,24(sp)
 800c55c:	dc400515 	stw	r17,20(sp)
 800c560:	dc000415 	stw	r16,16(sp)
 800c564:	3823883a 	mov	r17,r7
 800c568:	14000017 	ldw	r16,0(r2)
 800c56c:	d9000115 	stw	r4,4(sp)
 800c570:	d9400215 	stw	r5,8(sp)
 800c574:	d9800315 	stw	r6,12(sp)
 800c578:	8007d700 	call	8007d70 <__locale_charset>
 800c57c:	d9800317 	ldw	r6,12(sp)
 800c580:	d9400217 	ldw	r5,8(sp)
 800c584:	d9000117 	ldw	r4,4(sp)
 800c588:	100f883a 	mov	r7,r2
 800c58c:	dc400015 	stw	r17,0(sp)
 800c590:	803ee83a 	callr	r16
 800c594:	dfc00617 	ldw	ra,24(sp)
 800c598:	dc400517 	ldw	r17,20(sp)
 800c59c:	dc000417 	ldw	r16,16(sp)
 800c5a0:	dec00704 	addi	sp,sp,28
 800c5a4:	f800283a 	ret

0800c5a8 <__udivdi3>:
 800c5a8:	defff404 	addi	sp,sp,-48
 800c5ac:	dcc00515 	stw	r19,20(sp)
 800c5b0:	dc000215 	stw	r16,8(sp)
 800c5b4:	dfc00b15 	stw	ra,44(sp)
 800c5b8:	df000a15 	stw	fp,40(sp)
 800c5bc:	ddc00915 	stw	r23,36(sp)
 800c5c0:	dd800815 	stw	r22,32(sp)
 800c5c4:	dd400715 	stw	r21,28(sp)
 800c5c8:	dd000615 	stw	r20,24(sp)
 800c5cc:	dc800415 	stw	r18,16(sp)
 800c5d0:	dc400315 	stw	r17,12(sp)
 800c5d4:	2027883a 	mov	r19,r4
 800c5d8:	2821883a 	mov	r16,r5
 800c5dc:	3800461e 	bne	r7,zero,800c6f8 <__udivdi3+0x150>
 800c5e0:	3023883a 	mov	r17,r6
 800c5e4:	2025883a 	mov	r18,r4
 800c5e8:	2980572e 	bgeu	r5,r6,800c748 <__udivdi3+0x1a0>
 800c5ec:	00bfffd4 	movui	r2,65535
 800c5f0:	282d883a 	mov	r22,r5
 800c5f4:	1180b236 	bltu	r2,r6,800c8c0 <__udivdi3+0x318>
 800c5f8:	00803fc4 	movi	r2,255
 800c5fc:	1185803a 	cmpltu	r2,r2,r6
 800c600:	100490fa 	slli	r2,r2,3
 800c604:	3086d83a 	srl	r3,r6,r2
 800c608:	01020074 	movhi	r4,2049
 800c60c:	21108a04 	addi	r4,r4,16936
 800c610:	20c7883a 	add	r3,r4,r3
 800c614:	18c00003 	ldbu	r3,0(r3)
 800c618:	1885883a 	add	r2,r3,r2
 800c61c:	00c00804 	movi	r3,32
 800c620:	1887c83a 	sub	r3,r3,r2
 800c624:	18000526 	beq	r3,zero,800c63c <__udivdi3+0x94>
 800c628:	80e0983a 	sll	r16,r16,r3
 800c62c:	9884d83a 	srl	r2,r19,r2
 800c630:	30e2983a 	sll	r17,r6,r3
 800c634:	98e4983a 	sll	r18,r19,r3
 800c638:	142cb03a 	or	r22,r2,r16
 800c63c:	882ad43a 	srli	r21,r17,16
 800c640:	b009883a 	mov	r4,r22
 800c644:	8d3fffcc 	andi	r20,r17,65535
 800c648:	a80b883a 	mov	r5,r21
 800c64c:	8002aa00 	call	8002aa0 <__umodsi3>
 800c650:	b009883a 	mov	r4,r22
 800c654:	a80b883a 	mov	r5,r21
 800c658:	1027883a 	mov	r19,r2
 800c65c:	8002a3c0 	call	8002a3c <__udivsi3>
 800c660:	100b883a 	mov	r5,r2
 800c664:	a009883a 	mov	r4,r20
 800c668:	102d883a 	mov	r22,r2
 800c66c:	8002af80 	call	8002af8 <__mulsi3>
 800c670:	9826943a 	slli	r19,r19,16
 800c674:	9006d43a 	srli	r3,r18,16
 800c678:	1cc6b03a 	or	r3,r3,r19
 800c67c:	1880052e 	bgeu	r3,r2,800c694 <__udivdi3+0xec>
 800c680:	1c47883a 	add	r3,r3,r17
 800c684:	b13fffc4 	addi	r4,r22,-1
 800c688:	1c400136 	bltu	r3,r17,800c690 <__udivdi3+0xe8>
 800c68c:	18814236 	bltu	r3,r2,800cb98 <__udivdi3+0x5f0>
 800c690:	202d883a 	mov	r22,r4
 800c694:	18a1c83a 	sub	r16,r3,r2
 800c698:	8009883a 	mov	r4,r16
 800c69c:	a80b883a 	mov	r5,r21
 800c6a0:	8002aa00 	call	8002aa0 <__umodsi3>
 800c6a4:	1027883a 	mov	r19,r2
 800c6a8:	8009883a 	mov	r4,r16
 800c6ac:	a80b883a 	mov	r5,r21
 800c6b0:	9826943a 	slli	r19,r19,16
 800c6b4:	8002a3c0 	call	8002a3c <__udivsi3>
 800c6b8:	100b883a 	mov	r5,r2
 800c6bc:	a009883a 	mov	r4,r20
 800c6c0:	94bfffcc 	andi	r18,r18,65535
 800c6c4:	1021883a 	mov	r16,r2
 800c6c8:	94e4b03a 	or	r18,r18,r19
 800c6cc:	8002af80 	call	8002af8 <__mulsi3>
 800c6d0:	9080052e 	bgeu	r18,r2,800c6e8 <__udivdi3+0x140>
 800c6d4:	8ca5883a 	add	r18,r17,r18
 800c6d8:	80ffffc4 	addi	r3,r16,-1
 800c6dc:	94410c36 	bltu	r18,r17,800cb10 <__udivdi3+0x568>
 800c6e0:	90810b2e 	bgeu	r18,r2,800cb10 <__udivdi3+0x568>
 800c6e4:	843fff84 	addi	r16,r16,-2
 800c6e8:	b004943a 	slli	r2,r22,16
 800c6ec:	0007883a 	mov	r3,zero
 800c6f0:	1404b03a 	or	r2,r2,r16
 800c6f4:	00005e06 	br	800c870 <__udivdi3+0x2c8>
 800c6f8:	29c05b36 	bltu	r5,r7,800c868 <__udivdi3+0x2c0>
 800c6fc:	00bfffd4 	movui	r2,65535
 800c700:	11c0672e 	bgeu	r2,r7,800c8a0 <__udivdi3+0x2f8>
 800c704:	00804034 	movhi	r2,256
 800c708:	10bfffc4 	addi	r2,r2,-1
 800c70c:	11c10a36 	bltu	r2,r7,800cb38 <__udivdi3+0x590>
 800c710:	00800404 	movi	r2,16
 800c714:	3886d83a 	srl	r3,r7,r2
 800c718:	01020074 	movhi	r4,2049
 800c71c:	21108a04 	addi	r4,r4,16936
 800c720:	20c7883a 	add	r3,r4,r3
 800c724:	18c00003 	ldbu	r3,0(r3)
 800c728:	05c00804 	movi	r23,32
 800c72c:	1885883a 	add	r2,r3,r2
 800c730:	b8afc83a 	sub	r23,r23,r2
 800c734:	b800671e 	bne	r23,zero,800c8d4 <__udivdi3+0x32c>
 800c738:	3c010536 	bltu	r7,r16,800cb50 <__udivdi3+0x5a8>
 800c73c:	9985403a 	cmpgeu	r2,r19,r6
 800c740:	0007883a 	mov	r3,zero
 800c744:	00004a06 	br	800c870 <__udivdi3+0x2c8>
 800c748:	3000041e 	bne	r6,zero,800c75c <__udivdi3+0x1b4>
 800c74c:	000b883a 	mov	r5,zero
 800c750:	01000044 	movi	r4,1
 800c754:	8002a3c0 	call	8002a3c <__udivsi3>
 800c758:	1023883a 	mov	r17,r2
 800c75c:	00bfffd4 	movui	r2,65535
 800c760:	1440532e 	bgeu	r2,r17,800c8b0 <__udivdi3+0x308>
 800c764:	00804034 	movhi	r2,256
 800c768:	10bfffc4 	addi	r2,r2,-1
 800c76c:	1440f436 	bltu	r2,r17,800cb40 <__udivdi3+0x598>
 800c770:	00800404 	movi	r2,16
 800c774:	8886d83a 	srl	r3,r17,r2
 800c778:	01020074 	movhi	r4,2049
 800c77c:	21108a04 	addi	r4,r4,16936
 800c780:	20c7883a 	add	r3,r4,r3
 800c784:	18c00003 	ldbu	r3,0(r3)
 800c788:	1885883a 	add	r2,r3,r2
 800c78c:	00c00804 	movi	r3,32
 800c790:	1887c83a 	sub	r3,r3,r2
 800c794:	1800a51e 	bne	r3,zero,800ca2c <__udivdi3+0x484>
 800c798:	882ad43a 	srli	r21,r17,16
 800c79c:	8461c83a 	sub	r16,r16,r17
 800c7a0:	8d3fffcc 	andi	r20,r17,65535
 800c7a4:	00c00044 	movi	r3,1
 800c7a8:	a80b883a 	mov	r5,r21
 800c7ac:	8009883a 	mov	r4,r16
 800c7b0:	d8c00115 	stw	r3,4(sp)
 800c7b4:	8002aa00 	call	8002aa0 <__umodsi3>
 800c7b8:	a80b883a 	mov	r5,r21
 800c7bc:	8009883a 	mov	r4,r16
 800c7c0:	1027883a 	mov	r19,r2
 800c7c4:	8002a3c0 	call	8002a3c <__udivsi3>
 800c7c8:	a00b883a 	mov	r5,r20
 800c7cc:	1009883a 	mov	r4,r2
 800c7d0:	102d883a 	mov	r22,r2
 800c7d4:	8002af80 	call	8002af8 <__mulsi3>
 800c7d8:	9826943a 	slli	r19,r19,16
 800c7dc:	900ed43a 	srli	r7,r18,16
 800c7e0:	d8c00117 	ldw	r3,4(sp)
 800c7e4:	3cceb03a 	or	r7,r7,r19
 800c7e8:	3880052e 	bgeu	r7,r2,800c800 <__udivdi3+0x258>
 800c7ec:	3c4f883a 	add	r7,r7,r17
 800c7f0:	b13fffc4 	addi	r4,r22,-1
 800c7f4:	3c400136 	bltu	r7,r17,800c7fc <__udivdi3+0x254>
 800c7f8:	3880e436 	bltu	r7,r2,800cb8c <__udivdi3+0x5e4>
 800c7fc:	202d883a 	mov	r22,r4
 800c800:	38a1c83a 	sub	r16,r7,r2
 800c804:	8009883a 	mov	r4,r16
 800c808:	a80b883a 	mov	r5,r21
 800c80c:	d8c00115 	stw	r3,4(sp)
 800c810:	8002aa00 	call	8002aa0 <__umodsi3>
 800c814:	1027883a 	mov	r19,r2
 800c818:	8009883a 	mov	r4,r16
 800c81c:	a80b883a 	mov	r5,r21
 800c820:	9826943a 	slli	r19,r19,16
 800c824:	8002a3c0 	call	8002a3c <__udivsi3>
 800c828:	a00b883a 	mov	r5,r20
 800c82c:	1009883a 	mov	r4,r2
 800c830:	94bfffcc 	andi	r18,r18,65535
 800c834:	1021883a 	mov	r16,r2
 800c838:	94e4b03a 	or	r18,r18,r19
 800c83c:	8002af80 	call	8002af8 <__mulsi3>
 800c840:	d8c00117 	ldw	r3,4(sp)
 800c844:	9080052e 	bgeu	r18,r2,800c85c <__udivdi3+0x2b4>
 800c848:	8ca5883a 	add	r18,r17,r18
 800c84c:	813fffc4 	addi	r4,r16,-1
 800c850:	9440ad36 	bltu	r18,r17,800cb08 <__udivdi3+0x560>
 800c854:	9080ac2e 	bgeu	r18,r2,800cb08 <__udivdi3+0x560>
 800c858:	843fff84 	addi	r16,r16,-2
 800c85c:	b004943a 	slli	r2,r22,16
 800c860:	1404b03a 	or	r2,r2,r16
 800c864:	00000206 	br	800c870 <__udivdi3+0x2c8>
 800c868:	0007883a 	mov	r3,zero
 800c86c:	0005883a 	mov	r2,zero
 800c870:	dfc00b17 	ldw	ra,44(sp)
 800c874:	df000a17 	ldw	fp,40(sp)
 800c878:	ddc00917 	ldw	r23,36(sp)
 800c87c:	dd800817 	ldw	r22,32(sp)
 800c880:	dd400717 	ldw	r21,28(sp)
 800c884:	dd000617 	ldw	r20,24(sp)
 800c888:	dcc00517 	ldw	r19,20(sp)
 800c88c:	dc800417 	ldw	r18,16(sp)
 800c890:	dc400317 	ldw	r17,12(sp)
 800c894:	dc000217 	ldw	r16,8(sp)
 800c898:	dec00c04 	addi	sp,sp,48
 800c89c:	f800283a 	ret
 800c8a0:	00803fc4 	movi	r2,255
 800c8a4:	11c5803a 	cmpltu	r2,r2,r7
 800c8a8:	100490fa 	slli	r2,r2,3
 800c8ac:	003f9906 	br	800c714 <__alt_data_end+0xfc00c714>
 800c8b0:	00803fc4 	movi	r2,255
 800c8b4:	1445803a 	cmpltu	r2,r2,r17
 800c8b8:	100490fa 	slli	r2,r2,3
 800c8bc:	003fad06 	br	800c774 <__alt_data_end+0xfc00c774>
 800c8c0:	00804034 	movhi	r2,256
 800c8c4:	10bfffc4 	addi	r2,r2,-1
 800c8c8:	11809f36 	bltu	r2,r6,800cb48 <__udivdi3+0x5a0>
 800c8cc:	00800404 	movi	r2,16
 800c8d0:	003f4c06 	br	800c604 <__alt_data_end+0xfc00c604>
 800c8d4:	3dce983a 	sll	r7,r7,r23
 800c8d8:	30b8d83a 	srl	fp,r6,r2
 800c8dc:	80a2d83a 	srl	r17,r16,r2
 800c8e0:	35cc983a 	sll	r6,r6,r23
 800c8e4:	3f38b03a 	or	fp,r7,fp
 800c8e8:	e024d43a 	srli	r18,fp,16
 800c8ec:	9884d83a 	srl	r2,r19,r2
 800c8f0:	85e0983a 	sll	r16,r16,r23
 800c8f4:	8809883a 	mov	r4,r17
 800c8f8:	900b883a 	mov	r5,r18
 800c8fc:	d9800015 	stw	r6,0(sp)
 800c900:	1420b03a 	or	r16,r2,r16
 800c904:	8002aa00 	call	8002aa0 <__umodsi3>
 800c908:	900b883a 	mov	r5,r18
 800c90c:	8809883a 	mov	r4,r17
 800c910:	1029883a 	mov	r20,r2
 800c914:	e5bfffcc 	andi	r22,fp,65535
 800c918:	8002a3c0 	call	8002a3c <__udivsi3>
 800c91c:	100b883a 	mov	r5,r2
 800c920:	b009883a 	mov	r4,r22
 800c924:	102b883a 	mov	r21,r2
 800c928:	8002af80 	call	8002af8 <__mulsi3>
 800c92c:	a028943a 	slli	r20,r20,16
 800c930:	8006d43a 	srli	r3,r16,16
 800c934:	1d06b03a 	or	r3,r3,r20
 800c938:	1880042e 	bgeu	r3,r2,800c94c <__udivdi3+0x3a4>
 800c93c:	1f07883a 	add	r3,r3,fp
 800c940:	a93fffc4 	addi	r4,r21,-1
 800c944:	1f00892e 	bgeu	r3,fp,800cb6c <__udivdi3+0x5c4>
 800c948:	202b883a 	mov	r21,r4
 800c94c:	18a3c83a 	sub	r17,r3,r2
 800c950:	8809883a 	mov	r4,r17
 800c954:	900b883a 	mov	r5,r18
 800c958:	8002aa00 	call	8002aa0 <__umodsi3>
 800c95c:	1029883a 	mov	r20,r2
 800c960:	8809883a 	mov	r4,r17
 800c964:	900b883a 	mov	r5,r18
 800c968:	a028943a 	slli	r20,r20,16
 800c96c:	8002a3c0 	call	8002a3c <__udivsi3>
 800c970:	100b883a 	mov	r5,r2
 800c974:	b009883a 	mov	r4,r22
 800c978:	843fffcc 	andi	r16,r16,65535
 800c97c:	1023883a 	mov	r17,r2
 800c980:	8520b03a 	or	r16,r16,r20
 800c984:	8002af80 	call	8002af8 <__mulsi3>
 800c988:	8080042e 	bgeu	r16,r2,800c99c <__udivdi3+0x3f4>
 800c98c:	8721883a 	add	r16,r16,fp
 800c990:	88ffffc4 	addi	r3,r17,-1
 800c994:	8700712e 	bgeu	r16,fp,800cb5c <__udivdi3+0x5b4>
 800c998:	1823883a 	mov	r17,r3
 800c99c:	a80e943a 	slli	r7,r21,16
 800c9a0:	d8c00017 	ldw	r3,0(sp)
 800c9a4:	80a1c83a 	sub	r16,r16,r2
 800c9a8:	3c64b03a 	or	r18,r7,r17
 800c9ac:	1d3fffcc 	andi	r20,r3,65535
 800c9b0:	9022d43a 	srli	r17,r18,16
 800c9b4:	95bfffcc 	andi	r22,r18,65535
 800c9b8:	a00b883a 	mov	r5,r20
 800c9bc:	b009883a 	mov	r4,r22
 800c9c0:	182ad43a 	srli	r21,r3,16
 800c9c4:	8002af80 	call	8002af8 <__mulsi3>
 800c9c8:	a00b883a 	mov	r5,r20
 800c9cc:	8809883a 	mov	r4,r17
 800c9d0:	1039883a 	mov	fp,r2
 800c9d4:	8002af80 	call	8002af8 <__mulsi3>
 800c9d8:	8809883a 	mov	r4,r17
 800c9dc:	a80b883a 	mov	r5,r21
 800c9e0:	1029883a 	mov	r20,r2
 800c9e4:	8002af80 	call	8002af8 <__mulsi3>
 800c9e8:	a80b883a 	mov	r5,r21
 800c9ec:	b009883a 	mov	r4,r22
 800c9f0:	1023883a 	mov	r17,r2
 800c9f4:	8002af80 	call	8002af8 <__mulsi3>
 800c9f8:	e006d43a 	srli	r3,fp,16
 800c9fc:	1505883a 	add	r2,r2,r20
 800ca00:	1887883a 	add	r3,r3,r2
 800ca04:	1d00022e 	bgeu	r3,r20,800ca10 <__udivdi3+0x468>
 800ca08:	00800074 	movhi	r2,1
 800ca0c:	88a3883a 	add	r17,r17,r2
 800ca10:	1804d43a 	srli	r2,r3,16
 800ca14:	1463883a 	add	r17,r2,r17
 800ca18:	84404436 	bltu	r16,r17,800cb2c <__udivdi3+0x584>
 800ca1c:	84403e26 	beq	r16,r17,800cb18 <__udivdi3+0x570>
 800ca20:	9005883a 	mov	r2,r18
 800ca24:	0007883a 	mov	r3,zero
 800ca28:	003f9106 	br	800c870 <__alt_data_end+0xfc00c870>
 800ca2c:	88e2983a 	sll	r17,r17,r3
 800ca30:	80aed83a 	srl	r23,r16,r2
 800ca34:	80e0983a 	sll	r16,r16,r3
 800ca38:	882ad43a 	srli	r21,r17,16
 800ca3c:	9884d83a 	srl	r2,r19,r2
 800ca40:	b809883a 	mov	r4,r23
 800ca44:	a80b883a 	mov	r5,r21
 800ca48:	98e4983a 	sll	r18,r19,r3
 800ca4c:	142cb03a 	or	r22,r2,r16
 800ca50:	8002aa00 	call	8002aa0 <__umodsi3>
 800ca54:	b809883a 	mov	r4,r23
 800ca58:	a80b883a 	mov	r5,r21
 800ca5c:	1027883a 	mov	r19,r2
 800ca60:	8d3fffcc 	andi	r20,r17,65535
 800ca64:	8002a3c0 	call	8002a3c <__udivsi3>
 800ca68:	a009883a 	mov	r4,r20
 800ca6c:	100b883a 	mov	r5,r2
 800ca70:	102f883a 	mov	r23,r2
 800ca74:	8002af80 	call	8002af8 <__mulsi3>
 800ca78:	9826943a 	slli	r19,r19,16
 800ca7c:	b008d43a 	srli	r4,r22,16
 800ca80:	24c8b03a 	or	r4,r4,r19
 800ca84:	2080062e 	bgeu	r4,r2,800caa0 <__udivdi3+0x4f8>
 800ca88:	2449883a 	add	r4,r4,r17
 800ca8c:	b8ffffc4 	addi	r3,r23,-1
 800ca90:	24403c36 	bltu	r4,r17,800cb84 <__udivdi3+0x5dc>
 800ca94:	20803b2e 	bgeu	r4,r2,800cb84 <__udivdi3+0x5dc>
 800ca98:	bdffff84 	addi	r23,r23,-2
 800ca9c:	2449883a 	add	r4,r4,r17
 800caa0:	20a1c83a 	sub	r16,r4,r2
 800caa4:	a80b883a 	mov	r5,r21
 800caa8:	8009883a 	mov	r4,r16
 800caac:	8002aa00 	call	8002aa0 <__umodsi3>
 800cab0:	a80b883a 	mov	r5,r21
 800cab4:	8009883a 	mov	r4,r16
 800cab8:	1027883a 	mov	r19,r2
 800cabc:	8002a3c0 	call	8002a3c <__udivsi3>
 800cac0:	a009883a 	mov	r4,r20
 800cac4:	100b883a 	mov	r5,r2
 800cac8:	9826943a 	slli	r19,r19,16
 800cacc:	1039883a 	mov	fp,r2
 800cad0:	8002af80 	call	8002af8 <__mulsi3>
 800cad4:	b13fffcc 	andi	r4,r22,65535
 800cad8:	24c8b03a 	or	r4,r4,r19
 800cadc:	2080062e 	bgeu	r4,r2,800caf8 <__udivdi3+0x550>
 800cae0:	2449883a 	add	r4,r4,r17
 800cae4:	e0ffffc4 	addi	r3,fp,-1
 800cae8:	24402436 	bltu	r4,r17,800cb7c <__udivdi3+0x5d4>
 800caec:	2080232e 	bgeu	r4,r2,800cb7c <__udivdi3+0x5d4>
 800caf0:	e73fff84 	addi	fp,fp,-2
 800caf4:	2449883a 	add	r4,r4,r17
 800caf8:	b82e943a 	slli	r23,r23,16
 800cafc:	20a1c83a 	sub	r16,r4,r2
 800cb00:	bf06b03a 	or	r3,r23,fp
 800cb04:	003f2806 	br	800c7a8 <__alt_data_end+0xfc00c7a8>
 800cb08:	2021883a 	mov	r16,r4
 800cb0c:	003f5306 	br	800c85c <__alt_data_end+0xfc00c85c>
 800cb10:	1821883a 	mov	r16,r3
 800cb14:	003ef406 	br	800c6e8 <__alt_data_end+0xfc00c6e8>
 800cb18:	1806943a 	slli	r3,r3,16
 800cb1c:	9de6983a 	sll	r19,r19,r23
 800cb20:	e73fffcc 	andi	fp,fp,65535
 800cb24:	1f07883a 	add	r3,r3,fp
 800cb28:	98ffbd2e 	bgeu	r19,r3,800ca20 <__alt_data_end+0xfc00ca20>
 800cb2c:	90bfffc4 	addi	r2,r18,-1
 800cb30:	0007883a 	mov	r3,zero
 800cb34:	003f4e06 	br	800c870 <__alt_data_end+0xfc00c870>
 800cb38:	00800604 	movi	r2,24
 800cb3c:	003ef506 	br	800c714 <__alt_data_end+0xfc00c714>
 800cb40:	00800604 	movi	r2,24
 800cb44:	003f0b06 	br	800c774 <__alt_data_end+0xfc00c774>
 800cb48:	00800604 	movi	r2,24
 800cb4c:	003ead06 	br	800c604 <__alt_data_end+0xfc00c604>
 800cb50:	0007883a 	mov	r3,zero
 800cb54:	00800044 	movi	r2,1
 800cb58:	003f4506 	br	800c870 <__alt_data_end+0xfc00c870>
 800cb5c:	80bf8e2e 	bgeu	r16,r2,800c998 <__alt_data_end+0xfc00c998>
 800cb60:	8c7fff84 	addi	r17,r17,-2
 800cb64:	8721883a 	add	r16,r16,fp
 800cb68:	003f8c06 	br	800c99c <__alt_data_end+0xfc00c99c>
 800cb6c:	18bf762e 	bgeu	r3,r2,800c948 <__alt_data_end+0xfc00c948>
 800cb70:	ad7fff84 	addi	r21,r21,-2
 800cb74:	1f07883a 	add	r3,r3,fp
 800cb78:	003f7406 	br	800c94c <__alt_data_end+0xfc00c94c>
 800cb7c:	1839883a 	mov	fp,r3
 800cb80:	003fdd06 	br	800caf8 <__alt_data_end+0xfc00caf8>
 800cb84:	182f883a 	mov	r23,r3
 800cb88:	003fc506 	br	800caa0 <__alt_data_end+0xfc00caa0>
 800cb8c:	b5bfff84 	addi	r22,r22,-2
 800cb90:	3c4f883a 	add	r7,r7,r17
 800cb94:	003f1a06 	br	800c800 <__alt_data_end+0xfc00c800>
 800cb98:	b5bfff84 	addi	r22,r22,-2
 800cb9c:	1c47883a 	add	r3,r3,r17
 800cba0:	003ebc06 	br	800c694 <__alt_data_end+0xfc00c694>

0800cba4 <__umoddi3>:
 800cba4:	defff304 	addi	sp,sp,-52
 800cba8:	df000b15 	stw	fp,44(sp)
 800cbac:	dc400415 	stw	r17,16(sp)
 800cbb0:	dc000315 	stw	r16,12(sp)
 800cbb4:	dfc00c15 	stw	ra,48(sp)
 800cbb8:	ddc00a15 	stw	r23,40(sp)
 800cbbc:	dd800915 	stw	r22,36(sp)
 800cbc0:	dd400815 	stw	r21,32(sp)
 800cbc4:	dd000715 	stw	r20,28(sp)
 800cbc8:	dcc00615 	stw	r19,24(sp)
 800cbcc:	dc800515 	stw	r18,20(sp)
 800cbd0:	2021883a 	mov	r16,r4
 800cbd4:	2823883a 	mov	r17,r5
 800cbd8:	2839883a 	mov	fp,r5
 800cbdc:	3800401e 	bne	r7,zero,800cce0 <__umoddi3+0x13c>
 800cbe0:	3027883a 	mov	r19,r6
 800cbe4:	2029883a 	mov	r20,r4
 800cbe8:	2980552e 	bgeu	r5,r6,800cd40 <__umoddi3+0x19c>
 800cbec:	00bfffd4 	movui	r2,65535
 800cbf0:	1180a236 	bltu	r2,r6,800ce7c <__umoddi3+0x2d8>
 800cbf4:	01003fc4 	movi	r4,255
 800cbf8:	2189803a 	cmpltu	r4,r4,r6
 800cbfc:	200890fa 	slli	r4,r4,3
 800cc00:	3104d83a 	srl	r2,r6,r4
 800cc04:	00c20074 	movhi	r3,2049
 800cc08:	18d08a04 	addi	r3,r3,16936
 800cc0c:	1885883a 	add	r2,r3,r2
 800cc10:	10c00003 	ldbu	r3,0(r2)
 800cc14:	00800804 	movi	r2,32
 800cc18:	1909883a 	add	r4,r3,r4
 800cc1c:	1125c83a 	sub	r18,r2,r4
 800cc20:	90000526 	beq	r18,zero,800cc38 <__umoddi3+0x94>
 800cc24:	8ca2983a 	sll	r17,r17,r18
 800cc28:	8108d83a 	srl	r4,r16,r4
 800cc2c:	34a6983a 	sll	r19,r6,r18
 800cc30:	84a8983a 	sll	r20,r16,r18
 800cc34:	2478b03a 	or	fp,r4,r17
 800cc38:	982cd43a 	srli	r22,r19,16
 800cc3c:	e009883a 	mov	r4,fp
 800cc40:	9dffffcc 	andi	r23,r19,65535
 800cc44:	b00b883a 	mov	r5,r22
 800cc48:	8002aa00 	call	8002aa0 <__umodsi3>
 800cc4c:	b00b883a 	mov	r5,r22
 800cc50:	e009883a 	mov	r4,fp
 800cc54:	102b883a 	mov	r21,r2
 800cc58:	8002a3c0 	call	8002a3c <__udivsi3>
 800cc5c:	100b883a 	mov	r5,r2
 800cc60:	b809883a 	mov	r4,r23
 800cc64:	8002af80 	call	8002af8 <__mulsi3>
 800cc68:	a82a943a 	slli	r21,r21,16
 800cc6c:	a006d43a 	srli	r3,r20,16
 800cc70:	1d46b03a 	or	r3,r3,r21
 800cc74:	1880032e 	bgeu	r3,r2,800cc84 <__umoddi3+0xe0>
 800cc78:	1cc7883a 	add	r3,r3,r19
 800cc7c:	1cc00136 	bltu	r3,r19,800cc84 <__umoddi3+0xe0>
 800cc80:	18813136 	bltu	r3,r2,800d148 <__umoddi3+0x5a4>
 800cc84:	18a1c83a 	sub	r16,r3,r2
 800cc88:	b00b883a 	mov	r5,r22
 800cc8c:	8009883a 	mov	r4,r16
 800cc90:	8002aa00 	call	8002aa0 <__umodsi3>
 800cc94:	b00b883a 	mov	r5,r22
 800cc98:	8009883a 	mov	r4,r16
 800cc9c:	1023883a 	mov	r17,r2
 800cca0:	8002a3c0 	call	8002a3c <__udivsi3>
 800cca4:	100b883a 	mov	r5,r2
 800cca8:	b809883a 	mov	r4,r23
 800ccac:	8822943a 	slli	r17,r17,16
 800ccb0:	8002af80 	call	8002af8 <__mulsi3>
 800ccb4:	a0ffffcc 	andi	r3,r20,65535
 800ccb8:	1c46b03a 	or	r3,r3,r17
 800ccbc:	1880042e 	bgeu	r3,r2,800ccd0 <__umoddi3+0x12c>
 800ccc0:	1cc7883a 	add	r3,r3,r19
 800ccc4:	1cc00236 	bltu	r3,r19,800ccd0 <__umoddi3+0x12c>
 800ccc8:	1880012e 	bgeu	r3,r2,800ccd0 <__umoddi3+0x12c>
 800cccc:	1cc7883a 	add	r3,r3,r19
 800ccd0:	1885c83a 	sub	r2,r3,r2
 800ccd4:	1484d83a 	srl	r2,r2,r18
 800ccd8:	0007883a 	mov	r3,zero
 800ccdc:	00005306 	br	800ce2c <__umoddi3+0x288>
 800cce0:	29c05036 	bltu	r5,r7,800ce24 <__umoddi3+0x280>
 800cce4:	00bfffd4 	movui	r2,65535
 800cce8:	11c05c2e 	bgeu	r2,r7,800ce5c <__umoddi3+0x2b8>
 800ccec:	00804034 	movhi	r2,256
 800ccf0:	10bfffc4 	addi	r2,r2,-1
 800ccf4:	11c10636 	bltu	r2,r7,800d110 <__umoddi3+0x56c>
 800ccf8:	01000404 	movi	r4,16
 800ccfc:	3904d83a 	srl	r2,r7,r4
 800cd00:	00c20074 	movhi	r3,2049
 800cd04:	18d08a04 	addi	r3,r3,16936
 800cd08:	1885883a 	add	r2,r3,r2
 800cd0c:	14c00003 	ldbu	r19,0(r2)
 800cd10:	00c00804 	movi	r3,32
 800cd14:	9927883a 	add	r19,r19,r4
 800cd18:	1ce9c83a 	sub	r20,r3,r19
 800cd1c:	a0005c1e 	bne	r20,zero,800ce90 <__umoddi3+0x2ec>
 800cd20:	3c400136 	bltu	r7,r17,800cd28 <__umoddi3+0x184>
 800cd24:	81810a36 	bltu	r16,r6,800d150 <__umoddi3+0x5ac>
 800cd28:	8185c83a 	sub	r2,r16,r6
 800cd2c:	89e3c83a 	sub	r17,r17,r7
 800cd30:	8089803a 	cmpltu	r4,r16,r2
 800cd34:	8939c83a 	sub	fp,r17,r4
 800cd38:	e007883a 	mov	r3,fp
 800cd3c:	00003b06 	br	800ce2c <__umoddi3+0x288>
 800cd40:	3000041e 	bne	r6,zero,800cd54 <__umoddi3+0x1b0>
 800cd44:	000b883a 	mov	r5,zero
 800cd48:	01000044 	movi	r4,1
 800cd4c:	8002a3c0 	call	8002a3c <__udivsi3>
 800cd50:	1027883a 	mov	r19,r2
 800cd54:	00bfffd4 	movui	r2,65535
 800cd58:	14c0442e 	bgeu	r2,r19,800ce6c <__umoddi3+0x2c8>
 800cd5c:	00804034 	movhi	r2,256
 800cd60:	10bfffc4 	addi	r2,r2,-1
 800cd64:	14c0ec36 	bltu	r2,r19,800d118 <__umoddi3+0x574>
 800cd68:	00800404 	movi	r2,16
 800cd6c:	9886d83a 	srl	r3,r19,r2
 800cd70:	01020074 	movhi	r4,2049
 800cd74:	21108a04 	addi	r4,r4,16936
 800cd78:	20c7883a 	add	r3,r4,r3
 800cd7c:	18c00003 	ldbu	r3,0(r3)
 800cd80:	1887883a 	add	r3,r3,r2
 800cd84:	00800804 	movi	r2,32
 800cd88:	10e5c83a 	sub	r18,r2,r3
 800cd8c:	9000ab1e 	bne	r18,zero,800d03c <__umoddi3+0x498>
 800cd90:	982cd43a 	srli	r22,r19,16
 800cd94:	8ce3c83a 	sub	r17,r17,r19
 800cd98:	9dffffcc 	andi	r23,r19,65535
 800cd9c:	b00b883a 	mov	r5,r22
 800cda0:	8809883a 	mov	r4,r17
 800cda4:	8002aa00 	call	8002aa0 <__umodsi3>
 800cda8:	b00b883a 	mov	r5,r22
 800cdac:	8809883a 	mov	r4,r17
 800cdb0:	102b883a 	mov	r21,r2
 800cdb4:	8002a3c0 	call	8002a3c <__udivsi3>
 800cdb8:	b80b883a 	mov	r5,r23
 800cdbc:	1009883a 	mov	r4,r2
 800cdc0:	8002af80 	call	8002af8 <__mulsi3>
 800cdc4:	a82a943a 	slli	r21,r21,16
 800cdc8:	a006d43a 	srli	r3,r20,16
 800cdcc:	1d46b03a 	or	r3,r3,r21
 800cdd0:	1880042e 	bgeu	r3,r2,800cde4 <__umoddi3+0x240>
 800cdd4:	1cc7883a 	add	r3,r3,r19
 800cdd8:	1cc00236 	bltu	r3,r19,800cde4 <__umoddi3+0x240>
 800cddc:	1880012e 	bgeu	r3,r2,800cde4 <__umoddi3+0x240>
 800cde0:	1cc7883a 	add	r3,r3,r19
 800cde4:	18a1c83a 	sub	r16,r3,r2
 800cde8:	b00b883a 	mov	r5,r22
 800cdec:	8009883a 	mov	r4,r16
 800cdf0:	8002aa00 	call	8002aa0 <__umodsi3>
 800cdf4:	1023883a 	mov	r17,r2
 800cdf8:	b00b883a 	mov	r5,r22
 800cdfc:	8009883a 	mov	r4,r16
 800ce00:	8002a3c0 	call	8002a3c <__udivsi3>
 800ce04:	8822943a 	slli	r17,r17,16
 800ce08:	b80b883a 	mov	r5,r23
 800ce0c:	1009883a 	mov	r4,r2
 800ce10:	8002af80 	call	8002af8 <__mulsi3>
 800ce14:	a53fffcc 	andi	r20,r20,65535
 800ce18:	a446b03a 	or	r3,r20,r17
 800ce1c:	18bfac2e 	bgeu	r3,r2,800ccd0 <__alt_data_end+0xfc00ccd0>
 800ce20:	003fa706 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800ce24:	2005883a 	mov	r2,r4
 800ce28:	2807883a 	mov	r3,r5
 800ce2c:	dfc00c17 	ldw	ra,48(sp)
 800ce30:	df000b17 	ldw	fp,44(sp)
 800ce34:	ddc00a17 	ldw	r23,40(sp)
 800ce38:	dd800917 	ldw	r22,36(sp)
 800ce3c:	dd400817 	ldw	r21,32(sp)
 800ce40:	dd000717 	ldw	r20,28(sp)
 800ce44:	dcc00617 	ldw	r19,24(sp)
 800ce48:	dc800517 	ldw	r18,20(sp)
 800ce4c:	dc400417 	ldw	r17,16(sp)
 800ce50:	dc000317 	ldw	r16,12(sp)
 800ce54:	dec00d04 	addi	sp,sp,52
 800ce58:	f800283a 	ret
 800ce5c:	04c03fc4 	movi	r19,255
 800ce60:	99c9803a 	cmpltu	r4,r19,r7
 800ce64:	200890fa 	slli	r4,r4,3
 800ce68:	003fa406 	br	800ccfc <__alt_data_end+0xfc00ccfc>
 800ce6c:	00803fc4 	movi	r2,255
 800ce70:	14c5803a 	cmpltu	r2,r2,r19
 800ce74:	100490fa 	slli	r2,r2,3
 800ce78:	003fbc06 	br	800cd6c <__alt_data_end+0xfc00cd6c>
 800ce7c:	00804034 	movhi	r2,256
 800ce80:	10bfffc4 	addi	r2,r2,-1
 800ce84:	1180a636 	bltu	r2,r6,800d120 <__umoddi3+0x57c>
 800ce88:	01000404 	movi	r4,16
 800ce8c:	003f5c06 	br	800cc00 <__alt_data_end+0xfc00cc00>
 800ce90:	3d0e983a 	sll	r7,r7,r20
 800ce94:	34ead83a 	srl	r21,r6,r19
 800ce98:	8cc6d83a 	srl	r3,r17,r19
 800ce9c:	8d10983a 	sll	r8,r17,r20
 800cea0:	3d6ab03a 	or	r21,r7,r21
 800cea4:	a82cd43a 	srli	r22,r21,16
 800cea8:	84e2d83a 	srl	r17,r16,r19
 800ceac:	1809883a 	mov	r4,r3
 800ceb0:	b00b883a 	mov	r5,r22
 800ceb4:	8a22b03a 	or	r17,r17,r8
 800ceb8:	3524983a 	sll	r18,r6,r20
 800cebc:	dc400015 	stw	r17,0(sp)
 800cec0:	d8c00115 	stw	r3,4(sp)
 800cec4:	8002aa00 	call	8002aa0 <__umodsi3>
 800cec8:	d8c00117 	ldw	r3,4(sp)
 800cecc:	b00b883a 	mov	r5,r22
 800ced0:	1039883a 	mov	fp,r2
 800ced4:	1809883a 	mov	r4,r3
 800ced8:	8002a3c0 	call	8002a3c <__udivsi3>
 800cedc:	adffffcc 	andi	r23,r21,65535
 800cee0:	100b883a 	mov	r5,r2
 800cee4:	b809883a 	mov	r4,r23
 800cee8:	1023883a 	mov	r17,r2
 800ceec:	8002af80 	call	8002af8 <__mulsi3>
 800cef0:	d9400017 	ldw	r5,0(sp)
 800cef4:	e008943a 	slli	r4,fp,16
 800cef8:	8520983a 	sll	r16,r16,r20
 800cefc:	2806d43a 	srli	r3,r5,16
 800cf00:	1906b03a 	or	r3,r3,r4
 800cf04:	1880042e 	bgeu	r3,r2,800cf18 <__umoddi3+0x374>
 800cf08:	1d47883a 	add	r3,r3,r21
 800cf0c:	893fffc4 	addi	r4,r17,-1
 800cf10:	1d40892e 	bgeu	r3,r21,800d138 <__umoddi3+0x594>
 800cf14:	2023883a 	mov	r17,r4
 800cf18:	18b9c83a 	sub	fp,r3,r2
 800cf1c:	b00b883a 	mov	r5,r22
 800cf20:	e009883a 	mov	r4,fp
 800cf24:	8002aa00 	call	8002aa0 <__umodsi3>
 800cf28:	b00b883a 	mov	r5,r22
 800cf2c:	e009883a 	mov	r4,fp
 800cf30:	d8800215 	stw	r2,8(sp)
 800cf34:	8002a3c0 	call	8002a3c <__udivsi3>
 800cf38:	100b883a 	mov	r5,r2
 800cf3c:	b809883a 	mov	r4,r23
 800cf40:	102d883a 	mov	r22,r2
 800cf44:	8002af80 	call	8002af8 <__mulsi3>
 800cf48:	d9800217 	ldw	r6,8(sp)
 800cf4c:	d8c00017 	ldw	r3,0(sp)
 800cf50:	300c943a 	slli	r6,r6,16
 800cf54:	1a3fffcc 	andi	r8,r3,65535
 800cf58:	4190b03a 	or	r8,r8,r6
 800cf5c:	4080042e 	bgeu	r8,r2,800cf70 <__umoddi3+0x3cc>
 800cf60:	4551883a 	add	r8,r8,r21
 800cf64:	b0ffffc4 	addi	r3,r22,-1
 800cf68:	45406f2e 	bgeu	r8,r21,800d128 <__umoddi3+0x584>
 800cf6c:	182d883a 	mov	r22,r3
 800cf70:	880e943a 	slli	r7,r17,16
 800cf74:	9006d43a 	srli	r3,r18,16
 800cf78:	91bfffcc 	andi	r6,r18,65535
 800cf7c:	3dacb03a 	or	r22,r7,r22
 800cf80:	b02ed43a 	srli	r23,r22,16
 800cf84:	b5bfffcc 	andi	r22,r22,65535
 800cf88:	300b883a 	mov	r5,r6
 800cf8c:	b009883a 	mov	r4,r22
 800cf90:	40a3c83a 	sub	r17,r8,r2
 800cf94:	d8c00115 	stw	r3,4(sp)
 800cf98:	d9800215 	stw	r6,8(sp)
 800cf9c:	8002af80 	call	8002af8 <__mulsi3>
 800cfa0:	d9800217 	ldw	r6,8(sp)
 800cfa4:	b809883a 	mov	r4,r23
 800cfa8:	1039883a 	mov	fp,r2
 800cfac:	300b883a 	mov	r5,r6
 800cfb0:	8002af80 	call	8002af8 <__mulsi3>
 800cfb4:	d8c00117 	ldw	r3,4(sp)
 800cfb8:	b809883a 	mov	r4,r23
 800cfbc:	d8800215 	stw	r2,8(sp)
 800cfc0:	180b883a 	mov	r5,r3
 800cfc4:	8002af80 	call	8002af8 <__mulsi3>
 800cfc8:	d8c00117 	ldw	r3,4(sp)
 800cfcc:	b009883a 	mov	r4,r22
 800cfd0:	102f883a 	mov	r23,r2
 800cfd4:	180b883a 	mov	r5,r3
 800cfd8:	8002af80 	call	8002af8 <__mulsi3>
 800cfdc:	d9800217 	ldw	r6,8(sp)
 800cfe0:	e006d43a 	srli	r3,fp,16
 800cfe4:	1185883a 	add	r2,r2,r6
 800cfe8:	1885883a 	add	r2,r3,r2
 800cfec:	1180022e 	bgeu	r2,r6,800cff8 <__umoddi3+0x454>
 800cff0:	00c00074 	movhi	r3,1
 800cff4:	b8ef883a 	add	r23,r23,r3
 800cff8:	1006d43a 	srli	r3,r2,16
 800cffc:	1004943a 	slli	r2,r2,16
 800d000:	e73fffcc 	andi	fp,fp,65535
 800d004:	1dc7883a 	add	r3,r3,r23
 800d008:	1739883a 	add	fp,r2,fp
 800d00c:	88c03a36 	bltu	r17,r3,800d0f8 <__umoddi3+0x554>
 800d010:	88c05126 	beq	r17,r3,800d158 <__umoddi3+0x5b4>
 800d014:	88c9c83a 	sub	r4,r17,r3
 800d018:	e00f883a 	mov	r7,fp
 800d01c:	81cfc83a 	sub	r7,r16,r7
 800d020:	81c7803a 	cmpltu	r3,r16,r7
 800d024:	20c7c83a 	sub	r3,r4,r3
 800d028:	1cc4983a 	sll	r2,r3,r19
 800d02c:	3d0ed83a 	srl	r7,r7,r20
 800d030:	1d06d83a 	srl	r3,r3,r20
 800d034:	11c4b03a 	or	r2,r2,r7
 800d038:	003f7c06 	br	800ce2c <__alt_data_end+0xfc00ce2c>
 800d03c:	9ca6983a 	sll	r19,r19,r18
 800d040:	88f8d83a 	srl	fp,r17,r3
 800d044:	80c4d83a 	srl	r2,r16,r3
 800d048:	982cd43a 	srli	r22,r19,16
 800d04c:	8ca2983a 	sll	r17,r17,r18
 800d050:	e009883a 	mov	r4,fp
 800d054:	b00b883a 	mov	r5,r22
 800d058:	146ab03a 	or	r21,r2,r17
 800d05c:	8002aa00 	call	8002aa0 <__umodsi3>
 800d060:	b00b883a 	mov	r5,r22
 800d064:	e009883a 	mov	r4,fp
 800d068:	1029883a 	mov	r20,r2
 800d06c:	9dffffcc 	andi	r23,r19,65535
 800d070:	8002a3c0 	call	8002a3c <__udivsi3>
 800d074:	b809883a 	mov	r4,r23
 800d078:	100b883a 	mov	r5,r2
 800d07c:	8002af80 	call	8002af8 <__mulsi3>
 800d080:	a008943a 	slli	r4,r20,16
 800d084:	a806d43a 	srli	r3,r21,16
 800d088:	84a8983a 	sll	r20,r16,r18
 800d08c:	1906b03a 	or	r3,r3,r4
 800d090:	1880042e 	bgeu	r3,r2,800d0a4 <__umoddi3+0x500>
 800d094:	1cc7883a 	add	r3,r3,r19
 800d098:	1cc00236 	bltu	r3,r19,800d0a4 <__umoddi3+0x500>
 800d09c:	1880012e 	bgeu	r3,r2,800d0a4 <__umoddi3+0x500>
 800d0a0:	1cc7883a 	add	r3,r3,r19
 800d0a4:	18a3c83a 	sub	r17,r3,r2
 800d0a8:	b00b883a 	mov	r5,r22
 800d0ac:	8809883a 	mov	r4,r17
 800d0b0:	8002aa00 	call	8002aa0 <__umodsi3>
 800d0b4:	b00b883a 	mov	r5,r22
 800d0b8:	8809883a 	mov	r4,r17
 800d0bc:	1021883a 	mov	r16,r2
 800d0c0:	8002a3c0 	call	8002a3c <__udivsi3>
 800d0c4:	100b883a 	mov	r5,r2
 800d0c8:	b809883a 	mov	r4,r23
 800d0cc:	8020943a 	slli	r16,r16,16
 800d0d0:	8002af80 	call	8002af8 <__mulsi3>
 800d0d4:	a8ffffcc 	andi	r3,r21,65535
 800d0d8:	1c06b03a 	or	r3,r3,r16
 800d0dc:	1880042e 	bgeu	r3,r2,800d0f0 <__umoddi3+0x54c>
 800d0e0:	1cc7883a 	add	r3,r3,r19
 800d0e4:	1cc00236 	bltu	r3,r19,800d0f0 <__umoddi3+0x54c>
 800d0e8:	1880012e 	bgeu	r3,r2,800d0f0 <__umoddi3+0x54c>
 800d0ec:	1cc7883a 	add	r3,r3,r19
 800d0f0:	18a3c83a 	sub	r17,r3,r2
 800d0f4:	003f2906 	br	800cd9c <__alt_data_end+0xfc00cd9c>
 800d0f8:	e48fc83a 	sub	r7,fp,r18
 800d0fc:	1d49c83a 	sub	r4,r3,r21
 800d100:	e1f9803a 	cmpltu	fp,fp,r7
 800d104:	2739c83a 	sub	fp,r4,fp
 800d108:	8f09c83a 	sub	r4,r17,fp
 800d10c:	003fc306 	br	800d01c <__alt_data_end+0xfc00d01c>
 800d110:	01000604 	movi	r4,24
 800d114:	003ef906 	br	800ccfc <__alt_data_end+0xfc00ccfc>
 800d118:	00800604 	movi	r2,24
 800d11c:	003f1306 	br	800cd6c <__alt_data_end+0xfc00cd6c>
 800d120:	01000604 	movi	r4,24
 800d124:	003eb606 	br	800cc00 <__alt_data_end+0xfc00cc00>
 800d128:	40bf902e 	bgeu	r8,r2,800cf6c <__alt_data_end+0xfc00cf6c>
 800d12c:	b5bfff84 	addi	r22,r22,-2
 800d130:	4551883a 	add	r8,r8,r21
 800d134:	003f8e06 	br	800cf70 <__alt_data_end+0xfc00cf70>
 800d138:	18bf762e 	bgeu	r3,r2,800cf14 <__alt_data_end+0xfc00cf14>
 800d13c:	8c7fff84 	addi	r17,r17,-2
 800d140:	1d47883a 	add	r3,r3,r21
 800d144:	003f7406 	br	800cf18 <__alt_data_end+0xfc00cf18>
 800d148:	1cc7883a 	add	r3,r3,r19
 800d14c:	003ecd06 	br	800cc84 <__alt_data_end+0xfc00cc84>
 800d150:	8005883a 	mov	r2,r16
 800d154:	003ef806 	br	800cd38 <__alt_data_end+0xfc00cd38>
 800d158:	873fe736 	bltu	r16,fp,800d0f8 <__alt_data_end+0xfc00d0f8>
 800d15c:	e00f883a 	mov	r7,fp
 800d160:	0009883a 	mov	r4,zero
 800d164:	003fad06 	br	800d01c <__alt_data_end+0xfc00d01c>

0800d168 <__adddf3>:
 800d168:	02c00434 	movhi	r11,16
 800d16c:	5affffc4 	addi	r11,r11,-1
 800d170:	2806d7fa 	srli	r3,r5,31
 800d174:	2ad4703a 	and	r10,r5,r11
 800d178:	3ad2703a 	and	r9,r7,r11
 800d17c:	3804d53a 	srli	r2,r7,20
 800d180:	3018d77a 	srli	r12,r6,29
 800d184:	280ad53a 	srli	r5,r5,20
 800d188:	501490fa 	slli	r10,r10,3
 800d18c:	2010d77a 	srli	r8,r4,29
 800d190:	481290fa 	slli	r9,r9,3
 800d194:	380ed7fa 	srli	r7,r7,31
 800d198:	defffb04 	addi	sp,sp,-20
 800d19c:	dc800215 	stw	r18,8(sp)
 800d1a0:	dc400115 	stw	r17,4(sp)
 800d1a4:	dc000015 	stw	r16,0(sp)
 800d1a8:	dfc00415 	stw	ra,16(sp)
 800d1ac:	dcc00315 	stw	r19,12(sp)
 800d1b0:	1c803fcc 	andi	r18,r3,255
 800d1b4:	2c01ffcc 	andi	r16,r5,2047
 800d1b8:	5210b03a 	or	r8,r10,r8
 800d1bc:	202290fa 	slli	r17,r4,3
 800d1c0:	1081ffcc 	andi	r2,r2,2047
 800d1c4:	4b12b03a 	or	r9,r9,r12
 800d1c8:	300c90fa 	slli	r6,r6,3
 800d1cc:	91c07526 	beq	r18,r7,800d3a4 <__adddf3+0x23c>
 800d1d0:	8087c83a 	sub	r3,r16,r2
 800d1d4:	00c0ab0e 	bge	zero,r3,800d484 <__adddf3+0x31c>
 800d1d8:	10002a1e 	bne	r2,zero,800d284 <__adddf3+0x11c>
 800d1dc:	4984b03a 	or	r2,r9,r6
 800d1e0:	1000961e 	bne	r2,zero,800d43c <__adddf3+0x2d4>
 800d1e4:	888001cc 	andi	r2,r17,7
 800d1e8:	10000726 	beq	r2,zero,800d208 <__adddf3+0xa0>
 800d1ec:	888003cc 	andi	r2,r17,15
 800d1f0:	00c00104 	movi	r3,4
 800d1f4:	10c00426 	beq	r2,r3,800d208 <__adddf3+0xa0>
 800d1f8:	88c7883a 	add	r3,r17,r3
 800d1fc:	1c63803a 	cmpltu	r17,r3,r17
 800d200:	4451883a 	add	r8,r8,r17
 800d204:	1823883a 	mov	r17,r3
 800d208:	4080202c 	andhi	r2,r8,128
 800d20c:	10005926 	beq	r2,zero,800d374 <__adddf3+0x20c>
 800d210:	84000044 	addi	r16,r16,1
 800d214:	0081ffc4 	movi	r2,2047
 800d218:	8080ba26 	beq	r16,r2,800d504 <__adddf3+0x39c>
 800d21c:	00bfe034 	movhi	r2,65408
 800d220:	10bfffc4 	addi	r2,r2,-1
 800d224:	4090703a 	and	r8,r8,r2
 800d228:	4004977a 	slli	r2,r8,29
 800d22c:	4010927a 	slli	r8,r8,9
 800d230:	8822d0fa 	srli	r17,r17,3
 800d234:	8401ffcc 	andi	r16,r16,2047
 800d238:	4010d33a 	srli	r8,r8,12
 800d23c:	9007883a 	mov	r3,r18
 800d240:	1444b03a 	or	r2,r2,r17
 800d244:	8401ffcc 	andi	r16,r16,2047
 800d248:	8020953a 	slli	r16,r16,20
 800d24c:	18c03fcc 	andi	r3,r3,255
 800d250:	01000434 	movhi	r4,16
 800d254:	213fffc4 	addi	r4,r4,-1
 800d258:	180697fa 	slli	r3,r3,31
 800d25c:	4110703a 	and	r8,r8,r4
 800d260:	4410b03a 	or	r8,r8,r16
 800d264:	40c6b03a 	or	r3,r8,r3
 800d268:	dfc00417 	ldw	ra,16(sp)
 800d26c:	dcc00317 	ldw	r19,12(sp)
 800d270:	dc800217 	ldw	r18,8(sp)
 800d274:	dc400117 	ldw	r17,4(sp)
 800d278:	dc000017 	ldw	r16,0(sp)
 800d27c:	dec00504 	addi	sp,sp,20
 800d280:	f800283a 	ret
 800d284:	0081ffc4 	movi	r2,2047
 800d288:	80bfd626 	beq	r16,r2,800d1e4 <__alt_data_end+0xfc00d1e4>
 800d28c:	4a402034 	orhi	r9,r9,128
 800d290:	00800e04 	movi	r2,56
 800d294:	10c09f16 	blt	r2,r3,800d514 <__adddf3+0x3ac>
 800d298:	008007c4 	movi	r2,31
 800d29c:	10c0c216 	blt	r2,r3,800d5a8 <__adddf3+0x440>
 800d2a0:	00800804 	movi	r2,32
 800d2a4:	10c5c83a 	sub	r2,r2,r3
 800d2a8:	488a983a 	sll	r5,r9,r2
 800d2ac:	30c8d83a 	srl	r4,r6,r3
 800d2b0:	3084983a 	sll	r2,r6,r2
 800d2b4:	48c6d83a 	srl	r3,r9,r3
 800d2b8:	290cb03a 	or	r6,r5,r4
 800d2bc:	1004c03a 	cmpne	r2,r2,zero
 800d2c0:	308cb03a 	or	r6,r6,r2
 800d2c4:	898dc83a 	sub	r6,r17,r6
 800d2c8:	89a3803a 	cmpltu	r17,r17,r6
 800d2cc:	40d1c83a 	sub	r8,r8,r3
 800d2d0:	4451c83a 	sub	r8,r8,r17
 800d2d4:	3023883a 	mov	r17,r6
 800d2d8:	4080202c 	andhi	r2,r8,128
 800d2dc:	10002326 	beq	r2,zero,800d36c <__adddf3+0x204>
 800d2e0:	04c02034 	movhi	r19,128
 800d2e4:	9cffffc4 	addi	r19,r19,-1
 800d2e8:	44e6703a 	and	r19,r8,r19
 800d2ec:	98007626 	beq	r19,zero,800d4c8 <__adddf3+0x360>
 800d2f0:	9809883a 	mov	r4,r19
 800d2f4:	800f9a80 	call	800f9a8 <__clzsi2>
 800d2f8:	10fffe04 	addi	r3,r2,-8
 800d2fc:	010007c4 	movi	r4,31
 800d300:	20c07716 	blt	r4,r3,800d4e0 <__adddf3+0x378>
 800d304:	00800804 	movi	r2,32
 800d308:	10c5c83a 	sub	r2,r2,r3
 800d30c:	8884d83a 	srl	r2,r17,r2
 800d310:	98d0983a 	sll	r8,r19,r3
 800d314:	88e2983a 	sll	r17,r17,r3
 800d318:	1204b03a 	or	r2,r2,r8
 800d31c:	1c007416 	blt	r3,r16,800d4f0 <__adddf3+0x388>
 800d320:	1c21c83a 	sub	r16,r3,r16
 800d324:	82000044 	addi	r8,r16,1
 800d328:	00c007c4 	movi	r3,31
 800d32c:	1a009116 	blt	r3,r8,800d574 <__adddf3+0x40c>
 800d330:	00c00804 	movi	r3,32
 800d334:	1a07c83a 	sub	r3,r3,r8
 800d338:	8a08d83a 	srl	r4,r17,r8
 800d33c:	88e2983a 	sll	r17,r17,r3
 800d340:	10c6983a 	sll	r3,r2,r3
 800d344:	1210d83a 	srl	r8,r2,r8
 800d348:	8804c03a 	cmpne	r2,r17,zero
 800d34c:	1906b03a 	or	r3,r3,r4
 800d350:	18a2b03a 	or	r17,r3,r2
 800d354:	0021883a 	mov	r16,zero
 800d358:	003fa206 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d35c:	1890b03a 	or	r8,r3,r2
 800d360:	40017d26 	beq	r8,zero,800d958 <__adddf3+0x7f0>
 800d364:	1011883a 	mov	r8,r2
 800d368:	1823883a 	mov	r17,r3
 800d36c:	888001cc 	andi	r2,r17,7
 800d370:	103f9e1e 	bne	r2,zero,800d1ec <__alt_data_end+0xfc00d1ec>
 800d374:	4004977a 	slli	r2,r8,29
 800d378:	8822d0fa 	srli	r17,r17,3
 800d37c:	4010d0fa 	srli	r8,r8,3
 800d380:	9007883a 	mov	r3,r18
 800d384:	1444b03a 	or	r2,r2,r17
 800d388:	0101ffc4 	movi	r4,2047
 800d38c:	81002426 	beq	r16,r4,800d420 <__adddf3+0x2b8>
 800d390:	8120703a 	and	r16,r16,r4
 800d394:	01000434 	movhi	r4,16
 800d398:	213fffc4 	addi	r4,r4,-1
 800d39c:	4110703a 	and	r8,r8,r4
 800d3a0:	003fa806 	br	800d244 <__alt_data_end+0xfc00d244>
 800d3a4:	8089c83a 	sub	r4,r16,r2
 800d3a8:	01005e0e 	bge	zero,r4,800d524 <__adddf3+0x3bc>
 800d3ac:	10002b26 	beq	r2,zero,800d45c <__adddf3+0x2f4>
 800d3b0:	0081ffc4 	movi	r2,2047
 800d3b4:	80bf8b26 	beq	r16,r2,800d1e4 <__alt_data_end+0xfc00d1e4>
 800d3b8:	4a402034 	orhi	r9,r9,128
 800d3bc:	00800e04 	movi	r2,56
 800d3c0:	1100a40e 	bge	r2,r4,800d654 <__adddf3+0x4ec>
 800d3c4:	498cb03a 	or	r6,r9,r6
 800d3c8:	300ac03a 	cmpne	r5,r6,zero
 800d3cc:	0013883a 	mov	r9,zero
 800d3d0:	2c4b883a 	add	r5,r5,r17
 800d3d4:	2c63803a 	cmpltu	r17,r5,r17
 800d3d8:	4a11883a 	add	r8,r9,r8
 800d3dc:	8a11883a 	add	r8,r17,r8
 800d3e0:	2823883a 	mov	r17,r5
 800d3e4:	4080202c 	andhi	r2,r8,128
 800d3e8:	103fe026 	beq	r2,zero,800d36c <__alt_data_end+0xfc00d36c>
 800d3ec:	84000044 	addi	r16,r16,1
 800d3f0:	0081ffc4 	movi	r2,2047
 800d3f4:	8080d226 	beq	r16,r2,800d740 <__adddf3+0x5d8>
 800d3f8:	00bfe034 	movhi	r2,65408
 800d3fc:	10bfffc4 	addi	r2,r2,-1
 800d400:	4090703a 	and	r8,r8,r2
 800d404:	880ad07a 	srli	r5,r17,1
 800d408:	400897fa 	slli	r4,r8,31
 800d40c:	88c0004c 	andi	r3,r17,1
 800d410:	28e2b03a 	or	r17,r5,r3
 800d414:	4010d07a 	srli	r8,r8,1
 800d418:	2462b03a 	or	r17,r4,r17
 800d41c:	003f7106 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d420:	4088b03a 	or	r4,r8,r2
 800d424:	20014526 	beq	r4,zero,800d93c <__adddf3+0x7d4>
 800d428:	01000434 	movhi	r4,16
 800d42c:	42000234 	orhi	r8,r8,8
 800d430:	213fffc4 	addi	r4,r4,-1
 800d434:	4110703a 	and	r8,r8,r4
 800d438:	003f8206 	br	800d244 <__alt_data_end+0xfc00d244>
 800d43c:	18ffffc4 	addi	r3,r3,-1
 800d440:	1800491e 	bne	r3,zero,800d568 <__adddf3+0x400>
 800d444:	898bc83a 	sub	r5,r17,r6
 800d448:	8963803a 	cmpltu	r17,r17,r5
 800d44c:	4251c83a 	sub	r8,r8,r9
 800d450:	4451c83a 	sub	r8,r8,r17
 800d454:	2823883a 	mov	r17,r5
 800d458:	003f9f06 	br	800d2d8 <__alt_data_end+0xfc00d2d8>
 800d45c:	4984b03a 	or	r2,r9,r6
 800d460:	103f6026 	beq	r2,zero,800d1e4 <__alt_data_end+0xfc00d1e4>
 800d464:	213fffc4 	addi	r4,r4,-1
 800d468:	2000931e 	bne	r4,zero,800d6b8 <__adddf3+0x550>
 800d46c:	898d883a 	add	r6,r17,r6
 800d470:	3463803a 	cmpltu	r17,r6,r17
 800d474:	4251883a 	add	r8,r8,r9
 800d478:	8a11883a 	add	r8,r17,r8
 800d47c:	3023883a 	mov	r17,r6
 800d480:	003fd806 	br	800d3e4 <__alt_data_end+0xfc00d3e4>
 800d484:	1800541e 	bne	r3,zero,800d5d8 <__adddf3+0x470>
 800d488:	80800044 	addi	r2,r16,1
 800d48c:	1081ffcc 	andi	r2,r2,2047
 800d490:	00c00044 	movi	r3,1
 800d494:	1880a00e 	bge	r3,r2,800d718 <__adddf3+0x5b0>
 800d498:	8989c83a 	sub	r4,r17,r6
 800d49c:	8905803a 	cmpltu	r2,r17,r4
 800d4a0:	4267c83a 	sub	r19,r8,r9
 800d4a4:	98a7c83a 	sub	r19,r19,r2
 800d4a8:	9880202c 	andhi	r2,r19,128
 800d4ac:	10006326 	beq	r2,zero,800d63c <__adddf3+0x4d4>
 800d4b0:	3463c83a 	sub	r17,r6,r17
 800d4b4:	4a07c83a 	sub	r3,r9,r8
 800d4b8:	344d803a 	cmpltu	r6,r6,r17
 800d4bc:	19a7c83a 	sub	r19,r3,r6
 800d4c0:	3825883a 	mov	r18,r7
 800d4c4:	983f8a1e 	bne	r19,zero,800d2f0 <__alt_data_end+0xfc00d2f0>
 800d4c8:	8809883a 	mov	r4,r17
 800d4cc:	800f9a80 	call	800f9a8 <__clzsi2>
 800d4d0:	10800804 	addi	r2,r2,32
 800d4d4:	10fffe04 	addi	r3,r2,-8
 800d4d8:	010007c4 	movi	r4,31
 800d4dc:	20ff890e 	bge	r4,r3,800d304 <__alt_data_end+0xfc00d304>
 800d4e0:	10bff604 	addi	r2,r2,-40
 800d4e4:	8884983a 	sll	r2,r17,r2
 800d4e8:	0023883a 	mov	r17,zero
 800d4ec:	1c3f8c0e 	bge	r3,r16,800d320 <__alt_data_end+0xfc00d320>
 800d4f0:	023fe034 	movhi	r8,65408
 800d4f4:	423fffc4 	addi	r8,r8,-1
 800d4f8:	80e1c83a 	sub	r16,r16,r3
 800d4fc:	1210703a 	and	r8,r2,r8
 800d500:	003f3806 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d504:	9007883a 	mov	r3,r18
 800d508:	0011883a 	mov	r8,zero
 800d50c:	0005883a 	mov	r2,zero
 800d510:	003f4c06 	br	800d244 <__alt_data_end+0xfc00d244>
 800d514:	498cb03a 	or	r6,r9,r6
 800d518:	300cc03a 	cmpne	r6,r6,zero
 800d51c:	0007883a 	mov	r3,zero
 800d520:	003f6806 	br	800d2c4 <__alt_data_end+0xfc00d2c4>
 800d524:	20009c1e 	bne	r4,zero,800d798 <__adddf3+0x630>
 800d528:	80800044 	addi	r2,r16,1
 800d52c:	1141ffcc 	andi	r5,r2,2047
 800d530:	01000044 	movi	r4,1
 800d534:	2140670e 	bge	r4,r5,800d6d4 <__adddf3+0x56c>
 800d538:	0101ffc4 	movi	r4,2047
 800d53c:	11007f26 	beq	r2,r4,800d73c <__adddf3+0x5d4>
 800d540:	898d883a 	add	r6,r17,r6
 800d544:	4247883a 	add	r3,r8,r9
 800d548:	3451803a 	cmpltu	r8,r6,r17
 800d54c:	40d1883a 	add	r8,r8,r3
 800d550:	402297fa 	slli	r17,r8,31
 800d554:	300cd07a 	srli	r6,r6,1
 800d558:	4010d07a 	srli	r8,r8,1
 800d55c:	1021883a 	mov	r16,r2
 800d560:	89a2b03a 	or	r17,r17,r6
 800d564:	003f1f06 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d568:	0081ffc4 	movi	r2,2047
 800d56c:	80bf481e 	bne	r16,r2,800d290 <__alt_data_end+0xfc00d290>
 800d570:	003f1c06 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d574:	843ff844 	addi	r16,r16,-31
 800d578:	01000804 	movi	r4,32
 800d57c:	1406d83a 	srl	r3,r2,r16
 800d580:	41005026 	beq	r8,r4,800d6c4 <__adddf3+0x55c>
 800d584:	01001004 	movi	r4,64
 800d588:	2211c83a 	sub	r8,r4,r8
 800d58c:	1204983a 	sll	r2,r2,r8
 800d590:	88a2b03a 	or	r17,r17,r2
 800d594:	8822c03a 	cmpne	r17,r17,zero
 800d598:	1c62b03a 	or	r17,r3,r17
 800d59c:	0011883a 	mov	r8,zero
 800d5a0:	0021883a 	mov	r16,zero
 800d5a4:	003f7106 	br	800d36c <__alt_data_end+0xfc00d36c>
 800d5a8:	193ff804 	addi	r4,r3,-32
 800d5ac:	00800804 	movi	r2,32
 800d5b0:	4908d83a 	srl	r4,r9,r4
 800d5b4:	18804526 	beq	r3,r2,800d6cc <__adddf3+0x564>
 800d5b8:	00801004 	movi	r2,64
 800d5bc:	10c5c83a 	sub	r2,r2,r3
 800d5c0:	4886983a 	sll	r3,r9,r2
 800d5c4:	198cb03a 	or	r6,r3,r6
 800d5c8:	300cc03a 	cmpne	r6,r6,zero
 800d5cc:	218cb03a 	or	r6,r4,r6
 800d5d0:	0007883a 	mov	r3,zero
 800d5d4:	003f3b06 	br	800d2c4 <__alt_data_end+0xfc00d2c4>
 800d5d8:	80002a26 	beq	r16,zero,800d684 <__adddf3+0x51c>
 800d5dc:	0101ffc4 	movi	r4,2047
 800d5e0:	11006826 	beq	r2,r4,800d784 <__adddf3+0x61c>
 800d5e4:	00c7c83a 	sub	r3,zero,r3
 800d5e8:	42002034 	orhi	r8,r8,128
 800d5ec:	01000e04 	movi	r4,56
 800d5f0:	20c07c16 	blt	r4,r3,800d7e4 <__adddf3+0x67c>
 800d5f4:	010007c4 	movi	r4,31
 800d5f8:	20c0da16 	blt	r4,r3,800d964 <__adddf3+0x7fc>
 800d5fc:	01000804 	movi	r4,32
 800d600:	20c9c83a 	sub	r4,r4,r3
 800d604:	4114983a 	sll	r10,r8,r4
 800d608:	88cad83a 	srl	r5,r17,r3
 800d60c:	8908983a 	sll	r4,r17,r4
 800d610:	40c6d83a 	srl	r3,r8,r3
 800d614:	5162b03a 	or	r17,r10,r5
 800d618:	2008c03a 	cmpne	r4,r4,zero
 800d61c:	8922b03a 	or	r17,r17,r4
 800d620:	3463c83a 	sub	r17,r6,r17
 800d624:	48c7c83a 	sub	r3,r9,r3
 800d628:	344d803a 	cmpltu	r6,r6,r17
 800d62c:	1991c83a 	sub	r8,r3,r6
 800d630:	1021883a 	mov	r16,r2
 800d634:	3825883a 	mov	r18,r7
 800d638:	003f2706 	br	800d2d8 <__alt_data_end+0xfc00d2d8>
 800d63c:	24d0b03a 	or	r8,r4,r19
 800d640:	40001b1e 	bne	r8,zero,800d6b0 <__adddf3+0x548>
 800d644:	0005883a 	mov	r2,zero
 800d648:	0007883a 	mov	r3,zero
 800d64c:	0021883a 	mov	r16,zero
 800d650:	003f4d06 	br	800d388 <__alt_data_end+0xfc00d388>
 800d654:	008007c4 	movi	r2,31
 800d658:	11003c16 	blt	r2,r4,800d74c <__adddf3+0x5e4>
 800d65c:	00800804 	movi	r2,32
 800d660:	1105c83a 	sub	r2,r2,r4
 800d664:	488e983a 	sll	r7,r9,r2
 800d668:	310ad83a 	srl	r5,r6,r4
 800d66c:	3084983a 	sll	r2,r6,r2
 800d670:	4912d83a 	srl	r9,r9,r4
 800d674:	394ab03a 	or	r5,r7,r5
 800d678:	1004c03a 	cmpne	r2,r2,zero
 800d67c:	288ab03a 	or	r5,r5,r2
 800d680:	003f5306 	br	800d3d0 <__alt_data_end+0xfc00d3d0>
 800d684:	4448b03a 	or	r4,r8,r17
 800d688:	20003e26 	beq	r4,zero,800d784 <__adddf3+0x61c>
 800d68c:	00c6303a 	nor	r3,zero,r3
 800d690:	18003a1e 	bne	r3,zero,800d77c <__adddf3+0x614>
 800d694:	3463c83a 	sub	r17,r6,r17
 800d698:	4a07c83a 	sub	r3,r9,r8
 800d69c:	344d803a 	cmpltu	r6,r6,r17
 800d6a0:	1991c83a 	sub	r8,r3,r6
 800d6a4:	1021883a 	mov	r16,r2
 800d6a8:	3825883a 	mov	r18,r7
 800d6ac:	003f0a06 	br	800d2d8 <__alt_data_end+0xfc00d2d8>
 800d6b0:	2023883a 	mov	r17,r4
 800d6b4:	003f0d06 	br	800d2ec <__alt_data_end+0xfc00d2ec>
 800d6b8:	0081ffc4 	movi	r2,2047
 800d6bc:	80bf3f1e 	bne	r16,r2,800d3bc <__alt_data_end+0xfc00d3bc>
 800d6c0:	003ec806 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d6c4:	0005883a 	mov	r2,zero
 800d6c8:	003fb106 	br	800d590 <__alt_data_end+0xfc00d590>
 800d6cc:	0007883a 	mov	r3,zero
 800d6d0:	003fbc06 	br	800d5c4 <__alt_data_end+0xfc00d5c4>
 800d6d4:	4444b03a 	or	r2,r8,r17
 800d6d8:	8000871e 	bne	r16,zero,800d8f8 <__adddf3+0x790>
 800d6dc:	1000ba26 	beq	r2,zero,800d9c8 <__adddf3+0x860>
 800d6e0:	4984b03a 	or	r2,r9,r6
 800d6e4:	103ebf26 	beq	r2,zero,800d1e4 <__alt_data_end+0xfc00d1e4>
 800d6e8:	8985883a 	add	r2,r17,r6
 800d6ec:	4247883a 	add	r3,r8,r9
 800d6f0:	1451803a 	cmpltu	r8,r2,r17
 800d6f4:	40d1883a 	add	r8,r8,r3
 800d6f8:	40c0202c 	andhi	r3,r8,128
 800d6fc:	1023883a 	mov	r17,r2
 800d700:	183f1a26 	beq	r3,zero,800d36c <__alt_data_end+0xfc00d36c>
 800d704:	00bfe034 	movhi	r2,65408
 800d708:	10bfffc4 	addi	r2,r2,-1
 800d70c:	2021883a 	mov	r16,r4
 800d710:	4090703a 	and	r8,r8,r2
 800d714:	003eb306 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d718:	4444b03a 	or	r2,r8,r17
 800d71c:	8000291e 	bne	r16,zero,800d7c4 <__adddf3+0x65c>
 800d720:	10004b1e 	bne	r2,zero,800d850 <__adddf3+0x6e8>
 800d724:	4990b03a 	or	r8,r9,r6
 800d728:	40008b26 	beq	r8,zero,800d958 <__adddf3+0x7f0>
 800d72c:	4811883a 	mov	r8,r9
 800d730:	3023883a 	mov	r17,r6
 800d734:	3825883a 	mov	r18,r7
 800d738:	003eaa06 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d73c:	1021883a 	mov	r16,r2
 800d740:	0011883a 	mov	r8,zero
 800d744:	0005883a 	mov	r2,zero
 800d748:	003f0f06 	br	800d388 <__alt_data_end+0xfc00d388>
 800d74c:	217ff804 	addi	r5,r4,-32
 800d750:	00800804 	movi	r2,32
 800d754:	494ad83a 	srl	r5,r9,r5
 800d758:	20807d26 	beq	r4,r2,800d950 <__adddf3+0x7e8>
 800d75c:	00801004 	movi	r2,64
 800d760:	1109c83a 	sub	r4,r2,r4
 800d764:	4912983a 	sll	r9,r9,r4
 800d768:	498cb03a 	or	r6,r9,r6
 800d76c:	300cc03a 	cmpne	r6,r6,zero
 800d770:	298ab03a 	or	r5,r5,r6
 800d774:	0013883a 	mov	r9,zero
 800d778:	003f1506 	br	800d3d0 <__alt_data_end+0xfc00d3d0>
 800d77c:	0101ffc4 	movi	r4,2047
 800d780:	113f9a1e 	bne	r2,r4,800d5ec <__alt_data_end+0xfc00d5ec>
 800d784:	4811883a 	mov	r8,r9
 800d788:	3023883a 	mov	r17,r6
 800d78c:	1021883a 	mov	r16,r2
 800d790:	3825883a 	mov	r18,r7
 800d794:	003e9306 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d798:	8000161e 	bne	r16,zero,800d7f4 <__adddf3+0x68c>
 800d79c:	444ab03a 	or	r5,r8,r17
 800d7a0:	28005126 	beq	r5,zero,800d8e8 <__adddf3+0x780>
 800d7a4:	0108303a 	nor	r4,zero,r4
 800d7a8:	20004d1e 	bne	r4,zero,800d8e0 <__adddf3+0x778>
 800d7ac:	89a3883a 	add	r17,r17,r6
 800d7b0:	4253883a 	add	r9,r8,r9
 800d7b4:	898d803a 	cmpltu	r6,r17,r6
 800d7b8:	3251883a 	add	r8,r6,r9
 800d7bc:	1021883a 	mov	r16,r2
 800d7c0:	003f0806 	br	800d3e4 <__alt_data_end+0xfc00d3e4>
 800d7c4:	1000301e 	bne	r2,zero,800d888 <__adddf3+0x720>
 800d7c8:	4984b03a 	or	r2,r9,r6
 800d7cc:	10007126 	beq	r2,zero,800d994 <__adddf3+0x82c>
 800d7d0:	4811883a 	mov	r8,r9
 800d7d4:	3023883a 	mov	r17,r6
 800d7d8:	3825883a 	mov	r18,r7
 800d7dc:	0401ffc4 	movi	r16,2047
 800d7e0:	003e8006 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d7e4:	4462b03a 	or	r17,r8,r17
 800d7e8:	8822c03a 	cmpne	r17,r17,zero
 800d7ec:	0007883a 	mov	r3,zero
 800d7f0:	003f8b06 	br	800d620 <__alt_data_end+0xfc00d620>
 800d7f4:	0141ffc4 	movi	r5,2047
 800d7f8:	11403b26 	beq	r2,r5,800d8e8 <__adddf3+0x780>
 800d7fc:	0109c83a 	sub	r4,zero,r4
 800d800:	42002034 	orhi	r8,r8,128
 800d804:	01400e04 	movi	r5,56
 800d808:	29006716 	blt	r5,r4,800d9a8 <__adddf3+0x840>
 800d80c:	014007c4 	movi	r5,31
 800d810:	29007016 	blt	r5,r4,800d9d4 <__adddf3+0x86c>
 800d814:	01400804 	movi	r5,32
 800d818:	290bc83a 	sub	r5,r5,r4
 800d81c:	4154983a 	sll	r10,r8,r5
 800d820:	890ed83a 	srl	r7,r17,r4
 800d824:	894a983a 	sll	r5,r17,r5
 800d828:	4108d83a 	srl	r4,r8,r4
 800d82c:	51e2b03a 	or	r17,r10,r7
 800d830:	280ac03a 	cmpne	r5,r5,zero
 800d834:	8962b03a 	or	r17,r17,r5
 800d838:	89a3883a 	add	r17,r17,r6
 800d83c:	2253883a 	add	r9,r4,r9
 800d840:	898d803a 	cmpltu	r6,r17,r6
 800d844:	3251883a 	add	r8,r6,r9
 800d848:	1021883a 	mov	r16,r2
 800d84c:	003ee506 	br	800d3e4 <__alt_data_end+0xfc00d3e4>
 800d850:	4984b03a 	or	r2,r9,r6
 800d854:	103e6326 	beq	r2,zero,800d1e4 <__alt_data_end+0xfc00d1e4>
 800d858:	8987c83a 	sub	r3,r17,r6
 800d85c:	88c9803a 	cmpltu	r4,r17,r3
 800d860:	4245c83a 	sub	r2,r8,r9
 800d864:	1105c83a 	sub	r2,r2,r4
 800d868:	1100202c 	andhi	r4,r2,128
 800d86c:	203ebb26 	beq	r4,zero,800d35c <__alt_data_end+0xfc00d35c>
 800d870:	3463c83a 	sub	r17,r6,r17
 800d874:	4a07c83a 	sub	r3,r9,r8
 800d878:	344d803a 	cmpltu	r6,r6,r17
 800d87c:	1991c83a 	sub	r8,r3,r6
 800d880:	3825883a 	mov	r18,r7
 800d884:	003e5706 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d888:	4984b03a 	or	r2,r9,r6
 800d88c:	10002e26 	beq	r2,zero,800d948 <__adddf3+0x7e0>
 800d890:	4004d0fa 	srli	r2,r8,3
 800d894:	8822d0fa 	srli	r17,r17,3
 800d898:	4010977a 	slli	r8,r8,29
 800d89c:	10c0022c 	andhi	r3,r2,8
 800d8a0:	4462b03a 	or	r17,r8,r17
 800d8a4:	18000826 	beq	r3,zero,800d8c8 <__adddf3+0x760>
 800d8a8:	4808d0fa 	srli	r4,r9,3
 800d8ac:	20c0022c 	andhi	r3,r4,8
 800d8b0:	1800051e 	bne	r3,zero,800d8c8 <__adddf3+0x760>
 800d8b4:	300cd0fa 	srli	r6,r6,3
 800d8b8:	4806977a 	slli	r3,r9,29
 800d8bc:	2005883a 	mov	r2,r4
 800d8c0:	3825883a 	mov	r18,r7
 800d8c4:	19a2b03a 	or	r17,r3,r6
 800d8c8:	8810d77a 	srli	r8,r17,29
 800d8cc:	100490fa 	slli	r2,r2,3
 800d8d0:	882290fa 	slli	r17,r17,3
 800d8d4:	0401ffc4 	movi	r16,2047
 800d8d8:	4090b03a 	or	r8,r8,r2
 800d8dc:	003e4106 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d8e0:	0141ffc4 	movi	r5,2047
 800d8e4:	117fc71e 	bne	r2,r5,800d804 <__alt_data_end+0xfc00d804>
 800d8e8:	4811883a 	mov	r8,r9
 800d8ec:	3023883a 	mov	r17,r6
 800d8f0:	1021883a 	mov	r16,r2
 800d8f4:	003e3b06 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d8f8:	10002f26 	beq	r2,zero,800d9b8 <__adddf3+0x850>
 800d8fc:	4984b03a 	or	r2,r9,r6
 800d900:	10001126 	beq	r2,zero,800d948 <__adddf3+0x7e0>
 800d904:	4004d0fa 	srli	r2,r8,3
 800d908:	8822d0fa 	srli	r17,r17,3
 800d90c:	4010977a 	slli	r8,r8,29
 800d910:	10c0022c 	andhi	r3,r2,8
 800d914:	4462b03a 	or	r17,r8,r17
 800d918:	183feb26 	beq	r3,zero,800d8c8 <__alt_data_end+0xfc00d8c8>
 800d91c:	4808d0fa 	srli	r4,r9,3
 800d920:	20c0022c 	andhi	r3,r4,8
 800d924:	183fe81e 	bne	r3,zero,800d8c8 <__alt_data_end+0xfc00d8c8>
 800d928:	300cd0fa 	srli	r6,r6,3
 800d92c:	4806977a 	slli	r3,r9,29
 800d930:	2005883a 	mov	r2,r4
 800d934:	19a2b03a 	or	r17,r3,r6
 800d938:	003fe306 	br	800d8c8 <__alt_data_end+0xfc00d8c8>
 800d93c:	0011883a 	mov	r8,zero
 800d940:	0005883a 	mov	r2,zero
 800d944:	003e3f06 	br	800d244 <__alt_data_end+0xfc00d244>
 800d948:	0401ffc4 	movi	r16,2047
 800d94c:	003e2506 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d950:	0013883a 	mov	r9,zero
 800d954:	003f8406 	br	800d768 <__alt_data_end+0xfc00d768>
 800d958:	0005883a 	mov	r2,zero
 800d95c:	0007883a 	mov	r3,zero
 800d960:	003e8906 	br	800d388 <__alt_data_end+0xfc00d388>
 800d964:	197ff804 	addi	r5,r3,-32
 800d968:	01000804 	movi	r4,32
 800d96c:	414ad83a 	srl	r5,r8,r5
 800d970:	19002426 	beq	r3,r4,800da04 <__adddf3+0x89c>
 800d974:	01001004 	movi	r4,64
 800d978:	20c7c83a 	sub	r3,r4,r3
 800d97c:	40c6983a 	sll	r3,r8,r3
 800d980:	1c46b03a 	or	r3,r3,r17
 800d984:	1806c03a 	cmpne	r3,r3,zero
 800d988:	28e2b03a 	or	r17,r5,r3
 800d98c:	0007883a 	mov	r3,zero
 800d990:	003f2306 	br	800d620 <__alt_data_end+0xfc00d620>
 800d994:	0007883a 	mov	r3,zero
 800d998:	5811883a 	mov	r8,r11
 800d99c:	00bfffc4 	movi	r2,-1
 800d9a0:	0401ffc4 	movi	r16,2047
 800d9a4:	003e7806 	br	800d388 <__alt_data_end+0xfc00d388>
 800d9a8:	4462b03a 	or	r17,r8,r17
 800d9ac:	8822c03a 	cmpne	r17,r17,zero
 800d9b0:	0009883a 	mov	r4,zero
 800d9b4:	003fa006 	br	800d838 <__alt_data_end+0xfc00d838>
 800d9b8:	4811883a 	mov	r8,r9
 800d9bc:	3023883a 	mov	r17,r6
 800d9c0:	0401ffc4 	movi	r16,2047
 800d9c4:	003e0706 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d9c8:	4811883a 	mov	r8,r9
 800d9cc:	3023883a 	mov	r17,r6
 800d9d0:	003e0406 	br	800d1e4 <__alt_data_end+0xfc00d1e4>
 800d9d4:	21fff804 	addi	r7,r4,-32
 800d9d8:	01400804 	movi	r5,32
 800d9dc:	41ced83a 	srl	r7,r8,r7
 800d9e0:	21400a26 	beq	r4,r5,800da0c <__adddf3+0x8a4>
 800d9e4:	01401004 	movi	r5,64
 800d9e8:	2909c83a 	sub	r4,r5,r4
 800d9ec:	4108983a 	sll	r4,r8,r4
 800d9f0:	2448b03a 	or	r4,r4,r17
 800d9f4:	2008c03a 	cmpne	r4,r4,zero
 800d9f8:	3922b03a 	or	r17,r7,r4
 800d9fc:	0009883a 	mov	r4,zero
 800da00:	003f8d06 	br	800d838 <__alt_data_end+0xfc00d838>
 800da04:	0007883a 	mov	r3,zero
 800da08:	003fdd06 	br	800d980 <__alt_data_end+0xfc00d980>
 800da0c:	0009883a 	mov	r4,zero
 800da10:	003ff706 	br	800d9f0 <__alt_data_end+0xfc00d9f0>

0800da14 <__divdf3>:
 800da14:	defff004 	addi	sp,sp,-64
 800da18:	dc800815 	stw	r18,32(sp)
 800da1c:	2824d53a 	srli	r18,r5,20
 800da20:	dd800c15 	stw	r22,48(sp)
 800da24:	282cd7fa 	srli	r22,r5,31
 800da28:	dc000615 	stw	r16,24(sp)
 800da2c:	04000434 	movhi	r16,16
 800da30:	843fffc4 	addi	r16,r16,-1
 800da34:	dfc00f15 	stw	ra,60(sp)
 800da38:	df000e15 	stw	fp,56(sp)
 800da3c:	ddc00d15 	stw	r23,52(sp)
 800da40:	dd400b15 	stw	r21,44(sp)
 800da44:	dd000a15 	stw	r20,40(sp)
 800da48:	dcc00915 	stw	r19,36(sp)
 800da4c:	dc400715 	stw	r17,28(sp)
 800da50:	9481ffcc 	andi	r18,r18,2047
 800da54:	2c20703a 	and	r16,r5,r16
 800da58:	b2003fcc 	andi	r8,r22,255
 800da5c:	90006126 	beq	r18,zero,800dbe4 <__divdf3+0x1d0>
 800da60:	0081ffc4 	movi	r2,2047
 800da64:	202b883a 	mov	r21,r4
 800da68:	90803726 	beq	r18,r2,800db48 <__divdf3+0x134>
 800da6c:	80800434 	orhi	r2,r16,16
 800da70:	100490fa 	slli	r2,r2,3
 800da74:	2020d77a 	srli	r16,r4,29
 800da78:	202a90fa 	slli	r21,r4,3
 800da7c:	94bf0044 	addi	r18,r18,-1023
 800da80:	80a0b03a 	or	r16,r16,r2
 800da84:	0013883a 	mov	r9,zero
 800da88:	000b883a 	mov	r5,zero
 800da8c:	3806d53a 	srli	r3,r7,20
 800da90:	382ed7fa 	srli	r23,r7,31
 800da94:	04400434 	movhi	r17,16
 800da98:	8c7fffc4 	addi	r17,r17,-1
 800da9c:	18c1ffcc 	andi	r3,r3,2047
 800daa0:	3029883a 	mov	r20,r6
 800daa4:	3c62703a 	and	r17,r7,r17
 800daa8:	bf003fcc 	andi	fp,r23,255
 800daac:	18006e26 	beq	r3,zero,800dc68 <__divdf3+0x254>
 800dab0:	0081ffc4 	movi	r2,2047
 800dab4:	18806626 	beq	r3,r2,800dc50 <__divdf3+0x23c>
 800dab8:	88800434 	orhi	r2,r17,16
 800dabc:	100490fa 	slli	r2,r2,3
 800dac0:	3022d77a 	srli	r17,r6,29
 800dac4:	302890fa 	slli	r20,r6,3
 800dac8:	18ff0044 	addi	r3,r3,-1023
 800dacc:	88a2b03a 	or	r17,r17,r2
 800dad0:	000f883a 	mov	r7,zero
 800dad4:	b5e6f03a 	xor	r19,r22,r23
 800dad8:	3a4cb03a 	or	r6,r7,r9
 800dadc:	008003c4 	movi	r2,15
 800dae0:	9809883a 	mov	r4,r19
 800dae4:	90c7c83a 	sub	r3,r18,r3
 800dae8:	9cc03fcc 	andi	r19,r19,255
 800daec:	11809636 	bltu	r2,r6,800dd48 <__divdf3+0x334>
 800daf0:	300c90ba 	slli	r6,r6,2
 800daf4:	00820074 	movhi	r2,2049
 800daf8:	10b6c204 	addi	r2,r2,-9464
 800dafc:	308d883a 	add	r6,r6,r2
 800db00:	30800017 	ldw	r2,0(r6)
 800db04:	1000683a 	jmp	r2
 800db08:	0800dd48 	cmpgei	zero,at,885
 800db0c:	0800db80 	call	800db8 <__alt_mem_sdram-0x77ff248>
 800db10:	0800dd38 	rdprs	zero,at,884
 800db14:	0800db74 	orhi	zero,at,877
 800db18:	0800dd38 	rdprs	zero,at,884
 800db1c:	0800dd0c 	andi	zero,at,884
 800db20:	0800dd38 	rdprs	zero,at,884
 800db24:	0800db74 	orhi	zero,at,877
 800db28:	0800db80 	call	800db8 <__alt_mem_sdram-0x77ff248>
 800db2c:	0800db80 	call	800db8 <__alt_mem_sdram-0x77ff248>
 800db30:	0800dd0c 	andi	zero,at,884
 800db34:	0800db74 	orhi	zero,at,877
 800db38:	0800db64 	muli	zero,at,877
 800db3c:	0800db64 	muli	zero,at,877
 800db40:	0800db64 	muli	zero,at,877
 800db44:	0800e0d0 	cmplti	zero,at,899
 800db48:	2404b03a 	or	r2,r4,r16
 800db4c:	10006c1e 	bne	r2,zero,800dd00 <__divdf3+0x2ec>
 800db50:	02400204 	movi	r9,8
 800db54:	0021883a 	mov	r16,zero
 800db58:	002b883a 	mov	r21,zero
 800db5c:	01400084 	movi	r5,2
 800db60:	003fca06 	br	800da8c <__alt_data_end+0xfc00da8c>
 800db64:	8023883a 	mov	r17,r16
 800db68:	a829883a 	mov	r20,r21
 800db6c:	4039883a 	mov	fp,r8
 800db70:	280f883a 	mov	r7,r5
 800db74:	00800084 	movi	r2,2
 800db78:	3881601e 	bne	r7,r2,800e0fc <__divdf3+0x6e8>
 800db7c:	e027883a 	mov	r19,fp
 800db80:	9900004c 	andi	r4,r19,1
 800db84:	0081ffc4 	movi	r2,2047
 800db88:	0021883a 	mov	r16,zero
 800db8c:	002b883a 	mov	r21,zero
 800db90:	1004953a 	slli	r2,r2,20
 800db94:	20c03fcc 	andi	r3,r4,255
 800db98:	01400434 	movhi	r5,16
 800db9c:	297fffc4 	addi	r5,r5,-1
 800dba0:	180697fa 	slli	r3,r3,31
 800dba4:	8160703a 	and	r16,r16,r5
 800dba8:	80a0b03a 	or	r16,r16,r2
 800dbac:	80c6b03a 	or	r3,r16,r3
 800dbb0:	a805883a 	mov	r2,r21
 800dbb4:	dfc00f17 	ldw	ra,60(sp)
 800dbb8:	df000e17 	ldw	fp,56(sp)
 800dbbc:	ddc00d17 	ldw	r23,52(sp)
 800dbc0:	dd800c17 	ldw	r22,48(sp)
 800dbc4:	dd400b17 	ldw	r21,44(sp)
 800dbc8:	dd000a17 	ldw	r20,40(sp)
 800dbcc:	dcc00917 	ldw	r19,36(sp)
 800dbd0:	dc800817 	ldw	r18,32(sp)
 800dbd4:	dc400717 	ldw	r17,28(sp)
 800dbd8:	dc000617 	ldw	r16,24(sp)
 800dbdc:	dec01004 	addi	sp,sp,64
 800dbe0:	f800283a 	ret
 800dbe4:	2404b03a 	or	r2,r4,r16
 800dbe8:	2023883a 	mov	r17,r4
 800dbec:	10003f26 	beq	r2,zero,800dcec <__divdf3+0x2d8>
 800dbf0:	80015e26 	beq	r16,zero,800e16c <__divdf3+0x758>
 800dbf4:	8009883a 	mov	r4,r16
 800dbf8:	d9800215 	stw	r6,8(sp)
 800dbfc:	d9c00515 	stw	r7,20(sp)
 800dc00:	da000415 	stw	r8,16(sp)
 800dc04:	800f9a80 	call	800f9a8 <__clzsi2>
 800dc08:	d9800217 	ldw	r6,8(sp)
 800dc0c:	d9c00517 	ldw	r7,20(sp)
 800dc10:	da000417 	ldw	r8,16(sp)
 800dc14:	113ffd44 	addi	r4,r2,-11
 800dc18:	00c00704 	movi	r3,28
 800dc1c:	19014f16 	blt	r3,r4,800e15c <__divdf3+0x748>
 800dc20:	00c00744 	movi	r3,29
 800dc24:	157ffe04 	addi	r21,r2,-8
 800dc28:	1907c83a 	sub	r3,r3,r4
 800dc2c:	8560983a 	sll	r16,r16,r21
 800dc30:	88c6d83a 	srl	r3,r17,r3
 800dc34:	8d6a983a 	sll	r21,r17,r21
 800dc38:	1c20b03a 	or	r16,r3,r16
 800dc3c:	1080fcc4 	addi	r2,r2,1011
 800dc40:	00a5c83a 	sub	r18,zero,r2
 800dc44:	0013883a 	mov	r9,zero
 800dc48:	000b883a 	mov	r5,zero
 800dc4c:	003f8f06 	br	800da8c <__alt_data_end+0xfc00da8c>
 800dc50:	3444b03a 	or	r2,r6,r17
 800dc54:	1000231e 	bne	r2,zero,800dce4 <__divdf3+0x2d0>
 800dc58:	0023883a 	mov	r17,zero
 800dc5c:	0029883a 	mov	r20,zero
 800dc60:	01c00084 	movi	r7,2
 800dc64:	003f9b06 	br	800dad4 <__alt_data_end+0xfc00dad4>
 800dc68:	3444b03a 	or	r2,r6,r17
 800dc6c:	10001926 	beq	r2,zero,800dcd4 <__divdf3+0x2c0>
 800dc70:	88014b26 	beq	r17,zero,800e1a0 <__divdf3+0x78c>
 800dc74:	8809883a 	mov	r4,r17
 800dc78:	d9400115 	stw	r5,4(sp)
 800dc7c:	d9800215 	stw	r6,8(sp)
 800dc80:	da000415 	stw	r8,16(sp)
 800dc84:	da400315 	stw	r9,12(sp)
 800dc88:	800f9a80 	call	800f9a8 <__clzsi2>
 800dc8c:	d9400117 	ldw	r5,4(sp)
 800dc90:	d9800217 	ldw	r6,8(sp)
 800dc94:	da000417 	ldw	r8,16(sp)
 800dc98:	da400317 	ldw	r9,12(sp)
 800dc9c:	113ffd44 	addi	r4,r2,-11
 800dca0:	00c00704 	movi	r3,28
 800dca4:	19013a16 	blt	r3,r4,800e190 <__divdf3+0x77c>
 800dca8:	00c00744 	movi	r3,29
 800dcac:	153ffe04 	addi	r20,r2,-8
 800dcb0:	1907c83a 	sub	r3,r3,r4
 800dcb4:	8d22983a 	sll	r17,r17,r20
 800dcb8:	30c6d83a 	srl	r3,r6,r3
 800dcbc:	3528983a 	sll	r20,r6,r20
 800dcc0:	1c62b03a 	or	r17,r3,r17
 800dcc4:	1080fcc4 	addi	r2,r2,1011
 800dcc8:	0087c83a 	sub	r3,zero,r2
 800dccc:	000f883a 	mov	r7,zero
 800dcd0:	003f8006 	br	800dad4 <__alt_data_end+0xfc00dad4>
 800dcd4:	0023883a 	mov	r17,zero
 800dcd8:	0029883a 	mov	r20,zero
 800dcdc:	01c00044 	movi	r7,1
 800dce0:	003f7c06 	br	800dad4 <__alt_data_end+0xfc00dad4>
 800dce4:	01c000c4 	movi	r7,3
 800dce8:	003f7a06 	br	800dad4 <__alt_data_end+0xfc00dad4>
 800dcec:	02400104 	movi	r9,4
 800dcf0:	0021883a 	mov	r16,zero
 800dcf4:	002b883a 	mov	r21,zero
 800dcf8:	01400044 	movi	r5,1
 800dcfc:	003f6306 	br	800da8c <__alt_data_end+0xfc00da8c>
 800dd00:	02400304 	movi	r9,12
 800dd04:	014000c4 	movi	r5,3
 800dd08:	003f6006 	br	800da8c <__alt_data_end+0xfc00da8c>
 800dd0c:	04000434 	movhi	r16,16
 800dd10:	0009883a 	mov	r4,zero
 800dd14:	843fffc4 	addi	r16,r16,-1
 800dd18:	057fffc4 	movi	r21,-1
 800dd1c:	0081ffc4 	movi	r2,2047
 800dd20:	003f9b06 	br	800db90 <__alt_data_end+0xfc00db90>
 800dd24:	00c00044 	movi	r3,1
 800dd28:	1887c83a 	sub	r3,r3,r2
 800dd2c:	01000e04 	movi	r4,56
 800dd30:	20c1530e 	bge	r4,r3,800e280 <__divdf3+0x86c>
 800dd34:	9900004c 	andi	r4,r19,1
 800dd38:	0005883a 	mov	r2,zero
 800dd3c:	0021883a 	mov	r16,zero
 800dd40:	002b883a 	mov	r21,zero
 800dd44:	003f9206 	br	800db90 <__alt_data_end+0xfc00db90>
 800dd48:	8c012e36 	bltu	r17,r16,800e204 <__divdf3+0x7f0>
 800dd4c:	84412c26 	beq	r16,r17,800e200 <__divdf3+0x7ec>
 800dd50:	a82f883a 	mov	r23,r21
 800dd54:	18ffffc4 	addi	r3,r3,-1
 800dd58:	002b883a 	mov	r21,zero
 800dd5c:	a004d63a 	srli	r2,r20,24
 800dd60:	8822923a 	slli	r17,r17,8
 800dd64:	a028923a 	slli	r20,r20,8
 800dd68:	8009883a 	mov	r4,r16
 800dd6c:	88acb03a 	or	r22,r17,r2
 800dd70:	dd000015 	stw	r20,0(sp)
 800dd74:	b028d43a 	srli	r20,r22,16
 800dd78:	d8c00215 	stw	r3,8(sp)
 800dd7c:	b4bfffcc 	andi	r18,r22,65535
 800dd80:	a00b883a 	mov	r5,r20
 800dd84:	8002a3c0 	call	8002a3c <__udivsi3>
 800dd88:	100b883a 	mov	r5,r2
 800dd8c:	9009883a 	mov	r4,r18
 800dd90:	1023883a 	mov	r17,r2
 800dd94:	8002af80 	call	8002af8 <__mulsi3>
 800dd98:	8009883a 	mov	r4,r16
 800dd9c:	a00b883a 	mov	r5,r20
 800dda0:	1039883a 	mov	fp,r2
 800dda4:	8002aa00 	call	8002aa0 <__umodsi3>
 800dda8:	1004943a 	slli	r2,r2,16
 800ddac:	b808d43a 	srli	r4,r23,16
 800ddb0:	d8c00217 	ldw	r3,8(sp)
 800ddb4:	2084b03a 	or	r2,r4,r2
 800ddb8:	1700062e 	bgeu	r2,fp,800ddd4 <__divdf3+0x3c0>
 800ddbc:	1585883a 	add	r2,r2,r22
 800ddc0:	893fffc4 	addi	r4,r17,-1
 800ddc4:	15811d36 	bltu	r2,r22,800e23c <__divdf3+0x828>
 800ddc8:	17011c2e 	bgeu	r2,fp,800e23c <__divdf3+0x828>
 800ddcc:	8c7fff84 	addi	r17,r17,-2
 800ddd0:	1585883a 	add	r2,r2,r22
 800ddd4:	1739c83a 	sub	fp,r2,fp
 800ddd8:	a00b883a 	mov	r5,r20
 800dddc:	e009883a 	mov	r4,fp
 800dde0:	d8c00215 	stw	r3,8(sp)
 800dde4:	8002a3c0 	call	8002a3c <__udivsi3>
 800dde8:	100b883a 	mov	r5,r2
 800ddec:	9009883a 	mov	r4,r18
 800ddf0:	1021883a 	mov	r16,r2
 800ddf4:	8002af80 	call	8002af8 <__mulsi3>
 800ddf8:	a00b883a 	mov	r5,r20
 800ddfc:	e009883a 	mov	r4,fp
 800de00:	d8800415 	stw	r2,16(sp)
 800de04:	8002aa00 	call	8002aa0 <__umodsi3>
 800de08:	1004943a 	slli	r2,r2,16
 800de0c:	da000417 	ldw	r8,16(sp)
 800de10:	bdffffcc 	andi	r23,r23,65535
 800de14:	b884b03a 	or	r2,r23,r2
 800de18:	d8c00217 	ldw	r3,8(sp)
 800de1c:	1200062e 	bgeu	r2,r8,800de38 <__divdf3+0x424>
 800de20:	1585883a 	add	r2,r2,r22
 800de24:	813fffc4 	addi	r4,r16,-1
 800de28:	15810236 	bltu	r2,r22,800e234 <__divdf3+0x820>
 800de2c:	1201012e 	bgeu	r2,r8,800e234 <__divdf3+0x820>
 800de30:	843fff84 	addi	r16,r16,-2
 800de34:	1585883a 	add	r2,r2,r22
 800de38:	8822943a 	slli	r17,r17,16
 800de3c:	d9800017 	ldw	r6,0(sp)
 800de40:	1211c83a 	sub	r8,r2,r8
 800de44:	8c22b03a 	or	r17,r17,r16
 800de48:	373fffcc 	andi	fp,r6,65535
 800de4c:	8abfffcc 	andi	r10,r17,65535
 800de50:	8820d43a 	srli	r16,r17,16
 800de54:	5009883a 	mov	r4,r10
 800de58:	e00b883a 	mov	r5,fp
 800de5c:	302ed43a 	srli	r23,r6,16
 800de60:	d8c00215 	stw	r3,8(sp)
 800de64:	da000415 	stw	r8,16(sp)
 800de68:	da800115 	stw	r10,4(sp)
 800de6c:	8002af80 	call	8002af8 <__mulsi3>
 800de70:	800b883a 	mov	r5,r16
 800de74:	e009883a 	mov	r4,fp
 800de78:	d8800515 	stw	r2,20(sp)
 800de7c:	8002af80 	call	8002af8 <__mulsi3>
 800de80:	8009883a 	mov	r4,r16
 800de84:	b80b883a 	mov	r5,r23
 800de88:	d8800315 	stw	r2,12(sp)
 800de8c:	8002af80 	call	8002af8 <__mulsi3>
 800de90:	da800117 	ldw	r10,4(sp)
 800de94:	b80b883a 	mov	r5,r23
 800de98:	1021883a 	mov	r16,r2
 800de9c:	5009883a 	mov	r4,r10
 800dea0:	8002af80 	call	8002af8 <__mulsi3>
 800dea4:	d9c00517 	ldw	r7,20(sp)
 800dea8:	da400317 	ldw	r9,12(sp)
 800deac:	d8c00217 	ldw	r3,8(sp)
 800deb0:	3808d43a 	srli	r4,r7,16
 800deb4:	1245883a 	add	r2,r2,r9
 800deb8:	da000417 	ldw	r8,16(sp)
 800debc:	2085883a 	add	r2,r4,r2
 800dec0:	1240022e 	bgeu	r2,r9,800decc <__divdf3+0x4b8>
 800dec4:	01000074 	movhi	r4,1
 800dec8:	8121883a 	add	r16,r16,r4
 800decc:	1008d43a 	srli	r4,r2,16
 800ded0:	1004943a 	slli	r2,r2,16
 800ded4:	39ffffcc 	andi	r7,r7,65535
 800ded8:	2409883a 	add	r4,r4,r16
 800dedc:	11c5883a 	add	r2,r2,r7
 800dee0:	4100bb36 	bltu	r8,r4,800e1d0 <__divdf3+0x7bc>
 800dee4:	4100d726 	beq	r8,r4,800e244 <__divdf3+0x830>
 800dee8:	4109c83a 	sub	r4,r8,r4
 800deec:	a8a1c83a 	sub	r16,r21,r2
 800def0:	ac2b803a 	cmpltu	r21,r21,r16
 800def4:	256bc83a 	sub	r21,r4,r21
 800def8:	b540d926 	beq	r22,r21,800e260 <__divdf3+0x84c>
 800defc:	a00b883a 	mov	r5,r20
 800df00:	a809883a 	mov	r4,r21
 800df04:	d8c00215 	stw	r3,8(sp)
 800df08:	8002a3c0 	call	8002a3c <__udivsi3>
 800df0c:	100b883a 	mov	r5,r2
 800df10:	9009883a 	mov	r4,r18
 800df14:	d8800515 	stw	r2,20(sp)
 800df18:	8002af80 	call	8002af8 <__mulsi3>
 800df1c:	a809883a 	mov	r4,r21
 800df20:	a00b883a 	mov	r5,r20
 800df24:	d8800415 	stw	r2,16(sp)
 800df28:	8002aa00 	call	8002aa0 <__umodsi3>
 800df2c:	1004943a 	slli	r2,r2,16
 800df30:	8008d43a 	srli	r4,r16,16
 800df34:	da000417 	ldw	r8,16(sp)
 800df38:	d8c00217 	ldw	r3,8(sp)
 800df3c:	2084b03a 	or	r2,r4,r2
 800df40:	d9c00517 	ldw	r7,20(sp)
 800df44:	1200062e 	bgeu	r2,r8,800df60 <__divdf3+0x54c>
 800df48:	1585883a 	add	r2,r2,r22
 800df4c:	393fffc4 	addi	r4,r7,-1
 800df50:	1580c536 	bltu	r2,r22,800e268 <__divdf3+0x854>
 800df54:	1200c42e 	bgeu	r2,r8,800e268 <__divdf3+0x854>
 800df58:	39ffff84 	addi	r7,r7,-2
 800df5c:	1585883a 	add	r2,r2,r22
 800df60:	122bc83a 	sub	r21,r2,r8
 800df64:	a00b883a 	mov	r5,r20
 800df68:	a809883a 	mov	r4,r21
 800df6c:	d8c00215 	stw	r3,8(sp)
 800df70:	d9c00515 	stw	r7,20(sp)
 800df74:	8002a3c0 	call	8002a3c <__udivsi3>
 800df78:	9009883a 	mov	r4,r18
 800df7c:	100b883a 	mov	r5,r2
 800df80:	d8800415 	stw	r2,16(sp)
 800df84:	8002af80 	call	8002af8 <__mulsi3>
 800df88:	a809883a 	mov	r4,r21
 800df8c:	a00b883a 	mov	r5,r20
 800df90:	1025883a 	mov	r18,r2
 800df94:	8002aa00 	call	8002aa0 <__umodsi3>
 800df98:	1004943a 	slli	r2,r2,16
 800df9c:	813fffcc 	andi	r4,r16,65535
 800dfa0:	d8c00217 	ldw	r3,8(sp)
 800dfa4:	20a0b03a 	or	r16,r4,r2
 800dfa8:	d9c00517 	ldw	r7,20(sp)
 800dfac:	da000417 	ldw	r8,16(sp)
 800dfb0:	8480062e 	bgeu	r16,r18,800dfcc <__divdf3+0x5b8>
 800dfb4:	85a1883a 	add	r16,r16,r22
 800dfb8:	40bfffc4 	addi	r2,r8,-1
 800dfbc:	8580ac36 	bltu	r16,r22,800e270 <__divdf3+0x85c>
 800dfc0:	8480ab2e 	bgeu	r16,r18,800e270 <__divdf3+0x85c>
 800dfc4:	423fff84 	addi	r8,r8,-2
 800dfc8:	85a1883a 	add	r16,r16,r22
 800dfcc:	3804943a 	slli	r2,r7,16
 800dfd0:	84a1c83a 	sub	r16,r16,r18
 800dfd4:	e009883a 	mov	r4,fp
 800dfd8:	1228b03a 	or	r20,r2,r8
 800dfdc:	a1ffffcc 	andi	r7,r20,65535
 800dfe0:	a024d43a 	srli	r18,r20,16
 800dfe4:	380b883a 	mov	r5,r7
 800dfe8:	d8c00215 	stw	r3,8(sp)
 800dfec:	d9c00515 	stw	r7,20(sp)
 800dff0:	8002af80 	call	8002af8 <__mulsi3>
 800dff4:	900b883a 	mov	r5,r18
 800dff8:	e009883a 	mov	r4,fp
 800dffc:	102b883a 	mov	r21,r2
 800e000:	8002af80 	call	8002af8 <__mulsi3>
 800e004:	900b883a 	mov	r5,r18
 800e008:	b809883a 	mov	r4,r23
 800e00c:	1039883a 	mov	fp,r2
 800e010:	8002af80 	call	8002af8 <__mulsi3>
 800e014:	d9c00517 	ldw	r7,20(sp)
 800e018:	b80b883a 	mov	r5,r23
 800e01c:	1025883a 	mov	r18,r2
 800e020:	3809883a 	mov	r4,r7
 800e024:	8002af80 	call	8002af8 <__mulsi3>
 800e028:	a808d43a 	srli	r4,r21,16
 800e02c:	1705883a 	add	r2,r2,fp
 800e030:	d8c00217 	ldw	r3,8(sp)
 800e034:	2085883a 	add	r2,r4,r2
 800e038:	1700022e 	bgeu	r2,fp,800e044 <__divdf3+0x630>
 800e03c:	01000074 	movhi	r4,1
 800e040:	9125883a 	add	r18,r18,r4
 800e044:	1008d43a 	srli	r4,r2,16
 800e048:	1004943a 	slli	r2,r2,16
 800e04c:	ad7fffcc 	andi	r21,r21,65535
 800e050:	2489883a 	add	r4,r4,r18
 800e054:	1545883a 	add	r2,r2,r21
 800e058:	81003836 	bltu	r16,r4,800e13c <__divdf3+0x728>
 800e05c:	81003626 	beq	r16,r4,800e138 <__divdf3+0x724>
 800e060:	a5000054 	ori	r20,r20,1
 800e064:	1880ffc4 	addi	r2,r3,1023
 800e068:	00bf2e0e 	bge	zero,r2,800dd24 <__alt_data_end+0xfc00dd24>
 800e06c:	a10001cc 	andi	r4,r20,7
 800e070:	20000726 	beq	r4,zero,800e090 <__divdf3+0x67c>
 800e074:	a10003cc 	andi	r4,r20,15
 800e078:	01400104 	movi	r5,4
 800e07c:	21400426 	beq	r4,r5,800e090 <__divdf3+0x67c>
 800e080:	a149883a 	add	r4,r20,r5
 800e084:	2529803a 	cmpltu	r20,r4,r20
 800e088:	8d23883a 	add	r17,r17,r20
 800e08c:	2029883a 	mov	r20,r4
 800e090:	8900402c 	andhi	r4,r17,256
 800e094:	20000426 	beq	r4,zero,800e0a8 <__divdf3+0x694>
 800e098:	18810004 	addi	r2,r3,1024
 800e09c:	00ffc034 	movhi	r3,65280
 800e0a0:	18ffffc4 	addi	r3,r3,-1
 800e0a4:	88e2703a 	and	r17,r17,r3
 800e0a8:	00c1ff84 	movi	r3,2046
 800e0ac:	18beb416 	blt	r3,r2,800db80 <__alt_data_end+0xfc00db80>
 800e0b0:	a028d0fa 	srli	r20,r20,3
 800e0b4:	882a977a 	slli	r21,r17,29
 800e0b8:	8820927a 	slli	r16,r17,9
 800e0bc:	1081ffcc 	andi	r2,r2,2047
 800e0c0:	ad2ab03a 	or	r21,r21,r20
 800e0c4:	8020d33a 	srli	r16,r16,12
 800e0c8:	9900004c 	andi	r4,r19,1
 800e0cc:	003eb006 	br	800db90 <__alt_data_end+0xfc00db90>
 800e0d0:	8080022c 	andhi	r2,r16,8
 800e0d4:	10001226 	beq	r2,zero,800e120 <__divdf3+0x70c>
 800e0d8:	8880022c 	andhi	r2,r17,8
 800e0dc:	1000101e 	bne	r2,zero,800e120 <__divdf3+0x70c>
 800e0e0:	00800434 	movhi	r2,16
 800e0e4:	8c000234 	orhi	r16,r17,8
 800e0e8:	10bfffc4 	addi	r2,r2,-1
 800e0ec:	b809883a 	mov	r4,r23
 800e0f0:	80a0703a 	and	r16,r16,r2
 800e0f4:	a02b883a 	mov	r21,r20
 800e0f8:	003f0806 	br	800dd1c <__alt_data_end+0xfc00dd1c>
 800e0fc:	008000c4 	movi	r2,3
 800e100:	3880b126 	beq	r7,r2,800e3c8 <__divdf3+0x9b4>
 800e104:	00800044 	movi	r2,1
 800e108:	38805b1e 	bne	r7,r2,800e278 <__divdf3+0x864>
 800e10c:	e009883a 	mov	r4,fp
 800e110:	0005883a 	mov	r2,zero
 800e114:	0021883a 	mov	r16,zero
 800e118:	002b883a 	mov	r21,zero
 800e11c:	003e9c06 	br	800db90 <__alt_data_end+0xfc00db90>
 800e120:	00800434 	movhi	r2,16
 800e124:	84000234 	orhi	r16,r16,8
 800e128:	10bfffc4 	addi	r2,r2,-1
 800e12c:	b009883a 	mov	r4,r22
 800e130:	80a0703a 	and	r16,r16,r2
 800e134:	003ef906 	br	800dd1c <__alt_data_end+0xfc00dd1c>
 800e138:	103fca26 	beq	r2,zero,800e064 <__alt_data_end+0xfc00e064>
 800e13c:	b421883a 	add	r16,r22,r16
 800e140:	a17fffc4 	addi	r5,r20,-1
 800e144:	8580422e 	bgeu	r16,r22,800e250 <__divdf3+0x83c>
 800e148:	2829883a 	mov	r20,r5
 800e14c:	813fc41e 	bne	r16,r4,800e060 <__alt_data_end+0xfc00e060>
 800e150:	d9800017 	ldw	r6,0(sp)
 800e154:	30bfc21e 	bne	r6,r2,800e060 <__alt_data_end+0xfc00e060>
 800e158:	003fc206 	br	800e064 <__alt_data_end+0xfc00e064>
 800e15c:	143ff604 	addi	r16,r2,-40
 800e160:	8c20983a 	sll	r16,r17,r16
 800e164:	002b883a 	mov	r21,zero
 800e168:	003eb406 	br	800dc3c <__alt_data_end+0xfc00dc3c>
 800e16c:	d9800215 	stw	r6,8(sp)
 800e170:	d9c00515 	stw	r7,20(sp)
 800e174:	da000415 	stw	r8,16(sp)
 800e178:	800f9a80 	call	800f9a8 <__clzsi2>
 800e17c:	10800804 	addi	r2,r2,32
 800e180:	da000417 	ldw	r8,16(sp)
 800e184:	d9c00517 	ldw	r7,20(sp)
 800e188:	d9800217 	ldw	r6,8(sp)
 800e18c:	003ea106 	br	800dc14 <__alt_data_end+0xfc00dc14>
 800e190:	147ff604 	addi	r17,r2,-40
 800e194:	3462983a 	sll	r17,r6,r17
 800e198:	0029883a 	mov	r20,zero
 800e19c:	003ec906 	br	800dcc4 <__alt_data_end+0xfc00dcc4>
 800e1a0:	3009883a 	mov	r4,r6
 800e1a4:	d9400115 	stw	r5,4(sp)
 800e1a8:	d9800215 	stw	r6,8(sp)
 800e1ac:	da000415 	stw	r8,16(sp)
 800e1b0:	da400315 	stw	r9,12(sp)
 800e1b4:	800f9a80 	call	800f9a8 <__clzsi2>
 800e1b8:	10800804 	addi	r2,r2,32
 800e1bc:	da400317 	ldw	r9,12(sp)
 800e1c0:	da000417 	ldw	r8,16(sp)
 800e1c4:	d9800217 	ldw	r6,8(sp)
 800e1c8:	d9400117 	ldw	r5,4(sp)
 800e1cc:	003eb306 	br	800dc9c <__alt_data_end+0xfc00dc9c>
 800e1d0:	d9800017 	ldw	r6,0(sp)
 800e1d4:	a9ab883a 	add	r21,r21,r6
 800e1d8:	a98b803a 	cmpltu	r5,r21,r6
 800e1dc:	2d8b883a 	add	r5,r5,r22
 800e1e0:	2a11883a 	add	r8,r5,r8
 800e1e4:	897fffc4 	addi	r5,r17,-1
 800e1e8:	b2000c2e 	bgeu	r22,r8,800e21c <__divdf3+0x808>
 800e1ec:	41003f36 	bltu	r8,r4,800e2ec <__divdf3+0x8d8>
 800e1f0:	22006c26 	beq	r4,r8,800e3a4 <__divdf3+0x990>
 800e1f4:	4109c83a 	sub	r4,r8,r4
 800e1f8:	2823883a 	mov	r17,r5
 800e1fc:	003f3b06 	br	800deec <__alt_data_end+0xfc00deec>
 800e200:	ad3ed336 	bltu	r21,r20,800dd50 <__alt_data_end+0xfc00dd50>
 800e204:	a804d07a 	srli	r2,r21,1
 800e208:	802e97fa 	slli	r23,r16,31
 800e20c:	a82a97fa 	slli	r21,r21,31
 800e210:	8020d07a 	srli	r16,r16,1
 800e214:	b8aeb03a 	or	r23,r23,r2
 800e218:	003ed006 	br	800dd5c <__alt_data_end+0xfc00dd5c>
 800e21c:	b23ff51e 	bne	r22,r8,800e1f4 <__alt_data_end+0xfc00e1f4>
 800e220:	d9800017 	ldw	r6,0(sp)
 800e224:	a9bff12e 	bgeu	r21,r6,800e1ec <__alt_data_end+0xfc00e1ec>
 800e228:	b109c83a 	sub	r4,r22,r4
 800e22c:	2823883a 	mov	r17,r5
 800e230:	003f2e06 	br	800deec <__alt_data_end+0xfc00deec>
 800e234:	2021883a 	mov	r16,r4
 800e238:	003eff06 	br	800de38 <__alt_data_end+0xfc00de38>
 800e23c:	2023883a 	mov	r17,r4
 800e240:	003ee406 	br	800ddd4 <__alt_data_end+0xfc00ddd4>
 800e244:	a8bfe236 	bltu	r21,r2,800e1d0 <__alt_data_end+0xfc00e1d0>
 800e248:	0009883a 	mov	r4,zero
 800e24c:	003f2706 	br	800deec <__alt_data_end+0xfc00deec>
 800e250:	81002d36 	bltu	r16,r4,800e308 <__divdf3+0x8f4>
 800e254:	24005626 	beq	r4,r16,800e3b0 <__divdf3+0x99c>
 800e258:	2829883a 	mov	r20,r5
 800e25c:	003f8006 	br	800e060 <__alt_data_end+0xfc00e060>
 800e260:	053fffc4 	movi	r20,-1
 800e264:	003f7f06 	br	800e064 <__alt_data_end+0xfc00e064>
 800e268:	200f883a 	mov	r7,r4
 800e26c:	003f3c06 	br	800df60 <__alt_data_end+0xfc00df60>
 800e270:	1011883a 	mov	r8,r2
 800e274:	003f5506 	br	800dfcc <__alt_data_end+0xfc00dfcc>
 800e278:	e027883a 	mov	r19,fp
 800e27c:	003f7906 	br	800e064 <__alt_data_end+0xfc00e064>
 800e280:	010007c4 	movi	r4,31
 800e284:	20c02816 	blt	r4,r3,800e328 <__divdf3+0x914>
 800e288:	00800804 	movi	r2,32
 800e28c:	10c5c83a 	sub	r2,r2,r3
 800e290:	888a983a 	sll	r5,r17,r2
 800e294:	a0c8d83a 	srl	r4,r20,r3
 800e298:	a084983a 	sll	r2,r20,r2
 800e29c:	88e2d83a 	srl	r17,r17,r3
 800e2a0:	2906b03a 	or	r3,r5,r4
 800e2a4:	1004c03a 	cmpne	r2,r2,zero
 800e2a8:	1886b03a 	or	r3,r3,r2
 800e2ac:	188001cc 	andi	r2,r3,7
 800e2b0:	10000726 	beq	r2,zero,800e2d0 <__divdf3+0x8bc>
 800e2b4:	188003cc 	andi	r2,r3,15
 800e2b8:	01000104 	movi	r4,4
 800e2bc:	11000426 	beq	r2,r4,800e2d0 <__divdf3+0x8bc>
 800e2c0:	1805883a 	mov	r2,r3
 800e2c4:	10c00104 	addi	r3,r2,4
 800e2c8:	1885803a 	cmpltu	r2,r3,r2
 800e2cc:	88a3883a 	add	r17,r17,r2
 800e2d0:	8880202c 	andhi	r2,r17,128
 800e2d4:	10002926 	beq	r2,zero,800e37c <__divdf3+0x968>
 800e2d8:	9900004c 	andi	r4,r19,1
 800e2dc:	00800044 	movi	r2,1
 800e2e0:	0021883a 	mov	r16,zero
 800e2e4:	002b883a 	mov	r21,zero
 800e2e8:	003e2906 	br	800db90 <__alt_data_end+0xfc00db90>
 800e2ec:	d9800017 	ldw	r6,0(sp)
 800e2f0:	8c7fff84 	addi	r17,r17,-2
 800e2f4:	a9ab883a 	add	r21,r21,r6
 800e2f8:	a98b803a 	cmpltu	r5,r21,r6
 800e2fc:	2d8b883a 	add	r5,r5,r22
 800e300:	2a11883a 	add	r8,r5,r8
 800e304:	003ef806 	br	800dee8 <__alt_data_end+0xfc00dee8>
 800e308:	d9800017 	ldw	r6,0(sp)
 800e30c:	318f883a 	add	r7,r6,r6
 800e310:	398b803a 	cmpltu	r5,r7,r6
 800e314:	2d8d883a 	add	r6,r5,r22
 800e318:	81a1883a 	add	r16,r16,r6
 800e31c:	a17fff84 	addi	r5,r20,-2
 800e320:	d9c00015 	stw	r7,0(sp)
 800e324:	003f8806 	br	800e148 <__alt_data_end+0xfc00e148>
 800e328:	013ff844 	movi	r4,-31
 800e32c:	2085c83a 	sub	r2,r4,r2
 800e330:	8888d83a 	srl	r4,r17,r2
 800e334:	00800804 	movi	r2,32
 800e338:	18802126 	beq	r3,r2,800e3c0 <__divdf3+0x9ac>
 800e33c:	04001004 	movi	r16,64
 800e340:	80c7c83a 	sub	r3,r16,r3
 800e344:	88e0983a 	sll	r16,r17,r3
 800e348:	8504b03a 	or	r2,r16,r20
 800e34c:	1004c03a 	cmpne	r2,r2,zero
 800e350:	2084b03a 	or	r2,r4,r2
 800e354:	144001cc 	andi	r17,r2,7
 800e358:	88000d1e 	bne	r17,zero,800e390 <__divdf3+0x97c>
 800e35c:	0021883a 	mov	r16,zero
 800e360:	102ad0fa 	srli	r21,r2,3
 800e364:	9900004c 	andi	r4,r19,1
 800e368:	0005883a 	mov	r2,zero
 800e36c:	ac6ab03a 	or	r21,r21,r17
 800e370:	003e0706 	br	800db90 <__alt_data_end+0xfc00db90>
 800e374:	1007883a 	mov	r3,r2
 800e378:	0023883a 	mov	r17,zero
 800e37c:	8820927a 	slli	r16,r17,9
 800e380:	1805883a 	mov	r2,r3
 800e384:	8822977a 	slli	r17,r17,29
 800e388:	8020d33a 	srli	r16,r16,12
 800e38c:	003ff406 	br	800e360 <__alt_data_end+0xfc00e360>
 800e390:	10c003cc 	andi	r3,r2,15
 800e394:	01000104 	movi	r4,4
 800e398:	193ff626 	beq	r3,r4,800e374 <__alt_data_end+0xfc00e374>
 800e39c:	0023883a 	mov	r17,zero
 800e3a0:	003fc806 	br	800e2c4 <__alt_data_end+0xfc00e2c4>
 800e3a4:	a8bfd136 	bltu	r21,r2,800e2ec <__alt_data_end+0xfc00e2ec>
 800e3a8:	2823883a 	mov	r17,r5
 800e3ac:	003fa606 	br	800e248 <__alt_data_end+0xfc00e248>
 800e3b0:	d9800017 	ldw	r6,0(sp)
 800e3b4:	30bfd436 	bltu	r6,r2,800e308 <__alt_data_end+0xfc00e308>
 800e3b8:	2829883a 	mov	r20,r5
 800e3bc:	003f6406 	br	800e150 <__alt_data_end+0xfc00e150>
 800e3c0:	0021883a 	mov	r16,zero
 800e3c4:	003fe006 	br	800e348 <__alt_data_end+0xfc00e348>
 800e3c8:	00800434 	movhi	r2,16
 800e3cc:	8c000234 	orhi	r16,r17,8
 800e3d0:	10bfffc4 	addi	r2,r2,-1
 800e3d4:	e009883a 	mov	r4,fp
 800e3d8:	80a0703a 	and	r16,r16,r2
 800e3dc:	a02b883a 	mov	r21,r20
 800e3e0:	003e4e06 	br	800dd1c <__alt_data_end+0xfc00dd1c>

0800e3e4 <__eqdf2>:
 800e3e4:	2804d53a 	srli	r2,r5,20
 800e3e8:	3806d53a 	srli	r3,r7,20
 800e3ec:	02000434 	movhi	r8,16
 800e3f0:	423fffc4 	addi	r8,r8,-1
 800e3f4:	1081ffcc 	andi	r2,r2,2047
 800e3f8:	0281ffc4 	movi	r10,2047
 800e3fc:	2a12703a 	and	r9,r5,r8
 800e400:	18c1ffcc 	andi	r3,r3,2047
 800e404:	3a10703a 	and	r8,r7,r8
 800e408:	280ad7fa 	srli	r5,r5,31
 800e40c:	380ed7fa 	srli	r7,r7,31
 800e410:	12801026 	beq	r2,r10,800e454 <__eqdf2+0x70>
 800e414:	0281ffc4 	movi	r10,2047
 800e418:	1a800a26 	beq	r3,r10,800e444 <__eqdf2+0x60>
 800e41c:	10c00226 	beq	r2,r3,800e428 <__eqdf2+0x44>
 800e420:	00800044 	movi	r2,1
 800e424:	f800283a 	ret
 800e428:	4a3ffd1e 	bne	r9,r8,800e420 <__alt_data_end+0xfc00e420>
 800e42c:	21bffc1e 	bne	r4,r6,800e420 <__alt_data_end+0xfc00e420>
 800e430:	29c00c26 	beq	r5,r7,800e464 <__eqdf2+0x80>
 800e434:	103ffa1e 	bne	r2,zero,800e420 <__alt_data_end+0xfc00e420>
 800e438:	2244b03a 	or	r2,r4,r9
 800e43c:	1004c03a 	cmpne	r2,r2,zero
 800e440:	f800283a 	ret
 800e444:	3214b03a 	or	r10,r6,r8
 800e448:	503ff426 	beq	r10,zero,800e41c <__alt_data_end+0xfc00e41c>
 800e44c:	00800044 	movi	r2,1
 800e450:	f800283a 	ret
 800e454:	2254b03a 	or	r10,r4,r9
 800e458:	503fee26 	beq	r10,zero,800e414 <__alt_data_end+0xfc00e414>
 800e45c:	00800044 	movi	r2,1
 800e460:	f800283a 	ret
 800e464:	0005883a 	mov	r2,zero
 800e468:	f800283a 	ret

0800e46c <__gedf2>:
 800e46c:	2804d53a 	srli	r2,r5,20
 800e470:	3806d53a 	srli	r3,r7,20
 800e474:	02000434 	movhi	r8,16
 800e478:	423fffc4 	addi	r8,r8,-1
 800e47c:	1081ffcc 	andi	r2,r2,2047
 800e480:	0241ffc4 	movi	r9,2047
 800e484:	2a14703a 	and	r10,r5,r8
 800e488:	18c1ffcc 	andi	r3,r3,2047
 800e48c:	3a10703a 	and	r8,r7,r8
 800e490:	280ad7fa 	srli	r5,r5,31
 800e494:	380ed7fa 	srli	r7,r7,31
 800e498:	12401d26 	beq	r2,r9,800e510 <__gedf2+0xa4>
 800e49c:	0241ffc4 	movi	r9,2047
 800e4a0:	1a401226 	beq	r3,r9,800e4ec <__gedf2+0x80>
 800e4a4:	1000081e 	bne	r2,zero,800e4c8 <__gedf2+0x5c>
 800e4a8:	2296b03a 	or	r11,r4,r10
 800e4ac:	5813003a 	cmpeq	r9,r11,zero
 800e4b0:	1800091e 	bne	r3,zero,800e4d8 <__gedf2+0x6c>
 800e4b4:	3218b03a 	or	r12,r6,r8
 800e4b8:	6000071e 	bne	r12,zero,800e4d8 <__gedf2+0x6c>
 800e4bc:	0005883a 	mov	r2,zero
 800e4c0:	5800101e 	bne	r11,zero,800e504 <__gedf2+0x98>
 800e4c4:	f800283a 	ret
 800e4c8:	18000c1e 	bne	r3,zero,800e4fc <__gedf2+0x90>
 800e4cc:	3212b03a 	or	r9,r6,r8
 800e4d0:	48000c26 	beq	r9,zero,800e504 <__gedf2+0x98>
 800e4d4:	0013883a 	mov	r9,zero
 800e4d8:	39c03fcc 	andi	r7,r7,255
 800e4dc:	48000826 	beq	r9,zero,800e500 <__gedf2+0x94>
 800e4e0:	38000926 	beq	r7,zero,800e508 <__gedf2+0x9c>
 800e4e4:	00800044 	movi	r2,1
 800e4e8:	f800283a 	ret
 800e4ec:	3212b03a 	or	r9,r6,r8
 800e4f0:	483fec26 	beq	r9,zero,800e4a4 <__alt_data_end+0xfc00e4a4>
 800e4f4:	00bfff84 	movi	r2,-2
 800e4f8:	f800283a 	ret
 800e4fc:	39c03fcc 	andi	r7,r7,255
 800e500:	29c00626 	beq	r5,r7,800e51c <__gedf2+0xb0>
 800e504:	283ff726 	beq	r5,zero,800e4e4 <__alt_data_end+0xfc00e4e4>
 800e508:	00bfffc4 	movi	r2,-1
 800e50c:	f800283a 	ret
 800e510:	2292b03a 	or	r9,r4,r10
 800e514:	483fe126 	beq	r9,zero,800e49c <__alt_data_end+0xfc00e49c>
 800e518:	003ff606 	br	800e4f4 <__alt_data_end+0xfc00e4f4>
 800e51c:	18bff916 	blt	r3,r2,800e504 <__alt_data_end+0xfc00e504>
 800e520:	10c00316 	blt	r2,r3,800e530 <__gedf2+0xc4>
 800e524:	42bff736 	bltu	r8,r10,800e504 <__alt_data_end+0xfc00e504>
 800e528:	52000326 	beq	r10,r8,800e538 <__gedf2+0xcc>
 800e52c:	5200042e 	bgeu	r10,r8,800e540 <__gedf2+0xd4>
 800e530:	283fec1e 	bne	r5,zero,800e4e4 <__alt_data_end+0xfc00e4e4>
 800e534:	003ff406 	br	800e508 <__alt_data_end+0xfc00e508>
 800e538:	313ff236 	bltu	r6,r4,800e504 <__alt_data_end+0xfc00e504>
 800e53c:	21bffc36 	bltu	r4,r6,800e530 <__alt_data_end+0xfc00e530>
 800e540:	0005883a 	mov	r2,zero
 800e544:	f800283a 	ret

0800e548 <__ledf2>:
 800e548:	2804d53a 	srli	r2,r5,20
 800e54c:	3810d53a 	srli	r8,r7,20
 800e550:	00c00434 	movhi	r3,16
 800e554:	18ffffc4 	addi	r3,r3,-1
 800e558:	1081ffcc 	andi	r2,r2,2047
 800e55c:	0241ffc4 	movi	r9,2047
 800e560:	28d4703a 	and	r10,r5,r3
 800e564:	4201ffcc 	andi	r8,r8,2047
 800e568:	38c6703a 	and	r3,r7,r3
 800e56c:	280ad7fa 	srli	r5,r5,31
 800e570:	380ed7fa 	srli	r7,r7,31
 800e574:	12401f26 	beq	r2,r9,800e5f4 <__ledf2+0xac>
 800e578:	0241ffc4 	movi	r9,2047
 800e57c:	42401426 	beq	r8,r9,800e5d0 <__ledf2+0x88>
 800e580:	1000091e 	bne	r2,zero,800e5a8 <__ledf2+0x60>
 800e584:	2296b03a 	or	r11,r4,r10
 800e588:	5813003a 	cmpeq	r9,r11,zero
 800e58c:	29403fcc 	andi	r5,r5,255
 800e590:	40000a1e 	bne	r8,zero,800e5bc <__ledf2+0x74>
 800e594:	30d8b03a 	or	r12,r6,r3
 800e598:	6000081e 	bne	r12,zero,800e5bc <__ledf2+0x74>
 800e59c:	0005883a 	mov	r2,zero
 800e5a0:	5800111e 	bne	r11,zero,800e5e8 <__ledf2+0xa0>
 800e5a4:	f800283a 	ret
 800e5a8:	29403fcc 	andi	r5,r5,255
 800e5ac:	40000c1e 	bne	r8,zero,800e5e0 <__ledf2+0x98>
 800e5b0:	30d2b03a 	or	r9,r6,r3
 800e5b4:	48000c26 	beq	r9,zero,800e5e8 <__ledf2+0xa0>
 800e5b8:	0013883a 	mov	r9,zero
 800e5bc:	39c03fcc 	andi	r7,r7,255
 800e5c0:	48000826 	beq	r9,zero,800e5e4 <__ledf2+0x9c>
 800e5c4:	38001126 	beq	r7,zero,800e60c <__ledf2+0xc4>
 800e5c8:	00800044 	movi	r2,1
 800e5cc:	f800283a 	ret
 800e5d0:	30d2b03a 	or	r9,r6,r3
 800e5d4:	483fea26 	beq	r9,zero,800e580 <__alt_data_end+0xfc00e580>
 800e5d8:	00800084 	movi	r2,2
 800e5dc:	f800283a 	ret
 800e5e0:	39c03fcc 	andi	r7,r7,255
 800e5e4:	39400726 	beq	r7,r5,800e604 <__ledf2+0xbc>
 800e5e8:	2800081e 	bne	r5,zero,800e60c <__ledf2+0xc4>
 800e5ec:	00800044 	movi	r2,1
 800e5f0:	f800283a 	ret
 800e5f4:	2292b03a 	or	r9,r4,r10
 800e5f8:	483fdf26 	beq	r9,zero,800e578 <__alt_data_end+0xfc00e578>
 800e5fc:	00800084 	movi	r2,2
 800e600:	f800283a 	ret
 800e604:	4080030e 	bge	r8,r2,800e614 <__ledf2+0xcc>
 800e608:	383fef26 	beq	r7,zero,800e5c8 <__alt_data_end+0xfc00e5c8>
 800e60c:	00bfffc4 	movi	r2,-1
 800e610:	f800283a 	ret
 800e614:	123feb16 	blt	r2,r8,800e5c4 <__alt_data_end+0xfc00e5c4>
 800e618:	1abff336 	bltu	r3,r10,800e5e8 <__alt_data_end+0xfc00e5e8>
 800e61c:	50c00326 	beq	r10,r3,800e62c <__ledf2+0xe4>
 800e620:	50c0042e 	bgeu	r10,r3,800e634 <__ledf2+0xec>
 800e624:	283fe81e 	bne	r5,zero,800e5c8 <__alt_data_end+0xfc00e5c8>
 800e628:	003ff806 	br	800e60c <__alt_data_end+0xfc00e60c>
 800e62c:	313fee36 	bltu	r6,r4,800e5e8 <__alt_data_end+0xfc00e5e8>
 800e630:	21bffc36 	bltu	r4,r6,800e624 <__alt_data_end+0xfc00e624>
 800e634:	0005883a 	mov	r2,zero
 800e638:	f800283a 	ret

0800e63c <__muldf3>:
 800e63c:	deffee04 	addi	sp,sp,-72
 800e640:	dd000c15 	stw	r20,48(sp)
 800e644:	2828d53a 	srli	r20,r5,20
 800e648:	ddc00f15 	stw	r23,60(sp)
 800e64c:	282ed7fa 	srli	r23,r5,31
 800e650:	dc000815 	stw	r16,32(sp)
 800e654:	04000434 	movhi	r16,16
 800e658:	dcc00b15 	stw	r19,44(sp)
 800e65c:	843fffc4 	addi	r16,r16,-1
 800e660:	dfc01115 	stw	ra,68(sp)
 800e664:	df001015 	stw	fp,64(sp)
 800e668:	dd800e15 	stw	r22,56(sp)
 800e66c:	dd400d15 	stw	r21,52(sp)
 800e670:	dc800a15 	stw	r18,40(sp)
 800e674:	dc400915 	stw	r17,36(sp)
 800e678:	a501ffcc 	andi	r20,r20,2047
 800e67c:	2c20703a 	and	r16,r5,r16
 800e680:	b827883a 	mov	r19,r23
 800e684:	ba403fcc 	andi	r9,r23,255
 800e688:	a0006026 	beq	r20,zero,800e80c <__muldf3+0x1d0>
 800e68c:	0081ffc4 	movi	r2,2047
 800e690:	202d883a 	mov	r22,r4
 800e694:	a0803626 	beq	r20,r2,800e770 <__muldf3+0x134>
 800e698:	84000434 	orhi	r16,r16,16
 800e69c:	200ad77a 	srli	r5,r4,29
 800e6a0:	800490fa 	slli	r2,r16,3
 800e6a4:	202c90fa 	slli	r22,r4,3
 800e6a8:	a53f0044 	addi	r20,r20,-1023
 800e6ac:	28a0b03a 	or	r16,r5,r2
 800e6b0:	002b883a 	mov	r21,zero
 800e6b4:	000b883a 	mov	r5,zero
 800e6b8:	3804d53a 	srli	r2,r7,20
 800e6bc:	3838d7fa 	srli	fp,r7,31
 800e6c0:	04400434 	movhi	r17,16
 800e6c4:	8c7fffc4 	addi	r17,r17,-1
 800e6c8:	1081ffcc 	andi	r2,r2,2047
 800e6cc:	3025883a 	mov	r18,r6
 800e6d0:	3c62703a 	and	r17,r7,r17
 800e6d4:	e2803fcc 	andi	r10,fp,255
 800e6d8:	10006d26 	beq	r2,zero,800e890 <__muldf3+0x254>
 800e6dc:	00c1ffc4 	movi	r3,2047
 800e6e0:	10c06526 	beq	r2,r3,800e878 <__muldf3+0x23c>
 800e6e4:	8c400434 	orhi	r17,r17,16
 800e6e8:	300ed77a 	srli	r7,r6,29
 800e6ec:	880690fa 	slli	r3,r17,3
 800e6f0:	302490fa 	slli	r18,r6,3
 800e6f4:	10bf0044 	addi	r2,r2,-1023
 800e6f8:	38e2b03a 	or	r17,r7,r3
 800e6fc:	000f883a 	mov	r7,zero
 800e700:	a087883a 	add	r3,r20,r2
 800e704:	010003c4 	movi	r4,15
 800e708:	3d44b03a 	or	r2,r7,r21
 800e70c:	e5ccf03a 	xor	r6,fp,r23
 800e710:	1a000044 	addi	r8,r3,1
 800e714:	20809b36 	bltu	r4,r2,800e984 <__muldf3+0x348>
 800e718:	100490ba 	slli	r2,r2,2
 800e71c:	01020074 	movhi	r4,2049
 800e720:	2139cc04 	addi	r4,r4,-6352
 800e724:	1105883a 	add	r2,r2,r4
 800e728:	10800017 	ldw	r2,0(r2)
 800e72c:	1000683a 	jmp	r2
 800e730:	0800e984 	addi	zero,at,934
 800e734:	0800e790 	cmplti	zero,at,926
 800e738:	0800e790 	cmplti	zero,at,926
 800e73c:	0800e78c 	andi	zero,at,926
 800e740:	0800e960 	cmpeqi	zero,at,933
 800e744:	0800e960 	cmpeqi	zero,at,933
 800e748:	0800e948 	cmpgei	zero,at,933
 800e74c:	0800e78c 	andi	zero,at,926
 800e750:	0800e960 	cmpeqi	zero,at,933
 800e754:	0800e948 	cmpgei	zero,at,933
 800e758:	0800e960 	cmpeqi	zero,at,933
 800e75c:	0800e78c 	andi	zero,at,926
 800e760:	0800e970 	cmpltui	zero,at,933
 800e764:	0800e970 	cmpltui	zero,at,933
 800e768:	0800e970 	cmpltui	zero,at,933
 800e76c:	0800ecd0 	cmplti	zero,at,947
 800e770:	2404b03a 	or	r2,r4,r16
 800e774:	1000711e 	bne	r2,zero,800e93c <__muldf3+0x300>
 800e778:	05400204 	movi	r21,8
 800e77c:	0021883a 	mov	r16,zero
 800e780:	002d883a 	mov	r22,zero
 800e784:	01400084 	movi	r5,2
 800e788:	003fcb06 	br	800e6b8 <__alt_data_end+0xfc00e6b8>
 800e78c:	500d883a 	mov	r6,r10
 800e790:	00800084 	movi	r2,2
 800e794:	38805926 	beq	r7,r2,800e8fc <__muldf3+0x2c0>
 800e798:	008000c4 	movi	r2,3
 800e79c:	3881bb26 	beq	r7,r2,800ee8c <__muldf3+0x850>
 800e7a0:	00800044 	movi	r2,1
 800e7a4:	3881961e 	bne	r7,r2,800ee00 <__muldf3+0x7c4>
 800e7a8:	3027883a 	mov	r19,r6
 800e7ac:	0005883a 	mov	r2,zero
 800e7b0:	0021883a 	mov	r16,zero
 800e7b4:	002d883a 	mov	r22,zero
 800e7b8:	1004953a 	slli	r2,r2,20
 800e7bc:	98c03fcc 	andi	r3,r19,255
 800e7c0:	04400434 	movhi	r17,16
 800e7c4:	8c7fffc4 	addi	r17,r17,-1
 800e7c8:	180697fa 	slli	r3,r3,31
 800e7cc:	8460703a 	and	r16,r16,r17
 800e7d0:	80a0b03a 	or	r16,r16,r2
 800e7d4:	80c6b03a 	or	r3,r16,r3
 800e7d8:	b005883a 	mov	r2,r22
 800e7dc:	dfc01117 	ldw	ra,68(sp)
 800e7e0:	df001017 	ldw	fp,64(sp)
 800e7e4:	ddc00f17 	ldw	r23,60(sp)
 800e7e8:	dd800e17 	ldw	r22,56(sp)
 800e7ec:	dd400d17 	ldw	r21,52(sp)
 800e7f0:	dd000c17 	ldw	r20,48(sp)
 800e7f4:	dcc00b17 	ldw	r19,44(sp)
 800e7f8:	dc800a17 	ldw	r18,40(sp)
 800e7fc:	dc400917 	ldw	r17,36(sp)
 800e800:	dc000817 	ldw	r16,32(sp)
 800e804:	dec01204 	addi	sp,sp,72
 800e808:	f800283a 	ret
 800e80c:	2404b03a 	or	r2,r4,r16
 800e810:	202b883a 	mov	r21,r4
 800e814:	10004426 	beq	r2,zero,800e928 <__muldf3+0x2ec>
 800e818:	80015126 	beq	r16,zero,800ed60 <__muldf3+0x724>
 800e81c:	8009883a 	mov	r4,r16
 800e820:	d9800715 	stw	r6,28(sp)
 800e824:	d9c00215 	stw	r7,8(sp)
 800e828:	da400415 	stw	r9,16(sp)
 800e82c:	800f9a80 	call	800f9a8 <__clzsi2>
 800e830:	d9800717 	ldw	r6,28(sp)
 800e834:	d9c00217 	ldw	r7,8(sp)
 800e838:	da400417 	ldw	r9,16(sp)
 800e83c:	113ffd44 	addi	r4,r2,-11
 800e840:	00c00704 	movi	r3,28
 800e844:	19014216 	blt	r3,r4,800ed50 <__muldf3+0x714>
 800e848:	00c00744 	movi	r3,29
 800e84c:	15bffe04 	addi	r22,r2,-8
 800e850:	1907c83a 	sub	r3,r3,r4
 800e854:	85a0983a 	sll	r16,r16,r22
 800e858:	a8c6d83a 	srl	r3,r21,r3
 800e85c:	adac983a 	sll	r22,r21,r22
 800e860:	1c20b03a 	or	r16,r3,r16
 800e864:	1080fcc4 	addi	r2,r2,1011
 800e868:	00a9c83a 	sub	r20,zero,r2
 800e86c:	002b883a 	mov	r21,zero
 800e870:	000b883a 	mov	r5,zero
 800e874:	003f9006 	br	800e6b8 <__alt_data_end+0xfc00e6b8>
 800e878:	3446b03a 	or	r3,r6,r17
 800e87c:	1800281e 	bne	r3,zero,800e920 <__muldf3+0x2e4>
 800e880:	0023883a 	mov	r17,zero
 800e884:	0025883a 	mov	r18,zero
 800e888:	01c00084 	movi	r7,2
 800e88c:	003f9c06 	br	800e700 <__alt_data_end+0xfc00e700>
 800e890:	3446b03a 	or	r3,r6,r17
 800e894:	18001e26 	beq	r3,zero,800e910 <__muldf3+0x2d4>
 800e898:	88012126 	beq	r17,zero,800ed20 <__muldf3+0x6e4>
 800e89c:	8809883a 	mov	r4,r17
 800e8a0:	d9400215 	stw	r5,8(sp)
 800e8a4:	d9800715 	stw	r6,28(sp)
 800e8a8:	da400415 	stw	r9,16(sp)
 800e8ac:	da800315 	stw	r10,12(sp)
 800e8b0:	800f9a80 	call	800f9a8 <__clzsi2>
 800e8b4:	d9400217 	ldw	r5,8(sp)
 800e8b8:	d9800717 	ldw	r6,28(sp)
 800e8bc:	da400417 	ldw	r9,16(sp)
 800e8c0:	da800317 	ldw	r10,12(sp)
 800e8c4:	113ffd44 	addi	r4,r2,-11
 800e8c8:	00c00704 	movi	r3,28
 800e8cc:	19011016 	blt	r3,r4,800ed10 <__muldf3+0x6d4>
 800e8d0:	00c00744 	movi	r3,29
 800e8d4:	14bffe04 	addi	r18,r2,-8
 800e8d8:	1907c83a 	sub	r3,r3,r4
 800e8dc:	8ca2983a 	sll	r17,r17,r18
 800e8e0:	30c6d83a 	srl	r3,r6,r3
 800e8e4:	34a4983a 	sll	r18,r6,r18
 800e8e8:	1c62b03a 	or	r17,r3,r17
 800e8ec:	1080fcc4 	addi	r2,r2,1011
 800e8f0:	0085c83a 	sub	r2,zero,r2
 800e8f4:	000f883a 	mov	r7,zero
 800e8f8:	003f8106 	br	800e700 <__alt_data_end+0xfc00e700>
 800e8fc:	3027883a 	mov	r19,r6
 800e900:	0081ffc4 	movi	r2,2047
 800e904:	0021883a 	mov	r16,zero
 800e908:	002d883a 	mov	r22,zero
 800e90c:	003faa06 	br	800e7b8 <__alt_data_end+0xfc00e7b8>
 800e910:	0023883a 	mov	r17,zero
 800e914:	0025883a 	mov	r18,zero
 800e918:	01c00044 	movi	r7,1
 800e91c:	003f7806 	br	800e700 <__alt_data_end+0xfc00e700>
 800e920:	01c000c4 	movi	r7,3
 800e924:	003f7606 	br	800e700 <__alt_data_end+0xfc00e700>
 800e928:	05400104 	movi	r21,4
 800e92c:	0021883a 	mov	r16,zero
 800e930:	002d883a 	mov	r22,zero
 800e934:	01400044 	movi	r5,1
 800e938:	003f5f06 	br	800e6b8 <__alt_data_end+0xfc00e6b8>
 800e93c:	05400304 	movi	r21,12
 800e940:	014000c4 	movi	r5,3
 800e944:	003f5c06 	br	800e6b8 <__alt_data_end+0xfc00e6b8>
 800e948:	04000434 	movhi	r16,16
 800e94c:	0027883a 	mov	r19,zero
 800e950:	843fffc4 	addi	r16,r16,-1
 800e954:	05bfffc4 	movi	r22,-1
 800e958:	0081ffc4 	movi	r2,2047
 800e95c:	003f9606 	br	800e7b8 <__alt_data_end+0xfc00e7b8>
 800e960:	8023883a 	mov	r17,r16
 800e964:	b025883a 	mov	r18,r22
 800e968:	280f883a 	mov	r7,r5
 800e96c:	003f8806 	br	800e790 <__alt_data_end+0xfc00e790>
 800e970:	8023883a 	mov	r17,r16
 800e974:	b025883a 	mov	r18,r22
 800e978:	480d883a 	mov	r6,r9
 800e97c:	280f883a 	mov	r7,r5
 800e980:	003f8306 	br	800e790 <__alt_data_end+0xfc00e790>
 800e984:	b026d43a 	srli	r19,r22,16
 800e988:	902ed43a 	srli	r23,r18,16
 800e98c:	b5bfffcc 	andi	r22,r22,65535
 800e990:	94bfffcc 	andi	r18,r18,65535
 800e994:	b00b883a 	mov	r5,r22
 800e998:	9009883a 	mov	r4,r18
 800e99c:	d8c00515 	stw	r3,20(sp)
 800e9a0:	d9800715 	stw	r6,28(sp)
 800e9a4:	da000615 	stw	r8,24(sp)
 800e9a8:	8002af80 	call	8002af8 <__mulsi3>
 800e9ac:	980b883a 	mov	r5,r19
 800e9b0:	9009883a 	mov	r4,r18
 800e9b4:	1029883a 	mov	r20,r2
 800e9b8:	8002af80 	call	8002af8 <__mulsi3>
 800e9bc:	b80b883a 	mov	r5,r23
 800e9c0:	9809883a 	mov	r4,r19
 800e9c4:	102b883a 	mov	r21,r2
 800e9c8:	8002af80 	call	8002af8 <__mulsi3>
 800e9cc:	b809883a 	mov	r4,r23
 800e9d0:	b00b883a 	mov	r5,r22
 800e9d4:	1039883a 	mov	fp,r2
 800e9d8:	8002af80 	call	8002af8 <__mulsi3>
 800e9dc:	a008d43a 	srli	r4,r20,16
 800e9e0:	1545883a 	add	r2,r2,r21
 800e9e4:	d8c00517 	ldw	r3,20(sp)
 800e9e8:	2085883a 	add	r2,r4,r2
 800e9ec:	d9800717 	ldw	r6,28(sp)
 800e9f0:	da000617 	ldw	r8,24(sp)
 800e9f4:	1540022e 	bgeu	r2,r21,800ea00 <__muldf3+0x3c4>
 800e9f8:	01000074 	movhi	r4,1
 800e9fc:	e139883a 	add	fp,fp,r4
 800ea00:	100e943a 	slli	r7,r2,16
 800ea04:	1004d43a 	srli	r2,r2,16
 800ea08:	882ad43a 	srli	r21,r17,16
 800ea0c:	a53fffcc 	andi	r20,r20,65535
 800ea10:	8c7fffcc 	andi	r17,r17,65535
 800ea14:	3d29883a 	add	r20,r7,r20
 800ea18:	b00b883a 	mov	r5,r22
 800ea1c:	8809883a 	mov	r4,r17
 800ea20:	d8c00515 	stw	r3,20(sp)
 800ea24:	d9800715 	stw	r6,28(sp)
 800ea28:	da000615 	stw	r8,24(sp)
 800ea2c:	dd000115 	stw	r20,4(sp)
 800ea30:	d8800015 	stw	r2,0(sp)
 800ea34:	8002af80 	call	8002af8 <__mulsi3>
 800ea38:	980b883a 	mov	r5,r19
 800ea3c:	8809883a 	mov	r4,r17
 800ea40:	d8800215 	stw	r2,8(sp)
 800ea44:	8002af80 	call	8002af8 <__mulsi3>
 800ea48:	9809883a 	mov	r4,r19
 800ea4c:	a80b883a 	mov	r5,r21
 800ea50:	1029883a 	mov	r20,r2
 800ea54:	8002af80 	call	8002af8 <__mulsi3>
 800ea58:	b00b883a 	mov	r5,r22
 800ea5c:	a809883a 	mov	r4,r21
 800ea60:	d8800415 	stw	r2,16(sp)
 800ea64:	8002af80 	call	8002af8 <__mulsi3>
 800ea68:	d9c00217 	ldw	r7,8(sp)
 800ea6c:	1505883a 	add	r2,r2,r20
 800ea70:	d8c00517 	ldw	r3,20(sp)
 800ea74:	3826d43a 	srli	r19,r7,16
 800ea78:	d9800717 	ldw	r6,28(sp)
 800ea7c:	da000617 	ldw	r8,24(sp)
 800ea80:	9885883a 	add	r2,r19,r2
 800ea84:	da400417 	ldw	r9,16(sp)
 800ea88:	1500022e 	bgeu	r2,r20,800ea94 <__muldf3+0x458>
 800ea8c:	01000074 	movhi	r4,1
 800ea90:	4913883a 	add	r9,r9,r4
 800ea94:	1028d43a 	srli	r20,r2,16
 800ea98:	1004943a 	slli	r2,r2,16
 800ea9c:	802cd43a 	srli	r22,r16,16
 800eaa0:	843fffcc 	andi	r16,r16,65535
 800eaa4:	3cffffcc 	andi	r19,r7,65535
 800eaa8:	9009883a 	mov	r4,r18
 800eaac:	800b883a 	mov	r5,r16
 800eab0:	a269883a 	add	r20,r20,r9
 800eab4:	d8c00515 	stw	r3,20(sp)
 800eab8:	d9800715 	stw	r6,28(sp)
 800eabc:	da000615 	stw	r8,24(sp)
 800eac0:	14e7883a 	add	r19,r2,r19
 800eac4:	8002af80 	call	8002af8 <__mulsi3>
 800eac8:	9009883a 	mov	r4,r18
 800eacc:	b00b883a 	mov	r5,r22
 800ead0:	d8800315 	stw	r2,12(sp)
 800ead4:	8002af80 	call	8002af8 <__mulsi3>
 800ead8:	b809883a 	mov	r4,r23
 800eadc:	b00b883a 	mov	r5,r22
 800eae0:	d8800215 	stw	r2,8(sp)
 800eae4:	8002af80 	call	8002af8 <__mulsi3>
 800eae8:	b80b883a 	mov	r5,r23
 800eaec:	8009883a 	mov	r4,r16
 800eaf0:	d8800415 	stw	r2,16(sp)
 800eaf4:	8002af80 	call	8002af8 <__mulsi3>
 800eaf8:	da800317 	ldw	r10,12(sp)
 800eafc:	d9c00217 	ldw	r7,8(sp)
 800eb00:	d9000017 	ldw	r4,0(sp)
 800eb04:	502ed43a 	srli	r23,r10,16
 800eb08:	11c5883a 	add	r2,r2,r7
 800eb0c:	24e5883a 	add	r18,r4,r19
 800eb10:	b885883a 	add	r2,r23,r2
 800eb14:	d8c00517 	ldw	r3,20(sp)
 800eb18:	d9800717 	ldw	r6,28(sp)
 800eb1c:	da000617 	ldw	r8,24(sp)
 800eb20:	da400417 	ldw	r9,16(sp)
 800eb24:	11c0022e 	bgeu	r2,r7,800eb30 <__muldf3+0x4f4>
 800eb28:	01000074 	movhi	r4,1
 800eb2c:	4913883a 	add	r9,r9,r4
 800eb30:	100ed43a 	srli	r7,r2,16
 800eb34:	1004943a 	slli	r2,r2,16
 800eb38:	55ffffcc 	andi	r23,r10,65535
 800eb3c:	3a53883a 	add	r9,r7,r9
 800eb40:	8809883a 	mov	r4,r17
 800eb44:	800b883a 	mov	r5,r16
 800eb48:	d8c00515 	stw	r3,20(sp)
 800eb4c:	d9800715 	stw	r6,28(sp)
 800eb50:	da000615 	stw	r8,24(sp)
 800eb54:	da400415 	stw	r9,16(sp)
 800eb58:	15ef883a 	add	r23,r2,r23
 800eb5c:	8002af80 	call	8002af8 <__mulsi3>
 800eb60:	8809883a 	mov	r4,r17
 800eb64:	b00b883a 	mov	r5,r22
 800eb68:	d8800215 	stw	r2,8(sp)
 800eb6c:	8002af80 	call	8002af8 <__mulsi3>
 800eb70:	b00b883a 	mov	r5,r22
 800eb74:	a809883a 	mov	r4,r21
 800eb78:	d8800315 	stw	r2,12(sp)
 800eb7c:	8002af80 	call	8002af8 <__mulsi3>
 800eb80:	8009883a 	mov	r4,r16
 800eb84:	a80b883a 	mov	r5,r21
 800eb88:	1023883a 	mov	r17,r2
 800eb8c:	8002af80 	call	8002af8 <__mulsi3>
 800eb90:	d9c00217 	ldw	r7,8(sp)
 800eb94:	da800317 	ldw	r10,12(sp)
 800eb98:	d8c00517 	ldw	r3,20(sp)
 800eb9c:	3808d43a 	srli	r4,r7,16
 800eba0:	1285883a 	add	r2,r2,r10
 800eba4:	d9800717 	ldw	r6,28(sp)
 800eba8:	2085883a 	add	r2,r4,r2
 800ebac:	da000617 	ldw	r8,24(sp)
 800ebb0:	da400417 	ldw	r9,16(sp)
 800ebb4:	1280022e 	bgeu	r2,r10,800ebc0 <__muldf3+0x584>
 800ebb8:	01000074 	movhi	r4,1
 800ebbc:	8923883a 	add	r17,r17,r4
 800ebc0:	1008943a 	slli	r4,r2,16
 800ebc4:	39ffffcc 	andi	r7,r7,65535
 800ebc8:	e4b9883a 	add	fp,fp,r18
 800ebcc:	21cf883a 	add	r7,r4,r7
 800ebd0:	e4e7803a 	cmpltu	r19,fp,r19
 800ebd4:	3d0f883a 	add	r7,r7,r20
 800ebd8:	bf39883a 	add	fp,r23,fp
 800ebdc:	99c9883a 	add	r4,r19,r7
 800ebe0:	e5ef803a 	cmpltu	r23,fp,r23
 800ebe4:	490b883a 	add	r5,r9,r4
 800ebe8:	1004d43a 	srli	r2,r2,16
 800ebec:	b965883a 	add	r18,r23,r5
 800ebf0:	24c9803a 	cmpltu	r4,r4,r19
 800ebf4:	3d29803a 	cmpltu	r20,r7,r20
 800ebf8:	a128b03a 	or	r20,r20,r4
 800ebfc:	95ef803a 	cmpltu	r23,r18,r23
 800ec00:	2a53803a 	cmpltu	r9,r5,r9
 800ec04:	a0a9883a 	add	r20,r20,r2
 800ec08:	4deeb03a 	or	r23,r9,r23
 800ec0c:	a5ef883a 	add	r23,r20,r23
 800ec10:	bc63883a 	add	r17,r23,r17
 800ec14:	e004927a 	slli	r2,fp,9
 800ec18:	d9000117 	ldw	r4,4(sp)
 800ec1c:	882e927a 	slli	r23,r17,9
 800ec20:	9022d5fa 	srli	r17,r18,23
 800ec24:	e038d5fa 	srli	fp,fp,23
 800ec28:	1104b03a 	or	r2,r2,r4
 800ec2c:	9024927a 	slli	r18,r18,9
 800ec30:	1004c03a 	cmpne	r2,r2,zero
 800ec34:	bc62b03a 	or	r17,r23,r17
 800ec38:	1738b03a 	or	fp,r2,fp
 800ec3c:	8880402c 	andhi	r2,r17,256
 800ec40:	e4a4b03a 	or	r18,fp,r18
 800ec44:	10000726 	beq	r2,zero,800ec64 <__muldf3+0x628>
 800ec48:	9006d07a 	srli	r3,r18,1
 800ec4c:	880497fa 	slli	r2,r17,31
 800ec50:	9480004c 	andi	r18,r18,1
 800ec54:	8822d07a 	srli	r17,r17,1
 800ec58:	1ca4b03a 	or	r18,r3,r18
 800ec5c:	14a4b03a 	or	r18,r2,r18
 800ec60:	4007883a 	mov	r3,r8
 800ec64:	1880ffc4 	addi	r2,r3,1023
 800ec68:	0080460e 	bge	zero,r2,800ed84 <__muldf3+0x748>
 800ec6c:	910001cc 	andi	r4,r18,7
 800ec70:	20000726 	beq	r4,zero,800ec90 <__muldf3+0x654>
 800ec74:	910003cc 	andi	r4,r18,15
 800ec78:	01400104 	movi	r5,4
 800ec7c:	21400426 	beq	r4,r5,800ec90 <__muldf3+0x654>
 800ec80:	9149883a 	add	r4,r18,r5
 800ec84:	24a5803a 	cmpltu	r18,r4,r18
 800ec88:	8ca3883a 	add	r17,r17,r18
 800ec8c:	2025883a 	mov	r18,r4
 800ec90:	8900402c 	andhi	r4,r17,256
 800ec94:	20000426 	beq	r4,zero,800eca8 <__muldf3+0x66c>
 800ec98:	18810004 	addi	r2,r3,1024
 800ec9c:	00ffc034 	movhi	r3,65280
 800eca0:	18ffffc4 	addi	r3,r3,-1
 800eca4:	88e2703a 	and	r17,r17,r3
 800eca8:	00c1ff84 	movi	r3,2046
 800ecac:	18bf1316 	blt	r3,r2,800e8fc <__alt_data_end+0xfc00e8fc>
 800ecb0:	882c977a 	slli	r22,r17,29
 800ecb4:	9024d0fa 	srli	r18,r18,3
 800ecb8:	8822927a 	slli	r17,r17,9
 800ecbc:	1081ffcc 	andi	r2,r2,2047
 800ecc0:	b4acb03a 	or	r22,r22,r18
 800ecc4:	8820d33a 	srli	r16,r17,12
 800ecc8:	3027883a 	mov	r19,r6
 800eccc:	003eba06 	br	800e7b8 <__alt_data_end+0xfc00e7b8>
 800ecd0:	8080022c 	andhi	r2,r16,8
 800ecd4:	10000926 	beq	r2,zero,800ecfc <__muldf3+0x6c0>
 800ecd8:	8880022c 	andhi	r2,r17,8
 800ecdc:	1000071e 	bne	r2,zero,800ecfc <__muldf3+0x6c0>
 800ece0:	00800434 	movhi	r2,16
 800ece4:	8c000234 	orhi	r16,r17,8
 800ece8:	10bfffc4 	addi	r2,r2,-1
 800ecec:	e027883a 	mov	r19,fp
 800ecf0:	80a0703a 	and	r16,r16,r2
 800ecf4:	902d883a 	mov	r22,r18
 800ecf8:	003f1706 	br	800e958 <__alt_data_end+0xfc00e958>
 800ecfc:	00800434 	movhi	r2,16
 800ed00:	84000234 	orhi	r16,r16,8
 800ed04:	10bfffc4 	addi	r2,r2,-1
 800ed08:	80a0703a 	and	r16,r16,r2
 800ed0c:	003f1206 	br	800e958 <__alt_data_end+0xfc00e958>
 800ed10:	147ff604 	addi	r17,r2,-40
 800ed14:	3462983a 	sll	r17,r6,r17
 800ed18:	0025883a 	mov	r18,zero
 800ed1c:	003ef306 	br	800e8ec <__alt_data_end+0xfc00e8ec>
 800ed20:	3009883a 	mov	r4,r6
 800ed24:	d9400215 	stw	r5,8(sp)
 800ed28:	d9800715 	stw	r6,28(sp)
 800ed2c:	da400415 	stw	r9,16(sp)
 800ed30:	da800315 	stw	r10,12(sp)
 800ed34:	800f9a80 	call	800f9a8 <__clzsi2>
 800ed38:	10800804 	addi	r2,r2,32
 800ed3c:	da800317 	ldw	r10,12(sp)
 800ed40:	da400417 	ldw	r9,16(sp)
 800ed44:	d9800717 	ldw	r6,28(sp)
 800ed48:	d9400217 	ldw	r5,8(sp)
 800ed4c:	003edd06 	br	800e8c4 <__alt_data_end+0xfc00e8c4>
 800ed50:	143ff604 	addi	r16,r2,-40
 800ed54:	ac20983a 	sll	r16,r21,r16
 800ed58:	002d883a 	mov	r22,zero
 800ed5c:	003ec106 	br	800e864 <__alt_data_end+0xfc00e864>
 800ed60:	d9800715 	stw	r6,28(sp)
 800ed64:	d9c00215 	stw	r7,8(sp)
 800ed68:	da400415 	stw	r9,16(sp)
 800ed6c:	800f9a80 	call	800f9a8 <__clzsi2>
 800ed70:	10800804 	addi	r2,r2,32
 800ed74:	da400417 	ldw	r9,16(sp)
 800ed78:	d9c00217 	ldw	r7,8(sp)
 800ed7c:	d9800717 	ldw	r6,28(sp)
 800ed80:	003eae06 	br	800e83c <__alt_data_end+0xfc00e83c>
 800ed84:	00c00044 	movi	r3,1
 800ed88:	1887c83a 	sub	r3,r3,r2
 800ed8c:	01000e04 	movi	r4,56
 800ed90:	20fe8516 	blt	r4,r3,800e7a8 <__alt_data_end+0xfc00e7a8>
 800ed94:	010007c4 	movi	r4,31
 800ed98:	20c01b16 	blt	r4,r3,800ee08 <__muldf3+0x7cc>
 800ed9c:	00800804 	movi	r2,32
 800eda0:	10c5c83a 	sub	r2,r2,r3
 800eda4:	888a983a 	sll	r5,r17,r2
 800eda8:	90c8d83a 	srl	r4,r18,r3
 800edac:	9084983a 	sll	r2,r18,r2
 800edb0:	88e2d83a 	srl	r17,r17,r3
 800edb4:	2906b03a 	or	r3,r5,r4
 800edb8:	1004c03a 	cmpne	r2,r2,zero
 800edbc:	1886b03a 	or	r3,r3,r2
 800edc0:	188001cc 	andi	r2,r3,7
 800edc4:	10000726 	beq	r2,zero,800ede4 <__muldf3+0x7a8>
 800edc8:	188003cc 	andi	r2,r3,15
 800edcc:	01000104 	movi	r4,4
 800edd0:	11000426 	beq	r2,r4,800ede4 <__muldf3+0x7a8>
 800edd4:	1805883a 	mov	r2,r3
 800edd8:	10c00104 	addi	r3,r2,4
 800eddc:	1885803a 	cmpltu	r2,r3,r2
 800ede0:	88a3883a 	add	r17,r17,r2
 800ede4:	8880202c 	andhi	r2,r17,128
 800ede8:	10001c26 	beq	r2,zero,800ee5c <__muldf3+0x820>
 800edec:	3027883a 	mov	r19,r6
 800edf0:	00800044 	movi	r2,1
 800edf4:	0021883a 	mov	r16,zero
 800edf8:	002d883a 	mov	r22,zero
 800edfc:	003e6e06 	br	800e7b8 <__alt_data_end+0xfc00e7b8>
 800ee00:	4007883a 	mov	r3,r8
 800ee04:	003f9706 	br	800ec64 <__alt_data_end+0xfc00ec64>
 800ee08:	017ff844 	movi	r5,-31
 800ee0c:	2885c83a 	sub	r2,r5,r2
 800ee10:	888ad83a 	srl	r5,r17,r2
 800ee14:	00800804 	movi	r2,32
 800ee18:	18801a26 	beq	r3,r2,800ee84 <__muldf3+0x848>
 800ee1c:	01001004 	movi	r4,64
 800ee20:	20c7c83a 	sub	r3,r4,r3
 800ee24:	88e2983a 	sll	r17,r17,r3
 800ee28:	8ca4b03a 	or	r18,r17,r18
 800ee2c:	9004c03a 	cmpne	r2,r18,zero
 800ee30:	2884b03a 	or	r2,r5,r2
 800ee34:	144001cc 	andi	r17,r2,7
 800ee38:	88000d1e 	bne	r17,zero,800ee70 <__muldf3+0x834>
 800ee3c:	0021883a 	mov	r16,zero
 800ee40:	102cd0fa 	srli	r22,r2,3
 800ee44:	3027883a 	mov	r19,r6
 800ee48:	0005883a 	mov	r2,zero
 800ee4c:	b46cb03a 	or	r22,r22,r17
 800ee50:	003e5906 	br	800e7b8 <__alt_data_end+0xfc00e7b8>
 800ee54:	1007883a 	mov	r3,r2
 800ee58:	0023883a 	mov	r17,zero
 800ee5c:	8820927a 	slli	r16,r17,9
 800ee60:	1805883a 	mov	r2,r3
 800ee64:	8822977a 	slli	r17,r17,29
 800ee68:	8020d33a 	srli	r16,r16,12
 800ee6c:	003ff406 	br	800ee40 <__alt_data_end+0xfc00ee40>
 800ee70:	10c003cc 	andi	r3,r2,15
 800ee74:	01000104 	movi	r4,4
 800ee78:	193ff626 	beq	r3,r4,800ee54 <__alt_data_end+0xfc00ee54>
 800ee7c:	0023883a 	mov	r17,zero
 800ee80:	003fd506 	br	800edd8 <__alt_data_end+0xfc00edd8>
 800ee84:	0023883a 	mov	r17,zero
 800ee88:	003fe706 	br	800ee28 <__alt_data_end+0xfc00ee28>
 800ee8c:	00800434 	movhi	r2,16
 800ee90:	8c000234 	orhi	r16,r17,8
 800ee94:	10bfffc4 	addi	r2,r2,-1
 800ee98:	3027883a 	mov	r19,r6
 800ee9c:	80a0703a 	and	r16,r16,r2
 800eea0:	902d883a 	mov	r22,r18
 800eea4:	003eac06 	br	800e958 <__alt_data_end+0xfc00e958>

0800eea8 <__subdf3>:
 800eea8:	02000434 	movhi	r8,16
 800eeac:	423fffc4 	addi	r8,r8,-1
 800eeb0:	defffb04 	addi	sp,sp,-20
 800eeb4:	2a14703a 	and	r10,r5,r8
 800eeb8:	3812d53a 	srli	r9,r7,20
 800eebc:	3a10703a 	and	r8,r7,r8
 800eec0:	2006d77a 	srli	r3,r4,29
 800eec4:	3004d77a 	srli	r2,r6,29
 800eec8:	dc000015 	stw	r16,0(sp)
 800eecc:	501490fa 	slli	r10,r10,3
 800eed0:	2820d53a 	srli	r16,r5,20
 800eed4:	401090fa 	slli	r8,r8,3
 800eed8:	dc800215 	stw	r18,8(sp)
 800eedc:	dc400115 	stw	r17,4(sp)
 800eee0:	dfc00415 	stw	ra,16(sp)
 800eee4:	202290fa 	slli	r17,r4,3
 800eee8:	dcc00315 	stw	r19,12(sp)
 800eeec:	4a41ffcc 	andi	r9,r9,2047
 800eef0:	0101ffc4 	movi	r4,2047
 800eef4:	2824d7fa 	srli	r18,r5,31
 800eef8:	8401ffcc 	andi	r16,r16,2047
 800eefc:	50c6b03a 	or	r3,r10,r3
 800ef00:	380ed7fa 	srli	r7,r7,31
 800ef04:	408ab03a 	or	r5,r8,r2
 800ef08:	300c90fa 	slli	r6,r6,3
 800ef0c:	49009626 	beq	r9,r4,800f168 <__subdf3+0x2c0>
 800ef10:	39c0005c 	xori	r7,r7,1
 800ef14:	8245c83a 	sub	r2,r16,r9
 800ef18:	3c807426 	beq	r7,r18,800f0ec <__subdf3+0x244>
 800ef1c:	0080af0e 	bge	zero,r2,800f1dc <__subdf3+0x334>
 800ef20:	48002a1e 	bne	r9,zero,800efcc <__subdf3+0x124>
 800ef24:	2988b03a 	or	r4,r5,r6
 800ef28:	20009a1e 	bne	r4,zero,800f194 <__subdf3+0x2ec>
 800ef2c:	888001cc 	andi	r2,r17,7
 800ef30:	10000726 	beq	r2,zero,800ef50 <__subdf3+0xa8>
 800ef34:	888003cc 	andi	r2,r17,15
 800ef38:	01000104 	movi	r4,4
 800ef3c:	11000426 	beq	r2,r4,800ef50 <__subdf3+0xa8>
 800ef40:	890b883a 	add	r5,r17,r4
 800ef44:	2c63803a 	cmpltu	r17,r5,r17
 800ef48:	1c47883a 	add	r3,r3,r17
 800ef4c:	2823883a 	mov	r17,r5
 800ef50:	1880202c 	andhi	r2,r3,128
 800ef54:	10005926 	beq	r2,zero,800f0bc <__subdf3+0x214>
 800ef58:	84000044 	addi	r16,r16,1
 800ef5c:	0081ffc4 	movi	r2,2047
 800ef60:	8080be26 	beq	r16,r2,800f25c <__subdf3+0x3b4>
 800ef64:	017fe034 	movhi	r5,65408
 800ef68:	297fffc4 	addi	r5,r5,-1
 800ef6c:	1946703a 	and	r3,r3,r5
 800ef70:	1804977a 	slli	r2,r3,29
 800ef74:	1806927a 	slli	r3,r3,9
 800ef78:	8822d0fa 	srli	r17,r17,3
 800ef7c:	8401ffcc 	andi	r16,r16,2047
 800ef80:	180ad33a 	srli	r5,r3,12
 800ef84:	9100004c 	andi	r4,r18,1
 800ef88:	1444b03a 	or	r2,r2,r17
 800ef8c:	80c1ffcc 	andi	r3,r16,2047
 800ef90:	1820953a 	slli	r16,r3,20
 800ef94:	20c03fcc 	andi	r3,r4,255
 800ef98:	180897fa 	slli	r4,r3,31
 800ef9c:	00c00434 	movhi	r3,16
 800efa0:	18ffffc4 	addi	r3,r3,-1
 800efa4:	28c6703a 	and	r3,r5,r3
 800efa8:	1c06b03a 	or	r3,r3,r16
 800efac:	1906b03a 	or	r3,r3,r4
 800efb0:	dfc00417 	ldw	ra,16(sp)
 800efb4:	dcc00317 	ldw	r19,12(sp)
 800efb8:	dc800217 	ldw	r18,8(sp)
 800efbc:	dc400117 	ldw	r17,4(sp)
 800efc0:	dc000017 	ldw	r16,0(sp)
 800efc4:	dec00504 	addi	sp,sp,20
 800efc8:	f800283a 	ret
 800efcc:	0101ffc4 	movi	r4,2047
 800efd0:	813fd626 	beq	r16,r4,800ef2c <__alt_data_end+0xfc00ef2c>
 800efd4:	29402034 	orhi	r5,r5,128
 800efd8:	01000e04 	movi	r4,56
 800efdc:	2080a316 	blt	r4,r2,800f26c <__subdf3+0x3c4>
 800efe0:	010007c4 	movi	r4,31
 800efe4:	2080c616 	blt	r4,r2,800f300 <__subdf3+0x458>
 800efe8:	01000804 	movi	r4,32
 800efec:	2089c83a 	sub	r4,r4,r2
 800eff0:	2910983a 	sll	r8,r5,r4
 800eff4:	308ed83a 	srl	r7,r6,r2
 800eff8:	3108983a 	sll	r4,r6,r4
 800effc:	2884d83a 	srl	r2,r5,r2
 800f000:	41ccb03a 	or	r6,r8,r7
 800f004:	2008c03a 	cmpne	r4,r4,zero
 800f008:	310cb03a 	or	r6,r6,r4
 800f00c:	898dc83a 	sub	r6,r17,r6
 800f010:	89a3803a 	cmpltu	r17,r17,r6
 800f014:	1887c83a 	sub	r3,r3,r2
 800f018:	1c47c83a 	sub	r3,r3,r17
 800f01c:	3023883a 	mov	r17,r6
 800f020:	1880202c 	andhi	r2,r3,128
 800f024:	10002326 	beq	r2,zero,800f0b4 <__subdf3+0x20c>
 800f028:	04c02034 	movhi	r19,128
 800f02c:	9cffffc4 	addi	r19,r19,-1
 800f030:	1ce6703a 	and	r19,r3,r19
 800f034:	98007a26 	beq	r19,zero,800f220 <__subdf3+0x378>
 800f038:	9809883a 	mov	r4,r19
 800f03c:	800f9a80 	call	800f9a8 <__clzsi2>
 800f040:	113ffe04 	addi	r4,r2,-8
 800f044:	00c007c4 	movi	r3,31
 800f048:	19007b16 	blt	r3,r4,800f238 <__subdf3+0x390>
 800f04c:	00800804 	movi	r2,32
 800f050:	1105c83a 	sub	r2,r2,r4
 800f054:	8884d83a 	srl	r2,r17,r2
 800f058:	9906983a 	sll	r3,r19,r4
 800f05c:	8922983a 	sll	r17,r17,r4
 800f060:	10c4b03a 	or	r2,r2,r3
 800f064:	24007816 	blt	r4,r16,800f248 <__subdf3+0x3a0>
 800f068:	2421c83a 	sub	r16,r4,r16
 800f06c:	80c00044 	addi	r3,r16,1
 800f070:	010007c4 	movi	r4,31
 800f074:	20c09516 	blt	r4,r3,800f2cc <__subdf3+0x424>
 800f078:	01400804 	movi	r5,32
 800f07c:	28cbc83a 	sub	r5,r5,r3
 800f080:	88c8d83a 	srl	r4,r17,r3
 800f084:	8962983a 	sll	r17,r17,r5
 800f088:	114a983a 	sll	r5,r2,r5
 800f08c:	10c6d83a 	srl	r3,r2,r3
 800f090:	8804c03a 	cmpne	r2,r17,zero
 800f094:	290ab03a 	or	r5,r5,r4
 800f098:	28a2b03a 	or	r17,r5,r2
 800f09c:	0021883a 	mov	r16,zero
 800f0a0:	003fa206 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f0a4:	2090b03a 	or	r8,r4,r2
 800f0a8:	40018e26 	beq	r8,zero,800f6e4 <__subdf3+0x83c>
 800f0ac:	1007883a 	mov	r3,r2
 800f0b0:	2023883a 	mov	r17,r4
 800f0b4:	888001cc 	andi	r2,r17,7
 800f0b8:	103f9e1e 	bne	r2,zero,800ef34 <__alt_data_end+0xfc00ef34>
 800f0bc:	1804977a 	slli	r2,r3,29
 800f0c0:	8822d0fa 	srli	r17,r17,3
 800f0c4:	1810d0fa 	srli	r8,r3,3
 800f0c8:	9100004c 	andi	r4,r18,1
 800f0cc:	1444b03a 	or	r2,r2,r17
 800f0d0:	00c1ffc4 	movi	r3,2047
 800f0d4:	80c02826 	beq	r16,r3,800f178 <__subdf3+0x2d0>
 800f0d8:	01400434 	movhi	r5,16
 800f0dc:	297fffc4 	addi	r5,r5,-1
 800f0e0:	80e0703a 	and	r16,r16,r3
 800f0e4:	414a703a 	and	r5,r8,r5
 800f0e8:	003fa806 	br	800ef8c <__alt_data_end+0xfc00ef8c>
 800f0ec:	0080630e 	bge	zero,r2,800f27c <__subdf3+0x3d4>
 800f0f0:	48003026 	beq	r9,zero,800f1b4 <__subdf3+0x30c>
 800f0f4:	0101ffc4 	movi	r4,2047
 800f0f8:	813f8c26 	beq	r16,r4,800ef2c <__alt_data_end+0xfc00ef2c>
 800f0fc:	29402034 	orhi	r5,r5,128
 800f100:	01000e04 	movi	r4,56
 800f104:	2080a90e 	bge	r4,r2,800f3ac <__subdf3+0x504>
 800f108:	298cb03a 	or	r6,r5,r6
 800f10c:	3012c03a 	cmpne	r9,r6,zero
 800f110:	0005883a 	mov	r2,zero
 800f114:	4c53883a 	add	r9,r9,r17
 800f118:	4c63803a 	cmpltu	r17,r9,r17
 800f11c:	10c7883a 	add	r3,r2,r3
 800f120:	88c7883a 	add	r3,r17,r3
 800f124:	4823883a 	mov	r17,r9
 800f128:	1880202c 	andhi	r2,r3,128
 800f12c:	1000d026 	beq	r2,zero,800f470 <__subdf3+0x5c8>
 800f130:	84000044 	addi	r16,r16,1
 800f134:	0081ffc4 	movi	r2,2047
 800f138:	8080fe26 	beq	r16,r2,800f534 <__subdf3+0x68c>
 800f13c:	00bfe034 	movhi	r2,65408
 800f140:	10bfffc4 	addi	r2,r2,-1
 800f144:	1886703a 	and	r3,r3,r2
 800f148:	880ad07a 	srli	r5,r17,1
 800f14c:	180497fa 	slli	r2,r3,31
 800f150:	8900004c 	andi	r4,r17,1
 800f154:	2922b03a 	or	r17,r5,r4
 800f158:	1806d07a 	srli	r3,r3,1
 800f15c:	1462b03a 	or	r17,r2,r17
 800f160:	3825883a 	mov	r18,r7
 800f164:	003f7106 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f168:	2984b03a 	or	r2,r5,r6
 800f16c:	103f6826 	beq	r2,zero,800ef10 <__alt_data_end+0xfc00ef10>
 800f170:	39c03fcc 	andi	r7,r7,255
 800f174:	003f6706 	br	800ef14 <__alt_data_end+0xfc00ef14>
 800f178:	4086b03a 	or	r3,r8,r2
 800f17c:	18015226 	beq	r3,zero,800f6c8 <__subdf3+0x820>
 800f180:	00c00434 	movhi	r3,16
 800f184:	41400234 	orhi	r5,r8,8
 800f188:	18ffffc4 	addi	r3,r3,-1
 800f18c:	28ca703a 	and	r5,r5,r3
 800f190:	003f7e06 	br	800ef8c <__alt_data_end+0xfc00ef8c>
 800f194:	10bfffc4 	addi	r2,r2,-1
 800f198:	1000491e 	bne	r2,zero,800f2c0 <__subdf3+0x418>
 800f19c:	898fc83a 	sub	r7,r17,r6
 800f1a0:	89e3803a 	cmpltu	r17,r17,r7
 800f1a4:	1947c83a 	sub	r3,r3,r5
 800f1a8:	1c47c83a 	sub	r3,r3,r17
 800f1ac:	3823883a 	mov	r17,r7
 800f1b0:	003f9b06 	br	800f020 <__alt_data_end+0xfc00f020>
 800f1b4:	2988b03a 	or	r4,r5,r6
 800f1b8:	203f5c26 	beq	r4,zero,800ef2c <__alt_data_end+0xfc00ef2c>
 800f1bc:	10bfffc4 	addi	r2,r2,-1
 800f1c0:	1000931e 	bne	r2,zero,800f410 <__subdf3+0x568>
 800f1c4:	898d883a 	add	r6,r17,r6
 800f1c8:	3463803a 	cmpltu	r17,r6,r17
 800f1cc:	1947883a 	add	r3,r3,r5
 800f1d0:	88c7883a 	add	r3,r17,r3
 800f1d4:	3023883a 	mov	r17,r6
 800f1d8:	003fd306 	br	800f128 <__alt_data_end+0xfc00f128>
 800f1dc:	1000541e 	bne	r2,zero,800f330 <__subdf3+0x488>
 800f1e0:	80800044 	addi	r2,r16,1
 800f1e4:	1081ffcc 	andi	r2,r2,2047
 800f1e8:	01000044 	movi	r4,1
 800f1ec:	2080a20e 	bge	r4,r2,800f478 <__subdf3+0x5d0>
 800f1f0:	8989c83a 	sub	r4,r17,r6
 800f1f4:	8905803a 	cmpltu	r2,r17,r4
 800f1f8:	1967c83a 	sub	r19,r3,r5
 800f1fc:	98a7c83a 	sub	r19,r19,r2
 800f200:	9880202c 	andhi	r2,r19,128
 800f204:	10006326 	beq	r2,zero,800f394 <__subdf3+0x4ec>
 800f208:	3463c83a 	sub	r17,r6,r17
 800f20c:	28c7c83a 	sub	r3,r5,r3
 800f210:	344d803a 	cmpltu	r6,r6,r17
 800f214:	19a7c83a 	sub	r19,r3,r6
 800f218:	3825883a 	mov	r18,r7
 800f21c:	983f861e 	bne	r19,zero,800f038 <__alt_data_end+0xfc00f038>
 800f220:	8809883a 	mov	r4,r17
 800f224:	800f9a80 	call	800f9a8 <__clzsi2>
 800f228:	10800804 	addi	r2,r2,32
 800f22c:	113ffe04 	addi	r4,r2,-8
 800f230:	00c007c4 	movi	r3,31
 800f234:	193f850e 	bge	r3,r4,800f04c <__alt_data_end+0xfc00f04c>
 800f238:	10bff604 	addi	r2,r2,-40
 800f23c:	8884983a 	sll	r2,r17,r2
 800f240:	0023883a 	mov	r17,zero
 800f244:	243f880e 	bge	r4,r16,800f068 <__alt_data_end+0xfc00f068>
 800f248:	00ffe034 	movhi	r3,65408
 800f24c:	18ffffc4 	addi	r3,r3,-1
 800f250:	8121c83a 	sub	r16,r16,r4
 800f254:	10c6703a 	and	r3,r2,r3
 800f258:	003f3406 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f25c:	9100004c 	andi	r4,r18,1
 800f260:	000b883a 	mov	r5,zero
 800f264:	0005883a 	mov	r2,zero
 800f268:	003f4806 	br	800ef8c <__alt_data_end+0xfc00ef8c>
 800f26c:	298cb03a 	or	r6,r5,r6
 800f270:	300cc03a 	cmpne	r6,r6,zero
 800f274:	0005883a 	mov	r2,zero
 800f278:	003f6406 	br	800f00c <__alt_data_end+0xfc00f00c>
 800f27c:	10009a1e 	bne	r2,zero,800f4e8 <__subdf3+0x640>
 800f280:	82400044 	addi	r9,r16,1
 800f284:	4881ffcc 	andi	r2,r9,2047
 800f288:	02800044 	movi	r10,1
 800f28c:	5080670e 	bge	r10,r2,800f42c <__subdf3+0x584>
 800f290:	0081ffc4 	movi	r2,2047
 800f294:	4880af26 	beq	r9,r2,800f554 <__subdf3+0x6ac>
 800f298:	898d883a 	add	r6,r17,r6
 800f29c:	1945883a 	add	r2,r3,r5
 800f2a0:	3447803a 	cmpltu	r3,r6,r17
 800f2a4:	1887883a 	add	r3,r3,r2
 800f2a8:	182297fa 	slli	r17,r3,31
 800f2ac:	300cd07a 	srli	r6,r6,1
 800f2b0:	1806d07a 	srli	r3,r3,1
 800f2b4:	4821883a 	mov	r16,r9
 800f2b8:	89a2b03a 	or	r17,r17,r6
 800f2bc:	003f1b06 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f2c0:	0101ffc4 	movi	r4,2047
 800f2c4:	813f441e 	bne	r16,r4,800efd8 <__alt_data_end+0xfc00efd8>
 800f2c8:	003f1806 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f2cc:	843ff844 	addi	r16,r16,-31
 800f2d0:	01400804 	movi	r5,32
 800f2d4:	1408d83a 	srl	r4,r2,r16
 800f2d8:	19405026 	beq	r3,r5,800f41c <__subdf3+0x574>
 800f2dc:	01401004 	movi	r5,64
 800f2e0:	28c7c83a 	sub	r3,r5,r3
 800f2e4:	10c4983a 	sll	r2,r2,r3
 800f2e8:	88a2b03a 	or	r17,r17,r2
 800f2ec:	8822c03a 	cmpne	r17,r17,zero
 800f2f0:	2462b03a 	or	r17,r4,r17
 800f2f4:	0007883a 	mov	r3,zero
 800f2f8:	0021883a 	mov	r16,zero
 800f2fc:	003f6d06 	br	800f0b4 <__alt_data_end+0xfc00f0b4>
 800f300:	11fff804 	addi	r7,r2,-32
 800f304:	01000804 	movi	r4,32
 800f308:	29ced83a 	srl	r7,r5,r7
 800f30c:	11004526 	beq	r2,r4,800f424 <__subdf3+0x57c>
 800f310:	01001004 	movi	r4,64
 800f314:	2089c83a 	sub	r4,r4,r2
 800f318:	2904983a 	sll	r2,r5,r4
 800f31c:	118cb03a 	or	r6,r2,r6
 800f320:	300cc03a 	cmpne	r6,r6,zero
 800f324:	398cb03a 	or	r6,r7,r6
 800f328:	0005883a 	mov	r2,zero
 800f32c:	003f3706 	br	800f00c <__alt_data_end+0xfc00f00c>
 800f330:	80002a26 	beq	r16,zero,800f3dc <__subdf3+0x534>
 800f334:	0101ffc4 	movi	r4,2047
 800f338:	49006626 	beq	r9,r4,800f4d4 <__subdf3+0x62c>
 800f33c:	0085c83a 	sub	r2,zero,r2
 800f340:	18c02034 	orhi	r3,r3,128
 800f344:	01000e04 	movi	r4,56
 800f348:	20807e16 	blt	r4,r2,800f544 <__subdf3+0x69c>
 800f34c:	010007c4 	movi	r4,31
 800f350:	2080e716 	blt	r4,r2,800f6f0 <__subdf3+0x848>
 800f354:	01000804 	movi	r4,32
 800f358:	2089c83a 	sub	r4,r4,r2
 800f35c:	1914983a 	sll	r10,r3,r4
 800f360:	8890d83a 	srl	r8,r17,r2
 800f364:	8908983a 	sll	r4,r17,r4
 800f368:	1884d83a 	srl	r2,r3,r2
 800f36c:	5222b03a 	or	r17,r10,r8
 800f370:	2006c03a 	cmpne	r3,r4,zero
 800f374:	88e2b03a 	or	r17,r17,r3
 800f378:	3463c83a 	sub	r17,r6,r17
 800f37c:	2885c83a 	sub	r2,r5,r2
 800f380:	344d803a 	cmpltu	r6,r6,r17
 800f384:	1187c83a 	sub	r3,r2,r6
 800f388:	4821883a 	mov	r16,r9
 800f38c:	3825883a 	mov	r18,r7
 800f390:	003f2306 	br	800f020 <__alt_data_end+0xfc00f020>
 800f394:	24d0b03a 	or	r8,r4,r19
 800f398:	40001b1e 	bne	r8,zero,800f408 <__subdf3+0x560>
 800f39c:	0005883a 	mov	r2,zero
 800f3a0:	0009883a 	mov	r4,zero
 800f3a4:	0021883a 	mov	r16,zero
 800f3a8:	003f4906 	br	800f0d0 <__alt_data_end+0xfc00f0d0>
 800f3ac:	010007c4 	movi	r4,31
 800f3b0:	20803a16 	blt	r4,r2,800f49c <__subdf3+0x5f4>
 800f3b4:	01000804 	movi	r4,32
 800f3b8:	2089c83a 	sub	r4,r4,r2
 800f3bc:	2912983a 	sll	r9,r5,r4
 800f3c0:	3090d83a 	srl	r8,r6,r2
 800f3c4:	3108983a 	sll	r4,r6,r4
 800f3c8:	2884d83a 	srl	r2,r5,r2
 800f3cc:	4a12b03a 	or	r9,r9,r8
 800f3d0:	2008c03a 	cmpne	r4,r4,zero
 800f3d4:	4912b03a 	or	r9,r9,r4
 800f3d8:	003f4e06 	br	800f114 <__alt_data_end+0xfc00f114>
 800f3dc:	1c48b03a 	or	r4,r3,r17
 800f3e0:	20003c26 	beq	r4,zero,800f4d4 <__subdf3+0x62c>
 800f3e4:	0084303a 	nor	r2,zero,r2
 800f3e8:	1000381e 	bne	r2,zero,800f4cc <__subdf3+0x624>
 800f3ec:	3463c83a 	sub	r17,r6,r17
 800f3f0:	28c5c83a 	sub	r2,r5,r3
 800f3f4:	344d803a 	cmpltu	r6,r6,r17
 800f3f8:	1187c83a 	sub	r3,r2,r6
 800f3fc:	4821883a 	mov	r16,r9
 800f400:	3825883a 	mov	r18,r7
 800f404:	003f0606 	br	800f020 <__alt_data_end+0xfc00f020>
 800f408:	2023883a 	mov	r17,r4
 800f40c:	003f0906 	br	800f034 <__alt_data_end+0xfc00f034>
 800f410:	0101ffc4 	movi	r4,2047
 800f414:	813f3a1e 	bne	r16,r4,800f100 <__alt_data_end+0xfc00f100>
 800f418:	003ec406 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f41c:	0005883a 	mov	r2,zero
 800f420:	003fb106 	br	800f2e8 <__alt_data_end+0xfc00f2e8>
 800f424:	0005883a 	mov	r2,zero
 800f428:	003fbc06 	br	800f31c <__alt_data_end+0xfc00f31c>
 800f42c:	1c44b03a 	or	r2,r3,r17
 800f430:	80008e1e 	bne	r16,zero,800f66c <__subdf3+0x7c4>
 800f434:	1000c826 	beq	r2,zero,800f758 <__subdf3+0x8b0>
 800f438:	2984b03a 	or	r2,r5,r6
 800f43c:	103ebb26 	beq	r2,zero,800ef2c <__alt_data_end+0xfc00ef2c>
 800f440:	8989883a 	add	r4,r17,r6
 800f444:	1945883a 	add	r2,r3,r5
 800f448:	2447803a 	cmpltu	r3,r4,r17
 800f44c:	1887883a 	add	r3,r3,r2
 800f450:	1880202c 	andhi	r2,r3,128
 800f454:	2023883a 	mov	r17,r4
 800f458:	103f1626 	beq	r2,zero,800f0b4 <__alt_data_end+0xfc00f0b4>
 800f45c:	00bfe034 	movhi	r2,65408
 800f460:	10bfffc4 	addi	r2,r2,-1
 800f464:	5021883a 	mov	r16,r10
 800f468:	1886703a 	and	r3,r3,r2
 800f46c:	003eaf06 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f470:	3825883a 	mov	r18,r7
 800f474:	003f0f06 	br	800f0b4 <__alt_data_end+0xfc00f0b4>
 800f478:	1c44b03a 	or	r2,r3,r17
 800f47c:	8000251e 	bne	r16,zero,800f514 <__subdf3+0x66c>
 800f480:	1000661e 	bne	r2,zero,800f61c <__subdf3+0x774>
 800f484:	2990b03a 	or	r8,r5,r6
 800f488:	40009626 	beq	r8,zero,800f6e4 <__subdf3+0x83c>
 800f48c:	2807883a 	mov	r3,r5
 800f490:	3023883a 	mov	r17,r6
 800f494:	3825883a 	mov	r18,r7
 800f498:	003ea406 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f49c:	127ff804 	addi	r9,r2,-32
 800f4a0:	01000804 	movi	r4,32
 800f4a4:	2a52d83a 	srl	r9,r5,r9
 800f4a8:	11008c26 	beq	r2,r4,800f6dc <__subdf3+0x834>
 800f4ac:	01001004 	movi	r4,64
 800f4b0:	2085c83a 	sub	r2,r4,r2
 800f4b4:	2884983a 	sll	r2,r5,r2
 800f4b8:	118cb03a 	or	r6,r2,r6
 800f4bc:	300cc03a 	cmpne	r6,r6,zero
 800f4c0:	4992b03a 	or	r9,r9,r6
 800f4c4:	0005883a 	mov	r2,zero
 800f4c8:	003f1206 	br	800f114 <__alt_data_end+0xfc00f114>
 800f4cc:	0101ffc4 	movi	r4,2047
 800f4d0:	493f9c1e 	bne	r9,r4,800f344 <__alt_data_end+0xfc00f344>
 800f4d4:	2807883a 	mov	r3,r5
 800f4d8:	3023883a 	mov	r17,r6
 800f4dc:	4821883a 	mov	r16,r9
 800f4e0:	3825883a 	mov	r18,r7
 800f4e4:	003e9106 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f4e8:	80001f1e 	bne	r16,zero,800f568 <__subdf3+0x6c0>
 800f4ec:	1c48b03a 	or	r4,r3,r17
 800f4f0:	20005a26 	beq	r4,zero,800f65c <__subdf3+0x7b4>
 800f4f4:	0084303a 	nor	r2,zero,r2
 800f4f8:	1000561e 	bne	r2,zero,800f654 <__subdf3+0x7ac>
 800f4fc:	89a3883a 	add	r17,r17,r6
 800f500:	1945883a 	add	r2,r3,r5
 800f504:	898d803a 	cmpltu	r6,r17,r6
 800f508:	3087883a 	add	r3,r6,r2
 800f50c:	4821883a 	mov	r16,r9
 800f510:	003f0506 	br	800f128 <__alt_data_end+0xfc00f128>
 800f514:	10002b1e 	bne	r2,zero,800f5c4 <__subdf3+0x71c>
 800f518:	2984b03a 	or	r2,r5,r6
 800f51c:	10008026 	beq	r2,zero,800f720 <__subdf3+0x878>
 800f520:	2807883a 	mov	r3,r5
 800f524:	3023883a 	mov	r17,r6
 800f528:	3825883a 	mov	r18,r7
 800f52c:	0401ffc4 	movi	r16,2047
 800f530:	003e7e06 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f534:	3809883a 	mov	r4,r7
 800f538:	0011883a 	mov	r8,zero
 800f53c:	0005883a 	mov	r2,zero
 800f540:	003ee306 	br	800f0d0 <__alt_data_end+0xfc00f0d0>
 800f544:	1c62b03a 	or	r17,r3,r17
 800f548:	8822c03a 	cmpne	r17,r17,zero
 800f54c:	0005883a 	mov	r2,zero
 800f550:	003f8906 	br	800f378 <__alt_data_end+0xfc00f378>
 800f554:	3809883a 	mov	r4,r7
 800f558:	4821883a 	mov	r16,r9
 800f55c:	0011883a 	mov	r8,zero
 800f560:	0005883a 	mov	r2,zero
 800f564:	003eda06 	br	800f0d0 <__alt_data_end+0xfc00f0d0>
 800f568:	0101ffc4 	movi	r4,2047
 800f56c:	49003b26 	beq	r9,r4,800f65c <__subdf3+0x7b4>
 800f570:	0085c83a 	sub	r2,zero,r2
 800f574:	18c02034 	orhi	r3,r3,128
 800f578:	01000e04 	movi	r4,56
 800f57c:	20806e16 	blt	r4,r2,800f738 <__subdf3+0x890>
 800f580:	010007c4 	movi	r4,31
 800f584:	20807716 	blt	r4,r2,800f764 <__subdf3+0x8bc>
 800f588:	01000804 	movi	r4,32
 800f58c:	2089c83a 	sub	r4,r4,r2
 800f590:	1914983a 	sll	r10,r3,r4
 800f594:	8890d83a 	srl	r8,r17,r2
 800f598:	8908983a 	sll	r4,r17,r4
 800f59c:	1884d83a 	srl	r2,r3,r2
 800f5a0:	5222b03a 	or	r17,r10,r8
 800f5a4:	2006c03a 	cmpne	r3,r4,zero
 800f5a8:	88e2b03a 	or	r17,r17,r3
 800f5ac:	89a3883a 	add	r17,r17,r6
 800f5b0:	1145883a 	add	r2,r2,r5
 800f5b4:	898d803a 	cmpltu	r6,r17,r6
 800f5b8:	3087883a 	add	r3,r6,r2
 800f5bc:	4821883a 	mov	r16,r9
 800f5c0:	003ed906 	br	800f128 <__alt_data_end+0xfc00f128>
 800f5c4:	2984b03a 	or	r2,r5,r6
 800f5c8:	10004226 	beq	r2,zero,800f6d4 <__subdf3+0x82c>
 800f5cc:	1808d0fa 	srli	r4,r3,3
 800f5d0:	8822d0fa 	srli	r17,r17,3
 800f5d4:	1806977a 	slli	r3,r3,29
 800f5d8:	2080022c 	andhi	r2,r4,8
 800f5dc:	1c62b03a 	or	r17,r3,r17
 800f5e0:	10000826 	beq	r2,zero,800f604 <__subdf3+0x75c>
 800f5e4:	2812d0fa 	srli	r9,r5,3
 800f5e8:	4880022c 	andhi	r2,r9,8
 800f5ec:	1000051e 	bne	r2,zero,800f604 <__subdf3+0x75c>
 800f5f0:	300cd0fa 	srli	r6,r6,3
 800f5f4:	2804977a 	slli	r2,r5,29
 800f5f8:	4809883a 	mov	r4,r9
 800f5fc:	3825883a 	mov	r18,r7
 800f600:	11a2b03a 	or	r17,r2,r6
 800f604:	8806d77a 	srli	r3,r17,29
 800f608:	200890fa 	slli	r4,r4,3
 800f60c:	882290fa 	slli	r17,r17,3
 800f610:	0401ffc4 	movi	r16,2047
 800f614:	1906b03a 	or	r3,r3,r4
 800f618:	003e4406 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f61c:	2984b03a 	or	r2,r5,r6
 800f620:	103e4226 	beq	r2,zero,800ef2c <__alt_data_end+0xfc00ef2c>
 800f624:	8989c83a 	sub	r4,r17,r6
 800f628:	8911803a 	cmpltu	r8,r17,r4
 800f62c:	1945c83a 	sub	r2,r3,r5
 800f630:	1205c83a 	sub	r2,r2,r8
 800f634:	1200202c 	andhi	r8,r2,128
 800f638:	403e9a26 	beq	r8,zero,800f0a4 <__alt_data_end+0xfc00f0a4>
 800f63c:	3463c83a 	sub	r17,r6,r17
 800f640:	28c5c83a 	sub	r2,r5,r3
 800f644:	344d803a 	cmpltu	r6,r6,r17
 800f648:	1187c83a 	sub	r3,r2,r6
 800f64c:	3825883a 	mov	r18,r7
 800f650:	003e3606 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f654:	0101ffc4 	movi	r4,2047
 800f658:	493fc71e 	bne	r9,r4,800f578 <__alt_data_end+0xfc00f578>
 800f65c:	2807883a 	mov	r3,r5
 800f660:	3023883a 	mov	r17,r6
 800f664:	4821883a 	mov	r16,r9
 800f668:	003e3006 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f66c:	10003626 	beq	r2,zero,800f748 <__subdf3+0x8a0>
 800f670:	2984b03a 	or	r2,r5,r6
 800f674:	10001726 	beq	r2,zero,800f6d4 <__subdf3+0x82c>
 800f678:	1808d0fa 	srli	r4,r3,3
 800f67c:	8822d0fa 	srli	r17,r17,3
 800f680:	1806977a 	slli	r3,r3,29
 800f684:	2080022c 	andhi	r2,r4,8
 800f688:	1c62b03a 	or	r17,r3,r17
 800f68c:	10000726 	beq	r2,zero,800f6ac <__subdf3+0x804>
 800f690:	2812d0fa 	srli	r9,r5,3
 800f694:	4880022c 	andhi	r2,r9,8
 800f698:	1000041e 	bne	r2,zero,800f6ac <__subdf3+0x804>
 800f69c:	300cd0fa 	srli	r6,r6,3
 800f6a0:	2804977a 	slli	r2,r5,29
 800f6a4:	4809883a 	mov	r4,r9
 800f6a8:	11a2b03a 	or	r17,r2,r6
 800f6ac:	8806d77a 	srli	r3,r17,29
 800f6b0:	200890fa 	slli	r4,r4,3
 800f6b4:	882290fa 	slli	r17,r17,3
 800f6b8:	3825883a 	mov	r18,r7
 800f6bc:	1906b03a 	or	r3,r3,r4
 800f6c0:	0401ffc4 	movi	r16,2047
 800f6c4:	003e1906 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f6c8:	000b883a 	mov	r5,zero
 800f6cc:	0005883a 	mov	r2,zero
 800f6d0:	003e2e06 	br	800ef8c <__alt_data_end+0xfc00ef8c>
 800f6d4:	0401ffc4 	movi	r16,2047
 800f6d8:	003e1406 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f6dc:	0005883a 	mov	r2,zero
 800f6e0:	003f7506 	br	800f4b8 <__alt_data_end+0xfc00f4b8>
 800f6e4:	0005883a 	mov	r2,zero
 800f6e8:	0009883a 	mov	r4,zero
 800f6ec:	003e7806 	br	800f0d0 <__alt_data_end+0xfc00f0d0>
 800f6f0:	123ff804 	addi	r8,r2,-32
 800f6f4:	01000804 	movi	r4,32
 800f6f8:	1a10d83a 	srl	r8,r3,r8
 800f6fc:	11002526 	beq	r2,r4,800f794 <__subdf3+0x8ec>
 800f700:	01001004 	movi	r4,64
 800f704:	2085c83a 	sub	r2,r4,r2
 800f708:	1884983a 	sll	r2,r3,r2
 800f70c:	1444b03a 	or	r2,r2,r17
 800f710:	1004c03a 	cmpne	r2,r2,zero
 800f714:	40a2b03a 	or	r17,r8,r2
 800f718:	0005883a 	mov	r2,zero
 800f71c:	003f1606 	br	800f378 <__alt_data_end+0xfc00f378>
 800f720:	02000434 	movhi	r8,16
 800f724:	0009883a 	mov	r4,zero
 800f728:	423fffc4 	addi	r8,r8,-1
 800f72c:	00bfffc4 	movi	r2,-1
 800f730:	0401ffc4 	movi	r16,2047
 800f734:	003e6606 	br	800f0d0 <__alt_data_end+0xfc00f0d0>
 800f738:	1c62b03a 	or	r17,r3,r17
 800f73c:	8822c03a 	cmpne	r17,r17,zero
 800f740:	0005883a 	mov	r2,zero
 800f744:	003f9906 	br	800f5ac <__alt_data_end+0xfc00f5ac>
 800f748:	2807883a 	mov	r3,r5
 800f74c:	3023883a 	mov	r17,r6
 800f750:	0401ffc4 	movi	r16,2047
 800f754:	003df506 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f758:	2807883a 	mov	r3,r5
 800f75c:	3023883a 	mov	r17,r6
 800f760:	003df206 	br	800ef2c <__alt_data_end+0xfc00ef2c>
 800f764:	123ff804 	addi	r8,r2,-32
 800f768:	01000804 	movi	r4,32
 800f76c:	1a10d83a 	srl	r8,r3,r8
 800f770:	11000a26 	beq	r2,r4,800f79c <__subdf3+0x8f4>
 800f774:	01001004 	movi	r4,64
 800f778:	2085c83a 	sub	r2,r4,r2
 800f77c:	1884983a 	sll	r2,r3,r2
 800f780:	1444b03a 	or	r2,r2,r17
 800f784:	1004c03a 	cmpne	r2,r2,zero
 800f788:	40a2b03a 	or	r17,r8,r2
 800f78c:	0005883a 	mov	r2,zero
 800f790:	003f8606 	br	800f5ac <__alt_data_end+0xfc00f5ac>
 800f794:	0005883a 	mov	r2,zero
 800f798:	003fdc06 	br	800f70c <__alt_data_end+0xfc00f70c>
 800f79c:	0005883a 	mov	r2,zero
 800f7a0:	003ff706 	br	800f780 <__alt_data_end+0xfc00f780>

0800f7a4 <__fixdfsi>:
 800f7a4:	280cd53a 	srli	r6,r5,20
 800f7a8:	00c00434 	movhi	r3,16
 800f7ac:	18ffffc4 	addi	r3,r3,-1
 800f7b0:	3181ffcc 	andi	r6,r6,2047
 800f7b4:	01c0ff84 	movi	r7,1022
 800f7b8:	28c6703a 	and	r3,r5,r3
 800f7bc:	280ad7fa 	srli	r5,r5,31
 800f7c0:	3980120e 	bge	r7,r6,800f80c <__fixdfsi+0x68>
 800f7c4:	00810744 	movi	r2,1053
 800f7c8:	11800c16 	blt	r2,r6,800f7fc <__fixdfsi+0x58>
 800f7cc:	00810cc4 	movi	r2,1075
 800f7d0:	1185c83a 	sub	r2,r2,r6
 800f7d4:	01c007c4 	movi	r7,31
 800f7d8:	18c00434 	orhi	r3,r3,16
 800f7dc:	38800d16 	blt	r7,r2,800f814 <__fixdfsi+0x70>
 800f7e0:	31befb44 	addi	r6,r6,-1043
 800f7e4:	2084d83a 	srl	r2,r4,r2
 800f7e8:	1986983a 	sll	r3,r3,r6
 800f7ec:	1884b03a 	or	r2,r3,r2
 800f7f0:	28000726 	beq	r5,zero,800f810 <__fixdfsi+0x6c>
 800f7f4:	0085c83a 	sub	r2,zero,r2
 800f7f8:	f800283a 	ret
 800f7fc:	00a00034 	movhi	r2,32768
 800f800:	10bfffc4 	addi	r2,r2,-1
 800f804:	2885883a 	add	r2,r5,r2
 800f808:	f800283a 	ret
 800f80c:	0005883a 	mov	r2,zero
 800f810:	f800283a 	ret
 800f814:	008104c4 	movi	r2,1043
 800f818:	1185c83a 	sub	r2,r2,r6
 800f81c:	1884d83a 	srl	r2,r3,r2
 800f820:	003ff306 	br	800f7f0 <__alt_data_end+0xfc00f7f0>

0800f824 <__floatsidf>:
 800f824:	defffd04 	addi	sp,sp,-12
 800f828:	dfc00215 	stw	ra,8(sp)
 800f82c:	dc400115 	stw	r17,4(sp)
 800f830:	dc000015 	stw	r16,0(sp)
 800f834:	20002b26 	beq	r4,zero,800f8e4 <__floatsidf+0xc0>
 800f838:	2023883a 	mov	r17,r4
 800f83c:	2020d7fa 	srli	r16,r4,31
 800f840:	20002d16 	blt	r4,zero,800f8f8 <__floatsidf+0xd4>
 800f844:	8809883a 	mov	r4,r17
 800f848:	800f9a80 	call	800f9a8 <__clzsi2>
 800f84c:	01410784 	movi	r5,1054
 800f850:	288bc83a 	sub	r5,r5,r2
 800f854:	01010cc4 	movi	r4,1075
 800f858:	2149c83a 	sub	r4,r4,r5
 800f85c:	00c007c4 	movi	r3,31
 800f860:	1900160e 	bge	r3,r4,800f8bc <__floatsidf+0x98>
 800f864:	00c104c4 	movi	r3,1043
 800f868:	1947c83a 	sub	r3,r3,r5
 800f86c:	88c6983a 	sll	r3,r17,r3
 800f870:	00800434 	movhi	r2,16
 800f874:	10bfffc4 	addi	r2,r2,-1
 800f878:	1886703a 	and	r3,r3,r2
 800f87c:	2941ffcc 	andi	r5,r5,2047
 800f880:	800d883a 	mov	r6,r16
 800f884:	0005883a 	mov	r2,zero
 800f888:	280a953a 	slli	r5,r5,20
 800f88c:	31803fcc 	andi	r6,r6,255
 800f890:	01000434 	movhi	r4,16
 800f894:	300c97fa 	slli	r6,r6,31
 800f898:	213fffc4 	addi	r4,r4,-1
 800f89c:	1906703a 	and	r3,r3,r4
 800f8a0:	1946b03a 	or	r3,r3,r5
 800f8a4:	1986b03a 	or	r3,r3,r6
 800f8a8:	dfc00217 	ldw	ra,8(sp)
 800f8ac:	dc400117 	ldw	r17,4(sp)
 800f8b0:	dc000017 	ldw	r16,0(sp)
 800f8b4:	dec00304 	addi	sp,sp,12
 800f8b8:	f800283a 	ret
 800f8bc:	00c002c4 	movi	r3,11
 800f8c0:	1887c83a 	sub	r3,r3,r2
 800f8c4:	88c6d83a 	srl	r3,r17,r3
 800f8c8:	8904983a 	sll	r2,r17,r4
 800f8cc:	01000434 	movhi	r4,16
 800f8d0:	213fffc4 	addi	r4,r4,-1
 800f8d4:	2941ffcc 	andi	r5,r5,2047
 800f8d8:	1906703a 	and	r3,r3,r4
 800f8dc:	800d883a 	mov	r6,r16
 800f8e0:	003fe906 	br	800f888 <__alt_data_end+0xfc00f888>
 800f8e4:	000d883a 	mov	r6,zero
 800f8e8:	000b883a 	mov	r5,zero
 800f8ec:	0007883a 	mov	r3,zero
 800f8f0:	0005883a 	mov	r2,zero
 800f8f4:	003fe406 	br	800f888 <__alt_data_end+0xfc00f888>
 800f8f8:	0123c83a 	sub	r17,zero,r4
 800f8fc:	003fd106 	br	800f844 <__alt_data_end+0xfc00f844>

0800f900 <__floatunsidf>:
 800f900:	defffe04 	addi	sp,sp,-8
 800f904:	dc000015 	stw	r16,0(sp)
 800f908:	dfc00115 	stw	ra,4(sp)
 800f90c:	2021883a 	mov	r16,r4
 800f910:	20002226 	beq	r4,zero,800f99c <__floatunsidf+0x9c>
 800f914:	800f9a80 	call	800f9a8 <__clzsi2>
 800f918:	01010784 	movi	r4,1054
 800f91c:	2089c83a 	sub	r4,r4,r2
 800f920:	01810cc4 	movi	r6,1075
 800f924:	310dc83a 	sub	r6,r6,r4
 800f928:	00c007c4 	movi	r3,31
 800f92c:	1980120e 	bge	r3,r6,800f978 <__floatunsidf+0x78>
 800f930:	00c104c4 	movi	r3,1043
 800f934:	1907c83a 	sub	r3,r3,r4
 800f938:	80ca983a 	sll	r5,r16,r3
 800f93c:	00800434 	movhi	r2,16
 800f940:	10bfffc4 	addi	r2,r2,-1
 800f944:	2101ffcc 	andi	r4,r4,2047
 800f948:	0021883a 	mov	r16,zero
 800f94c:	288a703a 	and	r5,r5,r2
 800f950:	2008953a 	slli	r4,r4,20
 800f954:	00c00434 	movhi	r3,16
 800f958:	18ffffc4 	addi	r3,r3,-1
 800f95c:	28c6703a 	and	r3,r5,r3
 800f960:	8005883a 	mov	r2,r16
 800f964:	1906b03a 	or	r3,r3,r4
 800f968:	dfc00117 	ldw	ra,4(sp)
 800f96c:	dc000017 	ldw	r16,0(sp)
 800f970:	dec00204 	addi	sp,sp,8
 800f974:	f800283a 	ret
 800f978:	00c002c4 	movi	r3,11
 800f97c:	188bc83a 	sub	r5,r3,r2
 800f980:	814ad83a 	srl	r5,r16,r5
 800f984:	00c00434 	movhi	r3,16
 800f988:	18ffffc4 	addi	r3,r3,-1
 800f98c:	81a0983a 	sll	r16,r16,r6
 800f990:	2101ffcc 	andi	r4,r4,2047
 800f994:	28ca703a 	and	r5,r5,r3
 800f998:	003fed06 	br	800f950 <__alt_data_end+0xfc00f950>
 800f99c:	0009883a 	mov	r4,zero
 800f9a0:	000b883a 	mov	r5,zero
 800f9a4:	003fea06 	br	800f950 <__alt_data_end+0xfc00f950>

0800f9a8 <__clzsi2>:
 800f9a8:	00bfffd4 	movui	r2,65535
 800f9ac:	11000536 	bltu	r2,r4,800f9c4 <__clzsi2+0x1c>
 800f9b0:	00803fc4 	movi	r2,255
 800f9b4:	11000f36 	bltu	r2,r4,800f9f4 <__clzsi2+0x4c>
 800f9b8:	00800804 	movi	r2,32
 800f9bc:	0007883a 	mov	r3,zero
 800f9c0:	00000506 	br	800f9d8 <__clzsi2+0x30>
 800f9c4:	00804034 	movhi	r2,256
 800f9c8:	10bfffc4 	addi	r2,r2,-1
 800f9cc:	11000c2e 	bgeu	r2,r4,800fa00 <__clzsi2+0x58>
 800f9d0:	00800204 	movi	r2,8
 800f9d4:	00c00604 	movi	r3,24
 800f9d8:	20c8d83a 	srl	r4,r4,r3
 800f9dc:	00c20074 	movhi	r3,2049
 800f9e0:	18d08a04 	addi	r3,r3,16936
 800f9e4:	1909883a 	add	r4,r3,r4
 800f9e8:	20c00003 	ldbu	r3,0(r4)
 800f9ec:	10c5c83a 	sub	r2,r2,r3
 800f9f0:	f800283a 	ret
 800f9f4:	00800604 	movi	r2,24
 800f9f8:	00c00204 	movi	r3,8
 800f9fc:	003ff606 	br	800f9d8 <__alt_data_end+0xfc00f9d8>
 800fa00:	00800404 	movi	r2,16
 800fa04:	1007883a 	mov	r3,r2
 800fa08:	003ff306 	br	800f9d8 <__alt_data_end+0xfc00f9d8>

0800fa0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fa0c:	defffe04 	addi	sp,sp,-8
 800fa10:	dfc00115 	stw	ra,4(sp)
 800fa14:	df000015 	stw	fp,0(sp)
 800fa18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fa1c:	d0a01117 	ldw	r2,-32700(gp)
 800fa20:	10000326 	beq	r2,zero,800fa30 <alt_get_errno+0x24>
 800fa24:	d0a01117 	ldw	r2,-32700(gp)
 800fa28:	103ee83a 	callr	r2
 800fa2c:	00000106 	br	800fa34 <alt_get_errno+0x28>
 800fa30:	d0a6ef04 	addi	r2,gp,-25668
}
 800fa34:	e037883a 	mov	sp,fp
 800fa38:	dfc00117 	ldw	ra,4(sp)
 800fa3c:	df000017 	ldw	fp,0(sp)
 800fa40:	dec00204 	addi	sp,sp,8
 800fa44:	f800283a 	ret

0800fa48 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800fa48:	defffb04 	addi	sp,sp,-20
 800fa4c:	dfc00415 	stw	ra,16(sp)
 800fa50:	df000315 	stw	fp,12(sp)
 800fa54:	df000304 	addi	fp,sp,12
 800fa58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800fa5c:	e0bfff17 	ldw	r2,-4(fp)
 800fa60:	10000816 	blt	r2,zero,800fa84 <close+0x3c>
 800fa64:	01400304 	movi	r5,12
 800fa68:	e13fff17 	ldw	r4,-4(fp)
 800fa6c:	8002af80 	call	8002af8 <__mulsi3>
 800fa70:	1007883a 	mov	r3,r2
 800fa74:	00820074 	movhi	r2,2049
 800fa78:	10931604 	addi	r2,r2,19544
 800fa7c:	1885883a 	add	r2,r3,r2
 800fa80:	00000106 	br	800fa88 <close+0x40>
 800fa84:	0005883a 	mov	r2,zero
 800fa88:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800fa8c:	e0bffd17 	ldw	r2,-12(fp)
 800fa90:	10001926 	beq	r2,zero,800faf8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800fa94:	e0bffd17 	ldw	r2,-12(fp)
 800fa98:	10800017 	ldw	r2,0(r2)
 800fa9c:	10800417 	ldw	r2,16(r2)
 800faa0:	10000626 	beq	r2,zero,800fabc <close+0x74>
 800faa4:	e0bffd17 	ldw	r2,-12(fp)
 800faa8:	10800017 	ldw	r2,0(r2)
 800faac:	10800417 	ldw	r2,16(r2)
 800fab0:	e13ffd17 	ldw	r4,-12(fp)
 800fab4:	103ee83a 	callr	r2
 800fab8:	00000106 	br	800fac0 <close+0x78>
 800fabc:	0005883a 	mov	r2,zero
 800fac0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800fac4:	e13fff17 	ldw	r4,-4(fp)
 800fac8:	80103980 	call	8010398 <alt_release_fd>
    if (rval < 0)
 800facc:	e0bffe17 	ldw	r2,-8(fp)
 800fad0:	1000070e 	bge	r2,zero,800faf0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800fad4:	800fa0c0 	call	800fa0c <alt_get_errno>
 800fad8:	1007883a 	mov	r3,r2
 800fadc:	e0bffe17 	ldw	r2,-8(fp)
 800fae0:	0085c83a 	sub	r2,zero,r2
 800fae4:	18800015 	stw	r2,0(r3)
      return -1;
 800fae8:	00bfffc4 	movi	r2,-1
 800faec:	00000706 	br	800fb0c <close+0xc4>
    }
    return 0;
 800faf0:	0005883a 	mov	r2,zero
 800faf4:	00000506 	br	800fb0c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800faf8:	800fa0c0 	call	800fa0c <alt_get_errno>
 800fafc:	1007883a 	mov	r3,r2
 800fb00:	00801444 	movi	r2,81
 800fb04:	18800015 	stw	r2,0(r3)
    return -1;
 800fb08:	00bfffc4 	movi	r2,-1
  }
}
 800fb0c:	e037883a 	mov	sp,fp
 800fb10:	dfc00117 	ldw	ra,4(sp)
 800fb14:	df000017 	ldw	fp,0(sp)
 800fb18:	dec00204 	addi	sp,sp,8
 800fb1c:	f800283a 	ret

0800fb20 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800fb20:	defffc04 	addi	sp,sp,-16
 800fb24:	df000315 	stw	fp,12(sp)
 800fb28:	df000304 	addi	fp,sp,12
 800fb2c:	e13ffd15 	stw	r4,-12(fp)
 800fb30:	e17ffe15 	stw	r5,-8(fp)
 800fb34:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800fb38:	e0bfff17 	ldw	r2,-4(fp)
}
 800fb3c:	e037883a 	mov	sp,fp
 800fb40:	df000017 	ldw	fp,0(sp)
 800fb44:	dec00104 	addi	sp,sp,4
 800fb48:	f800283a 	ret

0800fb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fb4c:	defffe04 	addi	sp,sp,-8
 800fb50:	dfc00115 	stw	ra,4(sp)
 800fb54:	df000015 	stw	fp,0(sp)
 800fb58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fb5c:	d0a01117 	ldw	r2,-32700(gp)
 800fb60:	10000326 	beq	r2,zero,800fb70 <alt_get_errno+0x24>
 800fb64:	d0a01117 	ldw	r2,-32700(gp)
 800fb68:	103ee83a 	callr	r2
 800fb6c:	00000106 	br	800fb74 <alt_get_errno+0x28>
 800fb70:	d0a6ef04 	addi	r2,gp,-25668
}
 800fb74:	e037883a 	mov	sp,fp
 800fb78:	dfc00117 	ldw	ra,4(sp)
 800fb7c:	df000017 	ldw	fp,0(sp)
 800fb80:	dec00204 	addi	sp,sp,8
 800fb84:	f800283a 	ret

0800fb88 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800fb88:	defffb04 	addi	sp,sp,-20
 800fb8c:	dfc00415 	stw	ra,16(sp)
 800fb90:	df000315 	stw	fp,12(sp)
 800fb94:	df000304 	addi	fp,sp,12
 800fb98:	e13ffe15 	stw	r4,-8(fp)
 800fb9c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fba0:	e0bffe17 	ldw	r2,-8(fp)
 800fba4:	10000816 	blt	r2,zero,800fbc8 <fstat+0x40>
 800fba8:	01400304 	movi	r5,12
 800fbac:	e13ffe17 	ldw	r4,-8(fp)
 800fbb0:	8002af80 	call	8002af8 <__mulsi3>
 800fbb4:	1007883a 	mov	r3,r2
 800fbb8:	00820074 	movhi	r2,2049
 800fbbc:	10931604 	addi	r2,r2,19544
 800fbc0:	1885883a 	add	r2,r3,r2
 800fbc4:	00000106 	br	800fbcc <fstat+0x44>
 800fbc8:	0005883a 	mov	r2,zero
 800fbcc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800fbd0:	e0bffd17 	ldw	r2,-12(fp)
 800fbd4:	10001026 	beq	r2,zero,800fc18 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800fbd8:	e0bffd17 	ldw	r2,-12(fp)
 800fbdc:	10800017 	ldw	r2,0(r2)
 800fbe0:	10800817 	ldw	r2,32(r2)
 800fbe4:	10000726 	beq	r2,zero,800fc04 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800fbe8:	e0bffd17 	ldw	r2,-12(fp)
 800fbec:	10800017 	ldw	r2,0(r2)
 800fbf0:	10800817 	ldw	r2,32(r2)
 800fbf4:	e17fff17 	ldw	r5,-4(fp)
 800fbf8:	e13ffd17 	ldw	r4,-12(fp)
 800fbfc:	103ee83a 	callr	r2
 800fc00:	00000a06 	br	800fc2c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800fc04:	e0bfff17 	ldw	r2,-4(fp)
 800fc08:	00c80004 	movi	r3,8192
 800fc0c:	10c00115 	stw	r3,4(r2)
      return 0;
 800fc10:	0005883a 	mov	r2,zero
 800fc14:	00000506 	br	800fc2c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800fc18:	800fb4c0 	call	800fb4c <alt_get_errno>
 800fc1c:	1007883a 	mov	r3,r2
 800fc20:	00801444 	movi	r2,81
 800fc24:	18800015 	stw	r2,0(r3)
    return -1;
 800fc28:	00bfffc4 	movi	r2,-1
  }
}
 800fc2c:	e037883a 	mov	sp,fp
 800fc30:	dfc00117 	ldw	ra,4(sp)
 800fc34:	df000017 	ldw	fp,0(sp)
 800fc38:	dec00204 	addi	sp,sp,8
 800fc3c:	f800283a 	ret

0800fc40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fc40:	defffe04 	addi	sp,sp,-8
 800fc44:	dfc00115 	stw	ra,4(sp)
 800fc48:	df000015 	stw	fp,0(sp)
 800fc4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fc50:	d0a01117 	ldw	r2,-32700(gp)
 800fc54:	10000326 	beq	r2,zero,800fc64 <alt_get_errno+0x24>
 800fc58:	d0a01117 	ldw	r2,-32700(gp)
 800fc5c:	103ee83a 	callr	r2
 800fc60:	00000106 	br	800fc68 <alt_get_errno+0x28>
 800fc64:	d0a6ef04 	addi	r2,gp,-25668
}
 800fc68:	e037883a 	mov	sp,fp
 800fc6c:	dfc00117 	ldw	ra,4(sp)
 800fc70:	df000017 	ldw	fp,0(sp)
 800fc74:	dec00204 	addi	sp,sp,8
 800fc78:	f800283a 	ret

0800fc7c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800fc7c:	deffed04 	addi	sp,sp,-76
 800fc80:	dfc01215 	stw	ra,72(sp)
 800fc84:	df001115 	stw	fp,68(sp)
 800fc88:	df001104 	addi	fp,sp,68
 800fc8c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fc90:	e0bfff17 	ldw	r2,-4(fp)
 800fc94:	10000816 	blt	r2,zero,800fcb8 <isatty+0x3c>
 800fc98:	01400304 	movi	r5,12
 800fc9c:	e13fff17 	ldw	r4,-4(fp)
 800fca0:	8002af80 	call	8002af8 <__mulsi3>
 800fca4:	1007883a 	mov	r3,r2
 800fca8:	00820074 	movhi	r2,2049
 800fcac:	10931604 	addi	r2,r2,19544
 800fcb0:	1885883a 	add	r2,r3,r2
 800fcb4:	00000106 	br	800fcbc <isatty+0x40>
 800fcb8:	0005883a 	mov	r2,zero
 800fcbc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800fcc0:	e0bfef17 	ldw	r2,-68(fp)
 800fcc4:	10000e26 	beq	r2,zero,800fd00 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800fcc8:	e0bfef17 	ldw	r2,-68(fp)
 800fccc:	10800017 	ldw	r2,0(r2)
 800fcd0:	10800817 	ldw	r2,32(r2)
 800fcd4:	1000021e 	bne	r2,zero,800fce0 <isatty+0x64>
    {
      return 1;
 800fcd8:	00800044 	movi	r2,1
 800fcdc:	00000d06 	br	800fd14 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800fce0:	e0bff004 	addi	r2,fp,-64
 800fce4:	100b883a 	mov	r5,r2
 800fce8:	e13fff17 	ldw	r4,-4(fp)
 800fcec:	800fb880 	call	800fb88 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800fcf0:	e0bff117 	ldw	r2,-60(fp)
 800fcf4:	10880020 	cmpeqi	r2,r2,8192
 800fcf8:	10803fcc 	andi	r2,r2,255
 800fcfc:	00000506 	br	800fd14 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800fd00:	800fc400 	call	800fc40 <alt_get_errno>
 800fd04:	1007883a 	mov	r3,r2
 800fd08:	00801444 	movi	r2,81
 800fd0c:	18800015 	stw	r2,0(r3)
    return 0;
 800fd10:	0005883a 	mov	r2,zero
  }
}
 800fd14:	e037883a 	mov	sp,fp
 800fd18:	dfc00117 	ldw	ra,4(sp)
 800fd1c:	df000017 	ldw	fp,0(sp)
 800fd20:	dec00204 	addi	sp,sp,8
 800fd24:	f800283a 	ret

0800fd28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800fd28:	defffc04 	addi	sp,sp,-16
 800fd2c:	df000315 	stw	fp,12(sp)
 800fd30:	df000304 	addi	fp,sp,12
 800fd34:	e13ffd15 	stw	r4,-12(fp)
 800fd38:	e17ffe15 	stw	r5,-8(fp)
 800fd3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800fd40:	e0fffe17 	ldw	r3,-8(fp)
 800fd44:	e0bffd17 	ldw	r2,-12(fp)
 800fd48:	18800c26 	beq	r3,r2,800fd7c <alt_load_section+0x54>
  {
    while( to != end )
 800fd4c:	00000806 	br	800fd70 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800fd50:	e0bffe17 	ldw	r2,-8(fp)
 800fd54:	10c00104 	addi	r3,r2,4
 800fd58:	e0fffe15 	stw	r3,-8(fp)
 800fd5c:	e0fffd17 	ldw	r3,-12(fp)
 800fd60:	19000104 	addi	r4,r3,4
 800fd64:	e13ffd15 	stw	r4,-12(fp)
 800fd68:	18c00017 	ldw	r3,0(r3)
 800fd6c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800fd70:	e0fffe17 	ldw	r3,-8(fp)
 800fd74:	e0bfff17 	ldw	r2,-4(fp)
 800fd78:	18bff51e 	bne	r3,r2,800fd50 <__alt_data_end+0xfc00fd50>
    {
      *to++ = *from++;
    }
  }
}
 800fd7c:	0001883a 	nop
 800fd80:	e037883a 	mov	sp,fp
 800fd84:	df000017 	ldw	fp,0(sp)
 800fd88:	dec00104 	addi	sp,sp,4
 800fd8c:	f800283a 	ret

0800fd90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800fd90:	defffe04 	addi	sp,sp,-8
 800fd94:	dfc00115 	stw	ra,4(sp)
 800fd98:	df000015 	stw	fp,0(sp)
 800fd9c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800fda0:	01820074 	movhi	r6,2049
 800fda4:	3197a404 	addi	r6,r6,24208
 800fda8:	01420074 	movhi	r5,2049
 800fdac:	2950d704 	addi	r5,r5,17244
 800fdb0:	01020074 	movhi	r4,2049
 800fdb4:	2117a404 	addi	r4,r4,24208
 800fdb8:	800fd280 	call	800fd28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800fdbc:	01820034 	movhi	r6,2048
 800fdc0:	31808c04 	addi	r6,r6,560
 800fdc4:	01420034 	movhi	r5,2048
 800fdc8:	29400804 	addi	r5,r5,32
 800fdcc:	01020034 	movhi	r4,2048
 800fdd0:	21000804 	addi	r4,r4,32
 800fdd4:	800fd280 	call	800fd28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800fdd8:	01820074 	movhi	r6,2049
 800fddc:	3190d704 	addi	r6,r6,17244
 800fde0:	01420074 	movhi	r5,2049
 800fde4:	2949e704 	addi	r5,r5,10140
 800fde8:	01020074 	movhi	r4,2049
 800fdec:	2109e704 	addi	r4,r4,10140
 800fdf0:	800fd280 	call	800fd28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800fdf4:	80118880 	call	8011888 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800fdf8:	8011a480 	call	8011a48 <alt_icache_flush_all>
}
 800fdfc:	0001883a 	nop
 800fe00:	e037883a 	mov	sp,fp
 800fe04:	dfc00117 	ldw	ra,4(sp)
 800fe08:	df000017 	ldw	fp,0(sp)
 800fe0c:	dec00204 	addi	sp,sp,8
 800fe10:	f800283a 	ret

0800fe14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800fe14:	defffe04 	addi	sp,sp,-8
 800fe18:	dfc00115 	stw	ra,4(sp)
 800fe1c:	df000015 	stw	fp,0(sp)
 800fe20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fe24:	d0a01117 	ldw	r2,-32700(gp)
 800fe28:	10000326 	beq	r2,zero,800fe38 <alt_get_errno+0x24>
 800fe2c:	d0a01117 	ldw	r2,-32700(gp)
 800fe30:	103ee83a 	callr	r2
 800fe34:	00000106 	br	800fe3c <alt_get_errno+0x28>
 800fe38:	d0a6ef04 	addi	r2,gp,-25668
}
 800fe3c:	e037883a 	mov	sp,fp
 800fe40:	dfc00117 	ldw	ra,4(sp)
 800fe44:	df000017 	ldw	fp,0(sp)
 800fe48:	dec00204 	addi	sp,sp,8
 800fe4c:	f800283a 	ret

0800fe50 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800fe50:	defff904 	addi	sp,sp,-28
 800fe54:	dfc00615 	stw	ra,24(sp)
 800fe58:	df000515 	stw	fp,20(sp)
 800fe5c:	df000504 	addi	fp,sp,20
 800fe60:	e13ffd15 	stw	r4,-12(fp)
 800fe64:	e17ffe15 	stw	r5,-8(fp)
 800fe68:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800fe6c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fe70:	e0bffd17 	ldw	r2,-12(fp)
 800fe74:	10000816 	blt	r2,zero,800fe98 <lseek+0x48>
 800fe78:	01400304 	movi	r5,12
 800fe7c:	e13ffd17 	ldw	r4,-12(fp)
 800fe80:	8002af80 	call	8002af8 <__mulsi3>
 800fe84:	1007883a 	mov	r3,r2
 800fe88:	00820074 	movhi	r2,2049
 800fe8c:	10931604 	addi	r2,r2,19544
 800fe90:	1885883a 	add	r2,r3,r2
 800fe94:	00000106 	br	800fe9c <lseek+0x4c>
 800fe98:	0005883a 	mov	r2,zero
 800fe9c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800fea0:	e0bffc17 	ldw	r2,-16(fp)
 800fea4:	10001026 	beq	r2,zero,800fee8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800fea8:	e0bffc17 	ldw	r2,-16(fp)
 800feac:	10800017 	ldw	r2,0(r2)
 800feb0:	10800717 	ldw	r2,28(r2)
 800feb4:	10000926 	beq	r2,zero,800fedc <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800feb8:	e0bffc17 	ldw	r2,-16(fp)
 800febc:	10800017 	ldw	r2,0(r2)
 800fec0:	10800717 	ldw	r2,28(r2)
 800fec4:	e1bfff17 	ldw	r6,-4(fp)
 800fec8:	e17ffe17 	ldw	r5,-8(fp)
 800fecc:	e13ffc17 	ldw	r4,-16(fp)
 800fed0:	103ee83a 	callr	r2
 800fed4:	e0bffb15 	stw	r2,-20(fp)
 800fed8:	00000506 	br	800fef0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800fedc:	00bfde84 	movi	r2,-134
 800fee0:	e0bffb15 	stw	r2,-20(fp)
 800fee4:	00000206 	br	800fef0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800fee8:	00bfebc4 	movi	r2,-81
 800feec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800fef0:	e0bffb17 	ldw	r2,-20(fp)
 800fef4:	1000070e 	bge	r2,zero,800ff14 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800fef8:	800fe140 	call	800fe14 <alt_get_errno>
 800fefc:	1007883a 	mov	r3,r2
 800ff00:	e0bffb17 	ldw	r2,-20(fp)
 800ff04:	0085c83a 	sub	r2,zero,r2
 800ff08:	18800015 	stw	r2,0(r3)
    rc = -1;
 800ff0c:	00bfffc4 	movi	r2,-1
 800ff10:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800ff14:	e0bffb17 	ldw	r2,-20(fp)
}
 800ff18:	e037883a 	mov	sp,fp
 800ff1c:	dfc00117 	ldw	ra,4(sp)
 800ff20:	df000017 	ldw	fp,0(sp)
 800ff24:	dec00204 	addi	sp,sp,8
 800ff28:	f800283a 	ret

0800ff2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800ff2c:	defffd04 	addi	sp,sp,-12
 800ff30:	dfc00215 	stw	ra,8(sp)
 800ff34:	df000115 	stw	fp,4(sp)
 800ff38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800ff3c:	0009883a 	mov	r4,zero
 800ff40:	80108100 	call	8010810 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800ff44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800ff48:	80108480 	call	8010848 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800ff4c:	01820074 	movhi	r6,2049
 800ff50:	3190cd04 	addi	r6,r6,17204
 800ff54:	01420074 	movhi	r5,2049
 800ff58:	2950cd04 	addi	r5,r5,17204
 800ff5c:	01020074 	movhi	r4,2049
 800ff60:	2110cd04 	addi	r4,r4,17204
 800ff64:	8011dec0 	call	8011dec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800ff68:	80119880 	call	8011988 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800ff6c:	01020074 	movhi	r4,2049
 800ff70:	21067a04 	addi	r4,r4,6632
 800ff74:	80124080 	call	8012408 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800ff78:	d0a6f017 	ldw	r2,-25664(gp)
 800ff7c:	d0e6f117 	ldw	r3,-25660(gp)
 800ff80:	d126f217 	ldw	r4,-25656(gp)
 800ff84:	200d883a 	mov	r6,r4
 800ff88:	180b883a 	mov	r5,r3
 800ff8c:	1009883a 	mov	r4,r2
 800ff90:	800026c0 	call	800026c <main>
 800ff94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800ff98:	01000044 	movi	r4,1
 800ff9c:	800fa480 	call	800fa48 <close>
  exit (result);
 800ffa0:	e13fff17 	ldw	r4,-4(fp)
 800ffa4:	801241c0 	call	801241c <exit>

0800ffa8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800ffa8:	defffe04 	addi	sp,sp,-8
 800ffac:	df000115 	stw	fp,4(sp)
 800ffb0:	df000104 	addi	fp,sp,4
 800ffb4:	e13fff15 	stw	r4,-4(fp)
}
 800ffb8:	0001883a 	nop
 800ffbc:	e037883a 	mov	sp,fp
 800ffc0:	df000017 	ldw	fp,0(sp)
 800ffc4:	dec00104 	addi	sp,sp,4
 800ffc8:	f800283a 	ret

0800ffcc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800ffcc:	defffe04 	addi	sp,sp,-8
 800ffd0:	df000115 	stw	fp,4(sp)
 800ffd4:	df000104 	addi	fp,sp,4
 800ffd8:	e13fff15 	stw	r4,-4(fp)
}
 800ffdc:	0001883a 	nop
 800ffe0:	e037883a 	mov	sp,fp
 800ffe4:	df000017 	ldw	fp,0(sp)
 800ffe8:	dec00104 	addi	sp,sp,4
 800ffec:	f800283a 	ret

0800fff0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 800fff0:	defff204 	addi	sp,sp,-56
 800fff4:	dfc00a15 	stw	ra,40(sp)
 800fff8:	df000915 	stw	fp,36(sp)
 800fffc:	df000904 	addi	fp,sp,36
 8010000:	e13fff15 	stw	r4,-4(fp)
 8010004:	e1400215 	stw	r5,8(fp)
 8010008:	e1800315 	stw	r6,12(fp)
 801000c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 8010010:	e0800204 	addi	r2,fp,8
 8010014:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8010018:	e0bfff17 	ldw	r2,-4(fp)
 801001c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 8010020:	00006f06 	br	80101e0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8010024:	e0bff807 	ldb	r2,-32(fp)
 8010028:	10800960 	cmpeqi	r2,r2,37
 801002c:	1000041e 	bne	r2,zero,8010040 <alt_printf+0x50>
        {
            alt_putchar(c);
 8010030:	e0bff807 	ldb	r2,-32(fp)
 8010034:	1009883a 	mov	r4,r2
 8010038:	801021c0 	call	801021c <alt_putchar>
 801003c:	00006806 	br	80101e0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 8010040:	e0bff717 	ldw	r2,-36(fp)
 8010044:	10c00044 	addi	r3,r2,1
 8010048:	e0fff715 	stw	r3,-36(fp)
 801004c:	10800003 	ldbu	r2,0(r2)
 8010050:	e0bff805 	stb	r2,-32(fp)
 8010054:	e0bff807 	ldb	r2,-32(fp)
 8010058:	10006926 	beq	r2,zero,8010200 <alt_printf+0x210>
            {
                if (c == '%')
 801005c:	e0bff807 	ldb	r2,-32(fp)
 8010060:	10800958 	cmpnei	r2,r2,37
 8010064:	1000041e 	bne	r2,zero,8010078 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8010068:	e0bff807 	ldb	r2,-32(fp)
 801006c:	1009883a 	mov	r4,r2
 8010070:	801021c0 	call	801021c <alt_putchar>
 8010074:	00005a06 	br	80101e0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8010078:	e0bff807 	ldb	r2,-32(fp)
 801007c:	108018d8 	cmpnei	r2,r2,99
 8010080:	1000081e 	bne	r2,zero,80100a4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8010084:	e0bffe17 	ldw	r2,-8(fp)
 8010088:	10c00104 	addi	r3,r2,4
 801008c:	e0fffe15 	stw	r3,-8(fp)
 8010090:	10800017 	ldw	r2,0(r2)
 8010094:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8010098:	e13ffd17 	ldw	r4,-12(fp)
 801009c:	801021c0 	call	801021c <alt_putchar>
 80100a0:	00004f06 	br	80101e0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 80100a4:	e0bff807 	ldb	r2,-32(fp)
 80100a8:	10801e18 	cmpnei	r2,r2,120
 80100ac:	1000341e 	bne	r2,zero,8010180 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 80100b0:	e0bffe17 	ldw	r2,-8(fp)
 80100b4:	10c00104 	addi	r3,r2,4
 80100b8:	e0fffe15 	stw	r3,-8(fp)
 80100bc:	10800017 	ldw	r2,0(r2)
 80100c0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 80100c4:	e0bffb17 	ldw	r2,-20(fp)
 80100c8:	1000031e 	bne	r2,zero,80100d8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 80100cc:	01000c04 	movi	r4,48
 80100d0:	801021c0 	call	801021c <alt_putchar>
                        continue;
 80100d4:	00004206 	br	80101e0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 80100d8:	00800704 	movi	r2,28
 80100dc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 80100e0:	00000306 	br	80100f0 <alt_printf+0x100>
                        digit_shift -= 4;
 80100e4:	e0bff917 	ldw	r2,-28(fp)
 80100e8:	10bfff04 	addi	r2,r2,-4
 80100ec:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 80100f0:	00c003c4 	movi	r3,15
 80100f4:	e0bff917 	ldw	r2,-28(fp)
 80100f8:	1884983a 	sll	r2,r3,r2
 80100fc:	1007883a 	mov	r3,r2
 8010100:	e0bffb17 	ldw	r2,-20(fp)
 8010104:	1884703a 	and	r2,r3,r2
 8010108:	103ff626 	beq	r2,zero,80100e4 <__alt_data_end+0xfc0100e4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 801010c:	00001906 	br	8010174 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 8010110:	00c003c4 	movi	r3,15
 8010114:	e0bff917 	ldw	r2,-28(fp)
 8010118:	1884983a 	sll	r2,r3,r2
 801011c:	1007883a 	mov	r3,r2
 8010120:	e0bffb17 	ldw	r2,-20(fp)
 8010124:	1886703a 	and	r3,r3,r2
 8010128:	e0bff917 	ldw	r2,-28(fp)
 801012c:	1884d83a 	srl	r2,r3,r2
 8010130:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8010134:	e0bffc17 	ldw	r2,-16(fp)
 8010138:	108002a8 	cmpgeui	r2,r2,10
 801013c:	1000041e 	bne	r2,zero,8010150 <alt_printf+0x160>
                            c = '0' + digit;
 8010140:	e0bffc17 	ldw	r2,-16(fp)
 8010144:	10800c04 	addi	r2,r2,48
 8010148:	e0bff805 	stb	r2,-32(fp)
 801014c:	00000306 	br	801015c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 8010150:	e0bffc17 	ldw	r2,-16(fp)
 8010154:	108015c4 	addi	r2,r2,87
 8010158:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 801015c:	e0bff807 	ldb	r2,-32(fp)
 8010160:	1009883a 	mov	r4,r2
 8010164:	801021c0 	call	801021c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8010168:	e0bff917 	ldw	r2,-28(fp)
 801016c:	10bfff04 	addi	r2,r2,-4
 8010170:	e0bff915 	stw	r2,-28(fp)
 8010174:	e0bff917 	ldw	r2,-28(fp)
 8010178:	103fe50e 	bge	r2,zero,8010110 <__alt_data_end+0xfc010110>
 801017c:	00001806 	br	80101e0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 8010180:	e0bff807 	ldb	r2,-32(fp)
 8010184:	10801cd8 	cmpnei	r2,r2,115
 8010188:	1000151e 	bne	r2,zero,80101e0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 801018c:	e0bffe17 	ldw	r2,-8(fp)
 8010190:	10c00104 	addi	r3,r2,4
 8010194:	e0fffe15 	stw	r3,-8(fp)
 8010198:	10800017 	ldw	r2,0(r2)
 801019c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 80101a0:	00000906 	br	80101c8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 80101a4:	e0bffa17 	ldw	r2,-24(fp)
 80101a8:	10c00044 	addi	r3,r2,1
 80101ac:	e0fffa15 	stw	r3,-24(fp)
 80101b0:	10800003 	ldbu	r2,0(r2)
 80101b4:	10803fcc 	andi	r2,r2,255
 80101b8:	1080201c 	xori	r2,r2,128
 80101bc:	10bfe004 	addi	r2,r2,-128
 80101c0:	1009883a 	mov	r4,r2
 80101c4:	801021c0 	call	801021c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 80101c8:	e0bffa17 	ldw	r2,-24(fp)
 80101cc:	10800003 	ldbu	r2,0(r2)
 80101d0:	10803fcc 	andi	r2,r2,255
 80101d4:	1080201c 	xori	r2,r2,128
 80101d8:	10bfe004 	addi	r2,r2,-128
 80101dc:	103ff11e 	bne	r2,zero,80101a4 <__alt_data_end+0xfc0101a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 80101e0:	e0bff717 	ldw	r2,-36(fp)
 80101e4:	10c00044 	addi	r3,r2,1
 80101e8:	e0fff715 	stw	r3,-36(fp)
 80101ec:	10800003 	ldbu	r2,0(r2)
 80101f0:	e0bff805 	stb	r2,-32(fp)
 80101f4:	e0bff807 	ldb	r2,-32(fp)
 80101f8:	103f8a1e 	bne	r2,zero,8010024 <__alt_data_end+0xfc010024>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 80101fc:	00000106 	br	8010204 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 8010200:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8010204:	0001883a 	nop
 8010208:	e037883a 	mov	sp,fp
 801020c:	dfc00117 	ldw	ra,4(sp)
 8010210:	df000017 	ldw	fp,0(sp)
 8010214:	dec00504 	addi	sp,sp,20
 8010218:	f800283a 	ret

0801021c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 801021c:	defffd04 	addi	sp,sp,-12
 8010220:	dfc00215 	stw	ra,8(sp)
 8010224:	df000115 	stw	fp,4(sp)
 8010228:	df000104 	addi	fp,sp,4
 801022c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 8010230:	d0a00717 	ldw	r2,-32740(gp)
 8010234:	10800217 	ldw	r2,8(r2)
 8010238:	100b883a 	mov	r5,r2
 801023c:	e13fff17 	ldw	r4,-4(fp)
 8010240:	8009c580 	call	8009c58 <putc>
#endif
#endif
}
 8010244:	e037883a 	mov	sp,fp
 8010248:	dfc00117 	ldw	ra,4(sp)
 801024c:	df000017 	ldw	fp,0(sp)
 8010250:	dec00204 	addi	sp,sp,8
 8010254:	f800283a 	ret

08010258 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010258:	defffe04 	addi	sp,sp,-8
 801025c:	dfc00115 	stw	ra,4(sp)
 8010260:	df000015 	stw	fp,0(sp)
 8010264:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010268:	d0a01117 	ldw	r2,-32700(gp)
 801026c:	10000326 	beq	r2,zero,801027c <alt_get_errno+0x24>
 8010270:	d0a01117 	ldw	r2,-32700(gp)
 8010274:	103ee83a 	callr	r2
 8010278:	00000106 	br	8010280 <alt_get_errno+0x28>
 801027c:	d0a6ef04 	addi	r2,gp,-25668
}
 8010280:	e037883a 	mov	sp,fp
 8010284:	dfc00117 	ldw	ra,4(sp)
 8010288:	df000017 	ldw	fp,0(sp)
 801028c:	dec00204 	addi	sp,sp,8
 8010290:	f800283a 	ret

08010294 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8010294:	defff904 	addi	sp,sp,-28
 8010298:	dfc00615 	stw	ra,24(sp)
 801029c:	df000515 	stw	fp,20(sp)
 80102a0:	df000504 	addi	fp,sp,20
 80102a4:	e13ffd15 	stw	r4,-12(fp)
 80102a8:	e17ffe15 	stw	r5,-8(fp)
 80102ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80102b0:	e0bffd17 	ldw	r2,-12(fp)
 80102b4:	10000816 	blt	r2,zero,80102d8 <read+0x44>
 80102b8:	01400304 	movi	r5,12
 80102bc:	e13ffd17 	ldw	r4,-12(fp)
 80102c0:	8002af80 	call	8002af8 <__mulsi3>
 80102c4:	1007883a 	mov	r3,r2
 80102c8:	00820074 	movhi	r2,2049
 80102cc:	10931604 	addi	r2,r2,19544
 80102d0:	1885883a 	add	r2,r3,r2
 80102d4:	00000106 	br	80102dc <read+0x48>
 80102d8:	0005883a 	mov	r2,zero
 80102dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80102e0:	e0bffb17 	ldw	r2,-20(fp)
 80102e4:	10002226 	beq	r2,zero,8010370 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80102e8:	e0bffb17 	ldw	r2,-20(fp)
 80102ec:	10800217 	ldw	r2,8(r2)
 80102f0:	108000cc 	andi	r2,r2,3
 80102f4:	10800060 	cmpeqi	r2,r2,1
 80102f8:	1000181e 	bne	r2,zero,801035c <read+0xc8>
        (fd->dev->read))
 80102fc:	e0bffb17 	ldw	r2,-20(fp)
 8010300:	10800017 	ldw	r2,0(r2)
 8010304:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8010308:	10001426 	beq	r2,zero,801035c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 801030c:	e0bffb17 	ldw	r2,-20(fp)
 8010310:	10800017 	ldw	r2,0(r2)
 8010314:	10800517 	ldw	r2,20(r2)
 8010318:	e0ffff17 	ldw	r3,-4(fp)
 801031c:	180d883a 	mov	r6,r3
 8010320:	e17ffe17 	ldw	r5,-8(fp)
 8010324:	e13ffb17 	ldw	r4,-20(fp)
 8010328:	103ee83a 	callr	r2
 801032c:	e0bffc15 	stw	r2,-16(fp)
 8010330:	e0bffc17 	ldw	r2,-16(fp)
 8010334:	1000070e 	bge	r2,zero,8010354 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8010338:	80102580 	call	8010258 <alt_get_errno>
 801033c:	1007883a 	mov	r3,r2
 8010340:	e0bffc17 	ldw	r2,-16(fp)
 8010344:	0085c83a 	sub	r2,zero,r2
 8010348:	18800015 	stw	r2,0(r3)
          return -1;
 801034c:	00bfffc4 	movi	r2,-1
 8010350:	00000c06 	br	8010384 <read+0xf0>
        }
        return rval;
 8010354:	e0bffc17 	ldw	r2,-16(fp)
 8010358:	00000a06 	br	8010384 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 801035c:	80102580 	call	8010258 <alt_get_errno>
 8010360:	1007883a 	mov	r3,r2
 8010364:	00800344 	movi	r2,13
 8010368:	18800015 	stw	r2,0(r3)
 801036c:	00000406 	br	8010380 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8010370:	80102580 	call	8010258 <alt_get_errno>
 8010374:	1007883a 	mov	r3,r2
 8010378:	00801444 	movi	r2,81
 801037c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8010380:	00bfffc4 	movi	r2,-1
}
 8010384:	e037883a 	mov	sp,fp
 8010388:	dfc00117 	ldw	ra,4(sp)
 801038c:	df000017 	ldw	fp,0(sp)
 8010390:	dec00204 	addi	sp,sp,8
 8010394:	f800283a 	ret

08010398 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8010398:	defffc04 	addi	sp,sp,-16
 801039c:	dfc00315 	stw	ra,12(sp)
 80103a0:	df000215 	stw	fp,8(sp)
 80103a4:	dc000115 	stw	r16,4(sp)
 80103a8:	df000204 	addi	fp,sp,8
 80103ac:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80103b0:	e0bffe17 	ldw	r2,-8(fp)
 80103b4:	108000d0 	cmplti	r2,r2,3
 80103b8:	1000111e 	bne	r2,zero,8010400 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80103bc:	04020074 	movhi	r16,2049
 80103c0:	84131604 	addi	r16,r16,19544
 80103c4:	e0bffe17 	ldw	r2,-8(fp)
 80103c8:	01400304 	movi	r5,12
 80103cc:	1009883a 	mov	r4,r2
 80103d0:	8002af80 	call	8002af8 <__mulsi3>
 80103d4:	8085883a 	add	r2,r16,r2
 80103d8:	10800204 	addi	r2,r2,8
 80103dc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80103e0:	04020074 	movhi	r16,2049
 80103e4:	84131604 	addi	r16,r16,19544
 80103e8:	e0bffe17 	ldw	r2,-8(fp)
 80103ec:	01400304 	movi	r5,12
 80103f0:	1009883a 	mov	r4,r2
 80103f4:	8002af80 	call	8002af8 <__mulsi3>
 80103f8:	8085883a 	add	r2,r16,r2
 80103fc:	10000015 	stw	zero,0(r2)
  }
}
 8010400:	0001883a 	nop
 8010404:	e6ffff04 	addi	sp,fp,-4
 8010408:	dfc00217 	ldw	ra,8(sp)
 801040c:	df000117 	ldw	fp,4(sp)
 8010410:	dc000017 	ldw	r16,0(sp)
 8010414:	dec00304 	addi	sp,sp,12
 8010418:	f800283a 	ret

0801041c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 801041c:	defff904 	addi	sp,sp,-28
 8010420:	df000615 	stw	fp,24(sp)
 8010424:	df000604 	addi	fp,sp,24
 8010428:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801042c:	0005303a 	rdctl	r2,status
 8010430:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010434:	e0fffe17 	ldw	r3,-8(fp)
 8010438:	00bfff84 	movi	r2,-2
 801043c:	1884703a 	and	r2,r3,r2
 8010440:	1001703a 	wrctl	status,r2
  
  return context;
 8010444:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8010448:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 801044c:	d0a01217 	ldw	r2,-32696(gp)
 8010450:	10c000c4 	addi	r3,r2,3
 8010454:	00bfff04 	movi	r2,-4
 8010458:	1884703a 	and	r2,r3,r2
 801045c:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8010460:	d0e01217 	ldw	r3,-32696(gp)
 8010464:	e0bfff17 	ldw	r2,-4(fp)
 8010468:	1887883a 	add	r3,r3,r2
 801046c:	00830034 	movhi	r2,3072
 8010470:	10800004 	addi	r2,r2,0
 8010474:	10c0062e 	bgeu	r2,r3,8010490 <sbrk+0x74>
 8010478:	e0bffb17 	ldw	r2,-20(fp)
 801047c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010480:	e0bffa17 	ldw	r2,-24(fp)
 8010484:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8010488:	00bfffc4 	movi	r2,-1
 801048c:	00000b06 	br	80104bc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8010490:	d0a01217 	ldw	r2,-32696(gp)
 8010494:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8010498:	d0e01217 	ldw	r3,-32696(gp)
 801049c:	e0bfff17 	ldw	r2,-4(fp)
 80104a0:	1885883a 	add	r2,r3,r2
 80104a4:	d0a01215 	stw	r2,-32696(gp)
 80104a8:	e0bffb17 	ldw	r2,-20(fp)
 80104ac:	e0bffc15 	stw	r2,-16(fp)
 80104b0:	e0bffc17 	ldw	r2,-16(fp)
 80104b4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80104b8:	e0bffd17 	ldw	r2,-12(fp)
} 
 80104bc:	e037883a 	mov	sp,fp
 80104c0:	df000017 	ldw	fp,0(sp)
 80104c4:	dec00104 	addi	sp,sp,4
 80104c8:	f800283a 	ret

080104cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80104cc:	defffa04 	addi	sp,sp,-24
 80104d0:	df000515 	stw	fp,20(sp)
 80104d4:	df000504 	addi	fp,sp,20
 80104d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80104dc:	0005303a 	rdctl	r2,status
 80104e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80104e4:	e0fffc17 	ldw	r3,-16(fp)
 80104e8:	00bfff84 	movi	r2,-2
 80104ec:	1884703a 	and	r2,r3,r2
 80104f0:	1001703a 	wrctl	status,r2
  
  return context;
 80104f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80104f8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80104fc:	e0bfff17 	ldw	r2,-4(fp)
 8010500:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010504:	e0bffd17 	ldw	r2,-12(fp)
 8010508:	10800017 	ldw	r2,0(r2)
 801050c:	e0fffd17 	ldw	r3,-12(fp)
 8010510:	18c00117 	ldw	r3,4(r3)
 8010514:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010518:	e0bffd17 	ldw	r2,-12(fp)
 801051c:	10800117 	ldw	r2,4(r2)
 8010520:	e0fffd17 	ldw	r3,-12(fp)
 8010524:	18c00017 	ldw	r3,0(r3)
 8010528:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801052c:	e0bffd17 	ldw	r2,-12(fp)
 8010530:	e0fffd17 	ldw	r3,-12(fp)
 8010534:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010538:	e0bffd17 	ldw	r2,-12(fp)
 801053c:	e0fffd17 	ldw	r3,-12(fp)
 8010540:	10c00015 	stw	r3,0(r2)
 8010544:	e0bffb17 	ldw	r2,-20(fp)
 8010548:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801054c:	e0bffe17 	ldw	r2,-8(fp)
 8010550:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010554:	0001883a 	nop
 8010558:	e037883a 	mov	sp,fp
 801055c:	df000017 	ldw	fp,0(sp)
 8010560:	dec00104 	addi	sp,sp,4
 8010564:	f800283a 	ret

08010568 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010568:	defffb04 	addi	sp,sp,-20
 801056c:	dfc00415 	stw	ra,16(sp)
 8010570:	df000315 	stw	fp,12(sp)
 8010574:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010578:	d0a01317 	ldw	r2,-32692(gp)
 801057c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010580:	d0a6f417 	ldw	r2,-25648(gp)
 8010584:	10800044 	addi	r2,r2,1
 8010588:	d0a6f415 	stw	r2,-25648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801058c:	00002e06 	br	8010648 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010590:	e0bffd17 	ldw	r2,-12(fp)
 8010594:	10800017 	ldw	r2,0(r2)
 8010598:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801059c:	e0bffd17 	ldw	r2,-12(fp)
 80105a0:	10800403 	ldbu	r2,16(r2)
 80105a4:	10803fcc 	andi	r2,r2,255
 80105a8:	10000426 	beq	r2,zero,80105bc <alt_tick+0x54>
 80105ac:	d0a6f417 	ldw	r2,-25648(gp)
 80105b0:	1000021e 	bne	r2,zero,80105bc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80105b4:	e0bffd17 	ldw	r2,-12(fp)
 80105b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80105bc:	e0bffd17 	ldw	r2,-12(fp)
 80105c0:	10800217 	ldw	r2,8(r2)
 80105c4:	d0e6f417 	ldw	r3,-25648(gp)
 80105c8:	18801d36 	bltu	r3,r2,8010640 <alt_tick+0xd8>
 80105cc:	e0bffd17 	ldw	r2,-12(fp)
 80105d0:	10800403 	ldbu	r2,16(r2)
 80105d4:	10803fcc 	andi	r2,r2,255
 80105d8:	1000191e 	bne	r2,zero,8010640 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80105dc:	e0bffd17 	ldw	r2,-12(fp)
 80105e0:	10800317 	ldw	r2,12(r2)
 80105e4:	e0fffd17 	ldw	r3,-12(fp)
 80105e8:	18c00517 	ldw	r3,20(r3)
 80105ec:	1809883a 	mov	r4,r3
 80105f0:	103ee83a 	callr	r2
 80105f4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80105f8:	e0bfff17 	ldw	r2,-4(fp)
 80105fc:	1000031e 	bne	r2,zero,801060c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010600:	e13ffd17 	ldw	r4,-12(fp)
 8010604:	80104cc0 	call	80104cc <alt_alarm_stop>
 8010608:	00000d06 	br	8010640 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801060c:	e0bffd17 	ldw	r2,-12(fp)
 8010610:	10c00217 	ldw	r3,8(r2)
 8010614:	e0bfff17 	ldw	r2,-4(fp)
 8010618:	1887883a 	add	r3,r3,r2
 801061c:	e0bffd17 	ldw	r2,-12(fp)
 8010620:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010624:	e0bffd17 	ldw	r2,-12(fp)
 8010628:	10c00217 	ldw	r3,8(r2)
 801062c:	d0a6f417 	ldw	r2,-25648(gp)
 8010630:	1880032e 	bgeu	r3,r2,8010640 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010634:	e0bffd17 	ldw	r2,-12(fp)
 8010638:	00c00044 	movi	r3,1
 801063c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010640:	e0bffe17 	ldw	r2,-8(fp)
 8010644:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010648:	e0fffd17 	ldw	r3,-12(fp)
 801064c:	d0a01304 	addi	r2,gp,-32692
 8010650:	18bfcf1e 	bne	r3,r2,8010590 <__alt_data_end+0xfc010590>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010654:	0001883a 	nop
}
 8010658:	0001883a 	nop
 801065c:	e037883a 	mov	sp,fp
 8010660:	dfc00117 	ldw	ra,4(sp)
 8010664:	df000017 	ldw	fp,0(sp)
 8010668:	dec00204 	addi	sp,sp,8
 801066c:	f800283a 	ret

08010670 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8010670:	defffd04 	addi	sp,sp,-12
 8010674:	dfc00215 	stw	ra,8(sp)
 8010678:	df000115 	stw	fp,4(sp)
 801067c:	df000104 	addi	fp,sp,4
 8010680:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8010684:	e13fff17 	ldw	r4,-4(fp)
 8010688:	80117300 	call	8011730 <alt_busy_sleep>
}
 801068c:	e037883a 	mov	sp,fp
 8010690:	dfc00117 	ldw	ra,4(sp)
 8010694:	df000017 	ldw	fp,0(sp)
 8010698:	dec00204 	addi	sp,sp,8
 801069c:	f800283a 	ret

080106a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80106a0:	defffe04 	addi	sp,sp,-8
 80106a4:	dfc00115 	stw	ra,4(sp)
 80106a8:	df000015 	stw	fp,0(sp)
 80106ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80106b0:	d0a01117 	ldw	r2,-32700(gp)
 80106b4:	10000326 	beq	r2,zero,80106c4 <alt_get_errno+0x24>
 80106b8:	d0a01117 	ldw	r2,-32700(gp)
 80106bc:	103ee83a 	callr	r2
 80106c0:	00000106 	br	80106c8 <alt_get_errno+0x28>
 80106c4:	d0a6ef04 	addi	r2,gp,-25668
}
 80106c8:	e037883a 	mov	sp,fp
 80106cc:	dfc00117 	ldw	ra,4(sp)
 80106d0:	df000017 	ldw	fp,0(sp)
 80106d4:	dec00204 	addi	sp,sp,8
 80106d8:	f800283a 	ret

080106dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80106dc:	defff904 	addi	sp,sp,-28
 80106e0:	dfc00615 	stw	ra,24(sp)
 80106e4:	df000515 	stw	fp,20(sp)
 80106e8:	df000504 	addi	fp,sp,20
 80106ec:	e13ffd15 	stw	r4,-12(fp)
 80106f0:	e17ffe15 	stw	r5,-8(fp)
 80106f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80106f8:	e0bffd17 	ldw	r2,-12(fp)
 80106fc:	10000816 	blt	r2,zero,8010720 <write+0x44>
 8010700:	01400304 	movi	r5,12
 8010704:	e13ffd17 	ldw	r4,-12(fp)
 8010708:	8002af80 	call	8002af8 <__mulsi3>
 801070c:	1007883a 	mov	r3,r2
 8010710:	00820074 	movhi	r2,2049
 8010714:	10931604 	addi	r2,r2,19544
 8010718:	1885883a 	add	r2,r3,r2
 801071c:	00000106 	br	8010724 <write+0x48>
 8010720:	0005883a 	mov	r2,zero
 8010724:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8010728:	e0bffb17 	ldw	r2,-20(fp)
 801072c:	10002126 	beq	r2,zero,80107b4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8010730:	e0bffb17 	ldw	r2,-20(fp)
 8010734:	10800217 	ldw	r2,8(r2)
 8010738:	108000cc 	andi	r2,r2,3
 801073c:	10001826 	beq	r2,zero,80107a0 <write+0xc4>
 8010740:	e0bffb17 	ldw	r2,-20(fp)
 8010744:	10800017 	ldw	r2,0(r2)
 8010748:	10800617 	ldw	r2,24(r2)
 801074c:	10001426 	beq	r2,zero,80107a0 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8010750:	e0bffb17 	ldw	r2,-20(fp)
 8010754:	10800017 	ldw	r2,0(r2)
 8010758:	10800617 	ldw	r2,24(r2)
 801075c:	e0ffff17 	ldw	r3,-4(fp)
 8010760:	180d883a 	mov	r6,r3
 8010764:	e17ffe17 	ldw	r5,-8(fp)
 8010768:	e13ffb17 	ldw	r4,-20(fp)
 801076c:	103ee83a 	callr	r2
 8010770:	e0bffc15 	stw	r2,-16(fp)
 8010774:	e0bffc17 	ldw	r2,-16(fp)
 8010778:	1000070e 	bge	r2,zero,8010798 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 801077c:	80106a00 	call	80106a0 <alt_get_errno>
 8010780:	1007883a 	mov	r3,r2
 8010784:	e0bffc17 	ldw	r2,-16(fp)
 8010788:	0085c83a 	sub	r2,zero,r2
 801078c:	18800015 	stw	r2,0(r3)
        return -1;
 8010790:	00bfffc4 	movi	r2,-1
 8010794:	00000c06 	br	80107c8 <write+0xec>
      }
      return rval;
 8010798:	e0bffc17 	ldw	r2,-16(fp)
 801079c:	00000a06 	br	80107c8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80107a0:	80106a00 	call	80106a0 <alt_get_errno>
 80107a4:	1007883a 	mov	r3,r2
 80107a8:	00800344 	movi	r2,13
 80107ac:	18800015 	stw	r2,0(r3)
 80107b0:	00000406 	br	80107c4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80107b4:	80106a00 	call	80106a0 <alt_get_errno>
 80107b8:	1007883a 	mov	r3,r2
 80107bc:	00801444 	movi	r2,81
 80107c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80107c4:	00bfffc4 	movi	r2,-1
}
 80107c8:	e037883a 	mov	sp,fp
 80107cc:	dfc00117 	ldw	ra,4(sp)
 80107d0:	df000017 	ldw	fp,0(sp)
 80107d4:	dec00204 	addi	sp,sp,8
 80107d8:	f800283a 	ret

080107dc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80107dc:	defffd04 	addi	sp,sp,-12
 80107e0:	dfc00215 	stw	ra,8(sp)
 80107e4:	df000115 	stw	fp,4(sp)
 80107e8:	df000104 	addi	fp,sp,4
 80107ec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80107f0:	d1600e04 	addi	r5,gp,-32712
 80107f4:	e13fff17 	ldw	r4,-4(fp)
 80107f8:	80118e40 	call	80118e4 <alt_dev_llist_insert>
}
 80107fc:	e037883a 	mov	sp,fp
 8010800:	dfc00117 	ldw	ra,4(sp)
 8010804:	df000017 	ldw	fp,0(sp)
 8010808:	dec00204 	addi	sp,sp,8
 801080c:	f800283a 	ret

08010810 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8010810:	defffd04 	addi	sp,sp,-12
 8010814:	dfc00215 	stw	ra,8(sp)
 8010818:	df000115 	stw	fp,4(sp)
 801081c:	df000104 	addi	fp,sp,4
 8010820:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8010824:	80120ec0 	call	80120ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8010828:	00800044 	movi	r2,1
 801082c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8010830:	0001883a 	nop
 8010834:	e037883a 	mov	sp,fp
 8010838:	dfc00117 	ldw	ra,4(sp)
 801083c:	df000017 	ldw	fp,0(sp)
 8010840:	dec00204 	addi	sp,sp,8
 8010844:	f800283a 	ret

08010848 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8010848:	defffe04 	addi	sp,sp,-8
 801084c:	dfc00115 	stw	ra,4(sp)
 8010850:	df000015 	stw	fp,0(sp)
 8010854:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8010858:	01c0fa04 	movi	r7,1000
 801085c:	000d883a 	mov	r6,zero
 8010860:	000b883a 	mov	r5,zero
 8010864:	01041004 	movi	r4,4160
 8010868:	80115880 	call	8011588 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 801086c:	01800044 	movi	r6,1
 8010870:	000b883a 	mov	r5,zero
 8010874:	01020074 	movhi	r4,2049
 8010878:	21138004 	addi	r4,r4,19968
 801087c:	8010a100 	call	8010a10 <altera_avalon_jtag_uart_init>
 8010880:	01020074 	movhi	r4,2049
 8010884:	21137604 	addi	r4,r4,19928
 8010888:	80107dc0 	call	80107dc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 801088c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8010890:	0001883a 	nop
}
 8010894:	0001883a 	nop
 8010898:	e037883a 	mov	sp,fp
 801089c:	dfc00117 	ldw	ra,4(sp)
 80108a0:	df000017 	ldw	fp,0(sp)
 80108a4:	dec00204 	addi	sp,sp,8
 80108a8:	f800283a 	ret

080108ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80108ac:	defffa04 	addi	sp,sp,-24
 80108b0:	dfc00515 	stw	ra,20(sp)
 80108b4:	df000415 	stw	fp,16(sp)
 80108b8:	df000404 	addi	fp,sp,16
 80108bc:	e13ffd15 	stw	r4,-12(fp)
 80108c0:	e17ffe15 	stw	r5,-8(fp)
 80108c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80108c8:	e0bffd17 	ldw	r2,-12(fp)
 80108cc:	10800017 	ldw	r2,0(r2)
 80108d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80108d4:	e0bffc17 	ldw	r2,-16(fp)
 80108d8:	10c00a04 	addi	r3,r2,40
 80108dc:	e0bffd17 	ldw	r2,-12(fp)
 80108e0:	10800217 	ldw	r2,8(r2)
 80108e4:	100f883a 	mov	r7,r2
 80108e8:	e1bfff17 	ldw	r6,-4(fp)
 80108ec:	e17ffe17 	ldw	r5,-8(fp)
 80108f0:	1809883a 	mov	r4,r3
 80108f4:	8010ed40 	call	8010ed4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80108f8:	e037883a 	mov	sp,fp
 80108fc:	dfc00117 	ldw	ra,4(sp)
 8010900:	df000017 	ldw	fp,0(sp)
 8010904:	dec00204 	addi	sp,sp,8
 8010908:	f800283a 	ret

0801090c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 801090c:	defffa04 	addi	sp,sp,-24
 8010910:	dfc00515 	stw	ra,20(sp)
 8010914:	df000415 	stw	fp,16(sp)
 8010918:	df000404 	addi	fp,sp,16
 801091c:	e13ffd15 	stw	r4,-12(fp)
 8010920:	e17ffe15 	stw	r5,-8(fp)
 8010924:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010928:	e0bffd17 	ldw	r2,-12(fp)
 801092c:	10800017 	ldw	r2,0(r2)
 8010930:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8010934:	e0bffc17 	ldw	r2,-16(fp)
 8010938:	10c00a04 	addi	r3,r2,40
 801093c:	e0bffd17 	ldw	r2,-12(fp)
 8010940:	10800217 	ldw	r2,8(r2)
 8010944:	100f883a 	mov	r7,r2
 8010948:	e1bfff17 	ldw	r6,-4(fp)
 801094c:	e17ffe17 	ldw	r5,-8(fp)
 8010950:	1809883a 	mov	r4,r3
 8010954:	80110f00 	call	80110f0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8010958:	e037883a 	mov	sp,fp
 801095c:	dfc00117 	ldw	ra,4(sp)
 8010960:	df000017 	ldw	fp,0(sp)
 8010964:	dec00204 	addi	sp,sp,8
 8010968:	f800283a 	ret

0801096c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801096c:	defffc04 	addi	sp,sp,-16
 8010970:	dfc00315 	stw	ra,12(sp)
 8010974:	df000215 	stw	fp,8(sp)
 8010978:	df000204 	addi	fp,sp,8
 801097c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010980:	e0bfff17 	ldw	r2,-4(fp)
 8010984:	10800017 	ldw	r2,0(r2)
 8010988:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801098c:	e0bffe17 	ldw	r2,-8(fp)
 8010990:	10c00a04 	addi	r3,r2,40
 8010994:	e0bfff17 	ldw	r2,-4(fp)
 8010998:	10800217 	ldw	r2,8(r2)
 801099c:	100b883a 	mov	r5,r2
 80109a0:	1809883a 	mov	r4,r3
 80109a4:	8010d7c0 	call	8010d7c <altera_avalon_jtag_uart_close>
}
 80109a8:	e037883a 	mov	sp,fp
 80109ac:	dfc00117 	ldw	ra,4(sp)
 80109b0:	df000017 	ldw	fp,0(sp)
 80109b4:	dec00204 	addi	sp,sp,8
 80109b8:	f800283a 	ret

080109bc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80109bc:	defffa04 	addi	sp,sp,-24
 80109c0:	dfc00515 	stw	ra,20(sp)
 80109c4:	df000415 	stw	fp,16(sp)
 80109c8:	df000404 	addi	fp,sp,16
 80109cc:	e13ffd15 	stw	r4,-12(fp)
 80109d0:	e17ffe15 	stw	r5,-8(fp)
 80109d4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80109d8:	e0bffd17 	ldw	r2,-12(fp)
 80109dc:	10800017 	ldw	r2,0(r2)
 80109e0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80109e4:	e0bffc17 	ldw	r2,-16(fp)
 80109e8:	10800a04 	addi	r2,r2,40
 80109ec:	e1bfff17 	ldw	r6,-4(fp)
 80109f0:	e17ffe17 	ldw	r5,-8(fp)
 80109f4:	1009883a 	mov	r4,r2
 80109f8:	8010de40 	call	8010de4 <altera_avalon_jtag_uart_ioctl>
}
 80109fc:	e037883a 	mov	sp,fp
 8010a00:	dfc00117 	ldw	ra,4(sp)
 8010a04:	df000017 	ldw	fp,0(sp)
 8010a08:	dec00204 	addi	sp,sp,8
 8010a0c:	f800283a 	ret

08010a10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8010a10:	defffa04 	addi	sp,sp,-24
 8010a14:	dfc00515 	stw	ra,20(sp)
 8010a18:	df000415 	stw	fp,16(sp)
 8010a1c:	df000404 	addi	fp,sp,16
 8010a20:	e13ffd15 	stw	r4,-12(fp)
 8010a24:	e17ffe15 	stw	r5,-8(fp)
 8010a28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010a2c:	e0bffd17 	ldw	r2,-12(fp)
 8010a30:	00c00044 	movi	r3,1
 8010a34:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8010a38:	e0bffd17 	ldw	r2,-12(fp)
 8010a3c:	10800017 	ldw	r2,0(r2)
 8010a40:	10800104 	addi	r2,r2,4
 8010a44:	1007883a 	mov	r3,r2
 8010a48:	e0bffd17 	ldw	r2,-12(fp)
 8010a4c:	10800817 	ldw	r2,32(r2)
 8010a50:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8010a54:	e0bffe17 	ldw	r2,-8(fp)
 8010a58:	e0ffff17 	ldw	r3,-4(fp)
 8010a5c:	d8000015 	stw	zero,0(sp)
 8010a60:	e1fffd17 	ldw	r7,-12(fp)
 8010a64:	01820074 	movhi	r6,2049
 8010a68:	3182b404 	addi	r6,r6,2768
 8010a6c:	180b883a 	mov	r5,r3
 8010a70:	1009883a 	mov	r4,r2
 8010a74:	8011a680 	call	8011a68 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8010a78:	e0bffd17 	ldw	r2,-12(fp)
 8010a7c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8010a80:	e0bffd17 	ldw	r2,-12(fp)
 8010a84:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8010a88:	d0e6f317 	ldw	r3,-25652(gp)
 8010a8c:	e1fffd17 	ldw	r7,-12(fp)
 8010a90:	01820074 	movhi	r6,2049
 8010a94:	31833704 	addi	r6,r6,3292
 8010a98:	180b883a 	mov	r5,r3
 8010a9c:	1009883a 	mov	r4,r2
 8010aa0:	80116040 	call	8011604 <alt_alarm_start>
 8010aa4:	1000040e 	bge	r2,zero,8010ab8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8010aa8:	e0fffd17 	ldw	r3,-12(fp)
 8010aac:	00a00034 	movhi	r2,32768
 8010ab0:	10bfffc4 	addi	r2,r2,-1
 8010ab4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8010ab8:	0001883a 	nop
 8010abc:	e037883a 	mov	sp,fp
 8010ac0:	dfc00117 	ldw	ra,4(sp)
 8010ac4:	df000017 	ldw	fp,0(sp)
 8010ac8:	dec00204 	addi	sp,sp,8
 8010acc:	f800283a 	ret

08010ad0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8010ad0:	defff804 	addi	sp,sp,-32
 8010ad4:	df000715 	stw	fp,28(sp)
 8010ad8:	df000704 	addi	fp,sp,28
 8010adc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8010ae0:	e0bfff17 	ldw	r2,-4(fp)
 8010ae4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8010ae8:	e0bffb17 	ldw	r2,-20(fp)
 8010aec:	10800017 	ldw	r2,0(r2)
 8010af0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010af4:	e0bffc17 	ldw	r2,-16(fp)
 8010af8:	10800104 	addi	r2,r2,4
 8010afc:	10800037 	ldwio	r2,0(r2)
 8010b00:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8010b04:	e0bffd17 	ldw	r2,-12(fp)
 8010b08:	1080c00c 	andi	r2,r2,768
 8010b0c:	10006d26 	beq	r2,zero,8010cc4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8010b10:	e0bffd17 	ldw	r2,-12(fp)
 8010b14:	1080400c 	andi	r2,r2,256
 8010b18:	10003526 	beq	r2,zero,8010bf0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8010b1c:	00800074 	movhi	r2,1
 8010b20:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010b24:	e0bffb17 	ldw	r2,-20(fp)
 8010b28:	10800a17 	ldw	r2,40(r2)
 8010b2c:	10800044 	addi	r2,r2,1
 8010b30:	1081ffcc 	andi	r2,r2,2047
 8010b34:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8010b38:	e0bffb17 	ldw	r2,-20(fp)
 8010b3c:	10c00b17 	ldw	r3,44(r2)
 8010b40:	e0bffe17 	ldw	r2,-8(fp)
 8010b44:	18801526 	beq	r3,r2,8010b9c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8010b48:	e0bffc17 	ldw	r2,-16(fp)
 8010b4c:	10800037 	ldwio	r2,0(r2)
 8010b50:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8010b54:	e0bff917 	ldw	r2,-28(fp)
 8010b58:	10a0000c 	andi	r2,r2,32768
 8010b5c:	10001126 	beq	r2,zero,8010ba4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8010b60:	e0bffb17 	ldw	r2,-20(fp)
 8010b64:	10800a17 	ldw	r2,40(r2)
 8010b68:	e0fff917 	ldw	r3,-28(fp)
 8010b6c:	1809883a 	mov	r4,r3
 8010b70:	e0fffb17 	ldw	r3,-20(fp)
 8010b74:	1885883a 	add	r2,r3,r2
 8010b78:	10800e04 	addi	r2,r2,56
 8010b7c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010b80:	e0bffb17 	ldw	r2,-20(fp)
 8010b84:	10800a17 	ldw	r2,40(r2)
 8010b88:	10800044 	addi	r2,r2,1
 8010b8c:	10c1ffcc 	andi	r3,r2,2047
 8010b90:	e0bffb17 	ldw	r2,-20(fp)
 8010b94:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8010b98:	003fe206 	br	8010b24 <__alt_data_end+0xfc010b24>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8010b9c:	0001883a 	nop
 8010ba0:	00000106 	br	8010ba8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8010ba4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8010ba8:	e0bff917 	ldw	r2,-28(fp)
 8010bac:	10bfffec 	andhi	r2,r2,65535
 8010bb0:	10000f26 	beq	r2,zero,8010bf0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010bb4:	e0bffb17 	ldw	r2,-20(fp)
 8010bb8:	10c00817 	ldw	r3,32(r2)
 8010bbc:	00bfff84 	movi	r2,-2
 8010bc0:	1886703a 	and	r3,r3,r2
 8010bc4:	e0bffb17 	ldw	r2,-20(fp)
 8010bc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8010bcc:	e0bffc17 	ldw	r2,-16(fp)
 8010bd0:	10800104 	addi	r2,r2,4
 8010bd4:	1007883a 	mov	r3,r2
 8010bd8:	e0bffb17 	ldw	r2,-20(fp)
 8010bdc:	10800817 	ldw	r2,32(r2)
 8010be0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010be4:	e0bffc17 	ldw	r2,-16(fp)
 8010be8:	10800104 	addi	r2,r2,4
 8010bec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8010bf0:	e0bffd17 	ldw	r2,-12(fp)
 8010bf4:	1080800c 	andi	r2,r2,512
 8010bf8:	103fbe26 	beq	r2,zero,8010af4 <__alt_data_end+0xfc010af4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8010bfc:	e0bffd17 	ldw	r2,-12(fp)
 8010c00:	1004d43a 	srli	r2,r2,16
 8010c04:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010c08:	00001406 	br	8010c5c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8010c0c:	e0bffc17 	ldw	r2,-16(fp)
 8010c10:	e0fffb17 	ldw	r3,-20(fp)
 8010c14:	18c00d17 	ldw	r3,52(r3)
 8010c18:	e13ffb17 	ldw	r4,-20(fp)
 8010c1c:	20c7883a 	add	r3,r4,r3
 8010c20:	18c20e04 	addi	r3,r3,2104
 8010c24:	18c00003 	ldbu	r3,0(r3)
 8010c28:	18c03fcc 	andi	r3,r3,255
 8010c2c:	18c0201c 	xori	r3,r3,128
 8010c30:	18ffe004 	addi	r3,r3,-128
 8010c34:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010c38:	e0bffb17 	ldw	r2,-20(fp)
 8010c3c:	10800d17 	ldw	r2,52(r2)
 8010c40:	10800044 	addi	r2,r2,1
 8010c44:	10c1ffcc 	andi	r3,r2,2047
 8010c48:	e0bffb17 	ldw	r2,-20(fp)
 8010c4c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8010c50:	e0bffa17 	ldw	r2,-24(fp)
 8010c54:	10bfffc4 	addi	r2,r2,-1
 8010c58:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010c5c:	e0bffa17 	ldw	r2,-24(fp)
 8010c60:	10000526 	beq	r2,zero,8010c78 <altera_avalon_jtag_uart_irq+0x1a8>
 8010c64:	e0bffb17 	ldw	r2,-20(fp)
 8010c68:	10c00d17 	ldw	r3,52(r2)
 8010c6c:	e0bffb17 	ldw	r2,-20(fp)
 8010c70:	10800c17 	ldw	r2,48(r2)
 8010c74:	18bfe51e 	bne	r3,r2,8010c0c <__alt_data_end+0xfc010c0c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8010c78:	e0bffa17 	ldw	r2,-24(fp)
 8010c7c:	103f9d26 	beq	r2,zero,8010af4 <__alt_data_end+0xfc010af4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010c80:	e0bffb17 	ldw	r2,-20(fp)
 8010c84:	10c00817 	ldw	r3,32(r2)
 8010c88:	00bfff44 	movi	r2,-3
 8010c8c:	1886703a 	and	r3,r3,r2
 8010c90:	e0bffb17 	ldw	r2,-20(fp)
 8010c94:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010c98:	e0bffb17 	ldw	r2,-20(fp)
 8010c9c:	10800017 	ldw	r2,0(r2)
 8010ca0:	10800104 	addi	r2,r2,4
 8010ca4:	1007883a 	mov	r3,r2
 8010ca8:	e0bffb17 	ldw	r2,-20(fp)
 8010cac:	10800817 	ldw	r2,32(r2)
 8010cb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010cb4:	e0bffc17 	ldw	r2,-16(fp)
 8010cb8:	10800104 	addi	r2,r2,4
 8010cbc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8010cc0:	003f8c06 	br	8010af4 <__alt_data_end+0xfc010af4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8010cc4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8010cc8:	0001883a 	nop
 8010ccc:	e037883a 	mov	sp,fp
 8010cd0:	df000017 	ldw	fp,0(sp)
 8010cd4:	dec00104 	addi	sp,sp,4
 8010cd8:	f800283a 	ret

08010cdc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8010cdc:	defff804 	addi	sp,sp,-32
 8010ce0:	df000715 	stw	fp,28(sp)
 8010ce4:	df000704 	addi	fp,sp,28
 8010ce8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8010cec:	e0bffb17 	ldw	r2,-20(fp)
 8010cf0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8010cf4:	e0bff917 	ldw	r2,-28(fp)
 8010cf8:	10800017 	ldw	r2,0(r2)
 8010cfc:	10800104 	addi	r2,r2,4
 8010d00:	10800037 	ldwio	r2,0(r2)
 8010d04:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8010d08:	e0bffa17 	ldw	r2,-24(fp)
 8010d0c:	1081000c 	andi	r2,r2,1024
 8010d10:	10000b26 	beq	r2,zero,8010d40 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8010d14:	e0bff917 	ldw	r2,-28(fp)
 8010d18:	10800017 	ldw	r2,0(r2)
 8010d1c:	10800104 	addi	r2,r2,4
 8010d20:	1007883a 	mov	r3,r2
 8010d24:	e0bff917 	ldw	r2,-28(fp)
 8010d28:	10800817 	ldw	r2,32(r2)
 8010d2c:	10810014 	ori	r2,r2,1024
 8010d30:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8010d34:	e0bff917 	ldw	r2,-28(fp)
 8010d38:	10000915 	stw	zero,36(r2)
 8010d3c:	00000a06 	br	8010d68 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8010d40:	e0bff917 	ldw	r2,-28(fp)
 8010d44:	10c00917 	ldw	r3,36(r2)
 8010d48:	00a00034 	movhi	r2,32768
 8010d4c:	10bfff04 	addi	r2,r2,-4
 8010d50:	10c00536 	bltu	r2,r3,8010d68 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8010d54:	e0bff917 	ldw	r2,-28(fp)
 8010d58:	10800917 	ldw	r2,36(r2)
 8010d5c:	10c00044 	addi	r3,r2,1
 8010d60:	e0bff917 	ldw	r2,-28(fp)
 8010d64:	10c00915 	stw	r3,36(r2)
 8010d68:	d0a6f317 	ldw	r2,-25652(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8010d6c:	e037883a 	mov	sp,fp
 8010d70:	df000017 	ldw	fp,0(sp)
 8010d74:	dec00104 	addi	sp,sp,4
 8010d78:	f800283a 	ret

08010d7c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8010d7c:	defffd04 	addi	sp,sp,-12
 8010d80:	df000215 	stw	fp,8(sp)
 8010d84:	df000204 	addi	fp,sp,8
 8010d88:	e13ffe15 	stw	r4,-8(fp)
 8010d8c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010d90:	00000506 	br	8010da8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8010d94:	e0bfff17 	ldw	r2,-4(fp)
 8010d98:	1090000c 	andi	r2,r2,16384
 8010d9c:	10000226 	beq	r2,zero,8010da8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8010da0:	00bffd44 	movi	r2,-11
 8010da4:	00000b06 	br	8010dd4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010da8:	e0bffe17 	ldw	r2,-8(fp)
 8010dac:	10c00d17 	ldw	r3,52(r2)
 8010db0:	e0bffe17 	ldw	r2,-8(fp)
 8010db4:	10800c17 	ldw	r2,48(r2)
 8010db8:	18800526 	beq	r3,r2,8010dd0 <altera_avalon_jtag_uart_close+0x54>
 8010dbc:	e0bffe17 	ldw	r2,-8(fp)
 8010dc0:	10c00917 	ldw	r3,36(r2)
 8010dc4:	e0bffe17 	ldw	r2,-8(fp)
 8010dc8:	10800117 	ldw	r2,4(r2)
 8010dcc:	18bff136 	bltu	r3,r2,8010d94 <__alt_data_end+0xfc010d94>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8010dd0:	0005883a 	mov	r2,zero
}
 8010dd4:	e037883a 	mov	sp,fp
 8010dd8:	df000017 	ldw	fp,0(sp)
 8010ddc:	dec00104 	addi	sp,sp,4
 8010de0:	f800283a 	ret

08010de4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8010de4:	defffa04 	addi	sp,sp,-24
 8010de8:	df000515 	stw	fp,20(sp)
 8010dec:	df000504 	addi	fp,sp,20
 8010df0:	e13ffd15 	stw	r4,-12(fp)
 8010df4:	e17ffe15 	stw	r5,-8(fp)
 8010df8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8010dfc:	00bff9c4 	movi	r2,-25
 8010e00:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8010e04:	e0bffe17 	ldw	r2,-8(fp)
 8010e08:	10da8060 	cmpeqi	r3,r2,27137
 8010e0c:	1800031e 	bne	r3,zero,8010e1c <altera_avalon_jtag_uart_ioctl+0x38>
 8010e10:	109a80a0 	cmpeqi	r2,r2,27138
 8010e14:	1000181e 	bne	r2,zero,8010e78 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8010e18:	00002906 	br	8010ec0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8010e1c:	e0bffd17 	ldw	r2,-12(fp)
 8010e20:	10c00117 	ldw	r3,4(r2)
 8010e24:	00a00034 	movhi	r2,32768
 8010e28:	10bfffc4 	addi	r2,r2,-1
 8010e2c:	18802126 	beq	r3,r2,8010eb4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8010e30:	e0bfff17 	ldw	r2,-4(fp)
 8010e34:	10800017 	ldw	r2,0(r2)
 8010e38:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8010e3c:	e0bffc17 	ldw	r2,-16(fp)
 8010e40:	10800090 	cmplti	r2,r2,2
 8010e44:	1000061e 	bne	r2,zero,8010e60 <altera_avalon_jtag_uart_ioctl+0x7c>
 8010e48:	e0fffc17 	ldw	r3,-16(fp)
 8010e4c:	00a00034 	movhi	r2,32768
 8010e50:	10bfffc4 	addi	r2,r2,-1
 8010e54:	18800226 	beq	r3,r2,8010e60 <altera_avalon_jtag_uart_ioctl+0x7c>
 8010e58:	e0bffc17 	ldw	r2,-16(fp)
 8010e5c:	00000206 	br	8010e68 <altera_avalon_jtag_uart_ioctl+0x84>
 8010e60:	00a00034 	movhi	r2,32768
 8010e64:	10bfff84 	addi	r2,r2,-2
 8010e68:	e0fffd17 	ldw	r3,-12(fp)
 8010e6c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8010e70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010e74:	00000f06 	br	8010eb4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8010e78:	e0bffd17 	ldw	r2,-12(fp)
 8010e7c:	10c00117 	ldw	r3,4(r2)
 8010e80:	00a00034 	movhi	r2,32768
 8010e84:	10bfffc4 	addi	r2,r2,-1
 8010e88:	18800c26 	beq	r3,r2,8010ebc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8010e8c:	e0bffd17 	ldw	r2,-12(fp)
 8010e90:	10c00917 	ldw	r3,36(r2)
 8010e94:	e0bffd17 	ldw	r2,-12(fp)
 8010e98:	10800117 	ldw	r2,4(r2)
 8010e9c:	1885803a 	cmpltu	r2,r3,r2
 8010ea0:	10c03fcc 	andi	r3,r2,255
 8010ea4:	e0bfff17 	ldw	r2,-4(fp)
 8010ea8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8010eac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8010eb0:	00000206 	br	8010ebc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8010eb4:	0001883a 	nop
 8010eb8:	00000106 	br	8010ec0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8010ebc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8010ec0:	e0bffb17 	ldw	r2,-20(fp)
}
 8010ec4:	e037883a 	mov	sp,fp
 8010ec8:	df000017 	ldw	fp,0(sp)
 8010ecc:	dec00104 	addi	sp,sp,4
 8010ed0:	f800283a 	ret

08010ed4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8010ed4:	defff304 	addi	sp,sp,-52
 8010ed8:	dfc00c15 	stw	ra,48(sp)
 8010edc:	df000b15 	stw	fp,44(sp)
 8010ee0:	df000b04 	addi	fp,sp,44
 8010ee4:	e13ffc15 	stw	r4,-16(fp)
 8010ee8:	e17ffd15 	stw	r5,-12(fp)
 8010eec:	e1bffe15 	stw	r6,-8(fp)
 8010ef0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8010ef4:	e0bffd17 	ldw	r2,-12(fp)
 8010ef8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8010efc:	00004706 	br	801101c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8010f00:	e0bffc17 	ldw	r2,-16(fp)
 8010f04:	10800a17 	ldw	r2,40(r2)
 8010f08:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8010f0c:	e0bffc17 	ldw	r2,-16(fp)
 8010f10:	10800b17 	ldw	r2,44(r2)
 8010f14:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8010f18:	e0fff717 	ldw	r3,-36(fp)
 8010f1c:	e0bff817 	ldw	r2,-32(fp)
 8010f20:	18800536 	bltu	r3,r2,8010f38 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8010f24:	e0fff717 	ldw	r3,-36(fp)
 8010f28:	e0bff817 	ldw	r2,-32(fp)
 8010f2c:	1885c83a 	sub	r2,r3,r2
 8010f30:	e0bff615 	stw	r2,-40(fp)
 8010f34:	00000406 	br	8010f48 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8010f38:	00c20004 	movi	r3,2048
 8010f3c:	e0bff817 	ldw	r2,-32(fp)
 8010f40:	1885c83a 	sub	r2,r3,r2
 8010f44:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8010f48:	e0bff617 	ldw	r2,-40(fp)
 8010f4c:	10001e26 	beq	r2,zero,8010fc8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8010f50:	e0fffe17 	ldw	r3,-8(fp)
 8010f54:	e0bff617 	ldw	r2,-40(fp)
 8010f58:	1880022e 	bgeu	r3,r2,8010f64 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8010f5c:	e0bffe17 	ldw	r2,-8(fp)
 8010f60:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8010f64:	e0bffc17 	ldw	r2,-16(fp)
 8010f68:	10c00e04 	addi	r3,r2,56
 8010f6c:	e0bff817 	ldw	r2,-32(fp)
 8010f70:	1885883a 	add	r2,r3,r2
 8010f74:	e1bff617 	ldw	r6,-40(fp)
 8010f78:	100b883a 	mov	r5,r2
 8010f7c:	e13ff517 	ldw	r4,-44(fp)
 8010f80:	8002b200 	call	8002b20 <memcpy>
      ptr   += n;
 8010f84:	e0fff517 	ldw	r3,-44(fp)
 8010f88:	e0bff617 	ldw	r2,-40(fp)
 8010f8c:	1885883a 	add	r2,r3,r2
 8010f90:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8010f94:	e0fffe17 	ldw	r3,-8(fp)
 8010f98:	e0bff617 	ldw	r2,-40(fp)
 8010f9c:	1885c83a 	sub	r2,r3,r2
 8010fa0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010fa4:	e0fff817 	ldw	r3,-32(fp)
 8010fa8:	e0bff617 	ldw	r2,-40(fp)
 8010fac:	1885883a 	add	r2,r3,r2
 8010fb0:	10c1ffcc 	andi	r3,r2,2047
 8010fb4:	e0bffc17 	ldw	r2,-16(fp)
 8010fb8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8010fbc:	e0bffe17 	ldw	r2,-8(fp)
 8010fc0:	00bfcf16 	blt	zero,r2,8010f00 <__alt_data_end+0xfc010f00>
 8010fc4:	00000106 	br	8010fcc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8010fc8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8010fcc:	e0fff517 	ldw	r3,-44(fp)
 8010fd0:	e0bffd17 	ldw	r2,-12(fp)
 8010fd4:	1880141e 	bne	r3,r2,8011028 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8010fd8:	e0bfff17 	ldw	r2,-4(fp)
 8010fdc:	1090000c 	andi	r2,r2,16384
 8010fe0:	1000131e 	bne	r2,zero,8011030 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8010fe4:	0001883a 	nop
 8010fe8:	e0bffc17 	ldw	r2,-16(fp)
 8010fec:	10c00a17 	ldw	r3,40(r2)
 8010ff0:	e0bff717 	ldw	r2,-36(fp)
 8010ff4:	1880051e 	bne	r3,r2,801100c <altera_avalon_jtag_uart_read+0x138>
 8010ff8:	e0bffc17 	ldw	r2,-16(fp)
 8010ffc:	10c00917 	ldw	r3,36(r2)
 8011000:	e0bffc17 	ldw	r2,-16(fp)
 8011004:	10800117 	ldw	r2,4(r2)
 8011008:	18bff736 	bltu	r3,r2,8010fe8 <__alt_data_end+0xfc010fe8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801100c:	e0bffc17 	ldw	r2,-16(fp)
 8011010:	10c00a17 	ldw	r3,40(r2)
 8011014:	e0bff717 	ldw	r2,-36(fp)
 8011018:	18800726 	beq	r3,r2,8011038 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801101c:	e0bffe17 	ldw	r2,-8(fp)
 8011020:	00bfb716 	blt	zero,r2,8010f00 <__alt_data_end+0xfc010f00>
 8011024:	00000506 	br	801103c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8011028:	0001883a 	nop
 801102c:	00000306 	br	801103c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8011030:	0001883a 	nop
 8011034:	00000106 	br	801103c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8011038:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801103c:	e0fff517 	ldw	r3,-44(fp)
 8011040:	e0bffd17 	ldw	r2,-12(fp)
 8011044:	18801826 	beq	r3,r2,80110a8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011048:	0005303a 	rdctl	r2,status
 801104c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011050:	e0fffb17 	ldw	r3,-20(fp)
 8011054:	00bfff84 	movi	r2,-2
 8011058:	1884703a 	and	r2,r3,r2
 801105c:	1001703a 	wrctl	status,r2
  
  return context;
 8011060:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8011064:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8011068:	e0bffc17 	ldw	r2,-16(fp)
 801106c:	10800817 	ldw	r2,32(r2)
 8011070:	10c00054 	ori	r3,r2,1
 8011074:	e0bffc17 	ldw	r2,-16(fp)
 8011078:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801107c:	e0bffc17 	ldw	r2,-16(fp)
 8011080:	10800017 	ldw	r2,0(r2)
 8011084:	10800104 	addi	r2,r2,4
 8011088:	1007883a 	mov	r3,r2
 801108c:	e0bffc17 	ldw	r2,-16(fp)
 8011090:	10800817 	ldw	r2,32(r2)
 8011094:	18800035 	stwio	r2,0(r3)
 8011098:	e0bffa17 	ldw	r2,-24(fp)
 801109c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80110a0:	e0bff917 	ldw	r2,-28(fp)
 80110a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80110a8:	e0fff517 	ldw	r3,-44(fp)
 80110ac:	e0bffd17 	ldw	r2,-12(fp)
 80110b0:	18800426 	beq	r3,r2,80110c4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80110b4:	e0fff517 	ldw	r3,-44(fp)
 80110b8:	e0bffd17 	ldw	r2,-12(fp)
 80110bc:	1885c83a 	sub	r2,r3,r2
 80110c0:	00000606 	br	80110dc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80110c4:	e0bfff17 	ldw	r2,-4(fp)
 80110c8:	1090000c 	andi	r2,r2,16384
 80110cc:	10000226 	beq	r2,zero,80110d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80110d0:	00bffd44 	movi	r2,-11
 80110d4:	00000106 	br	80110dc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80110d8:	00bffec4 	movi	r2,-5
}
 80110dc:	e037883a 	mov	sp,fp
 80110e0:	dfc00117 	ldw	ra,4(sp)
 80110e4:	df000017 	ldw	fp,0(sp)
 80110e8:	dec00204 	addi	sp,sp,8
 80110ec:	f800283a 	ret

080110f0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80110f0:	defff304 	addi	sp,sp,-52
 80110f4:	dfc00c15 	stw	ra,48(sp)
 80110f8:	df000b15 	stw	fp,44(sp)
 80110fc:	df000b04 	addi	fp,sp,44
 8011100:	e13ffc15 	stw	r4,-16(fp)
 8011104:	e17ffd15 	stw	r5,-12(fp)
 8011108:	e1bffe15 	stw	r6,-8(fp)
 801110c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8011110:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8011114:	e0bffd17 	ldw	r2,-12(fp)
 8011118:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801111c:	00003706 	br	80111fc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8011120:	e0bffc17 	ldw	r2,-16(fp)
 8011124:	10800c17 	ldw	r2,48(r2)
 8011128:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 801112c:	e0bffc17 	ldw	r2,-16(fp)
 8011130:	10800d17 	ldw	r2,52(r2)
 8011134:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8011138:	e0fff917 	ldw	r3,-28(fp)
 801113c:	e0bff517 	ldw	r2,-44(fp)
 8011140:	1880062e 	bgeu	r3,r2,801115c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8011144:	e0fff517 	ldw	r3,-44(fp)
 8011148:	e0bff917 	ldw	r2,-28(fp)
 801114c:	1885c83a 	sub	r2,r3,r2
 8011150:	10bfffc4 	addi	r2,r2,-1
 8011154:	e0bff615 	stw	r2,-40(fp)
 8011158:	00000b06 	br	8011188 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801115c:	e0bff517 	ldw	r2,-44(fp)
 8011160:	10000526 	beq	r2,zero,8011178 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8011164:	00c20004 	movi	r3,2048
 8011168:	e0bff917 	ldw	r2,-28(fp)
 801116c:	1885c83a 	sub	r2,r3,r2
 8011170:	e0bff615 	stw	r2,-40(fp)
 8011174:	00000406 	br	8011188 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8011178:	00c1ffc4 	movi	r3,2047
 801117c:	e0bff917 	ldw	r2,-28(fp)
 8011180:	1885c83a 	sub	r2,r3,r2
 8011184:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8011188:	e0bff617 	ldw	r2,-40(fp)
 801118c:	10001e26 	beq	r2,zero,8011208 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8011190:	e0fffe17 	ldw	r3,-8(fp)
 8011194:	e0bff617 	ldw	r2,-40(fp)
 8011198:	1880022e 	bgeu	r3,r2,80111a4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 801119c:	e0bffe17 	ldw	r2,-8(fp)
 80111a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80111a4:	e0bffc17 	ldw	r2,-16(fp)
 80111a8:	10c20e04 	addi	r3,r2,2104
 80111ac:	e0bff917 	ldw	r2,-28(fp)
 80111b0:	1885883a 	add	r2,r3,r2
 80111b4:	e1bff617 	ldw	r6,-40(fp)
 80111b8:	e17ffd17 	ldw	r5,-12(fp)
 80111bc:	1009883a 	mov	r4,r2
 80111c0:	8002b200 	call	8002b20 <memcpy>
      ptr   += n;
 80111c4:	e0fffd17 	ldw	r3,-12(fp)
 80111c8:	e0bff617 	ldw	r2,-40(fp)
 80111cc:	1885883a 	add	r2,r3,r2
 80111d0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80111d4:	e0fffe17 	ldw	r3,-8(fp)
 80111d8:	e0bff617 	ldw	r2,-40(fp)
 80111dc:	1885c83a 	sub	r2,r3,r2
 80111e0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80111e4:	e0fff917 	ldw	r3,-28(fp)
 80111e8:	e0bff617 	ldw	r2,-40(fp)
 80111ec:	1885883a 	add	r2,r3,r2
 80111f0:	10c1ffcc 	andi	r3,r2,2047
 80111f4:	e0bffc17 	ldw	r2,-16(fp)
 80111f8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80111fc:	e0bffe17 	ldw	r2,-8(fp)
 8011200:	00bfc716 	blt	zero,r2,8011120 <__alt_data_end+0xfc011120>
 8011204:	00000106 	br	801120c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8011208:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801120c:	0005303a 	rdctl	r2,status
 8011210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011214:	e0fffb17 	ldw	r3,-20(fp)
 8011218:	00bfff84 	movi	r2,-2
 801121c:	1884703a 	and	r2,r3,r2
 8011220:	1001703a 	wrctl	status,r2
  
  return context;
 8011224:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8011228:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801122c:	e0bffc17 	ldw	r2,-16(fp)
 8011230:	10800817 	ldw	r2,32(r2)
 8011234:	10c00094 	ori	r3,r2,2
 8011238:	e0bffc17 	ldw	r2,-16(fp)
 801123c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8011240:	e0bffc17 	ldw	r2,-16(fp)
 8011244:	10800017 	ldw	r2,0(r2)
 8011248:	10800104 	addi	r2,r2,4
 801124c:	1007883a 	mov	r3,r2
 8011250:	e0bffc17 	ldw	r2,-16(fp)
 8011254:	10800817 	ldw	r2,32(r2)
 8011258:	18800035 	stwio	r2,0(r3)
 801125c:	e0bffa17 	ldw	r2,-24(fp)
 8011260:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011264:	e0bff817 	ldw	r2,-32(fp)
 8011268:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801126c:	e0bffe17 	ldw	r2,-8(fp)
 8011270:	0080100e 	bge	zero,r2,80112b4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8011274:	e0bfff17 	ldw	r2,-4(fp)
 8011278:	1090000c 	andi	r2,r2,16384
 801127c:	1000101e 	bne	r2,zero,80112c0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8011280:	0001883a 	nop
 8011284:	e0bffc17 	ldw	r2,-16(fp)
 8011288:	10c00d17 	ldw	r3,52(r2)
 801128c:	e0bff517 	ldw	r2,-44(fp)
 8011290:	1880051e 	bne	r3,r2,80112a8 <altera_avalon_jtag_uart_write+0x1b8>
 8011294:	e0bffc17 	ldw	r2,-16(fp)
 8011298:	10c00917 	ldw	r3,36(r2)
 801129c:	e0bffc17 	ldw	r2,-16(fp)
 80112a0:	10800117 	ldw	r2,4(r2)
 80112a4:	18bff736 	bltu	r3,r2,8011284 <__alt_data_end+0xfc011284>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80112a8:	e0bffc17 	ldw	r2,-16(fp)
 80112ac:	10800917 	ldw	r2,36(r2)
 80112b0:	1000051e 	bne	r2,zero,80112c8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80112b4:	e0bffe17 	ldw	r2,-8(fp)
 80112b8:	00bfd016 	blt	zero,r2,80111fc <__alt_data_end+0xfc0111fc>
 80112bc:	00000306 	br	80112cc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80112c0:	0001883a 	nop
 80112c4:	00000106 	br	80112cc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80112c8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80112cc:	e0fffd17 	ldw	r3,-12(fp)
 80112d0:	e0bff717 	ldw	r2,-36(fp)
 80112d4:	18800426 	beq	r3,r2,80112e8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80112d8:	e0fffd17 	ldw	r3,-12(fp)
 80112dc:	e0bff717 	ldw	r2,-36(fp)
 80112e0:	1885c83a 	sub	r2,r3,r2
 80112e4:	00000606 	br	8011300 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80112e8:	e0bfff17 	ldw	r2,-4(fp)
 80112ec:	1090000c 	andi	r2,r2,16384
 80112f0:	10000226 	beq	r2,zero,80112fc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80112f4:	00bffd44 	movi	r2,-11
 80112f8:	00000106 	br	8011300 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80112fc:	00bffec4 	movi	r2,-5
}
 8011300:	e037883a 	mov	sp,fp
 8011304:	dfc00117 	ldw	ra,4(sp)
 8011308:	df000017 	ldw	fp,0(sp)
 801130c:	dec00204 	addi	sp,sp,8
 8011310:	f800283a 	ret

08011314 <alt_avalon_spi_command>:
 8011314:	defff404 	addi	sp,sp,-48
 8011318:	df000b15 	stw	fp,44(sp)
 801131c:	df000b04 	addi	fp,sp,44
 8011320:	e13ffc15 	stw	r4,-16(fp)
 8011324:	e17ffd15 	stw	r5,-12(fp)
 8011328:	e1bffe15 	stw	r6,-8(fp)
 801132c:	e1ffff15 	stw	r7,-4(fp)
 8011330:	e0ffff17 	ldw	r3,-4(fp)
 8011334:	e0bffe17 	ldw	r2,-8(fp)
 8011338:	1885883a 	add	r2,r3,r2
 801133c:	e0bff815 	stw	r2,-32(fp)
 8011340:	e0c00217 	ldw	r3,8(fp)
 8011344:	e0800117 	ldw	r2,4(fp)
 8011348:	1885883a 	add	r2,r3,r2
 801134c:	e0bff915 	stw	r2,-28(fp)
 8011350:	e0800117 	ldw	r2,4(fp)
 8011354:	e0bff515 	stw	r2,-44(fp)
 8011358:	e0bffe17 	ldw	r2,-8(fp)
 801135c:	e0bff615 	stw	r2,-40(fp)
 8011360:	00800044 	movi	r2,1
 8011364:	e0bff715 	stw	r2,-36(fp)
 8011368:	e0bffc17 	ldw	r2,-16(fp)
 801136c:	10800504 	addi	r2,r2,20
 8011370:	1009883a 	mov	r4,r2
 8011374:	00c00044 	movi	r3,1
 8011378:	e0bffd17 	ldw	r2,-12(fp)
 801137c:	1884983a 	sll	r2,r3,r2
 8011380:	20800035 	stwio	r2,0(r4)
 8011384:	e0800317 	ldw	r2,12(fp)
 8011388:	1080008c 	andi	r2,r2,2
 801138c:	1000051e 	bne	r2,zero,80113a4 <alt_avalon_spi_command+0x90>
 8011390:	e0bffc17 	ldw	r2,-16(fp)
 8011394:	10800304 	addi	r2,r2,12
 8011398:	1007883a 	mov	r3,r2
 801139c:	00810004 	movi	r2,1024
 80113a0:	18800035 	stwio	r2,0(r3)
 80113a4:	e0bffc17 	ldw	r2,-16(fp)
 80113a8:	10800037 	ldwio	r2,0(r2)
 80113ac:	e0bffc17 	ldw	r2,-16(fp)
 80113b0:	10800204 	addi	r2,r2,8
 80113b4:	10800037 	ldwio	r2,0(r2)
 80113b8:	e0bffa15 	stw	r2,-24(fp)
 80113bc:	e0bffa17 	ldw	r2,-24(fp)
 80113c0:	1080100c 	andi	r2,r2,64
 80113c4:	10000226 	beq	r2,zero,80113d0 <alt_avalon_spi_command+0xbc>
 80113c8:	e0bff717 	ldw	r2,-36(fp)
 80113cc:	1000031e 	bne	r2,zero,80113dc <alt_avalon_spi_command+0xc8>
 80113d0:	e0bffa17 	ldw	r2,-24(fp)
 80113d4:	1080200c 	andi	r2,r2,128
 80113d8:	103ff426 	beq	r2,zero,80113ac <__alt_data_end+0xfc0113ac>
 80113dc:	e0bffa17 	ldw	r2,-24(fp)
 80113e0:	1080100c 	andi	r2,r2,64
 80113e4:	10001e26 	beq	r2,zero,8011460 <alt_avalon_spi_command+0x14c>
 80113e8:	e0bff717 	ldw	r2,-36(fp)
 80113ec:	00801c0e 	bge	zero,r2,8011460 <alt_avalon_spi_command+0x14c>
 80113f0:	e0bff717 	ldw	r2,-36(fp)
 80113f4:	10bfffc4 	addi	r2,r2,-1
 80113f8:	e0bff715 	stw	r2,-36(fp)
 80113fc:	e0ffff17 	ldw	r3,-4(fp)
 8011400:	e0bff817 	ldw	r2,-32(fp)
 8011404:	18800a2e 	bgeu	r3,r2,8011430 <alt_avalon_spi_command+0x11c>
 8011408:	e0bffc17 	ldw	r2,-16(fp)
 801140c:	10800104 	addi	r2,r2,4
 8011410:	1009883a 	mov	r4,r2
 8011414:	e0bfff17 	ldw	r2,-4(fp)
 8011418:	10c00044 	addi	r3,r2,1
 801141c:	e0ffff15 	stw	r3,-4(fp)
 8011420:	10800003 	ldbu	r2,0(r2)
 8011424:	10803fcc 	andi	r2,r2,255
 8011428:	20800035 	stwio	r2,0(r4)
 801142c:	00000c06 	br	8011460 <alt_avalon_spi_command+0x14c>
 8011430:	e0bff517 	ldw	r2,-44(fp)
 8011434:	10000826 	beq	r2,zero,8011458 <alt_avalon_spi_command+0x144>
 8011438:	e0bff517 	ldw	r2,-44(fp)
 801143c:	10bfffc4 	addi	r2,r2,-1
 8011440:	e0bff515 	stw	r2,-44(fp)
 8011444:	e0bffc17 	ldw	r2,-16(fp)
 8011448:	10800104 	addi	r2,r2,4
 801144c:	0007883a 	mov	r3,zero
 8011450:	10c00035 	stwio	r3,0(r2)
 8011454:	00000206 	br	8011460 <alt_avalon_spi_command+0x14c>
 8011458:	00bf0004 	movi	r2,-1024
 801145c:	e0bff715 	stw	r2,-36(fp)
 8011460:	e0bffa17 	ldw	r2,-24(fp)
 8011464:	1080200c 	andi	r2,r2,128
 8011468:	103fd026 	beq	r2,zero,80113ac <__alt_data_end+0xfc0113ac>
 801146c:	e0bffc17 	ldw	r2,-16(fp)
 8011470:	10800037 	ldwio	r2,0(r2)
 8011474:	e0bffb15 	stw	r2,-20(fp)
 8011478:	e0bff617 	ldw	r2,-40(fp)
 801147c:	10000426 	beq	r2,zero,8011490 <alt_avalon_spi_command+0x17c>
 8011480:	e0bff617 	ldw	r2,-40(fp)
 8011484:	10bfffc4 	addi	r2,r2,-1
 8011488:	e0bff615 	stw	r2,-40(fp)
 801148c:	00000506 	br	80114a4 <alt_avalon_spi_command+0x190>
 8011490:	e0800217 	ldw	r2,8(fp)
 8011494:	10c00044 	addi	r3,r2,1
 8011498:	e0c00215 	stw	r3,8(fp)
 801149c:	e0fffb17 	ldw	r3,-20(fp)
 80114a0:	10c00005 	stb	r3,0(r2)
 80114a4:	e0bff717 	ldw	r2,-36(fp)
 80114a8:	10800044 	addi	r2,r2,1
 80114ac:	e0bff715 	stw	r2,-36(fp)
 80114b0:	e0bff617 	ldw	r2,-40(fp)
 80114b4:	103fbd1e 	bne	r2,zero,80113ac <__alt_data_end+0xfc0113ac>
 80114b8:	e0c00217 	ldw	r3,8(fp)
 80114bc:	e0bff917 	ldw	r2,-28(fp)
 80114c0:	18bfba1e 	bne	r3,r2,80113ac <__alt_data_end+0xfc0113ac>
 80114c4:	e0bffc17 	ldw	r2,-16(fp)
 80114c8:	10800204 	addi	r2,r2,8
 80114cc:	10800037 	ldwio	r2,0(r2)
 80114d0:	e0bffa15 	stw	r2,-24(fp)
 80114d4:	e0bffa17 	ldw	r2,-24(fp)
 80114d8:	1080080c 	andi	r2,r2,32
 80114dc:	103ff926 	beq	r2,zero,80114c4 <__alt_data_end+0xfc0114c4>
 80114e0:	e0800317 	ldw	r2,12(fp)
 80114e4:	1080004c 	andi	r2,r2,1
 80114e8:	1000041e 	bne	r2,zero,80114fc <alt_avalon_spi_command+0x1e8>
 80114ec:	e0bffc17 	ldw	r2,-16(fp)
 80114f0:	10800304 	addi	r2,r2,12
 80114f4:	0007883a 	mov	r3,zero
 80114f8:	10c00035 	stwio	r3,0(r2)
 80114fc:	e0800117 	ldw	r2,4(fp)
 8011500:	e037883a 	mov	sp,fp
 8011504:	df000017 	ldw	fp,0(sp)
 8011508:	dec00104 	addi	sp,sp,4
 801150c:	f800283a 	ret

08011510 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8011510:	defffa04 	addi	sp,sp,-24
 8011514:	dfc00515 	stw	ra,20(sp)
 8011518:	df000415 	stw	fp,16(sp)
 801151c:	df000404 	addi	fp,sp,16
 8011520:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8011524:	0007883a 	mov	r3,zero
 8011528:	e0bfff17 	ldw	r2,-4(fp)
 801152c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8011530:	e0bfff17 	ldw	r2,-4(fp)
 8011534:	10800104 	addi	r2,r2,4
 8011538:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801153c:	0005303a 	rdctl	r2,status
 8011540:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011544:	e0fffd17 	ldw	r3,-12(fp)
 8011548:	00bfff84 	movi	r2,-2
 801154c:	1884703a 	and	r2,r3,r2
 8011550:	1001703a 	wrctl	status,r2
  
  return context;
 8011554:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8011558:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 801155c:	80105680 	call	8010568 <alt_tick>
 8011560:	e0bffc17 	ldw	r2,-16(fp)
 8011564:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011568:	e0bffe17 	ldw	r2,-8(fp)
 801156c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8011570:	0001883a 	nop
 8011574:	e037883a 	mov	sp,fp
 8011578:	dfc00117 	ldw	ra,4(sp)
 801157c:	df000017 	ldw	fp,0(sp)
 8011580:	dec00204 	addi	sp,sp,8
 8011584:	f800283a 	ret

08011588 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8011588:	defff804 	addi	sp,sp,-32
 801158c:	dfc00715 	stw	ra,28(sp)
 8011590:	df000615 	stw	fp,24(sp)
 8011594:	df000604 	addi	fp,sp,24
 8011598:	e13ffc15 	stw	r4,-16(fp)
 801159c:	e17ffd15 	stw	r5,-12(fp)
 80115a0:	e1bffe15 	stw	r6,-8(fp)
 80115a4:	e1ffff15 	stw	r7,-4(fp)
 80115a8:	e0bfff17 	ldw	r2,-4(fp)
 80115ac:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80115b0:	d0a6f317 	ldw	r2,-25652(gp)
 80115b4:	1000021e 	bne	r2,zero,80115c0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80115b8:	e0bffb17 	ldw	r2,-20(fp)
 80115bc:	d0a6f315 	stw	r2,-25652(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80115c0:	e0bffc17 	ldw	r2,-16(fp)
 80115c4:	10800104 	addi	r2,r2,4
 80115c8:	00c001c4 	movi	r3,7
 80115cc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80115d0:	d8000015 	stw	zero,0(sp)
 80115d4:	e1fffc17 	ldw	r7,-16(fp)
 80115d8:	01820074 	movhi	r6,2049
 80115dc:	31854404 	addi	r6,r6,5392
 80115e0:	e17ffe17 	ldw	r5,-8(fp)
 80115e4:	e13ffd17 	ldw	r4,-12(fp)
 80115e8:	8011a680 	call	8011a68 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80115ec:	0001883a 	nop
 80115f0:	e037883a 	mov	sp,fp
 80115f4:	dfc00117 	ldw	ra,4(sp)
 80115f8:	df000017 	ldw	fp,0(sp)
 80115fc:	dec00204 	addi	sp,sp,8
 8011600:	f800283a 	ret

08011604 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8011604:	defff504 	addi	sp,sp,-44
 8011608:	df000a15 	stw	fp,40(sp)
 801160c:	df000a04 	addi	fp,sp,40
 8011610:	e13ffc15 	stw	r4,-16(fp)
 8011614:	e17ffd15 	stw	r5,-12(fp)
 8011618:	e1bffe15 	stw	r6,-8(fp)
 801161c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8011620:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8011624:	d0a6f317 	ldw	r2,-25652(gp)
  
  if (alt_ticks_per_second ())
 8011628:	10003c26 	beq	r2,zero,801171c <alt_alarm_start+0x118>
  {
    if (alarm)
 801162c:	e0bffc17 	ldw	r2,-16(fp)
 8011630:	10003826 	beq	r2,zero,8011714 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8011634:	e0bffc17 	ldw	r2,-16(fp)
 8011638:	e0fffe17 	ldw	r3,-8(fp)
 801163c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8011640:	e0bffc17 	ldw	r2,-16(fp)
 8011644:	e0ffff17 	ldw	r3,-4(fp)
 8011648:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801164c:	0005303a 	rdctl	r2,status
 8011650:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011654:	e0fff917 	ldw	r3,-28(fp)
 8011658:	00bfff84 	movi	r2,-2
 801165c:	1884703a 	and	r2,r3,r2
 8011660:	1001703a 	wrctl	status,r2
  
  return context;
 8011664:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8011668:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801166c:	d0a6f417 	ldw	r2,-25648(gp)
      
      current_nticks = alt_nticks();
 8011670:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8011674:	e0fffd17 	ldw	r3,-12(fp)
 8011678:	e0bff617 	ldw	r2,-40(fp)
 801167c:	1885883a 	add	r2,r3,r2
 8011680:	10c00044 	addi	r3,r2,1
 8011684:	e0bffc17 	ldw	r2,-16(fp)
 8011688:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801168c:	e0bffc17 	ldw	r2,-16(fp)
 8011690:	10c00217 	ldw	r3,8(r2)
 8011694:	e0bff617 	ldw	r2,-40(fp)
 8011698:	1880042e 	bgeu	r3,r2,80116ac <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 801169c:	e0bffc17 	ldw	r2,-16(fp)
 80116a0:	00c00044 	movi	r3,1
 80116a4:	10c00405 	stb	r3,16(r2)
 80116a8:	00000206 	br	80116b4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80116ac:	e0bffc17 	ldw	r2,-16(fp)
 80116b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80116b4:	e0bffc17 	ldw	r2,-16(fp)
 80116b8:	d0e01304 	addi	r3,gp,-32692
 80116bc:	e0fffa15 	stw	r3,-24(fp)
 80116c0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80116c4:	e0bffb17 	ldw	r2,-20(fp)
 80116c8:	e0fffa17 	ldw	r3,-24(fp)
 80116cc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80116d0:	e0bffa17 	ldw	r2,-24(fp)
 80116d4:	10c00017 	ldw	r3,0(r2)
 80116d8:	e0bffb17 	ldw	r2,-20(fp)
 80116dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80116e0:	e0bffa17 	ldw	r2,-24(fp)
 80116e4:	10800017 	ldw	r2,0(r2)
 80116e8:	e0fffb17 	ldw	r3,-20(fp)
 80116ec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80116f0:	e0bffa17 	ldw	r2,-24(fp)
 80116f4:	e0fffb17 	ldw	r3,-20(fp)
 80116f8:	10c00015 	stw	r3,0(r2)
 80116fc:	e0bff817 	ldw	r2,-32(fp)
 8011700:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011704:	e0bff717 	ldw	r2,-36(fp)
 8011708:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801170c:	0005883a 	mov	r2,zero
 8011710:	00000306 	br	8011720 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8011714:	00bffa84 	movi	r2,-22
 8011718:	00000106 	br	8011720 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 801171c:	00bfde84 	movi	r2,-134
  }
}
 8011720:	e037883a 	mov	sp,fp
 8011724:	df000017 	ldw	fp,0(sp)
 8011728:	dec00104 	addi	sp,sp,4
 801172c:	f800283a 	ret

08011730 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8011730:	defffa04 	addi	sp,sp,-24
 8011734:	dfc00515 	stw	ra,20(sp)
 8011738:	df000415 	stw	fp,16(sp)
 801173c:	df000404 	addi	fp,sp,16
 8011740:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8011744:	00800244 	movi	r2,9
 8011748:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 801174c:	014003f4 	movhi	r5,15
 8011750:	29509004 	addi	r5,r5,16960
 8011754:	e13ffd17 	ldw	r4,-12(fp)
 8011758:	8002af80 	call	8002af8 <__mulsi3>
 801175c:	100b883a 	mov	r5,r2
 8011760:	0100bef4 	movhi	r4,763
 8011764:	213c2004 	addi	r4,r4,-3968
 8011768:	8002a3c0 	call	8002a3c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 801176c:	100b883a 	mov	r5,r2
 8011770:	01200034 	movhi	r4,32768
 8011774:	213fffc4 	addi	r4,r4,-1
 8011778:	8002a3c0 	call	8002a3c <__udivsi3>
 801177c:	100b883a 	mov	r5,r2
 8011780:	e13fff17 	ldw	r4,-4(fp)
 8011784:	8002a3c0 	call	8002a3c <__udivsi3>
 8011788:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801178c:	e0bffe17 	ldw	r2,-8(fp)
 8011790:	10002a26 	beq	r2,zero,801183c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8011794:	e03ffc15 	stw	zero,-16(fp)
 8011798:	00001706 	br	80117f8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801179c:	00a00034 	movhi	r2,32768
 80117a0:	10bfffc4 	addi	r2,r2,-1
 80117a4:	10bfffc4 	addi	r2,r2,-1
 80117a8:	103ffe1e 	bne	r2,zero,80117a4 <__alt_data_end+0xfc0117a4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80117ac:	014003f4 	movhi	r5,15
 80117b0:	29509004 	addi	r5,r5,16960
 80117b4:	e13ffd17 	ldw	r4,-12(fp)
 80117b8:	8002af80 	call	8002af8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80117bc:	100b883a 	mov	r5,r2
 80117c0:	0100bef4 	movhi	r4,763
 80117c4:	213c2004 	addi	r4,r4,-3968
 80117c8:	8002a3c0 	call	8002a3c <__udivsi3>
 80117cc:	100b883a 	mov	r5,r2
 80117d0:	01200034 	movhi	r4,32768
 80117d4:	213fffc4 	addi	r4,r4,-1
 80117d8:	8002a3c0 	call	8002a3c <__udivsi3>
 80117dc:	1007883a 	mov	r3,r2
 80117e0:	e0bfff17 	ldw	r2,-4(fp)
 80117e4:	10c5c83a 	sub	r2,r2,r3
 80117e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80117ec:	e0bffc17 	ldw	r2,-16(fp)
 80117f0:	10800044 	addi	r2,r2,1
 80117f4:	e0bffc15 	stw	r2,-16(fp)
 80117f8:	e0fffc17 	ldw	r3,-16(fp)
 80117fc:	e0bffe17 	ldw	r2,-8(fp)
 8011800:	18bfe616 	blt	r3,r2,801179c <__alt_data_end+0xfc01179c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8011804:	014003f4 	movhi	r5,15
 8011808:	29509004 	addi	r5,r5,16960
 801180c:	e13ffd17 	ldw	r4,-12(fp)
 8011810:	8002af80 	call	8002af8 <__mulsi3>
 8011814:	100b883a 	mov	r5,r2
 8011818:	0100bef4 	movhi	r4,763
 801181c:	213c2004 	addi	r4,r4,-3968
 8011820:	8002a3c0 	call	8002a3c <__udivsi3>
 8011824:	e17fff17 	ldw	r5,-4(fp)
 8011828:	1009883a 	mov	r4,r2
 801182c:	8002af80 	call	8002af8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8011830:	10bfffc4 	addi	r2,r2,-1
 8011834:	103ffe1e 	bne	r2,zero,8011830 <__alt_data_end+0xfc011830>
 8011838:	00000d06 	br	8011870 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 801183c:	014003f4 	movhi	r5,15
 8011840:	29509004 	addi	r5,r5,16960
 8011844:	e13ffd17 	ldw	r4,-12(fp)
 8011848:	8002af80 	call	8002af8 <__mulsi3>
 801184c:	100b883a 	mov	r5,r2
 8011850:	0100bef4 	movhi	r4,763
 8011854:	213c2004 	addi	r4,r4,-3968
 8011858:	8002a3c0 	call	8002a3c <__udivsi3>
 801185c:	e17fff17 	ldw	r5,-4(fp)
 8011860:	1009883a 	mov	r4,r2
 8011864:	8002af80 	call	8002af8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8011868:	10bfffc4 	addi	r2,r2,-1
 801186c:	00bffe16 	blt	zero,r2,8011868 <__alt_data_end+0xfc011868>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8011870:	0005883a 	mov	r2,zero
}
 8011874:	e037883a 	mov	sp,fp
 8011878:	dfc00117 	ldw	ra,4(sp)
 801187c:	df000017 	ldw	fp,0(sp)
 8011880:	dec00204 	addi	sp,sp,8
 8011884:	f800283a 	ret

08011888 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8011888:	deffff04 	addi	sp,sp,-4
 801188c:	df000015 	stw	fp,0(sp)
 8011890:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8011894:	0001883a 	nop
 8011898:	e037883a 	mov	sp,fp
 801189c:	df000017 	ldw	fp,0(sp)
 80118a0:	dec00104 	addi	sp,sp,4
 80118a4:	f800283a 	ret

080118a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80118a8:	defffe04 	addi	sp,sp,-8
 80118ac:	dfc00115 	stw	ra,4(sp)
 80118b0:	df000015 	stw	fp,0(sp)
 80118b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80118b8:	d0a01117 	ldw	r2,-32700(gp)
 80118bc:	10000326 	beq	r2,zero,80118cc <alt_get_errno+0x24>
 80118c0:	d0a01117 	ldw	r2,-32700(gp)
 80118c4:	103ee83a 	callr	r2
 80118c8:	00000106 	br	80118d0 <alt_get_errno+0x28>
 80118cc:	d0a6ef04 	addi	r2,gp,-25668
}
 80118d0:	e037883a 	mov	sp,fp
 80118d4:	dfc00117 	ldw	ra,4(sp)
 80118d8:	df000017 	ldw	fp,0(sp)
 80118dc:	dec00204 	addi	sp,sp,8
 80118e0:	f800283a 	ret

080118e4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80118e4:	defffa04 	addi	sp,sp,-24
 80118e8:	dfc00515 	stw	ra,20(sp)
 80118ec:	df000415 	stw	fp,16(sp)
 80118f0:	df000404 	addi	fp,sp,16
 80118f4:	e13ffe15 	stw	r4,-8(fp)
 80118f8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80118fc:	e0bffe17 	ldw	r2,-8(fp)
 8011900:	10000326 	beq	r2,zero,8011910 <alt_dev_llist_insert+0x2c>
 8011904:	e0bffe17 	ldw	r2,-8(fp)
 8011908:	10800217 	ldw	r2,8(r2)
 801190c:	1000061e 	bne	r2,zero,8011928 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8011910:	80118a80 	call	80118a8 <alt_get_errno>
 8011914:	1007883a 	mov	r3,r2
 8011918:	00800584 	movi	r2,22
 801191c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8011920:	00bffa84 	movi	r2,-22
 8011924:	00001306 	br	8011974 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8011928:	e0bffe17 	ldw	r2,-8(fp)
 801192c:	e0ffff17 	ldw	r3,-4(fp)
 8011930:	e0fffc15 	stw	r3,-16(fp)
 8011934:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8011938:	e0bffd17 	ldw	r2,-12(fp)
 801193c:	e0fffc17 	ldw	r3,-16(fp)
 8011940:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8011944:	e0bffc17 	ldw	r2,-16(fp)
 8011948:	10c00017 	ldw	r3,0(r2)
 801194c:	e0bffd17 	ldw	r2,-12(fp)
 8011950:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8011954:	e0bffc17 	ldw	r2,-16(fp)
 8011958:	10800017 	ldw	r2,0(r2)
 801195c:	e0fffd17 	ldw	r3,-12(fp)
 8011960:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011964:	e0bffc17 	ldw	r2,-16(fp)
 8011968:	e0fffd17 	ldw	r3,-12(fp)
 801196c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8011970:	0005883a 	mov	r2,zero
}
 8011974:	e037883a 	mov	sp,fp
 8011978:	dfc00117 	ldw	ra,4(sp)
 801197c:	df000017 	ldw	fp,0(sp)
 8011980:	dec00204 	addi	sp,sp,8
 8011984:	f800283a 	ret

08011988 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8011988:	defffd04 	addi	sp,sp,-12
 801198c:	dfc00215 	stw	ra,8(sp)
 8011990:	df000115 	stw	fp,4(sp)
 8011994:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011998:	00820074 	movhi	r2,2049
 801199c:	1089e604 	addi	r2,r2,10136
 80119a0:	e0bfff15 	stw	r2,-4(fp)
 80119a4:	00000606 	br	80119c0 <_do_ctors+0x38>
        (*ctor) (); 
 80119a8:	e0bfff17 	ldw	r2,-4(fp)
 80119ac:	10800017 	ldw	r2,0(r2)
 80119b0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80119b4:	e0bfff17 	ldw	r2,-4(fp)
 80119b8:	10bfff04 	addi	r2,r2,-4
 80119bc:	e0bfff15 	stw	r2,-4(fp)
 80119c0:	e0ffff17 	ldw	r3,-4(fp)
 80119c4:	00820074 	movhi	r2,2049
 80119c8:	1089e704 	addi	r2,r2,10140
 80119cc:	18bff62e 	bgeu	r3,r2,80119a8 <__alt_data_end+0xfc0119a8>
        (*ctor) (); 
}
 80119d0:	0001883a 	nop
 80119d4:	e037883a 	mov	sp,fp
 80119d8:	dfc00117 	ldw	ra,4(sp)
 80119dc:	df000017 	ldw	fp,0(sp)
 80119e0:	dec00204 	addi	sp,sp,8
 80119e4:	f800283a 	ret

080119e8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80119e8:	defffd04 	addi	sp,sp,-12
 80119ec:	dfc00215 	stw	ra,8(sp)
 80119f0:	df000115 	stw	fp,4(sp)
 80119f4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80119f8:	00820074 	movhi	r2,2049
 80119fc:	1089e604 	addi	r2,r2,10136
 8011a00:	e0bfff15 	stw	r2,-4(fp)
 8011a04:	00000606 	br	8011a20 <_do_dtors+0x38>
        (*dtor) (); 
 8011a08:	e0bfff17 	ldw	r2,-4(fp)
 8011a0c:	10800017 	ldw	r2,0(r2)
 8011a10:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8011a14:	e0bfff17 	ldw	r2,-4(fp)
 8011a18:	10bfff04 	addi	r2,r2,-4
 8011a1c:	e0bfff15 	stw	r2,-4(fp)
 8011a20:	e0ffff17 	ldw	r3,-4(fp)
 8011a24:	00820074 	movhi	r2,2049
 8011a28:	1089e704 	addi	r2,r2,10140
 8011a2c:	18bff62e 	bgeu	r3,r2,8011a08 <__alt_data_end+0xfc011a08>
        (*dtor) (); 
}
 8011a30:	0001883a 	nop
 8011a34:	e037883a 	mov	sp,fp
 8011a38:	dfc00117 	ldw	ra,4(sp)
 8011a3c:	df000017 	ldw	fp,0(sp)
 8011a40:	dec00204 	addi	sp,sp,8
 8011a44:	f800283a 	ret

08011a48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8011a48:	deffff04 	addi	sp,sp,-4
 8011a4c:	df000015 	stw	fp,0(sp)
 8011a50:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8011a54:	0001883a 	nop
 8011a58:	e037883a 	mov	sp,fp
 8011a5c:	df000017 	ldw	fp,0(sp)
 8011a60:	dec00104 	addi	sp,sp,4
 8011a64:	f800283a 	ret

08011a68 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011a68:	defff904 	addi	sp,sp,-28
 8011a6c:	dfc00615 	stw	ra,24(sp)
 8011a70:	df000515 	stw	fp,20(sp)
 8011a74:	df000504 	addi	fp,sp,20
 8011a78:	e13ffc15 	stw	r4,-16(fp)
 8011a7c:	e17ffd15 	stw	r5,-12(fp)
 8011a80:	e1bffe15 	stw	r6,-8(fp)
 8011a84:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8011a88:	e0800217 	ldw	r2,8(fp)
 8011a8c:	d8800015 	stw	r2,0(sp)
 8011a90:	e1ffff17 	ldw	r7,-4(fp)
 8011a94:	e1bffe17 	ldw	r6,-8(fp)
 8011a98:	e17ffd17 	ldw	r5,-12(fp)
 8011a9c:	e13ffc17 	ldw	r4,-16(fp)
 8011aa0:	8011c180 	call	8011c18 <alt_iic_isr_register>
}  
 8011aa4:	e037883a 	mov	sp,fp
 8011aa8:	dfc00117 	ldw	ra,4(sp)
 8011aac:	df000017 	ldw	fp,0(sp)
 8011ab0:	dec00204 	addi	sp,sp,8
 8011ab4:	f800283a 	ret

08011ab8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8011ab8:	defff904 	addi	sp,sp,-28
 8011abc:	df000615 	stw	fp,24(sp)
 8011ac0:	df000604 	addi	fp,sp,24
 8011ac4:	e13ffe15 	stw	r4,-8(fp)
 8011ac8:	e17fff15 	stw	r5,-4(fp)
 8011acc:	e0bfff17 	ldw	r2,-4(fp)
 8011ad0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011ad4:	0005303a 	rdctl	r2,status
 8011ad8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011adc:	e0fffb17 	ldw	r3,-20(fp)
 8011ae0:	00bfff84 	movi	r2,-2
 8011ae4:	1884703a 	and	r2,r3,r2
 8011ae8:	1001703a 	wrctl	status,r2
  
  return context;
 8011aec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8011af0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8011af4:	00c00044 	movi	r3,1
 8011af8:	e0bffa17 	ldw	r2,-24(fp)
 8011afc:	1884983a 	sll	r2,r3,r2
 8011b00:	1007883a 	mov	r3,r2
 8011b04:	d0a6f517 	ldw	r2,-25644(gp)
 8011b08:	1884b03a 	or	r2,r3,r2
 8011b0c:	d0a6f515 	stw	r2,-25644(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011b10:	d0a6f517 	ldw	r2,-25644(gp)
 8011b14:	100170fa 	wrctl	ienable,r2
 8011b18:	e0bffc17 	ldw	r2,-16(fp)
 8011b1c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011b20:	e0bffd17 	ldw	r2,-12(fp)
 8011b24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8011b28:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8011b2c:	0001883a 	nop
}
 8011b30:	e037883a 	mov	sp,fp
 8011b34:	df000017 	ldw	fp,0(sp)
 8011b38:	dec00104 	addi	sp,sp,4
 8011b3c:	f800283a 	ret

08011b40 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8011b40:	defff904 	addi	sp,sp,-28
 8011b44:	df000615 	stw	fp,24(sp)
 8011b48:	df000604 	addi	fp,sp,24
 8011b4c:	e13ffe15 	stw	r4,-8(fp)
 8011b50:	e17fff15 	stw	r5,-4(fp)
 8011b54:	e0bfff17 	ldw	r2,-4(fp)
 8011b58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011b5c:	0005303a 	rdctl	r2,status
 8011b60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011b64:	e0fffb17 	ldw	r3,-20(fp)
 8011b68:	00bfff84 	movi	r2,-2
 8011b6c:	1884703a 	and	r2,r3,r2
 8011b70:	1001703a 	wrctl	status,r2
  
  return context;
 8011b74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8011b78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8011b7c:	00c00044 	movi	r3,1
 8011b80:	e0bffa17 	ldw	r2,-24(fp)
 8011b84:	1884983a 	sll	r2,r3,r2
 8011b88:	0084303a 	nor	r2,zero,r2
 8011b8c:	1007883a 	mov	r3,r2
 8011b90:	d0a6f517 	ldw	r2,-25644(gp)
 8011b94:	1884703a 	and	r2,r3,r2
 8011b98:	d0a6f515 	stw	r2,-25644(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011b9c:	d0a6f517 	ldw	r2,-25644(gp)
 8011ba0:	100170fa 	wrctl	ienable,r2
 8011ba4:	e0bffc17 	ldw	r2,-16(fp)
 8011ba8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011bac:	e0bffd17 	ldw	r2,-12(fp)
 8011bb0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8011bb4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8011bb8:	0001883a 	nop
}
 8011bbc:	e037883a 	mov	sp,fp
 8011bc0:	df000017 	ldw	fp,0(sp)
 8011bc4:	dec00104 	addi	sp,sp,4
 8011bc8:	f800283a 	ret

08011bcc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8011bcc:	defffc04 	addi	sp,sp,-16
 8011bd0:	df000315 	stw	fp,12(sp)
 8011bd4:	df000304 	addi	fp,sp,12
 8011bd8:	e13ffe15 	stw	r4,-8(fp)
 8011bdc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8011be0:	000530fa 	rdctl	r2,ienable
 8011be4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8011be8:	00c00044 	movi	r3,1
 8011bec:	e0bfff17 	ldw	r2,-4(fp)
 8011bf0:	1884983a 	sll	r2,r3,r2
 8011bf4:	1007883a 	mov	r3,r2
 8011bf8:	e0bffd17 	ldw	r2,-12(fp)
 8011bfc:	1884703a 	and	r2,r3,r2
 8011c00:	1004c03a 	cmpne	r2,r2,zero
 8011c04:	10803fcc 	andi	r2,r2,255
}
 8011c08:	e037883a 	mov	sp,fp
 8011c0c:	df000017 	ldw	fp,0(sp)
 8011c10:	dec00104 	addi	sp,sp,4
 8011c14:	f800283a 	ret

08011c18 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011c18:	defff504 	addi	sp,sp,-44
 8011c1c:	dfc00a15 	stw	ra,40(sp)
 8011c20:	df000915 	stw	fp,36(sp)
 8011c24:	df000904 	addi	fp,sp,36
 8011c28:	e13ffc15 	stw	r4,-16(fp)
 8011c2c:	e17ffd15 	stw	r5,-12(fp)
 8011c30:	e1bffe15 	stw	r6,-8(fp)
 8011c34:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8011c38:	00bffa84 	movi	r2,-22
 8011c3c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8011c40:	e0bffd17 	ldw	r2,-12(fp)
 8011c44:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8011c48:	e0bff817 	ldw	r2,-32(fp)
 8011c4c:	10800808 	cmpgei	r2,r2,32
 8011c50:	1000271e 	bne	r2,zero,8011cf0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011c54:	0005303a 	rdctl	r2,status
 8011c58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011c5c:	e0fffb17 	ldw	r3,-20(fp)
 8011c60:	00bfff84 	movi	r2,-2
 8011c64:	1884703a 	and	r2,r3,r2
 8011c68:	1001703a 	wrctl	status,r2
  
  return context;
 8011c6c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8011c70:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8011c74:	00820074 	movhi	r2,2049
 8011c78:	109eeb04 	addi	r2,r2,31660
 8011c7c:	e0fff817 	ldw	r3,-32(fp)
 8011c80:	180690fa 	slli	r3,r3,3
 8011c84:	10c5883a 	add	r2,r2,r3
 8011c88:	e0fffe17 	ldw	r3,-8(fp)
 8011c8c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8011c90:	00820074 	movhi	r2,2049
 8011c94:	109eeb04 	addi	r2,r2,31660
 8011c98:	e0fff817 	ldw	r3,-32(fp)
 8011c9c:	180690fa 	slli	r3,r3,3
 8011ca0:	10c5883a 	add	r2,r2,r3
 8011ca4:	10800104 	addi	r2,r2,4
 8011ca8:	e0ffff17 	ldw	r3,-4(fp)
 8011cac:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8011cb0:	e0bffe17 	ldw	r2,-8(fp)
 8011cb4:	10000526 	beq	r2,zero,8011ccc <alt_iic_isr_register+0xb4>
 8011cb8:	e0bff817 	ldw	r2,-32(fp)
 8011cbc:	100b883a 	mov	r5,r2
 8011cc0:	e13ffc17 	ldw	r4,-16(fp)
 8011cc4:	8011ab80 	call	8011ab8 <alt_ic_irq_enable>
 8011cc8:	00000406 	br	8011cdc <alt_iic_isr_register+0xc4>
 8011ccc:	e0bff817 	ldw	r2,-32(fp)
 8011cd0:	100b883a 	mov	r5,r2
 8011cd4:	e13ffc17 	ldw	r4,-16(fp)
 8011cd8:	8011b400 	call	8011b40 <alt_ic_irq_disable>
 8011cdc:	e0bff715 	stw	r2,-36(fp)
 8011ce0:	e0bffa17 	ldw	r2,-24(fp)
 8011ce4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011ce8:	e0bff917 	ldw	r2,-28(fp)
 8011cec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8011cf0:	e0bff717 	ldw	r2,-36(fp)
}
 8011cf4:	e037883a 	mov	sp,fp
 8011cf8:	dfc00117 	ldw	ra,4(sp)
 8011cfc:	df000017 	ldw	fp,0(sp)
 8011d00:	dec00204 	addi	sp,sp,8
 8011d04:	f800283a 	ret

08011d08 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8011d08:	defff804 	addi	sp,sp,-32
 8011d0c:	dfc00715 	stw	ra,28(sp)
 8011d10:	df000615 	stw	fp,24(sp)
 8011d14:	dc000515 	stw	r16,20(sp)
 8011d18:	df000604 	addi	fp,sp,24
 8011d1c:	e13ffb15 	stw	r4,-20(fp)
 8011d20:	e17ffc15 	stw	r5,-16(fp)
 8011d24:	e1bffd15 	stw	r6,-12(fp)
 8011d28:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8011d2c:	e1bffe17 	ldw	r6,-8(fp)
 8011d30:	e17ffd17 	ldw	r5,-12(fp)
 8011d34:	e13ffc17 	ldw	r4,-16(fp)
 8011d38:	8011f900 	call	8011f90 <open>
 8011d3c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8011d40:	e0bffa17 	ldw	r2,-24(fp)
 8011d44:	10002216 	blt	r2,zero,8011dd0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8011d48:	04020074 	movhi	r16,2049
 8011d4c:	84131604 	addi	r16,r16,19544
 8011d50:	e0bffa17 	ldw	r2,-24(fp)
 8011d54:	01400304 	movi	r5,12
 8011d58:	1009883a 	mov	r4,r2
 8011d5c:	8002af80 	call	8002af8 <__mulsi3>
 8011d60:	8085883a 	add	r2,r16,r2
 8011d64:	10c00017 	ldw	r3,0(r2)
 8011d68:	e0bffb17 	ldw	r2,-20(fp)
 8011d6c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8011d70:	04020074 	movhi	r16,2049
 8011d74:	84131604 	addi	r16,r16,19544
 8011d78:	e0bffa17 	ldw	r2,-24(fp)
 8011d7c:	01400304 	movi	r5,12
 8011d80:	1009883a 	mov	r4,r2
 8011d84:	8002af80 	call	8002af8 <__mulsi3>
 8011d88:	8085883a 	add	r2,r16,r2
 8011d8c:	10800104 	addi	r2,r2,4
 8011d90:	10c00017 	ldw	r3,0(r2)
 8011d94:	e0bffb17 	ldw	r2,-20(fp)
 8011d98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8011d9c:	04020074 	movhi	r16,2049
 8011da0:	84131604 	addi	r16,r16,19544
 8011da4:	e0bffa17 	ldw	r2,-24(fp)
 8011da8:	01400304 	movi	r5,12
 8011dac:	1009883a 	mov	r4,r2
 8011db0:	8002af80 	call	8002af8 <__mulsi3>
 8011db4:	8085883a 	add	r2,r16,r2
 8011db8:	10800204 	addi	r2,r2,8
 8011dbc:	10c00017 	ldw	r3,0(r2)
 8011dc0:	e0bffb17 	ldw	r2,-20(fp)
 8011dc4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8011dc8:	e13ffa17 	ldw	r4,-24(fp)
 8011dcc:	80103980 	call	8010398 <alt_release_fd>
  }
} 
 8011dd0:	0001883a 	nop
 8011dd4:	e6ffff04 	addi	sp,fp,-4
 8011dd8:	dfc00217 	ldw	ra,8(sp)
 8011ddc:	df000117 	ldw	fp,4(sp)
 8011de0:	dc000017 	ldw	r16,0(sp)
 8011de4:	dec00304 	addi	sp,sp,12
 8011de8:	f800283a 	ret

08011dec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8011dec:	defffb04 	addi	sp,sp,-20
 8011df0:	dfc00415 	stw	ra,16(sp)
 8011df4:	df000315 	stw	fp,12(sp)
 8011df8:	df000304 	addi	fp,sp,12
 8011dfc:	e13ffd15 	stw	r4,-12(fp)
 8011e00:	e17ffe15 	stw	r5,-8(fp)
 8011e04:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8011e08:	01c07fc4 	movi	r7,511
 8011e0c:	01800044 	movi	r6,1
 8011e10:	e17ffd17 	ldw	r5,-12(fp)
 8011e14:	01020074 	movhi	r4,2049
 8011e18:	21131904 	addi	r4,r4,19556
 8011e1c:	8011d080 	call	8011d08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8011e20:	01c07fc4 	movi	r7,511
 8011e24:	000d883a 	mov	r6,zero
 8011e28:	e17ffe17 	ldw	r5,-8(fp)
 8011e2c:	01020074 	movhi	r4,2049
 8011e30:	21131604 	addi	r4,r4,19544
 8011e34:	8011d080 	call	8011d08 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8011e38:	01c07fc4 	movi	r7,511
 8011e3c:	01800044 	movi	r6,1
 8011e40:	e17fff17 	ldw	r5,-4(fp)
 8011e44:	01020074 	movhi	r4,2049
 8011e48:	21131c04 	addi	r4,r4,19568
 8011e4c:	8011d080 	call	8011d08 <alt_open_fd>
}  
 8011e50:	0001883a 	nop
 8011e54:	e037883a 	mov	sp,fp
 8011e58:	dfc00117 	ldw	ra,4(sp)
 8011e5c:	df000017 	ldw	fp,0(sp)
 8011e60:	dec00204 	addi	sp,sp,8
 8011e64:	f800283a 	ret

08011e68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8011e68:	defffe04 	addi	sp,sp,-8
 8011e6c:	dfc00115 	stw	ra,4(sp)
 8011e70:	df000015 	stw	fp,0(sp)
 8011e74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011e78:	d0a01117 	ldw	r2,-32700(gp)
 8011e7c:	10000326 	beq	r2,zero,8011e8c <alt_get_errno+0x24>
 8011e80:	d0a01117 	ldw	r2,-32700(gp)
 8011e84:	103ee83a 	callr	r2
 8011e88:	00000106 	br	8011e90 <alt_get_errno+0x28>
 8011e8c:	d0a6ef04 	addi	r2,gp,-25668
}
 8011e90:	e037883a 	mov	sp,fp
 8011e94:	dfc00117 	ldw	ra,4(sp)
 8011e98:	df000017 	ldw	fp,0(sp)
 8011e9c:	dec00204 	addi	sp,sp,8
 8011ea0:	f800283a 	ret

08011ea4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8011ea4:	defffb04 	addi	sp,sp,-20
 8011ea8:	dfc00415 	stw	ra,16(sp)
 8011eac:	df000315 	stw	fp,12(sp)
 8011eb0:	dc000215 	stw	r16,8(sp)
 8011eb4:	df000304 	addi	fp,sp,12
 8011eb8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8011ebc:	e0bffe17 	ldw	r2,-8(fp)
 8011ec0:	10800217 	ldw	r2,8(r2)
 8011ec4:	10d00034 	orhi	r3,r2,16384
 8011ec8:	e0bffe17 	ldw	r2,-8(fp)
 8011ecc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8011ed0:	e03ffd15 	stw	zero,-12(fp)
 8011ed4:	00002306 	br	8011f64 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011ed8:	04020074 	movhi	r16,2049
 8011edc:	84131604 	addi	r16,r16,19544
 8011ee0:	e0bffd17 	ldw	r2,-12(fp)
 8011ee4:	01400304 	movi	r5,12
 8011ee8:	1009883a 	mov	r4,r2
 8011eec:	8002af80 	call	8002af8 <__mulsi3>
 8011ef0:	8085883a 	add	r2,r16,r2
 8011ef4:	10c00017 	ldw	r3,0(r2)
 8011ef8:	e0bffe17 	ldw	r2,-8(fp)
 8011efc:	10800017 	ldw	r2,0(r2)
 8011f00:	1880151e 	bne	r3,r2,8011f58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011f04:	04020074 	movhi	r16,2049
 8011f08:	84131604 	addi	r16,r16,19544
 8011f0c:	e0bffd17 	ldw	r2,-12(fp)
 8011f10:	01400304 	movi	r5,12
 8011f14:	1009883a 	mov	r4,r2
 8011f18:	8002af80 	call	8002af8 <__mulsi3>
 8011f1c:	8085883a 	add	r2,r16,r2
 8011f20:	10800204 	addi	r2,r2,8
 8011f24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011f28:	10000b0e 	bge	r2,zero,8011f58 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8011f2c:	01400304 	movi	r5,12
 8011f30:	e13ffd17 	ldw	r4,-12(fp)
 8011f34:	8002af80 	call	8002af8 <__mulsi3>
 8011f38:	1007883a 	mov	r3,r2
 8011f3c:	00820074 	movhi	r2,2049
 8011f40:	10931604 	addi	r2,r2,19544
 8011f44:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011f48:	e0bffe17 	ldw	r2,-8(fp)
 8011f4c:	18800226 	beq	r3,r2,8011f58 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8011f50:	00bffcc4 	movi	r2,-13
 8011f54:	00000806 	br	8011f78 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8011f58:	e0bffd17 	ldw	r2,-12(fp)
 8011f5c:	10800044 	addi	r2,r2,1
 8011f60:	e0bffd15 	stw	r2,-12(fp)
 8011f64:	d0a01017 	ldw	r2,-32704(gp)
 8011f68:	1007883a 	mov	r3,r2
 8011f6c:	e0bffd17 	ldw	r2,-12(fp)
 8011f70:	18bfd92e 	bgeu	r3,r2,8011ed8 <__alt_data_end+0xfc011ed8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8011f74:	0005883a 	mov	r2,zero
}
 8011f78:	e6ffff04 	addi	sp,fp,-4
 8011f7c:	dfc00217 	ldw	ra,8(sp)
 8011f80:	df000117 	ldw	fp,4(sp)
 8011f84:	dc000017 	ldw	r16,0(sp)
 8011f88:	dec00304 	addi	sp,sp,12
 8011f8c:	f800283a 	ret

08011f90 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8011f90:	defff604 	addi	sp,sp,-40
 8011f94:	dfc00915 	stw	ra,36(sp)
 8011f98:	df000815 	stw	fp,32(sp)
 8011f9c:	df000804 	addi	fp,sp,32
 8011fa0:	e13ffd15 	stw	r4,-12(fp)
 8011fa4:	e17ffe15 	stw	r5,-8(fp)
 8011fa8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8011fac:	00bfffc4 	movi	r2,-1
 8011fb0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8011fb4:	00bffb44 	movi	r2,-19
 8011fb8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8011fbc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8011fc0:	d1600e04 	addi	r5,gp,-32712
 8011fc4:	e13ffd17 	ldw	r4,-12(fp)
 8011fc8:	80121100 	call	8012110 <alt_find_dev>
 8011fcc:	e0bff815 	stw	r2,-32(fp)
 8011fd0:	e0bff817 	ldw	r2,-32(fp)
 8011fd4:	1000051e 	bne	r2,zero,8011fec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8011fd8:	e13ffd17 	ldw	r4,-12(fp)
 8011fdc:	80121a00 	call	80121a0 <alt_find_file>
 8011fe0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8011fe4:	00800044 	movi	r2,1
 8011fe8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8011fec:	e0bff817 	ldw	r2,-32(fp)
 8011ff0:	10002b26 	beq	r2,zero,80120a0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8011ff4:	e13ff817 	ldw	r4,-32(fp)
 8011ff8:	80122a80 	call	80122a8 <alt_get_fd>
 8011ffc:	e0bff915 	stw	r2,-28(fp)
 8012000:	e0bff917 	ldw	r2,-28(fp)
 8012004:	1000030e 	bge	r2,zero,8012014 <open+0x84>
    {
      status = index;
 8012008:	e0bff917 	ldw	r2,-28(fp)
 801200c:	e0bffa15 	stw	r2,-24(fp)
 8012010:	00002506 	br	80120a8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8012014:	01400304 	movi	r5,12
 8012018:	e13ff917 	ldw	r4,-28(fp)
 801201c:	8002af80 	call	8002af8 <__mulsi3>
 8012020:	1007883a 	mov	r3,r2
 8012024:	00820074 	movhi	r2,2049
 8012028:	10931604 	addi	r2,r2,19544
 801202c:	1885883a 	add	r2,r3,r2
 8012030:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8012034:	e0fffe17 	ldw	r3,-8(fp)
 8012038:	00900034 	movhi	r2,16384
 801203c:	10bfffc4 	addi	r2,r2,-1
 8012040:	1886703a 	and	r3,r3,r2
 8012044:	e0bffc17 	ldw	r2,-16(fp)
 8012048:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801204c:	e0bffb17 	ldw	r2,-20(fp)
 8012050:	1000051e 	bne	r2,zero,8012068 <open+0xd8>
 8012054:	e13ffc17 	ldw	r4,-16(fp)
 8012058:	8011ea40 	call	8011ea4 <alt_file_locked>
 801205c:	e0bffa15 	stw	r2,-24(fp)
 8012060:	e0bffa17 	ldw	r2,-24(fp)
 8012064:	10001016 	blt	r2,zero,80120a8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8012068:	e0bff817 	ldw	r2,-32(fp)
 801206c:	10800317 	ldw	r2,12(r2)
 8012070:	10000826 	beq	r2,zero,8012094 <open+0x104>
 8012074:	e0bff817 	ldw	r2,-32(fp)
 8012078:	10800317 	ldw	r2,12(r2)
 801207c:	e1ffff17 	ldw	r7,-4(fp)
 8012080:	e1bffe17 	ldw	r6,-8(fp)
 8012084:	e17ffd17 	ldw	r5,-12(fp)
 8012088:	e13ffc17 	ldw	r4,-16(fp)
 801208c:	103ee83a 	callr	r2
 8012090:	00000106 	br	8012098 <open+0x108>
 8012094:	0005883a 	mov	r2,zero
 8012098:	e0bffa15 	stw	r2,-24(fp)
 801209c:	00000206 	br	80120a8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80120a0:	00bffb44 	movi	r2,-19
 80120a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80120a8:	e0bffa17 	ldw	r2,-24(fp)
 80120ac:	1000090e 	bge	r2,zero,80120d4 <open+0x144>
  {
    alt_release_fd (index);  
 80120b0:	e13ff917 	ldw	r4,-28(fp)
 80120b4:	80103980 	call	8010398 <alt_release_fd>
    ALT_ERRNO = -status;
 80120b8:	8011e680 	call	8011e68 <alt_get_errno>
 80120bc:	1007883a 	mov	r3,r2
 80120c0:	e0bffa17 	ldw	r2,-24(fp)
 80120c4:	0085c83a 	sub	r2,zero,r2
 80120c8:	18800015 	stw	r2,0(r3)
    return -1;
 80120cc:	00bfffc4 	movi	r2,-1
 80120d0:	00000106 	br	80120d8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80120d4:	e0bff917 	ldw	r2,-28(fp)
}
 80120d8:	e037883a 	mov	sp,fp
 80120dc:	dfc00117 	ldw	ra,4(sp)
 80120e0:	df000017 	ldw	fp,0(sp)
 80120e4:	dec00204 	addi	sp,sp,8
 80120e8:	f800283a 	ret

080120ec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80120ec:	deffff04 	addi	sp,sp,-4
 80120f0:	df000015 	stw	fp,0(sp)
 80120f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80120f8:	000170fa 	wrctl	ienable,zero
}
 80120fc:	0001883a 	nop
 8012100:	e037883a 	mov	sp,fp
 8012104:	df000017 	ldw	fp,0(sp)
 8012108:	dec00104 	addi	sp,sp,4
 801210c:	f800283a 	ret

08012110 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8012110:	defffa04 	addi	sp,sp,-24
 8012114:	dfc00515 	stw	ra,20(sp)
 8012118:	df000415 	stw	fp,16(sp)
 801211c:	df000404 	addi	fp,sp,16
 8012120:	e13ffe15 	stw	r4,-8(fp)
 8012124:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8012128:	e0bfff17 	ldw	r2,-4(fp)
 801212c:	10800017 	ldw	r2,0(r2)
 8012130:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8012134:	e13ffe17 	ldw	r4,-8(fp)
 8012138:	8002dc80 	call	8002dc8 <strlen>
 801213c:	10800044 	addi	r2,r2,1
 8012140:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8012144:	00000d06 	br	801217c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8012148:	e0bffc17 	ldw	r2,-16(fp)
 801214c:	10800217 	ldw	r2,8(r2)
 8012150:	e0fffd17 	ldw	r3,-12(fp)
 8012154:	180d883a 	mov	r6,r3
 8012158:	e17ffe17 	ldw	r5,-8(fp)
 801215c:	1009883a 	mov	r4,r2
 8012160:	80124540 	call	8012454 <memcmp>
 8012164:	1000021e 	bne	r2,zero,8012170 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8012168:	e0bffc17 	ldw	r2,-16(fp)
 801216c:	00000706 	br	801218c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8012170:	e0bffc17 	ldw	r2,-16(fp)
 8012174:	10800017 	ldw	r2,0(r2)
 8012178:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801217c:	e0fffc17 	ldw	r3,-16(fp)
 8012180:	e0bfff17 	ldw	r2,-4(fp)
 8012184:	18bff01e 	bne	r3,r2,8012148 <__alt_data_end+0xfc012148>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8012188:	0005883a 	mov	r2,zero
}
 801218c:	e037883a 	mov	sp,fp
 8012190:	dfc00117 	ldw	ra,4(sp)
 8012194:	df000017 	ldw	fp,0(sp)
 8012198:	dec00204 	addi	sp,sp,8
 801219c:	f800283a 	ret

080121a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80121a0:	defffb04 	addi	sp,sp,-20
 80121a4:	dfc00415 	stw	ra,16(sp)
 80121a8:	df000315 	stw	fp,12(sp)
 80121ac:	df000304 	addi	fp,sp,12
 80121b0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80121b4:	d0a00c17 	ldw	r2,-32720(gp)
 80121b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80121bc:	00003106 	br	8012284 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80121c0:	e0bffd17 	ldw	r2,-12(fp)
 80121c4:	10800217 	ldw	r2,8(r2)
 80121c8:	1009883a 	mov	r4,r2
 80121cc:	8002dc80 	call	8002dc8 <strlen>
 80121d0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80121d4:	e0bffd17 	ldw	r2,-12(fp)
 80121d8:	10c00217 	ldw	r3,8(r2)
 80121dc:	e0bffe17 	ldw	r2,-8(fp)
 80121e0:	10bfffc4 	addi	r2,r2,-1
 80121e4:	1885883a 	add	r2,r3,r2
 80121e8:	10800003 	ldbu	r2,0(r2)
 80121ec:	10803fcc 	andi	r2,r2,255
 80121f0:	1080201c 	xori	r2,r2,128
 80121f4:	10bfe004 	addi	r2,r2,-128
 80121f8:	10800bd8 	cmpnei	r2,r2,47
 80121fc:	1000031e 	bne	r2,zero,801220c <alt_find_file+0x6c>
    {
      len -= 1;
 8012200:	e0bffe17 	ldw	r2,-8(fp)
 8012204:	10bfffc4 	addi	r2,r2,-1
 8012208:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801220c:	e0bffe17 	ldw	r2,-8(fp)
 8012210:	e0ffff17 	ldw	r3,-4(fp)
 8012214:	1885883a 	add	r2,r3,r2
 8012218:	10800003 	ldbu	r2,0(r2)
 801221c:	10803fcc 	andi	r2,r2,255
 8012220:	1080201c 	xori	r2,r2,128
 8012224:	10bfe004 	addi	r2,r2,-128
 8012228:	10800be0 	cmpeqi	r2,r2,47
 801222c:	1000081e 	bne	r2,zero,8012250 <alt_find_file+0xb0>
 8012230:	e0bffe17 	ldw	r2,-8(fp)
 8012234:	e0ffff17 	ldw	r3,-4(fp)
 8012238:	1885883a 	add	r2,r3,r2
 801223c:	10800003 	ldbu	r2,0(r2)
 8012240:	10803fcc 	andi	r2,r2,255
 8012244:	1080201c 	xori	r2,r2,128
 8012248:	10bfe004 	addi	r2,r2,-128
 801224c:	10000a1e 	bne	r2,zero,8012278 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8012250:	e0bffd17 	ldw	r2,-12(fp)
 8012254:	10800217 	ldw	r2,8(r2)
 8012258:	e0fffe17 	ldw	r3,-8(fp)
 801225c:	180d883a 	mov	r6,r3
 8012260:	e17fff17 	ldw	r5,-4(fp)
 8012264:	1009883a 	mov	r4,r2
 8012268:	80124540 	call	8012454 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801226c:	1000021e 	bne	r2,zero,8012278 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8012270:	e0bffd17 	ldw	r2,-12(fp)
 8012274:	00000706 	br	8012294 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8012278:	e0bffd17 	ldw	r2,-12(fp)
 801227c:	10800017 	ldw	r2,0(r2)
 8012280:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8012284:	e0fffd17 	ldw	r3,-12(fp)
 8012288:	d0a00c04 	addi	r2,gp,-32720
 801228c:	18bfcc1e 	bne	r3,r2,80121c0 <__alt_data_end+0xfc0121c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8012290:	0005883a 	mov	r2,zero
}
 8012294:	e037883a 	mov	sp,fp
 8012298:	dfc00117 	ldw	ra,4(sp)
 801229c:	df000017 	ldw	fp,0(sp)
 80122a0:	dec00204 	addi	sp,sp,8
 80122a4:	f800283a 	ret

080122a8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80122a8:	defffa04 	addi	sp,sp,-24
 80122ac:	dfc00515 	stw	ra,20(sp)
 80122b0:	df000415 	stw	fp,16(sp)
 80122b4:	dc000315 	stw	r16,12(sp)
 80122b8:	df000404 	addi	fp,sp,16
 80122bc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80122c0:	00bffa04 	movi	r2,-24
 80122c4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80122c8:	e03ffc15 	stw	zero,-16(fp)
 80122cc:	00001d06 	br	8012344 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80122d0:	04020074 	movhi	r16,2049
 80122d4:	84131604 	addi	r16,r16,19544
 80122d8:	e0bffc17 	ldw	r2,-16(fp)
 80122dc:	01400304 	movi	r5,12
 80122e0:	1009883a 	mov	r4,r2
 80122e4:	8002af80 	call	8002af8 <__mulsi3>
 80122e8:	8085883a 	add	r2,r16,r2
 80122ec:	10800017 	ldw	r2,0(r2)
 80122f0:	1000111e 	bne	r2,zero,8012338 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80122f4:	04020074 	movhi	r16,2049
 80122f8:	84131604 	addi	r16,r16,19544
 80122fc:	e0bffc17 	ldw	r2,-16(fp)
 8012300:	01400304 	movi	r5,12
 8012304:	1009883a 	mov	r4,r2
 8012308:	8002af80 	call	8002af8 <__mulsi3>
 801230c:	8085883a 	add	r2,r16,r2
 8012310:	e0fffe17 	ldw	r3,-8(fp)
 8012314:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8012318:	d0e01017 	ldw	r3,-32704(gp)
 801231c:	e0bffc17 	ldw	r2,-16(fp)
 8012320:	1880020e 	bge	r3,r2,801232c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8012324:	e0bffc17 	ldw	r2,-16(fp)
 8012328:	d0a01015 	stw	r2,-32704(gp)
      }
      rc = i;
 801232c:	e0bffc17 	ldw	r2,-16(fp)
 8012330:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8012334:	00000606 	br	8012350 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8012338:	e0bffc17 	ldw	r2,-16(fp)
 801233c:	10800044 	addi	r2,r2,1
 8012340:	e0bffc15 	stw	r2,-16(fp)
 8012344:	e0bffc17 	ldw	r2,-16(fp)
 8012348:	10800810 	cmplti	r2,r2,32
 801234c:	103fe01e 	bne	r2,zero,80122d0 <__alt_data_end+0xfc0122d0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8012350:	e0bffd17 	ldw	r2,-12(fp)
}
 8012354:	e6ffff04 	addi	sp,fp,-4
 8012358:	dfc00217 	ldw	ra,8(sp)
 801235c:	df000117 	ldw	fp,4(sp)
 8012360:	dc000017 	ldw	r16,0(sp)
 8012364:	dec00304 	addi	sp,sp,12
 8012368:	f800283a 	ret

0801236c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 801236c:	defffe04 	addi	sp,sp,-8
 8012370:	df000115 	stw	fp,4(sp)
 8012374:	df000104 	addi	fp,sp,4
 8012378:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 801237c:	e0bfff17 	ldw	r2,-4(fp)
 8012380:	10bffe84 	addi	r2,r2,-6
 8012384:	10c00428 	cmpgeui	r3,r2,16
 8012388:	18001a1e 	bne	r3,zero,80123f4 <alt_exception_cause_generated_bad_addr+0x88>
 801238c:	100690ba 	slli	r3,r2,2
 8012390:	00820074 	movhi	r2,2049
 8012394:	1088e904 	addi	r2,r2,9124
 8012398:	1885883a 	add	r2,r3,r2
 801239c:	10800017 	ldw	r2,0(r2)
 80123a0:	1000683a 	jmp	r2
 80123a4:	080123e4 	muli	zero,at,1167
 80123a8:	080123e4 	muli	zero,at,1167
 80123ac:	080123f4 	orhi	zero,at,1167
 80123b0:	080123f4 	orhi	zero,at,1167
 80123b4:	080123f4 	orhi	zero,at,1167
 80123b8:	080123e4 	muli	zero,at,1167
 80123bc:	080123ec 	andhi	zero,at,1167
 80123c0:	080123f4 	orhi	zero,at,1167
 80123c4:	080123e4 	muli	zero,at,1167
 80123c8:	080123e4 	muli	zero,at,1167
 80123cc:	080123f4 	orhi	zero,at,1167
 80123d0:	080123e4 	muli	zero,at,1167
 80123d4:	080123ec 	andhi	zero,at,1167
 80123d8:	080123f4 	orhi	zero,at,1167
 80123dc:	080123f4 	orhi	zero,at,1167
 80123e0:	080123e4 	muli	zero,at,1167
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80123e4:	00800044 	movi	r2,1
 80123e8:	00000306 	br	80123f8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80123ec:	0005883a 	mov	r2,zero
 80123f0:	00000106 	br	80123f8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80123f4:	0005883a 	mov	r2,zero
  }
}
 80123f8:	e037883a 	mov	sp,fp
 80123fc:	df000017 	ldw	fp,0(sp)
 8012400:	dec00104 	addi	sp,sp,4
 8012404:	f800283a 	ret

08012408 <atexit>:
 8012408:	200b883a 	mov	r5,r4
 801240c:	000f883a 	mov	r7,zero
 8012410:	000d883a 	mov	r6,zero
 8012414:	0009883a 	mov	r4,zero
 8012418:	80124d01 	jmpi	80124d0 <__register_exitproc>

0801241c <exit>:
 801241c:	defffe04 	addi	sp,sp,-8
 8012420:	000b883a 	mov	r5,zero
 8012424:	dc000015 	stw	r16,0(sp)
 8012428:	dfc00115 	stw	ra,4(sp)
 801242c:	2021883a 	mov	r16,r4
 8012430:	80125e80 	call	80125e8 <__call_exitprocs>
 8012434:	00820074 	movhi	r2,2049
 8012438:	10979404 	addi	r2,r2,24144
 801243c:	11000017 	ldw	r4,0(r2)
 8012440:	20800f17 	ldw	r2,60(r4)
 8012444:	10000126 	beq	r2,zero,801244c <exit+0x30>
 8012448:	103ee83a 	callr	r2
 801244c:	8009883a 	mov	r4,r16
 8012450:	80127680 	call	8012768 <_exit>

08012454 <memcmp>:
 8012454:	01c000c4 	movi	r7,3
 8012458:	3980192e 	bgeu	r7,r6,80124c0 <memcmp+0x6c>
 801245c:	2144b03a 	or	r2,r4,r5
 8012460:	11c4703a 	and	r2,r2,r7
 8012464:	10000f26 	beq	r2,zero,80124a4 <memcmp+0x50>
 8012468:	20800003 	ldbu	r2,0(r4)
 801246c:	28c00003 	ldbu	r3,0(r5)
 8012470:	10c0151e 	bne	r2,r3,80124c8 <memcmp+0x74>
 8012474:	31bfff84 	addi	r6,r6,-2
 8012478:	01ffffc4 	movi	r7,-1
 801247c:	00000406 	br	8012490 <memcmp+0x3c>
 8012480:	20800003 	ldbu	r2,0(r4)
 8012484:	28c00003 	ldbu	r3,0(r5)
 8012488:	31bfffc4 	addi	r6,r6,-1
 801248c:	10c00e1e 	bne	r2,r3,80124c8 <memcmp+0x74>
 8012490:	21000044 	addi	r4,r4,1
 8012494:	29400044 	addi	r5,r5,1
 8012498:	31fff91e 	bne	r6,r7,8012480 <__alt_data_end+0xfc012480>
 801249c:	0005883a 	mov	r2,zero
 80124a0:	f800283a 	ret
 80124a4:	20c00017 	ldw	r3,0(r4)
 80124a8:	28800017 	ldw	r2,0(r5)
 80124ac:	18bfee1e 	bne	r3,r2,8012468 <__alt_data_end+0xfc012468>
 80124b0:	31bfff04 	addi	r6,r6,-4
 80124b4:	21000104 	addi	r4,r4,4
 80124b8:	29400104 	addi	r5,r5,4
 80124bc:	39bff936 	bltu	r7,r6,80124a4 <__alt_data_end+0xfc0124a4>
 80124c0:	303fe91e 	bne	r6,zero,8012468 <__alt_data_end+0xfc012468>
 80124c4:	003ff506 	br	801249c <__alt_data_end+0xfc01249c>
 80124c8:	10c5c83a 	sub	r2,r2,r3
 80124cc:	f800283a 	ret

080124d0 <__register_exitproc>:
 80124d0:	defffa04 	addi	sp,sp,-24
 80124d4:	dc000315 	stw	r16,12(sp)
 80124d8:	04020074 	movhi	r16,2049
 80124dc:	84179404 	addi	r16,r16,24144
 80124e0:	80c00017 	ldw	r3,0(r16)
 80124e4:	dc400415 	stw	r17,16(sp)
 80124e8:	dfc00515 	stw	ra,20(sp)
 80124ec:	18805217 	ldw	r2,328(r3)
 80124f0:	2023883a 	mov	r17,r4
 80124f4:	10003726 	beq	r2,zero,80125d4 <__register_exitproc+0x104>
 80124f8:	10c00117 	ldw	r3,4(r2)
 80124fc:	010007c4 	movi	r4,31
 8012500:	20c00e16 	blt	r4,r3,801253c <__register_exitproc+0x6c>
 8012504:	1a000044 	addi	r8,r3,1
 8012508:	8800221e 	bne	r17,zero,8012594 <__register_exitproc+0xc4>
 801250c:	18c00084 	addi	r3,r3,2
 8012510:	18c7883a 	add	r3,r3,r3
 8012514:	18c7883a 	add	r3,r3,r3
 8012518:	12000115 	stw	r8,4(r2)
 801251c:	10c7883a 	add	r3,r2,r3
 8012520:	19400015 	stw	r5,0(r3)
 8012524:	0005883a 	mov	r2,zero
 8012528:	dfc00517 	ldw	ra,20(sp)
 801252c:	dc400417 	ldw	r17,16(sp)
 8012530:	dc000317 	ldw	r16,12(sp)
 8012534:	dec00604 	addi	sp,sp,24
 8012538:	f800283a 	ret
 801253c:	00800034 	movhi	r2,0
 8012540:	10800004 	addi	r2,r2,0
 8012544:	10002626 	beq	r2,zero,80125e0 <__register_exitproc+0x110>
 8012548:	01006404 	movi	r4,400
 801254c:	d9400015 	stw	r5,0(sp)
 8012550:	d9800115 	stw	r6,4(sp)
 8012554:	d9c00215 	stw	r7,8(sp)
 8012558:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 801255c:	d9400017 	ldw	r5,0(sp)
 8012560:	d9800117 	ldw	r6,4(sp)
 8012564:	d9c00217 	ldw	r7,8(sp)
 8012568:	10001d26 	beq	r2,zero,80125e0 <__register_exitproc+0x110>
 801256c:	81000017 	ldw	r4,0(r16)
 8012570:	10000115 	stw	zero,4(r2)
 8012574:	02000044 	movi	r8,1
 8012578:	22405217 	ldw	r9,328(r4)
 801257c:	0007883a 	mov	r3,zero
 8012580:	12400015 	stw	r9,0(r2)
 8012584:	20805215 	stw	r2,328(r4)
 8012588:	10006215 	stw	zero,392(r2)
 801258c:	10006315 	stw	zero,396(r2)
 8012590:	883fde26 	beq	r17,zero,801250c <__alt_data_end+0xfc01250c>
 8012594:	18c9883a 	add	r4,r3,r3
 8012598:	2109883a 	add	r4,r4,r4
 801259c:	1109883a 	add	r4,r2,r4
 80125a0:	21802215 	stw	r6,136(r4)
 80125a4:	01800044 	movi	r6,1
 80125a8:	12406217 	ldw	r9,392(r2)
 80125ac:	30cc983a 	sll	r6,r6,r3
 80125b0:	4992b03a 	or	r9,r9,r6
 80125b4:	12406215 	stw	r9,392(r2)
 80125b8:	21c04215 	stw	r7,264(r4)
 80125bc:	01000084 	movi	r4,2
 80125c0:	893fd21e 	bne	r17,r4,801250c <__alt_data_end+0xfc01250c>
 80125c4:	11006317 	ldw	r4,396(r2)
 80125c8:	218cb03a 	or	r6,r4,r6
 80125cc:	11806315 	stw	r6,396(r2)
 80125d0:	003fce06 	br	801250c <__alt_data_end+0xfc01250c>
 80125d4:	18805304 	addi	r2,r3,332
 80125d8:	18805215 	stw	r2,328(r3)
 80125dc:	003fc606 	br	80124f8 <__alt_data_end+0xfc0124f8>
 80125e0:	00bfffc4 	movi	r2,-1
 80125e4:	003fd006 	br	8012528 <__alt_data_end+0xfc012528>

080125e8 <__call_exitprocs>:
 80125e8:	defff504 	addi	sp,sp,-44
 80125ec:	df000915 	stw	fp,36(sp)
 80125f0:	dd400615 	stw	r21,24(sp)
 80125f4:	dc800315 	stw	r18,12(sp)
 80125f8:	dfc00a15 	stw	ra,40(sp)
 80125fc:	ddc00815 	stw	r23,32(sp)
 8012600:	dd800715 	stw	r22,28(sp)
 8012604:	dd000515 	stw	r20,20(sp)
 8012608:	dcc00415 	stw	r19,16(sp)
 801260c:	dc400215 	stw	r17,8(sp)
 8012610:	dc000115 	stw	r16,4(sp)
 8012614:	d9000015 	stw	r4,0(sp)
 8012618:	2839883a 	mov	fp,r5
 801261c:	04800044 	movi	r18,1
 8012620:	057fffc4 	movi	r21,-1
 8012624:	00820074 	movhi	r2,2049
 8012628:	10979404 	addi	r2,r2,24144
 801262c:	12000017 	ldw	r8,0(r2)
 8012630:	45005217 	ldw	r20,328(r8)
 8012634:	44c05204 	addi	r19,r8,328
 8012638:	a0001c26 	beq	r20,zero,80126ac <__call_exitprocs+0xc4>
 801263c:	a0800117 	ldw	r2,4(r20)
 8012640:	15ffffc4 	addi	r23,r2,-1
 8012644:	b8000d16 	blt	r23,zero,801267c <__call_exitprocs+0x94>
 8012648:	14000044 	addi	r16,r2,1
 801264c:	8421883a 	add	r16,r16,r16
 8012650:	8421883a 	add	r16,r16,r16
 8012654:	84402004 	addi	r17,r16,128
 8012658:	a463883a 	add	r17,r20,r17
 801265c:	a421883a 	add	r16,r20,r16
 8012660:	e0001e26 	beq	fp,zero,80126dc <__call_exitprocs+0xf4>
 8012664:	80804017 	ldw	r2,256(r16)
 8012668:	e0801c26 	beq	fp,r2,80126dc <__call_exitprocs+0xf4>
 801266c:	bdffffc4 	addi	r23,r23,-1
 8012670:	843fff04 	addi	r16,r16,-4
 8012674:	8c7fff04 	addi	r17,r17,-4
 8012678:	bd7ff91e 	bne	r23,r21,8012660 <__alt_data_end+0xfc012660>
 801267c:	00800034 	movhi	r2,0
 8012680:	10800004 	addi	r2,r2,0
 8012684:	10000926 	beq	r2,zero,80126ac <__call_exitprocs+0xc4>
 8012688:	a0800117 	ldw	r2,4(r20)
 801268c:	1000301e 	bne	r2,zero,8012750 <__call_exitprocs+0x168>
 8012690:	a0800017 	ldw	r2,0(r20)
 8012694:	10003226 	beq	r2,zero,8012760 <__call_exitprocs+0x178>
 8012698:	a009883a 	mov	r4,r20
 801269c:	98800015 	stw	r2,0(r19)
 80126a0:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 80126a4:	9d000017 	ldw	r20,0(r19)
 80126a8:	a03fe41e 	bne	r20,zero,801263c <__alt_data_end+0xfc01263c>
 80126ac:	dfc00a17 	ldw	ra,40(sp)
 80126b0:	df000917 	ldw	fp,36(sp)
 80126b4:	ddc00817 	ldw	r23,32(sp)
 80126b8:	dd800717 	ldw	r22,28(sp)
 80126bc:	dd400617 	ldw	r21,24(sp)
 80126c0:	dd000517 	ldw	r20,20(sp)
 80126c4:	dcc00417 	ldw	r19,16(sp)
 80126c8:	dc800317 	ldw	r18,12(sp)
 80126cc:	dc400217 	ldw	r17,8(sp)
 80126d0:	dc000117 	ldw	r16,4(sp)
 80126d4:	dec00b04 	addi	sp,sp,44
 80126d8:	f800283a 	ret
 80126dc:	a0800117 	ldw	r2,4(r20)
 80126e0:	80c00017 	ldw	r3,0(r16)
 80126e4:	10bfffc4 	addi	r2,r2,-1
 80126e8:	15c01426 	beq	r2,r23,801273c <__call_exitprocs+0x154>
 80126ec:	80000015 	stw	zero,0(r16)
 80126f0:	183fde26 	beq	r3,zero,801266c <__alt_data_end+0xfc01266c>
 80126f4:	95c8983a 	sll	r4,r18,r23
 80126f8:	a0806217 	ldw	r2,392(r20)
 80126fc:	a5800117 	ldw	r22,4(r20)
 8012700:	2084703a 	and	r2,r4,r2
 8012704:	10000b26 	beq	r2,zero,8012734 <__call_exitprocs+0x14c>
 8012708:	a0806317 	ldw	r2,396(r20)
 801270c:	2088703a 	and	r4,r4,r2
 8012710:	20000c1e 	bne	r4,zero,8012744 <__call_exitprocs+0x15c>
 8012714:	89400017 	ldw	r5,0(r17)
 8012718:	d9000017 	ldw	r4,0(sp)
 801271c:	183ee83a 	callr	r3
 8012720:	a0800117 	ldw	r2,4(r20)
 8012724:	15bfbf1e 	bne	r2,r22,8012624 <__alt_data_end+0xfc012624>
 8012728:	98800017 	ldw	r2,0(r19)
 801272c:	153fcf26 	beq	r2,r20,801266c <__alt_data_end+0xfc01266c>
 8012730:	003fbc06 	br	8012624 <__alt_data_end+0xfc012624>
 8012734:	183ee83a 	callr	r3
 8012738:	003ff906 	br	8012720 <__alt_data_end+0xfc012720>
 801273c:	a5c00115 	stw	r23,4(r20)
 8012740:	003feb06 	br	80126f0 <__alt_data_end+0xfc0126f0>
 8012744:	89000017 	ldw	r4,0(r17)
 8012748:	183ee83a 	callr	r3
 801274c:	003ff406 	br	8012720 <__alt_data_end+0xfc012720>
 8012750:	a0800017 	ldw	r2,0(r20)
 8012754:	a027883a 	mov	r19,r20
 8012758:	1029883a 	mov	r20,r2
 801275c:	003fb606 	br	8012638 <__alt_data_end+0xfc012638>
 8012760:	0005883a 	mov	r2,zero
 8012764:	003ffb06 	br	8012754 <__alt_data_end+0xfc012754>

08012768 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8012768:	defffd04 	addi	sp,sp,-12
 801276c:	df000215 	stw	fp,8(sp)
 8012770:	df000204 	addi	fp,sp,8
 8012774:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8012778:	0001883a 	nop
 801277c:	e0bfff17 	ldw	r2,-4(fp)
 8012780:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8012784:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8012788:	10000226 	beq	r2,zero,8012794 <_exit+0x2c>
    ALT_SIM_FAIL();
 801278c:	002af070 	cmpltui	zero,zero,43969
 8012790:	00000106 	br	8012798 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8012794:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8012798:	003fff06 	br	8012798 <__alt_data_end+0xfc012798>
