/************************************************************************
Avalon-MM Interface VGA Text mode display

Register Map:
0x000-0x0257 : VRAM, 80x30 (2400 byte, 600 word) raster order (first column then row)
0x258        : control register

VRAM Format:
X->
[ 31  30-24][ 23  22-16][ 15  14-8 ][ 7    6-0 ]
[IV3][CODE3][IV2][CODE2][IV1][CODE1][IV0][CODE0]

IVn = Draw inverse glyph
CODEn = Glyph code from IBM codepage 437

Control Register Format:
[[31-25][24-21][20-17][16-13][ 12-9][ 8-5 ][ 4-1 ][   0    ] 
[[RSVD ][FGD_R][FGD_G][FGD_B][BKG_R][BKG_G][BKG_B][RESERVED]

VSYNC signal = bit which flips on every Vsync (time for new frame), used to synchronize software
BKG_R/G/B = Background color, flipped with foreground when IVn bit is set
FGD_R/G/B = Foreground color, flipped with background when Inv bit is set

************************************************************************/
`define NUM_REGS 601 //80*30 characters / 4 characters per register
`define CTRL_REG 600 //index of control register
/*
module read_state_machine (
	input logic CLK,
	input logic AVL_READ,
	input logic RESET,
	output logic ready
	);
	logic one = 1'b1;
	always_ff @(posedge CLK)
	begin
		if (AVL_READ)
		begin
			if (one == 0)
			begin
				ready = 1;
				one = 1;
			end
			else
				begin
				one = 0;
				ready = 0;
			end
		end
		else
			ready = 1'b0;
	end
endmodule
*/

module  color_mapper (input flag, blank,
							 input [31:0] control_reg, //adding this line
                      output logic [7:0]  Red, Green, Blue );
 //

    always_comb
    begin:RGB_Display
	 
	if (!blank)
	begin
		Red = 4'b0000; //changed to red foreground
		Green = 4'b0000;//changed to red foreground
		Blue = 4'b0000;
	end			
	else
		begin
		 if ((flag == 1'b1))
        begin
            Red = control_reg[24:21]; //changed to red foreground
            Green = control_reg[20:17];//changed to red foreground
            Blue = control_reg[16:13];//changed to red foreground
        end
        else
        begin
            Red = control_reg[12:9]; //this is what generates the werid background  - DrawX[9:3];
												//color gradient which was not needed for our lab, why did we use this...
            Green = control_reg[8:5];
            Blue = control_reg[4:1];
        end
	end

    end
    //
endmodule

module vga_text_avl_interface (
	// Avalon Clock Input, note this clock is also used for VGA, so this must be 50Mhz
	// We can put a clock divider here in the future to make this IP more generalizable
	input logic CLK,
	
	// Avalon Reset Input
	input logic RESET,

	// Avalon-MM Slave Signals
	input  logic AVL_READ,					// Avalon-MM Read
	input  logic AVL_WRITE,					// Avalon-MM Write
	input  logic AVL_CS,					// Avalon-MM Chip Select
	input  logic [3:0] AVL_BYTE_EN,			// Avalon-MM Byte Enable
	input  logic [9:0] AVL_ADDR,			// Avalon-MM Address
	input  logic [31:0] AVL_WRITEDATA,		// Avalon-MM Write Data
	output logic [31:0] AVL_READDATA,		// Avalon-MM Read Data
	
	// Exported Conduit (mapped to VGA port - make sure you export in Platform Designer)
	output logic [3:0]  red, green, blue,	// VGA color channels (mapped to output pins in top-level)
	output logic hs, vs						// VGA HS/VS
);

logic [31:0] LOCAL_REG       [600:0]; // Registers
logic [31:0] TEMP_DATA;
//put other local variables here
logic pixel_clk, sync, flag, not_flag; //deleted ready
logic [9:0] DrawX, DrawY;
logic [10:0] addr;
logic [7:0] data, row, column;
logic [6:0] keycode;
logic [9:0] Sprite_X_Pos, Sprite_Y_Pos;
logic [9:0] sram_address;
//read_state_machine stm (.CLK(CLK), .AVL_READ(AVL_READ), .RESET(RESET), .ready(ready));
wire blank;
logic [7:0] Red, Green, Blue;
//Declare submodules..e.g. VGA controller, ROMS, etc
VGA_controller con (
                            .Clk(CLK), 
                            .Reset(RESET), 
                            .hs(hs), 
                            .vs(vs), 
                            .pixel_clk(pixel_clk),
                            .blank(blank),
                            .sync(sync),
                            .DrawX(DrawX),
                            .DrawY(DrawY)  ); 
									 
color_mapper mapper(			 .control_reg(LOCAL_REG[600]),
                            .flag(not_flag),
                            .Red(Red),
                            .Green(Green),
                            .Blue(Blue),
									 .blank(blank)
                         );

assign column = Sprite_X_Pos >> 5; //3 for 8 wide character, 4 character / word, column of words

assign row = Sprite_Y_Pos >> 4; //
//font_rom rom (.*);
assign sram_address = 20 * row + column;

assign TEMP_DATA = LOCAL_REG[sram_address];

logic [9:0] char_col;

assign char_col = Sprite_X_Pos >> 3; //8 bit wide character
always_comb begin
	
	if (char_col[1:0] == 2'b00)
		begin
			not_flag = flag ^ TEMP_DATA[7];
			keycode = TEMP_DATA[6:0];
		end
	else if (char_col[1:0] == 2'b01)
		begin
			not_flag = flag ^ TEMP_DATA[15];
			keycode = TEMP_DATA[14:8];
		end
	else if (char_col[1:0] == 2'b10)
		begin
			not_flag = flag ^ TEMP_DATA[23];
			keycode = TEMP_DATA[22:16];
		end	
	else if (char_col[1:0] == 2'b11)
		begin
			not_flag = flag ^ TEMP_DATA[31];
			keycode = TEMP_DATA[30:24];
		end
	else
		begin
			not_flag = flag;
			keycode = 6'b111111;
		end
end

sprite sym (
                    .DrawX(DrawX),
                    .DrawY(DrawY),
                    .keycode(keycode),
                    .flag(flag),
                    .Sprite_X_Pos(Sprite_X_Pos),
                    .Sprite_Y_Pos(Sprite_Y_Pos)  );   
// Read and write from AVL interface to register block, note that READ waitstate = 1, so this should be in always_ff



assign red = Red[3:0];
assign green = Green[3:0];
assign blue = Blue[3:0];

always_ff @(posedge CLK) begin
	
	if (RESET)
		for (int i = 0; i < 600; i++)
			LOCAL_REG[i] <= 32'h00000000;
	else if (AVL_CS) begin
		if (AVL_READ) begin
			AVL_READDATA = LOCAL_REG[AVL_ADDR];
			//wait (ready) @(posedge CLK);
			end
		else if (AVL_WRITE) begin
			
			unique case (AVL_BYTE_EN)
			4'b1111 : LOCAL_REG[AVL_ADDR] <= AVL_WRITEDATA;
			4'b1100 : LOCAL_REG[AVL_ADDR][31:16] <= AVL_WRITEDATA[31:16];
			4'b0011 : LOCAL_REG[AVL_ADDR][15:0] <= AVL_WRITEDATA[15:0];
			4'b1000 : LOCAL_REG[AVL_ADDR][31:24] <= AVL_WRITEDATA[31:24];
			4'b0100 : LOCAL_REG[AVL_ADDR][23:16] <= AVL_WRITEDATA[23:16];
			4'b0010 : LOCAL_REG[AVL_ADDR][15:8] <= AVL_WRITEDATA[15:8];
			4'b0001 : LOCAL_REG[AVL_ADDR][7:0] <= AVL_WRITEDATA[7:0];

			endcase
			end
	end
end


		



//handle drawing (may either be combinational or sequential - or both).
		

endmodule
